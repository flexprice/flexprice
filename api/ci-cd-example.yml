name: Generate and Publish API SDKs

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/swagger/**'
  workflow_dispatch:

jobs:
  generate-sdks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
        
    - name: Install OpenAPI Generator
      run: npm install -g @openapitools/openapi-generator-cli
      
    - name: Generate SDKs
      run: make generate-sdk
      
    - name: Commit and push changes
      run: |
        git config --local user.email "ci@example.com"
        git config --local user.name "CI Bot"
        git add api/
        git commit -m "Auto-generate API SDKs" || echo "No changes to commit"
        git push
      
    # Publishing JavaScript SDK to npm
    - name: Prepare JavaScript SDK for npm
      working-directory: api/javascript
      run: |
        # Update version in package.json if needed
        # For automatic versioning based on date/git hash:
        # npm version "1.0.0-$(date +%Y%m%d%H%M%S)" --no-git-tag-version
        
        # Ensure the package.json has the correct name and version
        jq '.name = "flexprice" | .version = "1.0.0-$(date +%Y%m%d%H%M%S)"' package.json > package.json.tmp
        mv package.json.tmp package.json
        
        # Add README information
        cp ../README.md .
        
    - name: Publish JavaScript SDK to npm
      working-directory: api/javascript
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    # Publishing Python SDK to PyPI
    - name: Prepare Python SDK for PyPI
      working-directory: api/python
      run: |
        # Install build tools
        pip install build twine
        
        # Ensure setup.py has the correct version
        sed -i "s/version=\".*\"/version=\"1.0.0.$(date +%Y%m%d%H%M%S)\"/" setup.py
        
        # Build the package
        python -m build
        
    - name: Publish Python SDK to PyPI
      working-directory: api/python
      run: |
        python -m twine upload dist/*
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
    
    # Publishing Go SDK to GitHub
    - name: Prepare Go SDK for GitHub
      working-directory: api/go
      run: |
        # Ensure go.mod exists with correct module path
        if [ ! -f "go.mod" ]; then
          go mod init github.com/your-org/flexprice/api/go
        fi
        
        # Run go mod tidy to clean up dependencies
        go mod tidy
        
    - name: Tag Go SDK version
      run: |
        # Create a new tag for the Go module
        VERSION="v1.0.0-$(date +%Y%m%d%H%M%S)"
        git tag -a "go-sdk/${VERSION}" -m "Go SDK release ${VERSION}"
        git push origin "go-sdk/${VERSION}"
        
        # Update Go module proxy
        GOPROXY=proxy.golang.org go list -m github.com/your-org/flexprice/api/go@${VERSION} 