{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "FlexPrice API Service",
        "title": "FlexPrice API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/v1",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Sign up a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign up",
                "parameters": [
                    {
                        "description": "Sign up request",
                        "name": "signup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve raw events with pagination and filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get raw events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External Customer ID",
                        "name": "external_customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Event Name",
                        "name": "event_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Iter First Key (unix_timestamp_nanoseconds::event_id)",
                        "name": "iter_first_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Iter Last Key (unix_timestamp_nanoseconds::event_id)",
                        "name": "iter_last_key",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page Size (1-50)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetEventsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Ingest a new event into the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Ingest event",
                "parameters": [
                    {
                        "description": "Event data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.IngestEventRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "message:Event accepted for processing",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/usage": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve aggregated usage statistics for events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get usage statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External Customer ID",
                        "name": "external_customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Event Name",
                        "name": "event_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Property Name",
                        "name": "property_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Aggregation Type (SUM, COUNT)",
                        "name": "aggregation_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Window Size (MINUTE, HOUR, DAY)",
                        "name": "window_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/usage/meter": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve aggregated usage statistics using meter configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get usage by meter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meter ID",
                        "name": "meter_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "External Customer ID",
                        "name": "external_customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/meters": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all active meters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "List meters",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.MeterResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new meter with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "Create meter",
                "parameters": [
                    {
                        "description": "Meter configuration",
                        "name": "meter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateMeterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.MeterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/meters/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific meter by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "Get meter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MeterResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an existing meter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "Delete meter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message:Meter deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/meters/{id}/disable": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Disable an existing meter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "Disable meter [TODO: Deprecate]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message:Meter disabled successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prices": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get prices with the specified filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Get prices",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListPricesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new price with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Create a new price",
                "parameters": [
                    {
                        "description": "Price configuration",
                        "name": "price",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePriceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prices/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a price by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Get a price by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a price with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Update a price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Price configuration",
                        "name": "price",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePriceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prices/{id}/archive": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Archive a price",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Archive a price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prices/{id}/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a price",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Delete a price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the current user's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AuthResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.CreateMeterRequest": {
            "type": "object",
            "required": [
                "aggregation",
                "event_name"
            ],
            "properties": {
                "aggregation": {
                    "$ref": "#/definitions/meter.Aggregation"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                }
            }
        },
        "dto.CreatePriceRequest": {
            "type": "object",
            "required": [
                "amount",
                "billing_cadence",
                "billing_model",
                "billing_period",
                "billing_period_count",
                "currency"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "billing_cadence": {
                    "$ref": "#/definitions/types.BillingCadence"
                },
                "billing_country_code": {
                    "type": "string"
                },
                "billing_model": {
                    "$ref": "#/definitions/types.BillingModel"
                },
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "billing_period_count": {
                    "type": "integer",
                    "minimum": 1
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "external_source": {
                    "type": "string"
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/price.PriceTier"
                    }
                },
                "tiers_mode": {
                    "$ref": "#/definitions/types.BillingTier"
                },
                "transform": {
                    "$ref": "#/definitions/price.JSONBTransform"
                },
                "usage_type": {
                    "$ref": "#/definitions/types.UsageType"
                }
            }
        },
        "dto.Event": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "external_customer_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": true
                },
                "source": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "dto.GetEventsResponse": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Event"
                    }
                },
                "has_more": {
                    "type": "boolean"
                },
                "iter_first_key": {
                    "type": "string"
                },
                "iter_last_key": {
                    "type": "string"
                }
            }
        },
        "dto.IngestEventRequest": {
            "type": "object",
            "required": [
                "event_name",
                "external_customer_id"
            ],
            "properties": {
                "customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "event_id": {
                    "type": "string",
                    "example": "event123"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                },
                "external_customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "\"response_status\"": "200}",
                        "{\"request_size\"": "100"
                    }
                },
                "source": {
                    "type": "string",
                    "example": "api"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-03-20T15:04:05Z"
                }
            }
        },
        "dto.ListPricesResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PriceResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "dto.MeterResponse": {
            "type": "object",
            "properties": {
                "aggregation": {
                    "$ref": "#/definitions/meter.Aggregation"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-03-20T15:04:05Z"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "status": {
                    "type": "string",
                    "example": "ACTIVE"
                },
                "tenant_id": {
                    "type": "string",
                    "example": "tenant123"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-03-20T15:04:05Z"
                }
            }
        },
        "dto.PriceResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount in cents ex 1200 for $12",
                    "type": "integer"
                },
                "billing_cadence": {
                    "description": "BillingCadence is the billing cadence for the price ex RECURRING, ONETIME",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingCadence"
                        }
                    ]
                },
                "billing_country_code": {
                    "description": "BillingCountryCode 3 digit ISO country code in uppercase ex USA, FRA, DEU",
                    "type": "string"
                },
                "billing_model": {
                    "description": "BillingModel is the billing model for the price ex FLAT_FEE, PER_UNIT, TIERED",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingModel"
                        }
                    ]
                },
                "billing_period": {
                    "description": "BillingPeriod is the billing period for the price ex month, year",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingPeriod"
                        }
                    ]
                },
                "billing_period_count": {
                    "description": "BillingPeriodCount is the count of the billing period ex 1, 3, 6, 12",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "description": "Currency 3 digit ISO currency code in lowercase ex usd, eur, gbp",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the price",
                    "type": "string"
                },
                "external_id": {
                    "description": "ExternalID is the identifier of the price in the external system",
                    "type": "string"
                },
                "external_source": {
                    "description": "ExternalSource is the source of the price in the external system",
                    "type": "string"
                },
                "id": {
                    "description": "ID uuid identifier for the price",
                    "type": "string"
                },
                "lookup_key": {
                    "description": "LookupKey used for looking up the price in the database",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata is a jsonb field for additional information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/price.JSONBMetadata"
                        }
                    ]
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "tier_mode": {
                    "description": "Tiered pricing fields",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingTier"
                        }
                    ]
                },
                "tiers": {
                    "description": "JSONB field",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/price.PriceTier"
                    }
                },
                "transform": {
                    "description": "Quantity transformation",
                    "allOf": [
                        {
                            "$ref": "#/definitions/price.JSONBTransform"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.SignUpRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "dto.UpdatePriceRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "meter.Aggregation": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/types.AggregationType"
                }
            }
        },
        "price.JSONBMetadata": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "price.JSONBTransform": {
            "type": "object",
            "properties": {
                "divide_by": {
                    "description": "Divide quantity by this number",
                    "type": "integer"
                },
                "round": {
                    "description": "up, down, or nearest",
                    "type": "string"
                }
            }
        },
        "price.PriceTier": {
            "type": "object",
            "properties": {
                "flat_amount": {
                    "description": "Optional flat fee for this tier",
                    "type": "integer"
                },
                "unit_amount": {
                    "description": "Amount per unit in cents",
                    "type": "integer"
                },
                "up_to": {
                    "description": "null means infinity",
                    "type": "integer"
                }
            }
        },
        "types.AggregationType": {
            "type": "string",
            "enum": [
                "COUNT",
                "SUM",
                "AVG",
                "MAX",
                "MIN",
                "COUNT_UNIQUE",
                "LATEST"
            ],
            "x-enum-varnames": [
                "AggregationCount",
                "AggregationSum",
                "AggregationAvg",
                "AggregationMax",
                "AggregationMin",
                "AggregationCountUnique",
                "AggregationLatest"
            ]
        },
        "types.BillingCadence": {
            "type": "string",
            "enum": [
                "RECURRING",
                "ONETIME"
            ],
            "x-enum-varnames": [
                "BILLING_CADENCE_RECURRING",
                "BILLING_CADENCE_ONETIME"
            ]
        },
        "types.BillingModel": {
            "type": "string",
            "enum": [
                "FLAT_FEE",
                "PACKAGE",
                "TIERED",
                "USAGE"
            ],
            "x-enum-varnames": [
                "BILLING_MODEL_FLAT_FEE",
                "BILLING_MODEL_PACKAGE",
                "BILLING_MODEL_TIERED",
                "BILLING_MODEL_USAGE"
            ]
        },
        "types.BillingPeriod": {
            "type": "string",
            "enum": [
                "MONTHLY",
                "ANNUAL",
                "WEEKLY",
                "DAILY"
            ],
            "x-enum-varnames": [
                "BILLING_PERIOD_MONTHLY",
                "BILLING_PERIOD_ANNUAL",
                "BILLING_PERIOD_WEEKLY",
                "BILLING_PERIOD_DAILY"
            ]
        },
        "types.BillingTier": {
            "type": "string",
            "enum": [
                "VOLUME",
                "SLAB"
            ],
            "x-enum-varnames": [
                "BILLING_TIER_VOLUME",
                "BILLING_TIER_SLAB"
            ]
        },
        "types.Status": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "archived",
                "deleted"
            ],
            "x-enum-varnames": [
                "StatusActive",
                "StatusInactive",
                "StatusArchived",
                "StatusDeleted"
            ]
        },
        "types.UsageType": {
            "type": "string",
            "enum": [
                "METERED",
                "LICENSED"
            ],
            "x-enum-varnames": [
                "USAGE_TYPE_METERED",
                "USAGE_TYPE_LICENSED"
            ]
        },
        "v1.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request payload"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Enter your bearer token in the format **Bearer \u0026lt;token\u0026gt;**",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}