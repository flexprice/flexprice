{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "FlexPrice API Service",
        "title": "FlexPrice API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/v1",
    "paths": {
        "/events": {
            "get": {
                "description": "Retrieve raw events with pagination and filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get raw events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External Customer ID",
                        "name": "external_customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Event Name",
                        "name": "event_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Iter First Key (unix_timestamp_nanoseconds::event_id)",
                        "name": "iter_first_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Iter Last Key (unix_timestamp_nanoseconds::event_id)",
                        "name": "iter_last_key",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page Size (1-50)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetEventsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Ingest a new event into the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Ingest event",
                "parameters": [
                    {
                        "description": "Event data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.IngestEventRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "message:Event accepted for processing",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/usage": {
            "get": {
                "description": "Retrieve aggregated usage statistics for events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get usage statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External Customer ID",
                        "name": "external_customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Event Name",
                        "name": "event_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Property Name",
                        "name": "property_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Aggregation Type (SUM, COUNT)",
                        "name": "aggregation_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Window Size (MINUTE, HOUR, DAY)",
                        "name": "window_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/usage/meter": {
            "get": {
                "description": "Retrieve aggregated usage statistics using meter configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get usage by meter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meter ID",
                        "name": "meter_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "External Customer ID",
                        "name": "external_customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/meters": {
            "get": {
                "description": "Get all active meters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "List meters",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.MeterResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new meter with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "Create meter",
                "parameters": [
                    {
                        "description": "Meter configuration",
                        "name": "meter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateMeterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.MeterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/meters/{id}": {
            "get": {
                "description": "Get a specific meter by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "Get meter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MeterResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/meters/{id}/disable": {
            "post": {
                "description": "Disable an existing meter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "Disable meter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message:Meter disabled successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateMeterRequest": {
            "type": "object",
            "required": [
                "aggregation",
                "event_name"
            ],
            "properties": {
                "aggregation": {
                    "$ref": "#/definitions/meter.Aggregation"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                }
            }
        },
        "dto.Event": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "external_customer_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": true
                },
                "source": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "dto.GetEventsResponse": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Event"
                    }
                },
                "has_more": {
                    "type": "boolean"
                },
                "iter_first_key": {
                    "type": "string"
                },
                "iter_last_key": {
                    "type": "string"
                }
            }
        },
        "dto.IngestEventRequest": {
            "type": "object",
            "required": [
                "event_name",
                "external_customer_id"
            ],
            "properties": {
                "customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "event_id": {
                    "type": "string",
                    "example": "event123"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                },
                "external_customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "\"response_status\"": "200}",
                        "{\"request_size\"": "100"
                    }
                },
                "source": {
                    "type": "string",
                    "example": "api"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-03-20T15:04:05Z"
                }
            }
        },
        "dto.MeterResponse": {
            "type": "object",
            "properties": {
                "aggregation": {
                    "$ref": "#/definitions/meter.Aggregation"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-03-20T15:04:05Z"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "status": {
                    "type": "string",
                    "example": "ACTIVE"
                },
                "tenant_id": {
                    "type": "string",
                    "example": "tenant123"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-03-20T15:04:05Z"
                }
            }
        },
        "meter.Aggregation": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/types.AggregationType"
                }
            }
        },
        "types.AggregationType": {
            "type": "string",
            "enum": [
                "COUNT",
                "SUM",
                "AVG",
                "MAX",
                "MIN",
                "COUNT_UNIQUE",
                "LATEST"
            ],
            "x-enum-varnames": [
                "AggregationCount",
                "AggregationSum",
                "AggregationAvg",
                "AggregationMax",
                "AggregationMin",
                "AggregationCountUnique",
                "AggregationLatest"
            ]
        },
        "v1.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request payload"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}