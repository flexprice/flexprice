{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "FlexPrice API Service",
        "title": "FlexPrice API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/v1",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Sign up a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign up",
                "parameters": [
                    {
                        "description": "Sign up request",
                        "name": "signup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get customers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Get customers",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListCustomersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Create a customer",
                "parameters": [
                    {
                        "description": "Customer",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCustomerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Get a customer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Update a customer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Customer",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCustomerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Delete a customer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{id}/wallets": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all wallets for a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get wallets by customer ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.WalletResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/environments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get environments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environments"
                ],
                "summary": "Get environments",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListEnvironmentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create an environment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environments"
                ],
                "summary": "Create an environment",
                "parameters": [
                    {
                        "description": "Environment",
                        "name": "environment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateEnvironmentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.EnvironmentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/environments/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an environment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environments"
                ],
                "summary": "Get an environment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Environment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EnvironmentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an environment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "environments"
                ],
                "summary": "Update an environment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Environment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Environment",
                        "name": "environment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateEnvironmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EnvironmentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve raw events with pagination and filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get raw events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External Customer ID",
                        "name": "external_customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Event Name",
                        "name": "event_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Iter First Key (unix_timestamp_nanoseconds::event_id)",
                        "name": "iter_first_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Iter Last Key (unix_timestamp_nanoseconds::event_id)",
                        "name": "iter_last_key",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page Size (1-50)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetEventsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Ingest a new event into the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Ingest event",
                "parameters": [
                    {
                        "description": "Event data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.IngestEventRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "message:Event accepted for processing",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/usage": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve aggregated usage statistics for events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get usage statistics",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/usage/meter": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve aggregated usage statistics using meter configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get usage by meter",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageByMeterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/meters": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all meters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "List meters",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.MeterResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new meter with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "Create meter",
                "parameters": [
                    {
                        "description": "Meter configuration",
                        "name": "meter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateMeterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.MeterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/meters/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific meter by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "Get meter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MeterResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an existing meter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "Delete meter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message:Meter deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/meters/{id}/disable": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Disable an existing meter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meters"
                ],
                "summary": "Disable meter [TODO: Deprecate]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message:Meter disabled successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/plans": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get plans with the specified filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "plans"
                ],
                "summary": "Get plans",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListPlansResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new plan with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "plans"
                ],
                "summary": "Create a new plan",
                "parameters": [
                    {
                        "description": "Plan configuration",
                        "name": "plan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePlanRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.PlanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/plans/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a plan by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "plans"
                ],
                "summary": "Get a plan by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PlanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a plan by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "plans"
                ],
                "summary": "Update a plan by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Plan configuration",
                        "name": "plan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePlanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PlanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a plan by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "plans"
                ],
                "summary": "Delete a plan by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prices": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get prices with the specified filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Get prices",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "published",
                            "deleted",
                            "archived"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListPricesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new price with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Create a new price",
                "parameters": [
                    {
                        "description": "Price configuration",
                        "name": "price",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePriceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prices/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a price by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Get a price by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a price with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Update a price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Price configuration",
                        "name": "price",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePriceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PriceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a price",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Delete a price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get subscriptions with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "List subscriptions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by customer ID",
                        "name": "customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by subscription status",
                        "name": "subscription_status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by plan ID",
                        "name": "plan_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit for pagination",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListSubscriptionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Create subscription",
                "parameters": [
                    {
                        "description": "Subscription Request",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.SubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/usage": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get usage by subscription",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Get usage by subscription",
                "parameters": [
                    {
                        "description": "Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageBySubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetUsageBySubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a subscription by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Get subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}/cancel": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel a subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Cancel subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Cancel at period end",
                        "name": "cancel_at_period_end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tenants": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new tenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenant"
                ],
                "summary": "Create a new tenant",
                "parameters": [
                    {
                        "description": "Create tenant request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateTenantRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.TenantResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tenants/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get tenant by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenant"
                ],
                "summary": "Get tenant by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TenantResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the current user's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new wallet for a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Create a new wallet",
                "parameters": [
                    {
                        "description": "Create wallet request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateWalletRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a wallet by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get wallet by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/{id}/balance/real-time": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get real-time balance of a wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get wallet balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletBalanceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/{id}/terminate": {
            "post": {
                "description": "Terminates a wallet by closing it and debiting remaining balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallets"
                ],
                "summary": "Terminate a wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/{id}/top-up": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add credits to a wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Top up wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Top up request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TopUpWalletRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallets/{id}/transactions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get transactions for a wallet with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get wallet transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.WalletTransactionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AuthResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.CreateCustomerRequest": {
            "type": "object",
            "required": [
                "external_id"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.CreateEnvironmentRequest": {
            "type": "object",
            "required": [
                "name",
                "slug",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.CreateMeterRequest": {
            "type": "object",
            "required": [
                "aggregation",
                "event_name",
                "name"
            ],
            "properties": {
                "aggregation": {
                    "$ref": "#/definitions/meter.Aggregation"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/meter.Filter"
                    }
                },
                "name": {
                    "type": "string",
                    "example": "API Usage Meter"
                },
                "reset_usage": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ResetUsage"
                        }
                    ],
                    "example": "BILLING_PERIOD"
                }
            }
        },
        "dto.CreatePlanPriceRequest": {
            "type": "object",
            "required": [
                "amount",
                "billing_cadence",
                "billing_model",
                "billing_period",
                "billing_period_count",
                "currency",
                "type"
            ],
            "properties": {
                "amount": {
                    "type": "string"
                },
                "billing_cadence": {
                    "$ref": "#/definitions/types.BillingCadence"
                },
                "billing_model": {
                    "$ref": "#/definitions/types.BillingModel"
                },
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "billing_period_count": {
                    "type": "integer",
                    "minimum": 1
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "filter_values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "meter_id": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "tier_mode": {
                    "$ref": "#/definitions/types.BillingTier"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreatePriceTier"
                    }
                },
                "transform_quantity": {
                    "$ref": "#/definitions/price.TransformQuantity"
                },
                "type": {
                    "$ref": "#/definitions/types.PriceType"
                }
            }
        },
        "dto.CreatePlanRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "invoice_cadence": {
                    "$ref": "#/definitions/types.InvoiceCadence"
                },
                "lookup_key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreatePlanPriceRequest"
                    }
                },
                "trial_period": {
                    "type": "integer"
                }
            }
        },
        "dto.CreatePriceRequest": {
            "type": "object",
            "required": [
                "amount",
                "billing_cadence",
                "billing_model",
                "billing_period",
                "billing_period_count",
                "currency",
                "type"
            ],
            "properties": {
                "amount": {
                    "type": "string"
                },
                "billing_cadence": {
                    "$ref": "#/definitions/types.BillingCadence"
                },
                "billing_model": {
                    "$ref": "#/definitions/types.BillingModel"
                },
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "billing_period_count": {
                    "type": "integer",
                    "minimum": 1
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "filter_values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "meter_id": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "tier_mode": {
                    "$ref": "#/definitions/types.BillingTier"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreatePriceTier"
                    }
                },
                "transform_quantity": {
                    "$ref": "#/definitions/price.TransformQuantity"
                },
                "type": {
                    "$ref": "#/definitions/types.PriceType"
                }
            }
        },
        "dto.CreatePriceTier": {
            "type": "object",
            "required": [
                "unit_amount"
            ],
            "properties": {
                "flat_amount": {
                    "type": "string"
                },
                "unit_amount": {
                    "type": "string"
                },
                "up_to": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateSubscriptionRequest": {
            "type": "object",
            "required": [
                "customer_id",
                "plan_id"
            ],
            "properties": {
                "billing_cadence": {
                    "$ref": "#/definitions/types.BillingCadence"
                },
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "billing_period_count": {
                    "type": "integer"
                },
                "currency": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "invoice_cadence": {
                    "$ref": "#/definitions/types.InvoiceCadence"
                },
                "lookup_key": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "trial_end": {
                    "type": "string"
                },
                "trial_start": {
                    "type": "string"
                }
            }
        },
        "dto.CreateTenantRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.CreateWalletRequest": {
            "type": "object",
            "required": [
                "currency",
                "customer_id"
            ],
            "properties": {
                "currency": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                }
            }
        },
        "dto.CustomerResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "email": {
                    "description": "Email is the email of the customer",
                    "type": "string"
                },
                "external_id": {
                    "description": "ExternalID is the external identifier for the customer",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the customer",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the customer",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.EnvironmentResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.Event": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "external_customer_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": true
                },
                "source": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "dto.GetEventsResponse": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Event"
                    }
                },
                "has_more": {
                    "type": "boolean"
                },
                "iter_first_key": {
                    "type": "string"
                },
                "iter_last_key": {
                    "type": "string"
                }
            }
        },
        "dto.GetUsageByMeterRequest": {
            "type": "object",
            "required": [
                "meter_id"
            ],
            "properties": {
                "customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "end_time": {
                    "type": "string",
                    "example": "2024-12-09T00:00:00Z"
                },
                "external_customer_id": {
                    "type": "string",
                    "example": "user_5"
                },
                "filters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "meter_id": {
                    "type": "string",
                    "example": "123"
                },
                "start_time": {
                    "type": "string",
                    "example": "2024-11-09T00:00:00Z"
                },
                "window_size": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.WindowSize"
                        }
                    ],
                    "example": "HOUR"
                }
            }
        },
        "dto.GetUsageBySubscriptionRequest": {
            "type": "object",
            "required": [
                "subscription_id"
            ],
            "properties": {
                "end_time": {
                    "type": "string",
                    "example": "2024-03-20T00:00:00Z"
                },
                "lifetime_usage": {
                    "type": "boolean",
                    "example": false
                },
                "start_time": {
                    "type": "string",
                    "example": "2024-03-13T00:00:00Z"
                },
                "subscription_id": {
                    "type": "string",
                    "example": "123"
                }
            }
        },
        "dto.GetUsageBySubscriptionResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "charges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SubscriptionUsageByMetersResponse"
                    }
                },
                "currency": {
                    "type": "string"
                },
                "display_amount": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "dto.GetUsageRequest": {
            "type": "object",
            "required": [
                "aggregation_type",
                "event_name"
            ],
            "properties": {
                "aggregation_type": {
                    "type": "string",
                    "example": "COUNT"
                },
                "customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "end_time": {
                    "type": "string",
                    "example": "2024-03-20T00:00:00Z"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                },
                "external_customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "filters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "property_name": {
                    "description": "will be empty/ignored in case of COUNT",
                    "type": "string",
                    "example": "request_size"
                },
                "start_time": {
                    "type": "string",
                    "example": "2024-03-13T00:00:00Z"
                },
                "window_size": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.WindowSize"
                        }
                    ],
                    "example": "HOUR"
                }
            }
        },
        "dto.GetUsageResponse": {
            "type": "object",
            "properties": {
                "event_name": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UsageResult"
                    }
                },
                "type": {
                    "$ref": "#/definitions/types.AggregationType"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "dto.IngestEventRequest": {
            "type": "object",
            "required": [
                "event_name",
                "external_customer_id"
            ],
            "properties": {
                "customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "event_id": {
                    "type": "string",
                    "example": "event123"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                },
                "external_customer_id": {
                    "type": "string",
                    "example": "customer456"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "\"response_status\"": "200}",
                        "{\"request_size\"": "100"
                    }
                },
                "source": {
                    "type": "string",
                    "example": "api"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-03-20T15:04:05Z"
                }
            }
        },
        "dto.ListCustomersResponse": {
            "type": "object",
            "properties": {
                "customers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CustomerResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.ListEnvironmentsResponse": {
            "type": "object",
            "properties": {
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.EnvironmentResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.ListPlansResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "plans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/plan.Plan"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.ListPricesResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PriceResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.ListSubscriptionsResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SubscriptionResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "dto.MeterResponse": {
            "type": "object",
            "properties": {
                "aggregation": {
                    "$ref": "#/definitions/meter.Aggregation"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-03-20T15:04:05Z"
                },
                "event_name": {
                    "type": "string",
                    "example": "api_request"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/meter.Filter"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "name": {
                    "type": "string",
                    "example": "API Usage Meter"
                },
                "reset_usage": {
                    "$ref": "#/definitions/types.ResetUsage"
                },
                "status": {
                    "type": "string",
                    "example": "published"
                },
                "tenant_id": {
                    "type": "string",
                    "example": "tenant123"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-03-20T15:04:05Z"
                }
            }
        },
        "dto.PlanResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice_cadence": {
                    "$ref": "#/definitions/types.InvoiceCadence"
                },
                "lookup_key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PriceResponse"
                    }
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "trial_period": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.PriceResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount stored in main currency units (e.g., dollars, not cents)\nFor USD: 12.50 means $12.50",
                    "type": "number"
                },
                "billing_cadence": {
                    "description": "BillingCadence is the billing cadence for the price ex RECURRING, ONETIME",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingCadence"
                        }
                    ]
                },
                "billing_model": {
                    "description": "BillingModel is the billing model for the price ex FLAT_FEE, PACKAGE, TIERED",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingModel"
                        }
                    ]
                },
                "billing_period": {
                    "description": "BillingPeriod is the billing period for the price ex month, year",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingPeriod"
                        }
                    ]
                },
                "billing_period_count": {
                    "description": "BillingPeriodCount is the count of the billing period ex 1, 3, 6, 12",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "description": "Currency 3 digit ISO currency code in lowercase ex usd, eur, gbp",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the price",
                    "type": "string"
                },
                "display_amount": {
                    "description": "DisplayAmount is the formatted amount with currency symbol\nFor USD: $12.50",
                    "type": "string"
                },
                "filter_values": {
                    "description": "FilterValues are the filter values for the price in case of usage based pricing",
                    "allOf": [
                        {
                            "$ref": "#/definitions/price.JSONBFilters"
                        }
                    ]
                },
                "id": {
                    "description": "ID uuid identifier for the price",
                    "type": "string"
                },
                "lookup_key": {
                    "description": "LookupKey used for looking up the price in the database",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata is a jsonb field for additional information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/price.JSONBMetadata"
                        }
                    ]
                },
                "meter_id": {
                    "description": "MeterID is the id of the meter for usage based pricing",
                    "type": "string"
                },
                "plan_id": {
                    "description": "PlanID is the id of the plan for plan based pricing",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "tier_mode": {
                    "description": "Tiered pricing fields when BillingModel is TIERED",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingTier"
                        }
                    ]
                },
                "tiers": {
                    "description": "Tiers are the tiers for the price when BillingModel is TIERED",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/price.PriceTier"
                    }
                },
                "transform_quantity": {
                    "description": "Transform is the quantity transformation in case of PACKAGE billing model",
                    "allOf": [
                        {
                            "$ref": "#/definitions/price.JSONBTransformQuantity"
                        }
                    ]
                },
                "type": {
                    "description": "Type is the type of the price ex USAGE, FIXED",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.PriceType"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "dto.SignUpRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "dto.SubscriptionResponse": {
            "type": "object",
            "properties": {
                "billing_anchor": {
                    "description": "BillingAnchor is the reference point that aligns future billing cycle dates.\nIt sets the day of week for week intervals, the day of month for month and year intervals,\nand the month of year for year intervals. The timestamp is in UTC format.",
                    "type": "string"
                },
                "billing_cadence": {
                    "description": "BillingCadence is the cadence of the billing cycle.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingCadence"
                        }
                    ]
                },
                "billing_period": {
                    "description": "BillingPeriod is the period of the billing cycle.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingPeriod"
                        }
                    ]
                },
                "billing_period_count": {
                    "description": "BillingPeriodCount is the total number units of the billing period.",
                    "type": "integer"
                },
                "cancel_at": {
                    "description": "CancelAt is the date the subscription will be canceled",
                    "type": "string"
                },
                "cancel_at_period_end": {
                    "description": "CancelAtPeriodEnd is whether the subscription was canceled at the end of the current period",
                    "type": "boolean"
                },
                "cancelled_at": {
                    "description": "CanceledAt is the date the subscription was canceled",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "description": "Currency is the currency of the subscription in lowercase 3 digit ISO codes",
                    "type": "string"
                },
                "current_period_end": {
                    "description": "CurrentPeriodEnd is the end of the current period that the subscription has been invoiced for.\nAt the end of this period, a new invoice will be created.",
                    "type": "string"
                },
                "current_period_start": {
                    "description": "CurrentPeriodStart is the end of the current period that the subscription has been invoiced for.\nAt the end of this period, a new invoice will be created.",
                    "type": "string"
                },
                "customer_id": {
                    "description": "CustomerID is the identifier for the customer in our system",
                    "type": "string"
                },
                "end_date": {
                    "description": "EndDate is the end date of the subscription",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the subscription",
                    "type": "string"
                },
                "invoice_cadence": {
                    "description": "InvoiceCadence is the cadence of the invoice. This overrides the plan's invoice cadence.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.InvoiceCadence"
                        }
                    ]
                },
                "lookup_key": {
                    "description": "LookupKey is the key used to lookup the subscription in our system",
                    "type": "string"
                },
                "plan": {
                    "$ref": "#/definitions/dto.PlanResponse"
                },
                "plan_id": {
                    "description": "PlanID is the identifier for the plan in our system",
                    "type": "string"
                },
                "start_date": {
                    "description": "StartDate is the start date of the subscription",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "subscription_status": {
                    "description": "Status is the status of the subscription",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.SubscriptionStatus"
                        }
                    ]
                },
                "tenant_id": {
                    "type": "string"
                },
                "trial_end": {
                    "description": "TrialEnd is the end date of the trial period",
                    "type": "string"
                },
                "trial_start": {
                    "description": "TrialStart is the start date of the trial period",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "dto.SubscriptionUsageByMetersResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "display_amount": {
                    "type": "string"
                },
                "filter_values": {
                    "$ref": "#/definitions/price.JSONBFilters"
                },
                "meter_display_name": {
                    "type": "string"
                },
                "price": {
                    "$ref": "#/definitions/price.Price"
                },
                "quantity": {
                    "type": "number"
                }
            }
        },
        "dto.TenantResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.TopUpWalletRequest": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                }
            }
        },
        "dto.UpdateCustomerRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateEnvironmentRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.UpdatePlanPriceRequest": {
            "type": "object",
            "required": [
                "amount",
                "billing_cadence",
                "billing_model",
                "billing_period",
                "billing_period_count",
                "currency",
                "type"
            ],
            "properties": {
                "amount": {
                    "type": "string"
                },
                "billing_cadence": {
                    "$ref": "#/definitions/types.BillingCadence"
                },
                "billing_model": {
                    "$ref": "#/definitions/types.BillingModel"
                },
                "billing_period": {
                    "$ref": "#/definitions/types.BillingPeriod"
                },
                "billing_period_count": {
                    "type": "integer",
                    "minimum": 1
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "filter_values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "id": {
                    "description": "The ID of the price to update (present if the price is being updated)",
                    "type": "string"
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "meter_id": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "tier_mode": {
                    "$ref": "#/definitions/types.BillingTier"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreatePriceTier"
                    }
                },
                "transform_quantity": {
                    "$ref": "#/definitions/price.TransformQuantity"
                },
                "type": {
                    "$ref": "#/definitions/types.PriceType"
                }
            }
        },
        "dto.UpdatePlanRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "invoice_cadence": {
                    "$ref": "#/definitions/types.InvoiceCadence"
                },
                "lookup_key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UpdatePlanPriceRequest"
                    }
                },
                "trial_period": {
                    "type": "integer"
                }
            }
        },
        "dto.UpdatePriceRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.UsageResult": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "number"
                },
                "window_size": {
                    "type": "string"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "dto.WalletBalanceResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "balance_updated_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "real_time_balance": {
                    "type": "number"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "wallet_status": {
                    "$ref": "#/definitions/types.WalletStatus"
                }
            }
        },
        "dto.WalletResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet_status": {
                    "$ref": "#/definitions/types.WalletStatus"
                }
            }
        },
        "dto.WalletTransactionResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "balance_after": {
                    "type": "number"
                },
                "balance_before": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "reference_id": {
                    "type": "string"
                },
                "reference_type": {
                    "type": "string"
                },
                "transaction_status": {
                    "$ref": "#/definitions/types.TransactionStatus"
                },
                "type": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "dto.WalletTransactionsResponse": {
            "type": "object",
            "properties": {
                "filter": {
                    "$ref": "#/definitions/types.Filter"
                },
                "total": {
                    "type": "integer"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.WalletTransactionResponse"
                    }
                }
            }
        },
        "gin.H": {
            "type": "object",
            "additionalProperties": {}
        },
        "meter.Aggregation": {
            "type": "object",
            "properties": {
                "field": {
                    "description": "Field is the key in $event.properties on which the aggregation is to be applied\nFor ex if the aggregation type is sum for API usage, the field could be \"duration_ms\"",
                    "type": "string"
                },
                "type": {
                    "description": "Type is the type of aggregation to be applied on the events\nFor ex sum, count, avg, max, min etc",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.AggregationType"
                        }
                    ]
                }
            }
        },
        "meter.Filter": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "Key is the key for the filter from $event.properties\nCurrently we support only first level keys in the properties and not nested keys",
                    "type": "string"
                },
                "values": {
                    "description": "Values are the possible values for the filter to be considered for the meter\nFor ex \"model_name\" could have values \"o1-mini\", \"gpt-4o\" etc",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "plan.Plan": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice_cadence": {
                    "$ref": "#/definitions/types.InvoiceCadence"
                },
                "lookup_key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "trial_period": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "price.JSONBFilters": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        },
        "price.JSONBMetadata": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "price.JSONBTransformQuantity": {
            "type": "object",
            "properties": {
                "divide_by": {
                    "description": "Divide quantity by this number",
                    "type": "integer"
                },
                "round": {
                    "description": "up or down",
                    "type": "string"
                }
            }
        },
        "price.Price": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount stored in main currency units (e.g., dollars, not cents)\nFor USD: 12.50 means $12.50",
                    "type": "number"
                },
                "billing_cadence": {
                    "description": "BillingCadence is the billing cadence for the price ex RECURRING, ONETIME",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingCadence"
                        }
                    ]
                },
                "billing_model": {
                    "description": "BillingModel is the billing model for the price ex FLAT_FEE, PACKAGE, TIERED",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingModel"
                        }
                    ]
                },
                "billing_period": {
                    "description": "BillingPeriod is the billing period for the price ex month, year",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingPeriod"
                        }
                    ]
                },
                "billing_period_count": {
                    "description": "BillingPeriodCount is the count of the billing period ex 1, 3, 6, 12",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "description": "Currency 3 digit ISO currency code in lowercase ex usd, eur, gbp",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the price",
                    "type": "string"
                },
                "display_amount": {
                    "description": "DisplayAmount is the formatted amount with currency symbol\nFor USD: $12.50",
                    "type": "string"
                },
                "filter_values": {
                    "description": "FilterValues are the filter values for the price in case of usage based pricing",
                    "allOf": [
                        {
                            "$ref": "#/definitions/price.JSONBFilters"
                        }
                    ]
                },
                "id": {
                    "description": "ID uuid identifier for the price",
                    "type": "string"
                },
                "lookup_key": {
                    "description": "LookupKey used for looking up the price in the database",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata is a jsonb field for additional information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/price.JSONBMetadata"
                        }
                    ]
                },
                "meter_id": {
                    "description": "MeterID is the id of the meter for usage based pricing",
                    "type": "string"
                },
                "plan_id": {
                    "description": "PlanID is the id of the plan for plan based pricing",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                },
                "tenant_id": {
                    "type": "string"
                },
                "tier_mode": {
                    "description": "Tiered pricing fields when BillingModel is TIERED",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BillingTier"
                        }
                    ]
                },
                "tiers": {
                    "description": "Tiers are the tiers for the price when BillingModel is TIERED",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/price.PriceTier"
                    }
                },
                "transform_quantity": {
                    "description": "Transform is the quantity transformation in case of PACKAGE billing model",
                    "allOf": [
                        {
                            "$ref": "#/definitions/price.JSONBTransformQuantity"
                        }
                    ]
                },
                "type": {
                    "description": "Type is the type of the price ex USAGE, FIXED",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.PriceType"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "price.PriceTier": {
            "type": "object",
            "properties": {
                "flat_amount": {
                    "description": "FlatAmount is the flat amount for the given tier and it is applied\non top of the unit amount*quantity. It solves cases in banking like 2.7% + 5c",
                    "type": "number"
                },
                "unit_amount": {
                    "description": "UnitAmount is the amount per unit for the given tier",
                    "type": "number"
                },
                "up_to": {
                    "description": "Upto is the quantity up to which this tier applies. It is null for the last tier",
                    "type": "integer"
                }
            }
        },
        "price.TransformQuantity": {
            "type": "object",
            "properties": {
                "divide_by": {
                    "description": "Divide quantity by this number",
                    "type": "integer"
                },
                "round": {
                    "description": "up or down",
                    "type": "string"
                }
            }
        },
        "types.AggregationType": {
            "type": "string",
            "enum": [
                "COUNT",
                "SUM",
                "AVG"
            ],
            "x-enum-varnames": [
                "AggregationCount",
                "AggregationSum",
                "AggregationAvg"
            ]
        },
        "types.BillingCadence": {
            "type": "string",
            "enum": [
                "RECURRING",
                "ONETIME"
            ],
            "x-enum-varnames": [
                "BILLING_CADENCE_RECURRING",
                "BILLING_CADENCE_ONETIME"
            ]
        },
        "types.BillingModel": {
            "type": "string",
            "enum": [
                "FLAT_FEE",
                "PACKAGE",
                "TIERED"
            ],
            "x-enum-varnames": [
                "BILLING_MODEL_FLAT_FEE",
                "BILLING_MODEL_PACKAGE",
                "BILLING_MODEL_TIERED"
            ]
        },
        "types.BillingPeriod": {
            "type": "string",
            "enum": [
                "MONTHLY",
                "ANNUAL",
                "WEEKLY",
                "DAILY"
            ],
            "x-enum-varnames": [
                "BILLING_PERIOD_MONTHLY",
                "BILLING_PERIOD_ANNUAL",
                "BILLING_PERIOD_WEEKLY",
                "BILLING_PERIOD_DAILY"
            ]
        },
        "types.BillingTier": {
            "type": "string",
            "enum": [
                "VOLUME",
                "SLAB"
            ],
            "x-enum-varnames": [
                "BILLING_TIER_VOLUME",
                "BILLING_TIER_SLAB"
            ]
        },
        "types.Filter": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "order": {
                    "type": "string"
                },
                "sort": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.Status"
                }
            }
        },
        "types.InvoiceCadence": {
            "type": "string",
            "enum": [
                "ARREAR",
                "ADVANCE"
            ],
            "x-enum-varnames": [
                "InvoiceCadenceArrear",
                "InvoiceCadenceAdvance"
            ]
        },
        "types.Metadata": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "types.PriceType": {
            "type": "string",
            "enum": [
                "USAGE",
                "FIXED"
            ],
            "x-enum-varnames": [
                "PRICE_TYPE_USAGE",
                "PRICE_TYPE_FIXED"
            ]
        },
        "types.ResetUsage": {
            "type": "string",
            "enum": [
                "BILLING_PERIOD",
                "NEVER"
            ],
            "x-enum-varnames": [
                "ResetUsageBillingPeriod",
                "ResetUsageNever"
            ]
        },
        "types.Status": {
            "type": "string",
            "enum": [
                "published",
                "deleted",
                "archived"
            ],
            "x-enum-varnames": [
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
            ]
        },
        "types.SubscriptionStatus": {
            "type": "string",
            "enum": [
                "active",
                "paused",
                "cancelled",
                "incomplete",
                "incomplete_expired",
                "past_due",
                "trialing",
                "unpaid"
            ],
            "x-enum-varnames": [
                "SubscriptionStatusActive",
                "SubscriptionStatusPaused",
                "SubscriptionStatusCancelled",
                "SubscriptionStatusIncomplete",
                "SubscriptionStatusIncompleteExpired",
                "SubscriptionStatusPastDue",
                "SubscriptionStatusTrialing",
                "SubscriptionStatusUnpaid"
            ]
        },
        "types.TransactionStatus": {
            "type": "string",
            "enum": [
                "pending",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "TransactionStatusPending",
                "TransactionStatusCompleted",
                "TransactionStatusFailed"
            ]
        },
        "types.WalletStatus": {
            "type": "string",
            "enum": [
                "active",
                "frozen",
                "closed"
            ],
            "x-enum-varnames": [
                "WalletStatusActive",
                "WalletStatusFrozen",
                "WalletStatusClosed"
            ]
        },
        "types.WindowSize": {
            "type": "string",
            "enum": [
                "MINUTE",
                "HOUR",
                "DAY"
            ],
            "x-enum-varnames": [
                "WindowSizeMinute",
                "WindowSizeHour",
                "WindowSizeDay"
            ]
        },
        "v1.ErrorResponse": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "Invalid request payload"
                },
                "error": {
                    "type": "string",
                    "example": "Invalid request payload"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Enter your bearer token in the format **Bearer \u0026lt;token\u0026gt;**",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}