basePath: /v1
definitions:
  dto.AuthResponse:
    properties:
      token:
        type: string
    type: object
  dto.CreateCustomerRequest:
    properties:
      email:
        type: string
      external_id:
        type: string
      name:
        type: string
    required:
    - external_id
    type: object
  dto.CreateMeterRequest:
    properties:
      aggregation:
        $ref: '#/definitions/meter.Aggregation'
      event_name:
        example: api_request
        type: string
      filters:
        items:
          $ref: '#/definitions/meter.Filter'
        type: array
      name:
        example: API Usage Meter
        type: string
      reset_usage:
        allOf:
        - $ref: '#/definitions/types.ResetUsage'
        example: BILLING_PERIOD
    required:
    - aggregation
    - event_name
    - name
    type: object
  dto.CreatePlanPriceRequest:
    properties:
      amount:
        type: number
      billing_cadence:
        $ref: '#/definitions/types.BillingCadence'
      billing_model:
        $ref: '#/definitions/types.BillingModel'
      billing_period:
        $ref: '#/definitions/types.BillingPeriod'
      billing_period_count:
        minimum: 1
        type: integer
      currency:
        type: string
      description:
        type: string
      filter_values:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      lookup_key:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      meter_id:
        type: string
      plan_id:
        type: string
      tier_mode:
        $ref: '#/definitions/types.BillingTier'
      tiers:
        items:
          $ref: '#/definitions/dto.CreatePriceTier'
        type: array
      transform:
        $ref: '#/definitions/price.PriceTransform'
      type:
        $ref: '#/definitions/types.PriceType'
    required:
    - billing_cadence
    - billing_model
    - billing_period
    - billing_period_count
    - currency
    - type
    type: object
  dto.CreatePlanRequest:
    properties:
      description:
        type: string
      invoice_cadence:
        $ref: '#/definitions/types.InvoiceCadence'
      lookup_key:
        type: string
      name:
        type: string
      prices:
        items:
          $ref: '#/definitions/dto.CreatePlanPriceRequest'
        type: array
      trial_period:
        type: integer
    required:
    - name
    type: object
  dto.CreatePriceRequest:
    properties:
      amount:
        type: number
      billing_cadence:
        $ref: '#/definitions/types.BillingCadence'
      billing_model:
        $ref: '#/definitions/types.BillingModel'
      billing_period:
        $ref: '#/definitions/types.BillingPeriod'
      billing_period_count:
        minimum: 1
        type: integer
      currency:
        type: string
      description:
        type: string
      filter_values:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      lookup_key:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      meter_id:
        type: string
      plan_id:
        type: string
      tier_mode:
        $ref: '#/definitions/types.BillingTier'
      tiers:
        items:
          $ref: '#/definitions/dto.CreatePriceTier'
        type: array
      transform:
        $ref: '#/definitions/price.PriceTransform'
      type:
        $ref: '#/definitions/types.PriceType'
    required:
    - billing_cadence
    - billing_model
    - billing_period
    - billing_period_count
    - currency
    - type
    type: object
  dto.CreatePriceTier:
    properties:
      flat_amount:
        type: number
      unit_amount:
        type: number
      up_to:
        type: integer
    type: object
  dto.CreateSubscriptionRequest:
    properties:
      billing_cadence:
        $ref: '#/definitions/types.BillingCadence'
      billing_period:
        $ref: '#/definitions/types.BillingPeriod'
      billing_period_unit:
        type: integer
      currency:
        type: string
      customer_id:
        type: string
      end_date:
        type: string
      invoice_cadence:
        $ref: '#/definitions/types.InvoiceCadence'
      lookup_key:
        type: string
      plan_id:
        type: string
      start_date:
        type: string
      trial_end:
        type: string
      trial_start:
        type: string
    required:
    - customer_id
    - plan_id
    type: object
  dto.CustomerResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      email:
        description: Email is the email of the customer
        type: string
      external_id:
        description: ExternalID is the external identifier for the customer
        type: string
      id:
        description: ID is the unique identifier for the customer
        type: string
      name:
        description: Name is the name of the customer
        type: string
      status:
        $ref: '#/definitions/types.Status'
      tenant_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.Event:
    properties:
      customer_id:
        type: string
      event_name:
        type: string
      external_customer_id:
        type: string
      id:
        type: string
      properties:
        additionalProperties: true
        type: object
      source:
        type: string
      timestamp:
        type: string
    type: object
  dto.GetEventsResponse:
    properties:
      events:
        items:
          $ref: '#/definitions/dto.Event'
        type: array
      has_more:
        type: boolean
      iter_first_key:
        type: string
      iter_last_key:
        type: string
    type: object
  dto.GetUsageByMeterRequest:
    properties:
      customer_id:
        example: customer456
        type: string
      end_time:
        example: "2024-12-09T00:00:00Z"
        type: string
      external_customer_id:
        example: user_5
        type: string
      filters:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      meter_id:
        example: "123"
        type: string
      start_time:
        example: "2024-11-09T00:00:00Z"
        type: string
      window_size:
        allOf:
        - $ref: '#/definitions/types.WindowSize'
        example: HOUR
    required:
    - meter_id
    type: object
  dto.GetUsageBySubscriptionRequest:
    properties:
      end_time:
        example: "2024-03-20T00:00:00Z"
        type: string
      start_time:
        example: "2024-03-13T00:00:00Z"
        type: string
      subscription_id:
        example: "123"
        type: string
    required:
    - subscription_id
    type: object
  dto.GetUsageBySubscriptionResponse:
    properties:
      amount:
        type: number
      charges:
        items:
          $ref: '#/definitions/dto.SubscriptionUsageByMetersResponse'
        type: array
      currency:
        type: string
      display_amount:
        type: string
      end_time:
        type: string
      start_time:
        type: string
    type: object
  dto.GetUsageRequest:
    properties:
      aggregation_type:
        example: COUNT
        type: string
      customer_id:
        example: customer456
        type: string
      end_time:
        example: "2024-03-20T00:00:00Z"
        type: string
      event_name:
        example: api_request
        type: string
      external_customer_id:
        example: customer456
        type: string
      filters:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      property_name:
        description: will be empty/ignored in case of COUNT
        example: request_size
        type: string
      start_time:
        example: "2024-03-13T00:00:00Z"
        type: string
      window_size:
        allOf:
        - $ref: '#/definitions/types.WindowSize'
        example: HOUR
    required:
    - aggregation_type
    - event_name
    type: object
  dto.IngestEventRequest:
    properties:
      customer_id:
        example: customer456
        type: string
      event_id:
        example: event123
        type: string
      event_name:
        example: api_request
        type: string
      external_customer_id:
        example: customer456
        type: string
      properties:
        additionalProperties:
          type: string
        example:
          '"response_status"': 200}
          '{"request_size"': "100"
        type: object
      source:
        example: api
        type: string
      timestamp:
        example: "2024-03-20T15:04:05Z"
        type: string
    required:
    - event_name
    - external_customer_id
    type: object
  dto.ListCustomersResponse:
    properties:
      customers:
        items:
          $ref: '#/definitions/dto.CustomerResponse'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  dto.ListPlansResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      plans:
        items:
          $ref: '#/definitions/plan.Plan'
        type: array
      total:
        type: integer
    type: object
  dto.ListPricesResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      prices:
        items:
          $ref: '#/definitions/dto.PriceResponse'
        type: array
      total:
        type: integer
    type: object
  dto.ListSubscriptionsResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      subscriptions:
        items:
          $ref: '#/definitions/dto.SubscriptionResponse'
        type: array
      total:
        type: integer
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.MeterResponse:
    properties:
      aggregation:
        $ref: '#/definitions/meter.Aggregation'
      created_at:
        example: "2024-03-20T15:04:05Z"
        type: string
      event_name:
        example: api_request
        type: string
      filters:
        items:
          $ref: '#/definitions/meter.Filter'
        type: array
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        example: API Usage Meter
        type: string
      reset_usage:
        $ref: '#/definitions/types.ResetUsage'
      status:
        example: published
        type: string
      tenant_id:
        example: tenant123
        type: string
      updated_at:
        example: "2024-03-20T15:04:05Z"
        type: string
    type: object
  dto.PlanResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: string
      invoice_cadence:
        $ref: '#/definitions/types.InvoiceCadence'
      lookup_key:
        type: string
      name:
        type: string
      prices:
        items:
          $ref: '#/definitions/dto.PriceResponse'
        type: array
      status:
        $ref: '#/definitions/types.Status'
      tenant_id:
        type: string
      trial_period:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.PriceResponse:
    properties:
      amount:
        description: Amount in cents ex 1200 for $12
        type: integer
      billing_cadence:
        allOf:
        - $ref: '#/definitions/types.BillingCadence'
        description: BillingCadence is the billing cadence for the price ex RECURRING,
          ONETIME
      billing_model:
        allOf:
        - $ref: '#/definitions/types.BillingModel'
        description: BillingModel is the billing model for the price ex FLAT_FEE,
          PACKAGE, TIERED
      billing_period:
        allOf:
        - $ref: '#/definitions/types.BillingPeriod'
        description: BillingPeriod is the billing period for the price ex month, year
      billing_period_count:
        description: BillingPeriodCount is the count of the billing period ex 1, 3,
          6, 12
        type: integer
      created_at:
        type: string
      created_by:
        type: string
      currency:
        description: Currency 3 digit ISO currency code in lowercase ex usd, eur,
          gbp
        type: string
      description:
        description: Description of the price
        type: string
      display_amount:
        description: DisplayAmount is the amount in the currency ex $12.00
        type: string
      filter_values:
        allOf:
        - $ref: '#/definitions/price.JSONBFilters'
        description: FilterValues are the filter values for the price in case of usage
          based pricing
      id:
        description: ID uuid identifier for the price
        type: string
      lookup_key:
        description: LookupKey used for looking up the price in the database
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/price.JSONBMetadata'
        description: Metadata is a jsonb field for additional information
      meter_id:
        description: MeterID is the id of the meter for usage based pricing
        type: string
      plan_id:
        description: PlanID is the id of the plan for plan based pricing
        type: string
      status:
        $ref: '#/definitions/types.Status'
      tenant_id:
        type: string
      tier_mode:
        allOf:
        - $ref: '#/definitions/types.BillingTier'
        description: Tiered pricing fields when BillingModel is TIERED
      tiers:
        description: Tiers are the tiers for the price when BillingModel is TIERED
        items:
          $ref: '#/definitions/price.PriceTier'
        type: array
      transform:
        allOf:
        - $ref: '#/definitions/price.JSONBTransform'
        description: Transform is the quantity transformation in case of PACKAGE billing
          model
      type:
        allOf:
        - $ref: '#/definitions/types.PriceType'
        description: Type is the type of the price ex USAGE, FIXED
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.SignUpRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.SubscriptionResponse:
    properties:
      billing_anchor:
        description: |-
          BillingAnchor is the reference point that aligns future billing cycle dates.
          It sets the day of week for week intervals, the day of month for month and year intervals,
          and the month of year for year intervals. The timestamp is in UTC format.
        type: string
      billing_cadence:
        allOf:
        - $ref: '#/definitions/types.BillingCadence'
        description: BillingCadence is the cadence of the billing cycle.
      billing_period:
        allOf:
        - $ref: '#/definitions/types.BillingPeriod'
        description: BillingPeriod is the period of the billing cycle.
      billing_period_unit:
        description: BillingPeriodUnit is the unit of the billing period.
        type: integer
      cancel_at:
        description: CancelAt is the date the subscription will be canceled
        type: string
      cancel_at_period_end:
        description: CancelAtPeriodEnd is whether the subscription was canceled at
          the end of the current period
        type: boolean
      cancelled_at:
        description: CanceledAt is the date the subscription was canceled
        type: string
      created_at:
        type: string
      created_by:
        type: string
      currency:
        description: Currency is the currency of the subscription in lowercase 3 digit
          ISO codes
        type: string
      current_period_end:
        description: |-
          CurrentPeriodEnd is the end of the current period that the subscription has been invoiced for.
          At the end of this period, a new invoice will be created.
        type: string
      current_period_start:
        description: |-
          CurrentPeriodStart is the end of the current period that the subscription has been invoiced for.
          At the end of this period, a new invoice will be created.
        type: string
      customer_id:
        description: CustomerID is the identifier for the customer in our system
        type: string
      end_date:
        description: EndDate is the end date of the subscription
        type: string
      id:
        description: ID is the unique identifier for the subscription
        type: string
      invoice_cadence:
        allOf:
        - $ref: '#/definitions/types.InvoiceCadence'
        description: InvoiceCadence is the cadence of the invoice. This overrides
          the plan's invoice cadence.
      lookup_key:
        description: LookupKey is the key used to lookup the subscription in our system
        type: string
      plan:
        $ref: '#/definitions/dto.PlanResponse'
      plan_id:
        description: PlanID is the identifier for the plan in our system
        type: string
      start_date:
        description: StartDate is the start date of the subscription
        type: string
      status:
        $ref: '#/definitions/types.Status'
      subscription_status:
        allOf:
        - $ref: '#/definitions/types.SubscriptionStatus'
        description: Status is the status of the subscription
      tenant_id:
        type: string
      trial_end:
        description: TrialEnd is the end date of the trial period
        type: string
      trial_start:
        description: TrialStart is the start date of the trial period
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  dto.SubscriptionUsageByMetersResponse:
    properties:
      amount:
        type: number
      currency:
        type: string
      display_amount:
        type: string
      filter_values:
        $ref: '#/definitions/price.JSONBFilters'
      meter_display_name:
        type: string
      quantity:
        type: number
    type: object
  dto.UpdateCustomerRequest:
    properties:
      email:
        type: string
      external_id:
        type: string
      name:
        type: string
    type: object
  dto.UpdatePlanPriceRequest:
    properties:
      amount:
        type: number
      billing_cadence:
        $ref: '#/definitions/types.BillingCadence'
      billing_model:
        $ref: '#/definitions/types.BillingModel'
      billing_period:
        $ref: '#/definitions/types.BillingPeriod'
      billing_period_count:
        minimum: 1
        type: integer
      currency:
        type: string
      description:
        type: string
      filter_values:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      id:
        description: The ID of the price to update (present if the price is being
          updated)
        type: string
      lookup_key:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      meter_id:
        type: string
      plan_id:
        type: string
      tier_mode:
        $ref: '#/definitions/types.BillingTier'
      tiers:
        items:
          $ref: '#/definitions/dto.CreatePriceTier'
        type: array
      transform:
        $ref: '#/definitions/price.PriceTransform'
      type:
        $ref: '#/definitions/types.PriceType'
    required:
    - billing_cadence
    - billing_model
    - billing_period
    - billing_period_count
    - currency
    - type
    type: object
  dto.UpdatePlanRequest:
    properties:
      description:
        type: string
      invoice_cadence:
        $ref: '#/definitions/types.InvoiceCadence'
      lookup_key:
        type: string
      name:
        type: string
      prices:
        items:
          $ref: '#/definitions/dto.UpdatePlanPriceRequest'
        type: array
      trial_period:
        type: integer
    required:
    - name
    type: object
  dto.UpdatePriceRequest:
    properties:
      description:
        type: string
      lookup_key:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
    type: object
  gin.H:
    additionalProperties: {}
    type: object
  meter.Aggregation:
    properties:
      field:
        type: string
      type:
        $ref: '#/definitions/types.AggregationType'
    type: object
  meter.Filter:
    properties:
      key:
        type: string
      values:
        items:
          type: string
        type: array
    type: object
  plan.Plan:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: string
      invoice_cadence:
        $ref: '#/definitions/types.InvoiceCadence'
      lookup_key:
        type: string
      name:
        type: string
      status:
        $ref: '#/definitions/types.Status'
      tenant_id:
        type: string
      trial_period:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  price.JSONBFilters:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
  price.JSONBMetadata:
    additionalProperties:
      type: string
    type: object
  price.JSONBTransform:
    properties:
      divide_by:
        description: Divide quantity by this number
        type: integer
      round:
        description: up, down, or nearest
        type: string
    type: object
  price.PriceTier:
    properties:
      flat_amount:
        description: Optional flat fee for this tier
        type: integer
      unit_amount:
        description: Amount per unit in cents
        type: integer
      up_to:
        description: null means infinity
        type: integer
    type: object
  price.PriceTransform:
    properties:
      divide_by:
        description: Divide quantity by this number
        type: integer
      round:
        description: up, down, or nearest
        type: string
    type: object
  types.AggregationType:
    enum:
    - COUNT
    - SUM
    - AVG
    - MAX
    - MIN
    - COUNT_UNIQUE
    - LATEST
    type: string
    x-enum-varnames:
    - AggregationCount
    - AggregationSum
    - AggregationAvg
    - AggregationMax
    - AggregationMin
    - AggregationCountUnique
    - AggregationLatest
  types.BillingCadence:
    enum:
    - RECURRING
    - ONETIME
    type: string
    x-enum-varnames:
    - BILLING_CADENCE_RECURRING
    - BILLING_CADENCE_ONETIME
  types.BillingModel:
    enum:
    - FLAT_FEE
    - PACKAGE
    - TIERED
    type: string
    x-enum-varnames:
    - BILLING_MODEL_FLAT_FEE
    - BILLING_MODEL_PACKAGE
    - BILLING_MODEL_TIERED
  types.BillingPeriod:
    enum:
    - MONTHLY
    - ANNUAL
    - WEEKLY
    - DAILY
    type: string
    x-enum-varnames:
    - BILLING_PERIOD_MONTHLY
    - BILLING_PERIOD_ANNUAL
    - BILLING_PERIOD_WEEKLY
    - BILLING_PERIOD_DAILY
  types.BillingTier:
    enum:
    - VOLUME
    - SLAB
    type: string
    x-enum-varnames:
    - BILLING_TIER_VOLUME
    - BILLING_TIER_SLAB
  types.InvoiceCadence:
    enum:
    - ARREAR
    - ADVANCE
    type: string
    x-enum-varnames:
    - InvoiceCadenceArrear
    - InvoiceCadenceAdvance
  types.PriceType:
    enum:
    - USAGE
    - FIXED
    type: string
    x-enum-varnames:
    - PRICE_TYPE_USAGE
    - PRICE_TYPE_FIXED
  types.ResetUsage:
    enum:
    - BILLING_PERIOD
    - NEVER
    type: string
    x-enum-varnames:
    - ResetUsageBillingPeriod
    - ResetUsageNever
  types.Status:
    enum:
    - published
    - deleted
    - archived
    type: string
    x-enum-varnames:
    - StatusPublished
    - StatusDeleted
    - StatusArchived
  types.SubscriptionStatus:
    enum:
    - active
    - paused
    - cancelled
    - incomplete
    - incomplete_expired
    - past_due
    - trialing
    - unpaid
    type: string
    x-enum-varnames:
    - SubscriptionStatusActive
    - SubscriptionStatusPaused
    - SubscriptionStatusCancelled
    - SubscriptionStatusIncomplete
    - SubscriptionStatusIncompleteExpired
    - SubscriptionStatusPastDue
    - SubscriptionStatusTrialing
    - SubscriptionStatusUnpaid
  types.WindowSize:
    enum:
    - MINUTE
    - HOUR
    - DAY
    type: string
    x-enum-varnames:
    - WindowSizeMinute
    - WindowSizeHour
    - WindowSizeDay
  v1.ErrorResponse:
    properties:
      error:
        example: Invalid request payload
        type: string
    type: object
info:
  contact: {}
  description: FlexPrice API Service
  title: FlexPrice API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: Login request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Login
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Sign up a new user
      parameters:
      - description: Sign up request
        in: body
        name: signup
        required: true
        schema:
          $ref: '#/definitions/dto.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Sign up
      tags:
      - auth
  /customers:
    get:
      consumes:
      - application/json
      description: Get customers
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: order
        type: string
      - in: query
        name: search
        type: string
      - in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListCustomersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Create a customer
      parameters:
      - description: Customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a customer
      tags:
      - customers
  /customers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a customer
      tags:
      - customers
    get:
      consumes:
      - application/json
      description: Get a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a customer
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Update a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a customer
      tags:
      - customers
  /events:
    get:
      description: Retrieve raw events with pagination and filtering
      parameters:
      - description: External Customer ID
        in: query
        name: external_customer_id
        type: string
      - description: Event Name
        in: query
        name: event_name
        type: string
      - description: Start Time (RFC3339)
        in: query
        name: start_time
        type: string
      - description: End Time (RFC3339)
        in: query
        name: end_time
        type: string
      - description: Iter First Key (unix_timestamp_nanoseconds::event_id)
        in: query
        name: iter_first_key
        type: string
      - description: Iter Last Key (unix_timestamp_nanoseconds::event_id)
        in: query
        name: iter_last_key
        type: string
      - description: Page Size (1-50)
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetEventsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get raw events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Ingest a new event into the system
      parameters:
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/dto.IngestEventRequest'
      produces:
      - application/json
      responses:
        "202":
          description: message:Event accepted for processing
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Ingest event
      tags:
      - events
  /events/usage:
    get:
      description: Retrieve aggregated usage statistics for events
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetUsageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get usage statistics
      tags:
      - events
    post:
      description: Retrieve aggregated usage statistics for events
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetUsageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get usage statistics
      tags:
      - events
  /events/usage/meter:
    get:
      description: Retrieve aggregated usage statistics using meter configuration
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetUsageByMeterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get usage by meter
      tags:
      - events
    post:
      description: Retrieve aggregated usage statistics using meter configuration
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetUsageByMeterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get usage by meter
      tags:
      - events
  /meters:
    get:
      description: Get all meters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.MeterResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List meters
      tags:
      - meters
    post:
      consumes:
      - application/json
      description: Create a new meter with the specified configuration
      parameters:
      - description: Meter configuration
        in: body
        name: meter
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMeterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MeterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create meter
      tags:
      - meters
  /meters/{id}:
    delete:
      description: Delete an existing meter
      parameters:
      - description: Meter ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: message:Meter deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete meter
      tags:
      - meters
    get:
      description: Get a specific meter by ID
      parameters:
      - description: Meter ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MeterResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get meter
      tags:
      - meters
  /meters/{id}/disable:
    post:
      description: Disable an existing meter
      parameters:
      - description: Meter ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: message:Meter disabled successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: 'Disable meter [TODO: Deprecate]'
      tags:
      - meters
  /plans:
    get:
      consumes:
      - application/json
      description: Get plans with the specified filter
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: order
        type: string
      - in: query
        name: search
        type: string
      - in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListPlansResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get plans
      tags:
      - plans
    post:
      consumes:
      - application/json
      description: Create a new plan with the specified configuration
      parameters:
      - description: Plan configuration
        in: body
        name: plan
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePlanRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PlanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new plan
      tags:
      - plans
  /plans/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a plan by ID
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a plan by ID
      tags:
      - plans
    get:
      consumes:
      - application/json
      description: Get a plan by ID
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PlanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a plan by ID
      tags:
      - plans
    put:
      consumes:
      - application/json
      description: Update a plan by ID
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      - description: Plan configuration
        in: body
        name: plan
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePlanRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PlanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a plan by ID
      tags:
      - plans
  /prices:
    get:
      consumes:
      - application/json
      description: Get prices with the specified filter
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: order
        type: string
      - in: query
        name: search
        type: string
      - in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListPricesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get prices
      tags:
      - prices
    post:
      consumes:
      - application/json
      description: Create a new price with the specified configuration
      parameters:
      - description: Price configuration
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePriceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PriceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new price
      tags:
      - prices
  /prices/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a price
      parameters:
      - description: Price ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a price
      tags:
      - prices
    get:
      consumes:
      - application/json
      description: Get a price by ID
      parameters:
      - description: Price ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PriceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a price by ID
      tags:
      - prices
    put:
      consumes:
      - application/json
      description: Update a price with the specified configuration
      parameters:
      - description: Price ID
        in: path
        name: id
        required: true
        type: string
      - description: Price configuration
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePriceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PriceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a price
      tags:
      - prices
  /subscriptions:
    get:
      description: Get subscriptions with optional filtering
      parameters:
      - description: Filter by customer ID
        in: query
        name: customer_id
        type: string
      - description: Filter by subscription status
        in: query
        name: subscription_status
        type: string
      - description: Filter by plan ID
        in: query
        name: plan_id
        type: string
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Limit for pagination
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListSubscriptionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List subscriptions
      tags:
      - subscriptions
    post:
      consumes:
      - application/json
      description: Create a new subscription
      parameters:
      - description: Subscription Request
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSubscriptionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SubscriptionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create subscription
      tags:
      - subscriptions
  /subscriptions/{id}:
    get:
      description: Get a subscription by ID
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SubscriptionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get subscription
      tags:
      - subscriptions
  /subscriptions/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel a subscription
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      - description: Cancel at period end
        in: query
        name: cancel_at_period_end
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel subscription
      tags:
      - subscriptions
  /subscriptions/usage:
    post:
      description: Get usage by subscription
      parameters:
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetUsageBySubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUsageBySubscriptionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get usage by subscription
      tags:
      - subscriptions
  /users/me:
    get:
      consumes:
      - application/json
      description: Get the current user's information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user info
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Enter your bearer token in the format **Bearer &lt;token&gt;**
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
