basePath: /v1
definitions:
  dto.CreateMeterRequest:
    properties:
      aggregation:
        $ref: '#/definitions/meter.Aggregation'
      event_name:
        example: api_request
        type: string
    required:
    - aggregation
    - event_name
    type: object
  dto.Event:
    properties:
      customer_id:
        type: string
      event_name:
        type: string
      external_customer_id:
        type: string
      id:
        type: string
      properties:
        additionalProperties: true
        type: object
      source:
        type: string
      timestamp:
        type: string
    type: object
  dto.GetEventsResponse:
    properties:
      events:
        items:
          $ref: '#/definitions/dto.Event'
        type: array
      has_more:
        type: boolean
      iter_first_key:
        type: string
      iter_last_key:
        type: string
    type: object
  dto.IngestEventRequest:
    properties:
      customer_id:
        example: customer456
        type: string
      event_id:
        example: event123
        type: string
      event_name:
        example: api_request
        type: string
      external_customer_id:
        example: customer456
        type: string
      properties:
        additionalProperties:
          type: string
        example:
          '"response_status"': 200}
          '{"request_size"': "100"
        type: object
      source:
        example: api
        type: string
      timestamp:
        example: "2024-03-20T15:04:05Z"
        type: string
    required:
    - event_name
    - external_customer_id
    type: object
  dto.MeterResponse:
    properties:
      aggregation:
        $ref: '#/definitions/meter.Aggregation'
      created_at:
        example: "2024-03-20T15:04:05Z"
        type: string
      event_name:
        example: api_request
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      status:
        example: ACTIVE
        type: string
      tenant_id:
        example: tenant123
        type: string
      updated_at:
        example: "2024-03-20T15:04:05Z"
        type: string
    type: object
  meter.Aggregation:
    properties:
      field:
        type: string
      type:
        $ref: '#/definitions/types.AggregationType'
    type: object
  types.AggregationType:
    enum:
    - COUNT
    - SUM
    - AVG
    - MAX
    - MIN
    - COUNT_UNIQUE
    - LATEST
    type: string
    x-enum-varnames:
    - AggregationCount
    - AggregationSum
    - AggregationAvg
    - AggregationMax
    - AggregationMin
    - AggregationCountUnique
    - AggregationLatest
  v1.ErrorResponse:
    properties:
      error:
        example: Invalid request payload
        type: string
    type: object
info:
  contact: {}
  description: FlexPrice API Service
  title: FlexPrice API
  version: "1.0"
paths:
  /events:
    get:
      description: Retrieve raw events with pagination and filtering
      parameters:
      - description: External Customer ID
        in: query
        name: external_customer_id
        type: string
      - description: Event Name
        in: query
        name: event_name
        type: string
      - description: Start Time (RFC3339)
        in: query
        name: start_time
        type: string
      - description: End Time (RFC3339)
        in: query
        name: end_time
        type: string
      - description: Iter First Key (unix_timestamp_nanoseconds::event_id)
        in: query
        name: iter_first_key
        type: string
      - description: Iter Last Key (unix_timestamp_nanoseconds::event_id)
        in: query
        name: iter_last_key
        type: string
      - description: Page Size (1-50)
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetEventsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get raw events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Ingest a new event into the system
      parameters:
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/dto.IngestEventRequest'
      produces:
      - application/json
      responses:
        "202":
          description: message:Event accepted for processing
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Ingest event
      tags:
      - events
  /events/usage:
    get:
      description: Retrieve aggregated usage statistics for events
      parameters:
      - description: External Customer ID
        in: query
        name: external_customer_id
        type: string
      - description: Event Name
        in: query
        name: event_name
        required: true
        type: string
      - description: Property Name
        in: query
        name: property_name
        type: string
      - description: Aggregation Type (SUM, COUNT)
        in: query
        name: aggregation_type
        type: string
      - description: Window Size (MINUTE, HOUR, DAY)
        in: query
        name: window_size
        type: string
      - description: Start Time (RFC3339)
        in: query
        name: start_time
        type: string
      - description: End Time (RFC3339)
        in: query
        name: end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get usage statistics
      tags:
      - events
  /events/usage/meter:
    get:
      description: Retrieve aggregated usage statistics using meter configuration
      parameters:
      - description: Meter ID
        in: query
        name: meter_id
        required: true
        type: string
      - description: External Customer ID
        in: query
        name: external_customer_id
        type: string
      - description: Start Time (RFC3339)
        in: query
        name: start_time
        type: string
      - description: End Time (RFC3339)
        in: query
        name: end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get usage by meter
      tags:
      - events
  /meters:
    get:
      description: Get all active meters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.MeterResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: List meters
      tags:
      - meters
    post:
      consumes:
      - application/json
      description: Create a new meter with the specified configuration
      parameters:
      - description: Meter configuration
        in: body
        name: meter
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMeterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MeterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Create meter
      tags:
      - meters
  /meters/{id}:
    get:
      description: Get a specific meter by ID
      parameters:
      - description: Meter ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MeterResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get meter
      tags:
      - meters
  /meters/{id}/disable:
    post:
      description: Disable an existing meter
      parameters:
      - description: Meter ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: message:Meter disabled successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Disable meter
      tags:
      - meters
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
