// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/addon"
	"github.com/flexprice/flexprice/ent/entitlement"
)

// AddonCreate is the builder for creating a Addon entity.
type AddonCreate struct {
	config
	mutation *AddonMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (ac *AddonCreate) SetTenantID(s string) *AddonCreate {
	ac.mutation.SetTenantID(s)
	return ac
}

// SetStatus sets the "status" field.
func (ac *AddonCreate) SetStatus(s string) *AddonCreate {
	ac.mutation.SetStatus(s)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AddonCreate) SetNillableStatus(s *string) *AddonCreate {
	if s != nil {
		ac.SetStatus(*s)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AddonCreate) SetCreatedAt(t time.Time) *AddonCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AddonCreate) SetNillableCreatedAt(t *time.Time) *AddonCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AddonCreate) SetUpdatedAt(t time.Time) *AddonCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AddonCreate) SetNillableUpdatedAt(t *time.Time) *AddonCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetCreatedBy sets the "created_by" field.
func (ac *AddonCreate) SetCreatedBy(s string) *AddonCreate {
	ac.mutation.SetCreatedBy(s)
	return ac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ac *AddonCreate) SetNillableCreatedBy(s *string) *AddonCreate {
	if s != nil {
		ac.SetCreatedBy(*s)
	}
	return ac
}

// SetUpdatedBy sets the "updated_by" field.
func (ac *AddonCreate) SetUpdatedBy(s string) *AddonCreate {
	ac.mutation.SetUpdatedBy(s)
	return ac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ac *AddonCreate) SetNillableUpdatedBy(s *string) *AddonCreate {
	if s != nil {
		ac.SetUpdatedBy(*s)
	}
	return ac
}

// SetEnvironmentID sets the "environment_id" field.
func (ac *AddonCreate) SetEnvironmentID(s string) *AddonCreate {
	ac.mutation.SetEnvironmentID(s)
	return ac
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (ac *AddonCreate) SetNillableEnvironmentID(s *string) *AddonCreate {
	if s != nil {
		ac.SetEnvironmentID(*s)
	}
	return ac
}

// SetLookupKey sets the "lookup_key" field.
func (ac *AddonCreate) SetLookupKey(s string) *AddonCreate {
	ac.mutation.SetLookupKey(s)
	return ac
}

// SetName sets the "name" field.
func (ac *AddonCreate) SetName(s string) *AddonCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetDescription sets the "description" field.
func (ac *AddonCreate) SetDescription(s string) *AddonCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *AddonCreate) SetNillableDescription(s *string) *AddonCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetType sets the "type" field.
func (ac *AddonCreate) SetType(s string) *AddonCreate {
	ac.mutation.SetType(s)
	return ac
}

// SetMetadata sets the "metadata" field.
func (ac *AddonCreate) SetMetadata(m map[string]interface{}) *AddonCreate {
	ac.mutation.SetMetadata(m)
	return ac
}

// SetID sets the "id" field.
func (ac *AddonCreate) SetID(s string) *AddonCreate {
	ac.mutation.SetID(s)
	return ac
}

// AddEntitlementIDs adds the "entitlements" edge to the Entitlement entity by IDs.
func (ac *AddonCreate) AddEntitlementIDs(ids ...string) *AddonCreate {
	ac.mutation.AddEntitlementIDs(ids...)
	return ac
}

// AddEntitlements adds the "entitlements" edges to the Entitlement entity.
func (ac *AddonCreate) AddEntitlements(e ...*Entitlement) *AddonCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEntitlementIDs(ids...)
}

// Mutation returns the AddonMutation object of the builder.
func (ac *AddonCreate) Mutation() *AddonMutation {
	return ac.mutation
}

// Save creates the Addon in the database.
func (ac *AddonCreate) Save(ctx context.Context) (*Addon, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AddonCreate) SaveX(ctx context.Context) *Addon {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AddonCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AddonCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AddonCreate) defaults() {
	if _, ok := ac.mutation.Status(); !ok {
		v := addon.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := addon.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := addon.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.EnvironmentID(); !ok {
		v := addon.DefaultEnvironmentID
		ac.mutation.SetEnvironmentID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AddonCreate) check() error {
	if _, ok := ac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Addon.tenant_id"`)}
	}
	if v, ok := ac.mutation.TenantID(); ok {
		if err := addon.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Addon.tenant_id": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Addon.status"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Addon.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Addon.updated_at"`)}
	}
	if _, ok := ac.mutation.LookupKey(); !ok {
		return &ValidationError{Name: "lookup_key", err: errors.New(`ent: missing required field "Addon.lookup_key"`)}
	}
	if v, ok := ac.mutation.LookupKey(); ok {
		if err := addon.LookupKeyValidator(v); err != nil {
			return &ValidationError{Name: "lookup_key", err: fmt.Errorf(`ent: validator failed for field "Addon.lookup_key": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Addon.name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := addon.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Addon.name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Addon.type"`)}
	}
	if v, ok := ac.mutation.GetType(); ok {
		if err := addon.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Addon.type": %w`, err)}
		}
	}
	return nil
}

func (ac *AddonCreate) sqlSave(ctx context.Context) (*Addon, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Addon.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AddonCreate) createSpec() (*Addon, *sqlgraph.CreateSpec) {
	var (
		_node = &Addon{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(addon.Table, sqlgraph.NewFieldSpec(addon.FieldID, field.TypeString))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.TenantID(); ok {
		_spec.SetField(addon.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(addon.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(addon.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(addon.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.CreatedBy(); ok {
		_spec.SetField(addon.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ac.mutation.UpdatedBy(); ok {
		_spec.SetField(addon.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ac.mutation.EnvironmentID(); ok {
		_spec.SetField(addon.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := ac.mutation.LookupKey(); ok {
		_spec.SetField(addon.FieldLookupKey, field.TypeString, value)
		_node.LookupKey = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(addon.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(addon.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(addon.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.Metadata(); ok {
		_spec.SetField(addon.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := ac.mutation.EntitlementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   addon.EntitlementsTable,
			Columns: []string{addon.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AddonCreateBulk is the builder for creating many Addon entities in bulk.
type AddonCreateBulk struct {
	config
	err      error
	builders []*AddonCreate
}

// Save creates the Addon entities in the database.
func (acb *AddonCreateBulk) Save(ctx context.Context) ([]*Addon, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Addon, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AddonCreateBulk) SaveX(ctx context.Context) []*Addon {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AddonCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AddonCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
