// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/addon"
	"github.com/flexprice/flexprice/ent/entitlement"
	"github.com/flexprice/flexprice/ent/predicate"
)

// AddonUpdate is the builder for updating Addon entities.
type AddonUpdate struct {
	config
	hooks    []Hook
	mutation *AddonMutation
}

// Where appends a list predicates to the AddonUpdate builder.
func (au *AddonUpdate) Where(ps ...predicate.Addon) *AddonUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetStatus sets the "status" field.
func (au *AddonUpdate) SetStatus(s string) *AddonUpdate {
	au.mutation.SetStatus(s)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AddonUpdate) SetNillableStatus(s *string) *AddonUpdate {
	if s != nil {
		au.SetStatus(*s)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AddonUpdate) SetUpdatedAt(t time.Time) *AddonUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUpdatedBy sets the "updated_by" field.
func (au *AddonUpdate) SetUpdatedBy(s string) *AddonUpdate {
	au.mutation.SetUpdatedBy(s)
	return au
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (au *AddonUpdate) SetNillableUpdatedBy(s *string) *AddonUpdate {
	if s != nil {
		au.SetUpdatedBy(*s)
	}
	return au
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (au *AddonUpdate) ClearUpdatedBy() *AddonUpdate {
	au.mutation.ClearUpdatedBy()
	return au
}

// SetName sets the "name" field.
func (au *AddonUpdate) SetName(s string) *AddonUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AddonUpdate) SetNillableName(s *string) *AddonUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *AddonUpdate) SetDescription(s string) *AddonUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AddonUpdate) SetNillableDescription(s *string) *AddonUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AddonUpdate) ClearDescription() *AddonUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetType sets the "type" field.
func (au *AddonUpdate) SetType(s string) *AddonUpdate {
	au.mutation.SetType(s)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *AddonUpdate) SetNillableType(s *string) *AddonUpdate {
	if s != nil {
		au.SetType(*s)
	}
	return au
}

// SetMetadata sets the "metadata" field.
func (au *AddonUpdate) SetMetadata(m map[string]interface{}) *AddonUpdate {
	au.mutation.SetMetadata(m)
	return au
}

// ClearMetadata clears the value of the "metadata" field.
func (au *AddonUpdate) ClearMetadata() *AddonUpdate {
	au.mutation.ClearMetadata()
	return au
}

// AddEntitlementIDs adds the "entitlements" edge to the Entitlement entity by IDs.
func (au *AddonUpdate) AddEntitlementIDs(ids ...string) *AddonUpdate {
	au.mutation.AddEntitlementIDs(ids...)
	return au
}

// AddEntitlements adds the "entitlements" edges to the Entitlement entity.
func (au *AddonUpdate) AddEntitlements(e ...*Entitlement) *AddonUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEntitlementIDs(ids...)
}

// Mutation returns the AddonMutation object of the builder.
func (au *AddonUpdate) Mutation() *AddonMutation {
	return au.mutation
}

// ClearEntitlements clears all "entitlements" edges to the Entitlement entity.
func (au *AddonUpdate) ClearEntitlements() *AddonUpdate {
	au.mutation.ClearEntitlements()
	return au
}

// RemoveEntitlementIDs removes the "entitlements" edge to Entitlement entities by IDs.
func (au *AddonUpdate) RemoveEntitlementIDs(ids ...string) *AddonUpdate {
	au.mutation.RemoveEntitlementIDs(ids...)
	return au
}

// RemoveEntitlements removes "entitlements" edges to Entitlement entities.
func (au *AddonUpdate) RemoveEntitlements(e ...*Entitlement) *AddonUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEntitlementIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AddonUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AddonUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AddonUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AddonUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AddonUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := addon.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AddonUpdate) check() error {
	if v, ok := au.mutation.Name(); ok {
		if err := addon.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Addon.name": %w`, err)}
		}
	}
	if v, ok := au.mutation.GetType(); ok {
		if err := addon.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Addon.type": %w`, err)}
		}
	}
	return nil
}

func (au *AddonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(addon.Table, addon.Columns, sqlgraph.NewFieldSpec(addon.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(addon.FieldStatus, field.TypeString, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(addon.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.CreatedByCleared() {
		_spec.ClearField(addon.FieldCreatedBy, field.TypeString)
	}
	if value, ok := au.mutation.UpdatedBy(); ok {
		_spec.SetField(addon.FieldUpdatedBy, field.TypeString, value)
	}
	if au.mutation.UpdatedByCleared() {
		_spec.ClearField(addon.FieldUpdatedBy, field.TypeString)
	}
	if au.mutation.EnvironmentIDCleared() {
		_spec.ClearField(addon.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(addon.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(addon.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(addon.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(addon.FieldType, field.TypeString, value)
	}
	if value, ok := au.mutation.Metadata(); ok {
		_spec.SetField(addon.FieldMetadata, field.TypeJSON, value)
	}
	if au.mutation.MetadataCleared() {
		_spec.ClearField(addon.FieldMetadata, field.TypeJSON)
	}
	if au.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   addon.EntitlementsTable,
			Columns: []string{addon.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEntitlementsIDs(); len(nodes) > 0 && !au.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   addon.EntitlementsTable,
			Columns: []string{addon.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EntitlementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   addon.EntitlementsTable,
			Columns: []string{addon.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AddonUpdateOne is the builder for updating a single Addon entity.
type AddonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddonMutation
}

// SetStatus sets the "status" field.
func (auo *AddonUpdateOne) SetStatus(s string) *AddonUpdateOne {
	auo.mutation.SetStatus(s)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AddonUpdateOne) SetNillableStatus(s *string) *AddonUpdateOne {
	if s != nil {
		auo.SetStatus(*s)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AddonUpdateOne) SetUpdatedAt(t time.Time) *AddonUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUpdatedBy sets the "updated_by" field.
func (auo *AddonUpdateOne) SetUpdatedBy(s string) *AddonUpdateOne {
	auo.mutation.SetUpdatedBy(s)
	return auo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auo *AddonUpdateOne) SetNillableUpdatedBy(s *string) *AddonUpdateOne {
	if s != nil {
		auo.SetUpdatedBy(*s)
	}
	return auo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (auo *AddonUpdateOne) ClearUpdatedBy() *AddonUpdateOne {
	auo.mutation.ClearUpdatedBy()
	return auo
}

// SetName sets the "name" field.
func (auo *AddonUpdateOne) SetName(s string) *AddonUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AddonUpdateOne) SetNillableName(s *string) *AddonUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *AddonUpdateOne) SetDescription(s string) *AddonUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AddonUpdateOne) SetNillableDescription(s *string) *AddonUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AddonUpdateOne) ClearDescription() *AddonUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetType sets the "type" field.
func (auo *AddonUpdateOne) SetType(s string) *AddonUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *AddonUpdateOne) SetNillableType(s *string) *AddonUpdateOne {
	if s != nil {
		auo.SetType(*s)
	}
	return auo
}

// SetMetadata sets the "metadata" field.
func (auo *AddonUpdateOne) SetMetadata(m map[string]interface{}) *AddonUpdateOne {
	auo.mutation.SetMetadata(m)
	return auo
}

// ClearMetadata clears the value of the "metadata" field.
func (auo *AddonUpdateOne) ClearMetadata() *AddonUpdateOne {
	auo.mutation.ClearMetadata()
	return auo
}

// AddEntitlementIDs adds the "entitlements" edge to the Entitlement entity by IDs.
func (auo *AddonUpdateOne) AddEntitlementIDs(ids ...string) *AddonUpdateOne {
	auo.mutation.AddEntitlementIDs(ids...)
	return auo
}

// AddEntitlements adds the "entitlements" edges to the Entitlement entity.
func (auo *AddonUpdateOne) AddEntitlements(e ...*Entitlement) *AddonUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEntitlementIDs(ids...)
}

// Mutation returns the AddonMutation object of the builder.
func (auo *AddonUpdateOne) Mutation() *AddonMutation {
	return auo.mutation
}

// ClearEntitlements clears all "entitlements" edges to the Entitlement entity.
func (auo *AddonUpdateOne) ClearEntitlements() *AddonUpdateOne {
	auo.mutation.ClearEntitlements()
	return auo
}

// RemoveEntitlementIDs removes the "entitlements" edge to Entitlement entities by IDs.
func (auo *AddonUpdateOne) RemoveEntitlementIDs(ids ...string) *AddonUpdateOne {
	auo.mutation.RemoveEntitlementIDs(ids...)
	return auo
}

// RemoveEntitlements removes "entitlements" edges to Entitlement entities.
func (auo *AddonUpdateOne) RemoveEntitlements(e ...*Entitlement) *AddonUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEntitlementIDs(ids...)
}

// Where appends a list predicates to the AddonUpdate builder.
func (auo *AddonUpdateOne) Where(ps ...predicate.Addon) *AddonUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AddonUpdateOne) Select(field string, fields ...string) *AddonUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Addon entity.
func (auo *AddonUpdateOne) Save(ctx context.Context) (*Addon, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AddonUpdateOne) SaveX(ctx context.Context) *Addon {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AddonUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AddonUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AddonUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := addon.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AddonUpdateOne) check() error {
	if v, ok := auo.mutation.Name(); ok {
		if err := addon.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Addon.name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.GetType(); ok {
		if err := addon.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Addon.type": %w`, err)}
		}
	}
	return nil
}

func (auo *AddonUpdateOne) sqlSave(ctx context.Context) (_node *Addon, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(addon.Table, addon.Columns, sqlgraph.NewFieldSpec(addon.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Addon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, addon.FieldID)
		for _, f := range fields {
			if !addon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != addon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(addon.FieldStatus, field.TypeString, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(addon.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.CreatedByCleared() {
		_spec.ClearField(addon.FieldCreatedBy, field.TypeString)
	}
	if value, ok := auo.mutation.UpdatedBy(); ok {
		_spec.SetField(addon.FieldUpdatedBy, field.TypeString, value)
	}
	if auo.mutation.UpdatedByCleared() {
		_spec.ClearField(addon.FieldUpdatedBy, field.TypeString)
	}
	if auo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(addon.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(addon.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(addon.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(addon.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(addon.FieldType, field.TypeString, value)
	}
	if value, ok := auo.mutation.Metadata(); ok {
		_spec.SetField(addon.FieldMetadata, field.TypeJSON, value)
	}
	if auo.mutation.MetadataCleared() {
		_spec.ClearField(addon.FieldMetadata, field.TypeJSON)
	}
	if auo.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   addon.EntitlementsTable,
			Columns: []string{addon.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEntitlementsIDs(); len(nodes) > 0 && !auo.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   addon.EntitlementsTable,
			Columns: []string{addon.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EntitlementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   addon.EntitlementsTable,
			Columns: []string{addon.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Addon{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
