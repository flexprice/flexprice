// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/alert"
)

// AlertCreate is the builder for creating a Alert entity.
type AlertCreate struct {
	config
	mutation *AlertMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (ac *AlertCreate) SetTenantID(s string) *AlertCreate {
	ac.mutation.SetTenantID(s)
	return ac
}

// SetStatus sets the "status" field.
func (ac *AlertCreate) SetStatus(s string) *AlertCreate {
	ac.mutation.SetStatus(s)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AlertCreate) SetNillableStatus(s *string) *AlertCreate {
	if s != nil {
		ac.SetStatus(*s)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AlertCreate) SetCreatedAt(t time.Time) *AlertCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AlertCreate) SetNillableCreatedAt(t *time.Time) *AlertCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AlertCreate) SetUpdatedAt(t time.Time) *AlertCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AlertCreate) SetNillableUpdatedAt(t *time.Time) *AlertCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetCreatedBy sets the "created_by" field.
func (ac *AlertCreate) SetCreatedBy(s string) *AlertCreate {
	ac.mutation.SetCreatedBy(s)
	return ac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ac *AlertCreate) SetNillableCreatedBy(s *string) *AlertCreate {
	if s != nil {
		ac.SetCreatedBy(*s)
	}
	return ac
}

// SetUpdatedBy sets the "updated_by" field.
func (ac *AlertCreate) SetUpdatedBy(s string) *AlertCreate {
	ac.mutation.SetUpdatedBy(s)
	return ac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ac *AlertCreate) SetNillableUpdatedBy(s *string) *AlertCreate {
	if s != nil {
		ac.SetUpdatedBy(*s)
	}
	return ac
}

// SetEnvironmentID sets the "environment_id" field.
func (ac *AlertCreate) SetEnvironmentID(s string) *AlertCreate {
	ac.mutation.SetEnvironmentID(s)
	return ac
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (ac *AlertCreate) SetNillableEnvironmentID(s *string) *AlertCreate {
	if s != nil {
		ac.SetEnvironmentID(*s)
	}
	return ac
}

// SetEntityType sets the "entity_type" field.
func (ac *AlertCreate) SetEntityType(s string) *AlertCreate {
	ac.mutation.SetEntityType(s)
	return ac
}

// SetEntityID sets the "entity_id" field.
func (ac *AlertCreate) SetEntityID(s string) *AlertCreate {
	ac.mutation.SetEntityID(s)
	return ac
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (ac *AlertCreate) SetNillableEntityID(s *string) *AlertCreate {
	if s != nil {
		ac.SetEntityID(*s)
	}
	return ac
}

// SetAlertMetric sets the "alert_metric" field.
func (ac *AlertCreate) SetAlertMetric(s string) *AlertCreate {
	ac.mutation.SetAlertMetric(s)
	return ac
}

// SetAlertState sets the "alert_state" field.
func (ac *AlertCreate) SetAlertState(s string) *AlertCreate {
	ac.mutation.SetAlertState(s)
	return ac
}

// SetNillableAlertState sets the "alert_state" field if the given value is not nil.
func (ac *AlertCreate) SetNillableAlertState(s *string) *AlertCreate {
	if s != nil {
		ac.SetAlertState(*s)
	}
	return ac
}

// SetAlertInfo sets the "alert_info" field.
func (ac *AlertCreate) SetAlertInfo(m map[string]interface{}) *AlertCreate {
	ac.mutation.SetAlertInfo(m)
	return ac
}

// SetID sets the "id" field.
func (ac *AlertCreate) SetID(s string) *AlertCreate {
	ac.mutation.SetID(s)
	return ac
}

// Mutation returns the AlertMutation object of the builder.
func (ac *AlertCreate) Mutation() *AlertMutation {
	return ac.mutation
}

// Save creates the Alert in the database.
func (ac *AlertCreate) Save(ctx context.Context) (*Alert, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AlertCreate) SaveX(ctx context.Context) *Alert {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AlertCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AlertCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AlertCreate) defaults() {
	if _, ok := ac.mutation.Status(); !ok {
		v := alert.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := alert.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := alert.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.EnvironmentID(); !ok {
		v := alert.DefaultEnvironmentID
		ac.mutation.SetEnvironmentID(v)
	}
	if _, ok := ac.mutation.AlertState(); !ok {
		v := alert.DefaultAlertState
		ac.mutation.SetAlertState(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AlertCreate) check() error {
	if _, ok := ac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Alert.tenant_id"`)}
	}
	if v, ok := ac.mutation.TenantID(); ok {
		if err := alert.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Alert.tenant_id": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Alert.status"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Alert.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Alert.updated_at"`)}
	}
	if _, ok := ac.mutation.EntityType(); !ok {
		return &ValidationError{Name: "entity_type", err: errors.New(`ent: missing required field "Alert.entity_type"`)}
	}
	if v, ok := ac.mutation.EntityType(); ok {
		if err := alert.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "Alert.entity_type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.AlertMetric(); !ok {
		return &ValidationError{Name: "alert_metric", err: errors.New(`ent: missing required field "Alert.alert_metric"`)}
	}
	if v, ok := ac.mutation.AlertMetric(); ok {
		if err := alert.AlertMetricValidator(v); err != nil {
			return &ValidationError{Name: "alert_metric", err: fmt.Errorf(`ent: validator failed for field "Alert.alert_metric": %w`, err)}
		}
	}
	if _, ok := ac.mutation.AlertState(); !ok {
		return &ValidationError{Name: "alert_state", err: errors.New(`ent: missing required field "Alert.alert_state"`)}
	}
	if v, ok := ac.mutation.AlertState(); ok {
		if err := alert.AlertStateValidator(v); err != nil {
			return &ValidationError{Name: "alert_state", err: fmt.Errorf(`ent: validator failed for field "Alert.alert_state": %w`, err)}
		}
	}
	return nil
}

func (ac *AlertCreate) sqlSave(ctx context.Context) (*Alert, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Alert.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AlertCreate) createSpec() (*Alert, *sqlgraph.CreateSpec) {
	var (
		_node = &Alert{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(alert.Table, sqlgraph.NewFieldSpec(alert.FieldID, field.TypeString))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.TenantID(); ok {
		_spec.SetField(alert.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(alert.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(alert.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(alert.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.CreatedBy(); ok {
		_spec.SetField(alert.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ac.mutation.UpdatedBy(); ok {
		_spec.SetField(alert.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ac.mutation.EnvironmentID(); ok {
		_spec.SetField(alert.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := ac.mutation.EntityType(); ok {
		_spec.SetField(alert.FieldEntityType, field.TypeString, value)
		_node.EntityType = value
	}
	if value, ok := ac.mutation.EntityID(); ok {
		_spec.SetField(alert.FieldEntityID, field.TypeString, value)
		_node.EntityID = &value
	}
	if value, ok := ac.mutation.AlertMetric(); ok {
		_spec.SetField(alert.FieldAlertMetric, field.TypeString, value)
		_node.AlertMetric = value
	}
	if value, ok := ac.mutation.AlertState(); ok {
		_spec.SetField(alert.FieldAlertState, field.TypeString, value)
		_node.AlertState = value
	}
	if value, ok := ac.mutation.AlertInfo(); ok {
		_spec.SetField(alert.FieldAlertInfo, field.TypeJSON, value)
		_node.AlertInfo = value
	}
	return _node, _spec
}

// AlertCreateBulk is the builder for creating many Alert entities in bulk.
type AlertCreateBulk struct {
	config
	err      error
	builders []*AlertCreate
}

// Save creates the Alert entities in the database.
func (acb *AlertCreateBulk) Save(ctx context.Context) ([]*Alert, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Alert, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlertMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AlertCreateBulk) SaveX(ctx context.Context) []*Alert {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AlertCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AlertCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
