// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/alertlogs"
	"github.com/flexprice/flexprice/internal/types"
)

// AlertLogs is the model entity for the AlertLogs schema.
type AlertLogs struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// EntityType holds the value of the "entity_type" field.
	EntityType string `json:"entity_type,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID string `json:"entity_id,omitempty"`
	// ParentEntityType holds the value of the "parent_entity_type" field.
	ParentEntityType *string `json:"parent_entity_type,omitempty"`
	// ParentEntityID holds the value of the "parent_entity_id" field.
	ParentEntityID *string `json:"parent_entity_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID *string `json:"customer_id,omitempty"`
	// AlertType holds the value of the "alert_type" field.
	AlertType string `json:"alert_type,omitempty"`
	// AlertStatus holds the value of the "alert_status" field.
	AlertStatus string `json:"alert_status,omitempty"`
	// AlertInfo holds the value of the "alert_info" field.
	AlertInfo    types.AlertInfo `json:"alert_info,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlertLogs) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case alertlogs.FieldAlertInfo:
			values[i] = new([]byte)
		case alertlogs.FieldID, alertlogs.FieldTenantID, alertlogs.FieldStatus, alertlogs.FieldCreatedBy, alertlogs.FieldUpdatedBy, alertlogs.FieldEnvironmentID, alertlogs.FieldEntityType, alertlogs.FieldEntityID, alertlogs.FieldParentEntityType, alertlogs.FieldParentEntityID, alertlogs.FieldCustomerID, alertlogs.FieldAlertType, alertlogs.FieldAlertStatus:
			values[i] = new(sql.NullString)
		case alertlogs.FieldCreatedAt, alertlogs.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlertLogs fields.
func (al *AlertLogs) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case alertlogs.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				al.ID = value.String
			}
		case alertlogs.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				al.TenantID = value.String
			}
		case alertlogs.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				al.Status = value.String
			}
		case alertlogs.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				al.CreatedAt = value.Time
			}
		case alertlogs.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				al.UpdatedAt = value.Time
			}
		case alertlogs.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				al.CreatedBy = value.String
			}
		case alertlogs.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				al.UpdatedBy = value.String
			}
		case alertlogs.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				al.EnvironmentID = value.String
			}
		case alertlogs.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				al.EntityType = value.String
			}
		case alertlogs.FieldEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				al.EntityID = value.String
			}
		case alertlogs.FieldParentEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_entity_type", values[i])
			} else if value.Valid {
				al.ParentEntityType = new(string)
				*al.ParentEntityType = value.String
			}
		case alertlogs.FieldParentEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_entity_id", values[i])
			} else if value.Valid {
				al.ParentEntityID = new(string)
				*al.ParentEntityID = value.String
			}
		case alertlogs.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				al.CustomerID = new(string)
				*al.CustomerID = value.String
			}
		case alertlogs.FieldAlertType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alert_type", values[i])
			} else if value.Valid {
				al.AlertType = value.String
			}
		case alertlogs.FieldAlertStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alert_status", values[i])
			} else if value.Valid {
				al.AlertStatus = value.String
			}
		case alertlogs.FieldAlertInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field alert_info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &al.AlertInfo); err != nil {
					return fmt.Errorf("unmarshal field alert_info: %w", err)
				}
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AlertLogs.
// This includes values selected through modifiers, order, etc.
func (al *AlertLogs) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// Update returns a builder for updating this AlertLogs.
// Note that you need to call AlertLogs.Unwrap() before calling this method if this AlertLogs
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AlertLogs) Update() *AlertLogsUpdateOne {
	return NewAlertLogsClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AlertLogs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AlertLogs) Unwrap() *AlertLogs {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlertLogs is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AlertLogs) String() string {
	var builder strings.Builder
	builder.WriteString("AlertLogs(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(al.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(al.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(al.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(al.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(al.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(al.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(al.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(al.EntityType)
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(al.EntityID)
	builder.WriteString(", ")
	if v := al.ParentEntityType; v != nil {
		builder.WriteString("parent_entity_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := al.ParentEntityID; v != nil {
		builder.WriteString("parent_entity_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := al.CustomerID; v != nil {
		builder.WriteString("customer_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("alert_type=")
	builder.WriteString(al.AlertType)
	builder.WriteString(", ")
	builder.WriteString("alert_status=")
	builder.WriteString(al.AlertStatus)
	builder.WriteString(", ")
	builder.WriteString("alert_info=")
	builder.WriteString(fmt.Sprintf("%v", al.AlertInfo))
	builder.WriteByte(')')
	return builder.String()
}

// AlertLogsSlice is a parsable slice of AlertLogs.
type AlertLogsSlice []*AlertLogs
