// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/alertlogs"
	"github.com/flexprice/flexprice/internal/types"
)

// AlertLogsCreate is the builder for creating a AlertLogs entity.
type AlertLogsCreate struct {
	config
	mutation *AlertLogsMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (alc *AlertLogsCreate) SetTenantID(s string) *AlertLogsCreate {
	alc.mutation.SetTenantID(s)
	return alc
}

// SetStatus sets the "status" field.
func (alc *AlertLogsCreate) SetStatus(s string) *AlertLogsCreate {
	alc.mutation.SetStatus(s)
	return alc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (alc *AlertLogsCreate) SetNillableStatus(s *string) *AlertLogsCreate {
	if s != nil {
		alc.SetStatus(*s)
	}
	return alc
}

// SetCreatedAt sets the "created_at" field.
func (alc *AlertLogsCreate) SetCreatedAt(t time.Time) *AlertLogsCreate {
	alc.mutation.SetCreatedAt(t)
	return alc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alc *AlertLogsCreate) SetNillableCreatedAt(t *time.Time) *AlertLogsCreate {
	if t != nil {
		alc.SetCreatedAt(*t)
	}
	return alc
}

// SetUpdatedAt sets the "updated_at" field.
func (alc *AlertLogsCreate) SetUpdatedAt(t time.Time) *AlertLogsCreate {
	alc.mutation.SetUpdatedAt(t)
	return alc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (alc *AlertLogsCreate) SetNillableUpdatedAt(t *time.Time) *AlertLogsCreate {
	if t != nil {
		alc.SetUpdatedAt(*t)
	}
	return alc
}

// SetCreatedBy sets the "created_by" field.
func (alc *AlertLogsCreate) SetCreatedBy(s string) *AlertLogsCreate {
	alc.mutation.SetCreatedBy(s)
	return alc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (alc *AlertLogsCreate) SetNillableCreatedBy(s *string) *AlertLogsCreate {
	if s != nil {
		alc.SetCreatedBy(*s)
	}
	return alc
}

// SetUpdatedBy sets the "updated_by" field.
func (alc *AlertLogsCreate) SetUpdatedBy(s string) *AlertLogsCreate {
	alc.mutation.SetUpdatedBy(s)
	return alc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (alc *AlertLogsCreate) SetNillableUpdatedBy(s *string) *AlertLogsCreate {
	if s != nil {
		alc.SetUpdatedBy(*s)
	}
	return alc
}

// SetEnvironmentID sets the "environment_id" field.
func (alc *AlertLogsCreate) SetEnvironmentID(s string) *AlertLogsCreate {
	alc.mutation.SetEnvironmentID(s)
	return alc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (alc *AlertLogsCreate) SetNillableEnvironmentID(s *string) *AlertLogsCreate {
	if s != nil {
		alc.SetEnvironmentID(*s)
	}
	return alc
}

// SetEntityType sets the "entity_type" field.
func (alc *AlertLogsCreate) SetEntityType(s string) *AlertLogsCreate {
	alc.mutation.SetEntityType(s)
	return alc
}

// SetEntityID sets the "entity_id" field.
func (alc *AlertLogsCreate) SetEntityID(s string) *AlertLogsCreate {
	alc.mutation.SetEntityID(s)
	return alc
}

// SetParentEntityType sets the "parent_entity_type" field.
func (alc *AlertLogsCreate) SetParentEntityType(s string) *AlertLogsCreate {
	alc.mutation.SetParentEntityType(s)
	return alc
}

// SetNillableParentEntityType sets the "parent_entity_type" field if the given value is not nil.
func (alc *AlertLogsCreate) SetNillableParentEntityType(s *string) *AlertLogsCreate {
	if s != nil {
		alc.SetParentEntityType(*s)
	}
	return alc
}

// SetParentEntityID sets the "parent_entity_id" field.
func (alc *AlertLogsCreate) SetParentEntityID(s string) *AlertLogsCreate {
	alc.mutation.SetParentEntityID(s)
	return alc
}

// SetNillableParentEntityID sets the "parent_entity_id" field if the given value is not nil.
func (alc *AlertLogsCreate) SetNillableParentEntityID(s *string) *AlertLogsCreate {
	if s != nil {
		alc.SetParentEntityID(*s)
	}
	return alc
}

// SetCustomerID sets the "customer_id" field.
func (alc *AlertLogsCreate) SetCustomerID(s string) *AlertLogsCreate {
	alc.mutation.SetCustomerID(s)
	return alc
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (alc *AlertLogsCreate) SetNillableCustomerID(s *string) *AlertLogsCreate {
	if s != nil {
		alc.SetCustomerID(*s)
	}
	return alc
}

// SetAlertType sets the "alert_type" field.
func (alc *AlertLogsCreate) SetAlertType(s string) *AlertLogsCreate {
	alc.mutation.SetAlertType(s)
	return alc
}

// SetAlertStatus sets the "alert_status" field.
func (alc *AlertLogsCreate) SetAlertStatus(s string) *AlertLogsCreate {
	alc.mutation.SetAlertStatus(s)
	return alc
}

// SetAlertInfo sets the "alert_info" field.
func (alc *AlertLogsCreate) SetAlertInfo(ti types.AlertInfo) *AlertLogsCreate {
	alc.mutation.SetAlertInfo(ti)
	return alc
}

// SetID sets the "id" field.
func (alc *AlertLogsCreate) SetID(s string) *AlertLogsCreate {
	alc.mutation.SetID(s)
	return alc
}

// Mutation returns the AlertLogsMutation object of the builder.
func (alc *AlertLogsCreate) Mutation() *AlertLogsMutation {
	return alc.mutation
}

// Save creates the AlertLogs in the database.
func (alc *AlertLogsCreate) Save(ctx context.Context) (*AlertLogs, error) {
	alc.defaults()
	return withHooks(ctx, alc.sqlSave, alc.mutation, alc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (alc *AlertLogsCreate) SaveX(ctx context.Context) *AlertLogs {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *AlertLogsCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *AlertLogsCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *AlertLogsCreate) defaults() {
	if _, ok := alc.mutation.Status(); !ok {
		v := alertlogs.DefaultStatus
		alc.mutation.SetStatus(v)
	}
	if _, ok := alc.mutation.CreatedAt(); !ok {
		v := alertlogs.DefaultCreatedAt()
		alc.mutation.SetCreatedAt(v)
	}
	if _, ok := alc.mutation.UpdatedAt(); !ok {
		v := alertlogs.DefaultUpdatedAt()
		alc.mutation.SetUpdatedAt(v)
	}
	if _, ok := alc.mutation.EnvironmentID(); !ok {
		v := alertlogs.DefaultEnvironmentID
		alc.mutation.SetEnvironmentID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *AlertLogsCreate) check() error {
	if _, ok := alc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "AlertLogs.tenant_id"`)}
	}
	if v, ok := alc.mutation.TenantID(); ok {
		if err := alertlogs.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "AlertLogs.tenant_id": %w`, err)}
		}
	}
	if _, ok := alc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "AlertLogs.status"`)}
	}
	if _, ok := alc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AlertLogs.created_at"`)}
	}
	if _, ok := alc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AlertLogs.updated_at"`)}
	}
	if _, ok := alc.mutation.EntityType(); !ok {
		return &ValidationError{Name: "entity_type", err: errors.New(`ent: missing required field "AlertLogs.entity_type"`)}
	}
	if v, ok := alc.mutation.EntityType(); ok {
		if err := alertlogs.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "AlertLogs.entity_type": %w`, err)}
		}
	}
	if _, ok := alc.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "AlertLogs.entity_id"`)}
	}
	if v, ok := alc.mutation.EntityID(); ok {
		if err := alertlogs.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "AlertLogs.entity_id": %w`, err)}
		}
	}
	if _, ok := alc.mutation.AlertType(); !ok {
		return &ValidationError{Name: "alert_type", err: errors.New(`ent: missing required field "AlertLogs.alert_type"`)}
	}
	if v, ok := alc.mutation.AlertType(); ok {
		if err := alertlogs.AlertTypeValidator(v); err != nil {
			return &ValidationError{Name: "alert_type", err: fmt.Errorf(`ent: validator failed for field "AlertLogs.alert_type": %w`, err)}
		}
	}
	if _, ok := alc.mutation.AlertStatus(); !ok {
		return &ValidationError{Name: "alert_status", err: errors.New(`ent: missing required field "AlertLogs.alert_status"`)}
	}
	if v, ok := alc.mutation.AlertStatus(); ok {
		if err := alertlogs.AlertStatusValidator(v); err != nil {
			return &ValidationError{Name: "alert_status", err: fmt.Errorf(`ent: validator failed for field "AlertLogs.alert_status": %w`, err)}
		}
	}
	if _, ok := alc.mutation.AlertInfo(); !ok {
		return &ValidationError{Name: "alert_info", err: errors.New(`ent: missing required field "AlertLogs.alert_info"`)}
	}
	return nil
}

func (alc *AlertLogsCreate) sqlSave(ctx context.Context) (*AlertLogs, error) {
	if err := alc.check(); err != nil {
		return nil, err
	}
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AlertLogs.ID type: %T", _spec.ID.Value)
		}
	}
	alc.mutation.id = &_node.ID
	alc.mutation.done = true
	return _node, nil
}

func (alc *AlertLogsCreate) createSpec() (*AlertLogs, *sqlgraph.CreateSpec) {
	var (
		_node = &AlertLogs{config: alc.config}
		_spec = sqlgraph.NewCreateSpec(alertlogs.Table, sqlgraph.NewFieldSpec(alertlogs.FieldID, field.TypeString))
	)
	if id, ok := alc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := alc.mutation.TenantID(); ok {
		_spec.SetField(alertlogs.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := alc.mutation.Status(); ok {
		_spec.SetField(alertlogs.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := alc.mutation.CreatedAt(); ok {
		_spec.SetField(alertlogs.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := alc.mutation.UpdatedAt(); ok {
		_spec.SetField(alertlogs.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := alc.mutation.CreatedBy(); ok {
		_spec.SetField(alertlogs.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := alc.mutation.UpdatedBy(); ok {
		_spec.SetField(alertlogs.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := alc.mutation.EnvironmentID(); ok {
		_spec.SetField(alertlogs.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := alc.mutation.EntityType(); ok {
		_spec.SetField(alertlogs.FieldEntityType, field.TypeString, value)
		_node.EntityType = value
	}
	if value, ok := alc.mutation.EntityID(); ok {
		_spec.SetField(alertlogs.FieldEntityID, field.TypeString, value)
		_node.EntityID = value
	}
	if value, ok := alc.mutation.ParentEntityType(); ok {
		_spec.SetField(alertlogs.FieldParentEntityType, field.TypeString, value)
		_node.ParentEntityType = &value
	}
	if value, ok := alc.mutation.ParentEntityID(); ok {
		_spec.SetField(alertlogs.FieldParentEntityID, field.TypeString, value)
		_node.ParentEntityID = &value
	}
	if value, ok := alc.mutation.CustomerID(); ok {
		_spec.SetField(alertlogs.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = &value
	}
	if value, ok := alc.mutation.AlertType(); ok {
		_spec.SetField(alertlogs.FieldAlertType, field.TypeString, value)
		_node.AlertType = value
	}
	if value, ok := alc.mutation.AlertStatus(); ok {
		_spec.SetField(alertlogs.FieldAlertStatus, field.TypeString, value)
		_node.AlertStatus = value
	}
	if value, ok := alc.mutation.AlertInfo(); ok {
		_spec.SetField(alertlogs.FieldAlertInfo, field.TypeJSON, value)
		_node.AlertInfo = value
	}
	return _node, _spec
}

// AlertLogsCreateBulk is the builder for creating many AlertLogs entities in bulk.
type AlertLogsCreateBulk struct {
	config
	err      error
	builders []*AlertLogsCreate
}

// Save creates the AlertLogs entities in the database.
func (alcb *AlertLogsCreateBulk) Save(ctx context.Context) ([]*AlertLogs, error) {
	if alcb.err != nil {
		return nil, alcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*AlertLogs, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlertLogsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *AlertLogsCreateBulk) SaveX(ctx context.Context) []*AlertLogs {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *AlertLogsCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *AlertLogsCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}
