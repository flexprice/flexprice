// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/authorizationaudit"
)

// AuthorizationAudit is the model entity for the AuthorizationAudit schema.
type AuthorizationAudit struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Resource holds the value of the "resource" field.
	Resource string `json:"resource,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Allowed holds the value of the "allowed" field.
	Allowed bool `json:"allowed,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent    string `json:"user_agent,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthorizationAudit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authorizationaudit.FieldAllowed:
			values[i] = new(sql.NullBool)
		case authorizationaudit.FieldID, authorizationaudit.FieldTenantID, authorizationaudit.FieldStatus, authorizationaudit.FieldCreatedBy, authorizationaudit.FieldUpdatedBy, authorizationaudit.FieldUserID, authorizationaudit.FieldResource, authorizationaudit.FieldAction, authorizationaudit.FieldReason, authorizationaudit.FieldIPAddress, authorizationaudit.FieldUserAgent:
			values[i] = new(sql.NullString)
		case authorizationaudit.FieldCreatedAt, authorizationaudit.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthorizationAudit fields.
func (aa *AuthorizationAudit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authorizationaudit.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				aa.ID = value.String
			}
		case authorizationaudit.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				aa.TenantID = value.String
			}
		case authorizationaudit.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				aa.Status = value.String
			}
		case authorizationaudit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aa.CreatedAt = value.Time
			}
		case authorizationaudit.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aa.UpdatedAt = value.Time
			}
		case authorizationaudit.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				aa.CreatedBy = value.String
			}
		case authorizationaudit.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				aa.UpdatedBy = value.String
			}
		case authorizationaudit.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				aa.UserID = value.String
			}
		case authorizationaudit.FieldResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource", values[i])
			} else if value.Valid {
				aa.Resource = value.String
			}
		case authorizationaudit.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				aa.Action = value.String
			}
		case authorizationaudit.FieldAllowed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allowed", values[i])
			} else if value.Valid {
				aa.Allowed = value.Bool
			}
		case authorizationaudit.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				aa.Reason = value.String
			}
		case authorizationaudit.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				aa.IPAddress = value.String
			}
		case authorizationaudit.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				aa.UserAgent = value.String
			}
		default:
			aa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthorizationAudit.
// This includes values selected through modifiers, order, etc.
func (aa *AuthorizationAudit) Value(name string) (ent.Value, error) {
	return aa.selectValues.Get(name)
}

// Update returns a builder for updating this AuthorizationAudit.
// Note that you need to call AuthorizationAudit.Unwrap() before calling this method if this AuthorizationAudit
// was returned from a transaction, and the transaction was committed or rolled back.
func (aa *AuthorizationAudit) Update() *AuthorizationAuditUpdateOne {
	return NewAuthorizationAuditClient(aa.config).UpdateOne(aa)
}

// Unwrap unwraps the AuthorizationAudit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aa *AuthorizationAudit) Unwrap() *AuthorizationAudit {
	_tx, ok := aa.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthorizationAudit is not a transactional entity")
	}
	aa.config.driver = _tx.drv
	return aa
}

// String implements the fmt.Stringer.
func (aa *AuthorizationAudit) String() string {
	var builder strings.Builder
	builder.WriteString("AuthorizationAudit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aa.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(aa.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(aa.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(aa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(aa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(aa.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(aa.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(aa.UserID)
	builder.WriteString(", ")
	builder.WriteString("resource=")
	builder.WriteString(aa.Resource)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(aa.Action)
	builder.WriteString(", ")
	builder.WriteString("allowed=")
	builder.WriteString(fmt.Sprintf("%v", aa.Allowed))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(aa.Reason)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(aa.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(aa.UserAgent)
	builder.WriteByte(')')
	return builder.String()
}

// AuthorizationAudits is a parsable slice of AuthorizationAudit.
type AuthorizationAudits []*AuthorizationAudit
