// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/authorizationaudit"
)

// AuthorizationAuditCreate is the builder for creating a AuthorizationAudit entity.
type AuthorizationAuditCreate struct {
	config
	mutation *AuthorizationAuditMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (aac *AuthorizationAuditCreate) SetTenantID(s string) *AuthorizationAuditCreate {
	aac.mutation.SetTenantID(s)
	return aac
}

// SetStatus sets the "status" field.
func (aac *AuthorizationAuditCreate) SetStatus(s string) *AuthorizationAuditCreate {
	aac.mutation.SetStatus(s)
	return aac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aac *AuthorizationAuditCreate) SetNillableStatus(s *string) *AuthorizationAuditCreate {
	if s != nil {
		aac.SetStatus(*s)
	}
	return aac
}

// SetCreatedAt sets the "created_at" field.
func (aac *AuthorizationAuditCreate) SetCreatedAt(t time.Time) *AuthorizationAuditCreate {
	aac.mutation.SetCreatedAt(t)
	return aac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aac *AuthorizationAuditCreate) SetNillableCreatedAt(t *time.Time) *AuthorizationAuditCreate {
	if t != nil {
		aac.SetCreatedAt(*t)
	}
	return aac
}

// SetUpdatedAt sets the "updated_at" field.
func (aac *AuthorizationAuditCreate) SetUpdatedAt(t time.Time) *AuthorizationAuditCreate {
	aac.mutation.SetUpdatedAt(t)
	return aac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aac *AuthorizationAuditCreate) SetNillableUpdatedAt(t *time.Time) *AuthorizationAuditCreate {
	if t != nil {
		aac.SetUpdatedAt(*t)
	}
	return aac
}

// SetCreatedBy sets the "created_by" field.
func (aac *AuthorizationAuditCreate) SetCreatedBy(s string) *AuthorizationAuditCreate {
	aac.mutation.SetCreatedBy(s)
	return aac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (aac *AuthorizationAuditCreate) SetNillableCreatedBy(s *string) *AuthorizationAuditCreate {
	if s != nil {
		aac.SetCreatedBy(*s)
	}
	return aac
}

// SetUpdatedBy sets the "updated_by" field.
func (aac *AuthorizationAuditCreate) SetUpdatedBy(s string) *AuthorizationAuditCreate {
	aac.mutation.SetUpdatedBy(s)
	return aac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aac *AuthorizationAuditCreate) SetNillableUpdatedBy(s *string) *AuthorizationAuditCreate {
	if s != nil {
		aac.SetUpdatedBy(*s)
	}
	return aac
}

// SetUserID sets the "user_id" field.
func (aac *AuthorizationAuditCreate) SetUserID(s string) *AuthorizationAuditCreate {
	aac.mutation.SetUserID(s)
	return aac
}

// SetResource sets the "resource" field.
func (aac *AuthorizationAuditCreate) SetResource(s string) *AuthorizationAuditCreate {
	aac.mutation.SetResource(s)
	return aac
}

// SetAction sets the "action" field.
func (aac *AuthorizationAuditCreate) SetAction(s string) *AuthorizationAuditCreate {
	aac.mutation.SetAction(s)
	return aac
}

// SetAllowed sets the "allowed" field.
func (aac *AuthorizationAuditCreate) SetAllowed(b bool) *AuthorizationAuditCreate {
	aac.mutation.SetAllowed(b)
	return aac
}

// SetNillableAllowed sets the "allowed" field if the given value is not nil.
func (aac *AuthorizationAuditCreate) SetNillableAllowed(b *bool) *AuthorizationAuditCreate {
	if b != nil {
		aac.SetAllowed(*b)
	}
	return aac
}

// SetReason sets the "reason" field.
func (aac *AuthorizationAuditCreate) SetReason(s string) *AuthorizationAuditCreate {
	aac.mutation.SetReason(s)
	return aac
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (aac *AuthorizationAuditCreate) SetNillableReason(s *string) *AuthorizationAuditCreate {
	if s != nil {
		aac.SetReason(*s)
	}
	return aac
}

// SetIPAddress sets the "ip_address" field.
func (aac *AuthorizationAuditCreate) SetIPAddress(s string) *AuthorizationAuditCreate {
	aac.mutation.SetIPAddress(s)
	return aac
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (aac *AuthorizationAuditCreate) SetNillableIPAddress(s *string) *AuthorizationAuditCreate {
	if s != nil {
		aac.SetIPAddress(*s)
	}
	return aac
}

// SetUserAgent sets the "user_agent" field.
func (aac *AuthorizationAuditCreate) SetUserAgent(s string) *AuthorizationAuditCreate {
	aac.mutation.SetUserAgent(s)
	return aac
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (aac *AuthorizationAuditCreate) SetNillableUserAgent(s *string) *AuthorizationAuditCreate {
	if s != nil {
		aac.SetUserAgent(*s)
	}
	return aac
}

// SetID sets the "id" field.
func (aac *AuthorizationAuditCreate) SetID(s string) *AuthorizationAuditCreate {
	aac.mutation.SetID(s)
	return aac
}

// Mutation returns the AuthorizationAuditMutation object of the builder.
func (aac *AuthorizationAuditCreate) Mutation() *AuthorizationAuditMutation {
	return aac.mutation
}

// Save creates the AuthorizationAudit in the database.
func (aac *AuthorizationAuditCreate) Save(ctx context.Context) (*AuthorizationAudit, error) {
	aac.defaults()
	return withHooks(ctx, aac.sqlSave, aac.mutation, aac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aac *AuthorizationAuditCreate) SaveX(ctx context.Context) *AuthorizationAudit {
	v, err := aac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aac *AuthorizationAuditCreate) Exec(ctx context.Context) error {
	_, err := aac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aac *AuthorizationAuditCreate) ExecX(ctx context.Context) {
	if err := aac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aac *AuthorizationAuditCreate) defaults() {
	if _, ok := aac.mutation.Status(); !ok {
		v := authorizationaudit.DefaultStatus
		aac.mutation.SetStatus(v)
	}
	if _, ok := aac.mutation.CreatedAt(); !ok {
		v := authorizationaudit.DefaultCreatedAt()
		aac.mutation.SetCreatedAt(v)
	}
	if _, ok := aac.mutation.UpdatedAt(); !ok {
		v := authorizationaudit.DefaultUpdatedAt()
		aac.mutation.SetUpdatedAt(v)
	}
	if _, ok := aac.mutation.Allowed(); !ok {
		v := authorizationaudit.DefaultAllowed
		aac.mutation.SetAllowed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aac *AuthorizationAuditCreate) check() error {
	if _, ok := aac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "AuthorizationAudit.tenant_id"`)}
	}
	if v, ok := aac.mutation.TenantID(); ok {
		if err := authorizationaudit.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "AuthorizationAudit.tenant_id": %w`, err)}
		}
	}
	if _, ok := aac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "AuthorizationAudit.status"`)}
	}
	if _, ok := aac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AuthorizationAudit.created_at"`)}
	}
	if _, ok := aac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AuthorizationAudit.updated_at"`)}
	}
	if _, ok := aac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AuthorizationAudit.user_id"`)}
	}
	if v, ok := aac.mutation.UserID(); ok {
		if err := authorizationaudit.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "AuthorizationAudit.user_id": %w`, err)}
		}
	}
	if _, ok := aac.mutation.Resource(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`ent: missing required field "AuthorizationAudit.resource"`)}
	}
	if v, ok := aac.mutation.Resource(); ok {
		if err := authorizationaudit.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: validator failed for field "AuthorizationAudit.resource": %w`, err)}
		}
	}
	if _, ok := aac.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "AuthorizationAudit.action"`)}
	}
	if v, ok := aac.mutation.Action(); ok {
		if err := authorizationaudit.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "AuthorizationAudit.action": %w`, err)}
		}
	}
	if _, ok := aac.mutation.Allowed(); !ok {
		return &ValidationError{Name: "allowed", err: errors.New(`ent: missing required field "AuthorizationAudit.allowed"`)}
	}
	return nil
}

func (aac *AuthorizationAuditCreate) sqlSave(ctx context.Context) (*AuthorizationAudit, error) {
	if err := aac.check(); err != nil {
		return nil, err
	}
	_node, _spec := aac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AuthorizationAudit.ID type: %T", _spec.ID.Value)
		}
	}
	aac.mutation.id = &_node.ID
	aac.mutation.done = true
	return _node, nil
}

func (aac *AuthorizationAuditCreate) createSpec() (*AuthorizationAudit, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthorizationAudit{config: aac.config}
		_spec = sqlgraph.NewCreateSpec(authorizationaudit.Table, sqlgraph.NewFieldSpec(authorizationaudit.FieldID, field.TypeString))
	)
	if id, ok := aac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aac.mutation.TenantID(); ok {
		_spec.SetField(authorizationaudit.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := aac.mutation.Status(); ok {
		_spec.SetField(authorizationaudit.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := aac.mutation.CreatedAt(); ok {
		_spec.SetField(authorizationaudit.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aac.mutation.UpdatedAt(); ok {
		_spec.SetField(authorizationaudit.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aac.mutation.CreatedBy(); ok {
		_spec.SetField(authorizationaudit.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := aac.mutation.UpdatedBy(); ok {
		_spec.SetField(authorizationaudit.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := aac.mutation.UserID(); ok {
		_spec.SetField(authorizationaudit.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := aac.mutation.Resource(); ok {
		_spec.SetField(authorizationaudit.FieldResource, field.TypeString, value)
		_node.Resource = value
	}
	if value, ok := aac.mutation.Action(); ok {
		_spec.SetField(authorizationaudit.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := aac.mutation.Allowed(); ok {
		_spec.SetField(authorizationaudit.FieldAllowed, field.TypeBool, value)
		_node.Allowed = value
	}
	if value, ok := aac.mutation.Reason(); ok {
		_spec.SetField(authorizationaudit.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := aac.mutation.IPAddress(); ok {
		_spec.SetField(authorizationaudit.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := aac.mutation.UserAgent(); ok {
		_spec.SetField(authorizationaudit.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	return _node, _spec
}

// AuthorizationAuditCreateBulk is the builder for creating many AuthorizationAudit entities in bulk.
type AuthorizationAuditCreateBulk struct {
	config
	err      error
	builders []*AuthorizationAuditCreate
}

// Save creates the AuthorizationAudit entities in the database.
func (aacb *AuthorizationAuditCreateBulk) Save(ctx context.Context) ([]*AuthorizationAudit, error) {
	if aacb.err != nil {
		return nil, aacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aacb.builders))
	nodes := make([]*AuthorizationAudit, len(aacb.builders))
	mutators := make([]Mutator, len(aacb.builders))
	for i := range aacb.builders {
		func(i int, root context.Context) {
			builder := aacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthorizationAuditMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aacb *AuthorizationAuditCreateBulk) SaveX(ctx context.Context) []*AuthorizationAudit {
	v, err := aacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aacb *AuthorizationAuditCreateBulk) Exec(ctx context.Context) error {
	_, err := aacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacb *AuthorizationAuditCreateBulk) ExecX(ctx context.Context) {
	if err := aacb.Exec(ctx); err != nil {
		panic(err)
	}
}
