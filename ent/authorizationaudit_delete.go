// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/authorizationaudit"
	"github.com/flexprice/flexprice/ent/predicate"
)

// AuthorizationAuditDelete is the builder for deleting a AuthorizationAudit entity.
type AuthorizationAuditDelete struct {
	config
	hooks    []Hook
	mutation *AuthorizationAuditMutation
}

// Where appends a list predicates to the AuthorizationAuditDelete builder.
func (aad *AuthorizationAuditDelete) Where(ps ...predicate.AuthorizationAudit) *AuthorizationAuditDelete {
	aad.mutation.Where(ps...)
	return aad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (aad *AuthorizationAuditDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, aad.sqlExec, aad.mutation, aad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (aad *AuthorizationAuditDelete) ExecX(ctx context.Context) int {
	n, err := aad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (aad *AuthorizationAuditDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(authorizationaudit.Table, sqlgraph.NewFieldSpec(authorizationaudit.FieldID, field.TypeString))
	if ps := aad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, aad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	aad.mutation.done = true
	return affected, err
}

// AuthorizationAuditDeleteOne is the builder for deleting a single AuthorizationAudit entity.
type AuthorizationAuditDeleteOne struct {
	aad *AuthorizationAuditDelete
}

// Where appends a list predicates to the AuthorizationAuditDelete builder.
func (aado *AuthorizationAuditDeleteOne) Where(ps ...predicate.AuthorizationAudit) *AuthorizationAuditDeleteOne {
	aado.aad.mutation.Where(ps...)
	return aado
}

// Exec executes the deletion query.
func (aado *AuthorizationAuditDeleteOne) Exec(ctx context.Context) error {
	n, err := aado.aad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{authorizationaudit.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (aado *AuthorizationAuditDeleteOne) ExecX(ctx context.Context) {
	if err := aado.Exec(ctx); err != nil {
		panic(err)
	}
}
