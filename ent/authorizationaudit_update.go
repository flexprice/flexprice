// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/authorizationaudit"
	"github.com/flexprice/flexprice/ent/predicate"
)

// AuthorizationAuditUpdate is the builder for updating AuthorizationAudit entities.
type AuthorizationAuditUpdate struct {
	config
	hooks    []Hook
	mutation *AuthorizationAuditMutation
}

// Where appends a list predicates to the AuthorizationAuditUpdate builder.
func (aau *AuthorizationAuditUpdate) Where(ps ...predicate.AuthorizationAudit) *AuthorizationAuditUpdate {
	aau.mutation.Where(ps...)
	return aau
}

// SetStatus sets the "status" field.
func (aau *AuthorizationAuditUpdate) SetStatus(s string) *AuthorizationAuditUpdate {
	aau.mutation.SetStatus(s)
	return aau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aau *AuthorizationAuditUpdate) SetNillableStatus(s *string) *AuthorizationAuditUpdate {
	if s != nil {
		aau.SetStatus(*s)
	}
	return aau
}

// SetUpdatedAt sets the "updated_at" field.
func (aau *AuthorizationAuditUpdate) SetUpdatedAt(t time.Time) *AuthorizationAuditUpdate {
	aau.mutation.SetUpdatedAt(t)
	return aau
}

// SetUpdatedBy sets the "updated_by" field.
func (aau *AuthorizationAuditUpdate) SetUpdatedBy(s string) *AuthorizationAuditUpdate {
	aau.mutation.SetUpdatedBy(s)
	return aau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aau *AuthorizationAuditUpdate) SetNillableUpdatedBy(s *string) *AuthorizationAuditUpdate {
	if s != nil {
		aau.SetUpdatedBy(*s)
	}
	return aau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (aau *AuthorizationAuditUpdate) ClearUpdatedBy() *AuthorizationAuditUpdate {
	aau.mutation.ClearUpdatedBy()
	return aau
}

// SetUserID sets the "user_id" field.
func (aau *AuthorizationAuditUpdate) SetUserID(s string) *AuthorizationAuditUpdate {
	aau.mutation.SetUserID(s)
	return aau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aau *AuthorizationAuditUpdate) SetNillableUserID(s *string) *AuthorizationAuditUpdate {
	if s != nil {
		aau.SetUserID(*s)
	}
	return aau
}

// SetResource sets the "resource" field.
func (aau *AuthorizationAuditUpdate) SetResource(s string) *AuthorizationAuditUpdate {
	aau.mutation.SetResource(s)
	return aau
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (aau *AuthorizationAuditUpdate) SetNillableResource(s *string) *AuthorizationAuditUpdate {
	if s != nil {
		aau.SetResource(*s)
	}
	return aau
}

// SetAction sets the "action" field.
func (aau *AuthorizationAuditUpdate) SetAction(s string) *AuthorizationAuditUpdate {
	aau.mutation.SetAction(s)
	return aau
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (aau *AuthorizationAuditUpdate) SetNillableAction(s *string) *AuthorizationAuditUpdate {
	if s != nil {
		aau.SetAction(*s)
	}
	return aau
}

// SetAllowed sets the "allowed" field.
func (aau *AuthorizationAuditUpdate) SetAllowed(b bool) *AuthorizationAuditUpdate {
	aau.mutation.SetAllowed(b)
	return aau
}

// SetNillableAllowed sets the "allowed" field if the given value is not nil.
func (aau *AuthorizationAuditUpdate) SetNillableAllowed(b *bool) *AuthorizationAuditUpdate {
	if b != nil {
		aau.SetAllowed(*b)
	}
	return aau
}

// SetReason sets the "reason" field.
func (aau *AuthorizationAuditUpdate) SetReason(s string) *AuthorizationAuditUpdate {
	aau.mutation.SetReason(s)
	return aau
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (aau *AuthorizationAuditUpdate) SetNillableReason(s *string) *AuthorizationAuditUpdate {
	if s != nil {
		aau.SetReason(*s)
	}
	return aau
}

// ClearReason clears the value of the "reason" field.
func (aau *AuthorizationAuditUpdate) ClearReason() *AuthorizationAuditUpdate {
	aau.mutation.ClearReason()
	return aau
}

// SetIPAddress sets the "ip_address" field.
func (aau *AuthorizationAuditUpdate) SetIPAddress(s string) *AuthorizationAuditUpdate {
	aau.mutation.SetIPAddress(s)
	return aau
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (aau *AuthorizationAuditUpdate) SetNillableIPAddress(s *string) *AuthorizationAuditUpdate {
	if s != nil {
		aau.SetIPAddress(*s)
	}
	return aau
}

// ClearIPAddress clears the value of the "ip_address" field.
func (aau *AuthorizationAuditUpdate) ClearIPAddress() *AuthorizationAuditUpdate {
	aau.mutation.ClearIPAddress()
	return aau
}

// SetUserAgent sets the "user_agent" field.
func (aau *AuthorizationAuditUpdate) SetUserAgent(s string) *AuthorizationAuditUpdate {
	aau.mutation.SetUserAgent(s)
	return aau
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (aau *AuthorizationAuditUpdate) SetNillableUserAgent(s *string) *AuthorizationAuditUpdate {
	if s != nil {
		aau.SetUserAgent(*s)
	}
	return aau
}

// ClearUserAgent clears the value of the "user_agent" field.
func (aau *AuthorizationAuditUpdate) ClearUserAgent() *AuthorizationAuditUpdate {
	aau.mutation.ClearUserAgent()
	return aau
}

// Mutation returns the AuthorizationAuditMutation object of the builder.
func (aau *AuthorizationAuditUpdate) Mutation() *AuthorizationAuditMutation {
	return aau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aau *AuthorizationAuditUpdate) Save(ctx context.Context) (int, error) {
	aau.defaults()
	return withHooks(ctx, aau.sqlSave, aau.mutation, aau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aau *AuthorizationAuditUpdate) SaveX(ctx context.Context) int {
	affected, err := aau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aau *AuthorizationAuditUpdate) Exec(ctx context.Context) error {
	_, err := aau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aau *AuthorizationAuditUpdate) ExecX(ctx context.Context) {
	if err := aau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aau *AuthorizationAuditUpdate) defaults() {
	if _, ok := aau.mutation.UpdatedAt(); !ok {
		v := authorizationaudit.UpdateDefaultUpdatedAt()
		aau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aau *AuthorizationAuditUpdate) check() error {
	if v, ok := aau.mutation.UserID(); ok {
		if err := authorizationaudit.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "AuthorizationAudit.user_id": %w`, err)}
		}
	}
	if v, ok := aau.mutation.Resource(); ok {
		if err := authorizationaudit.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: validator failed for field "AuthorizationAudit.resource": %w`, err)}
		}
	}
	if v, ok := aau.mutation.Action(); ok {
		if err := authorizationaudit.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "AuthorizationAudit.action": %w`, err)}
		}
	}
	return nil
}

func (aau *AuthorizationAuditUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(authorizationaudit.Table, authorizationaudit.Columns, sqlgraph.NewFieldSpec(authorizationaudit.FieldID, field.TypeString))
	if ps := aau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aau.mutation.Status(); ok {
		_spec.SetField(authorizationaudit.FieldStatus, field.TypeString, value)
	}
	if value, ok := aau.mutation.UpdatedAt(); ok {
		_spec.SetField(authorizationaudit.FieldUpdatedAt, field.TypeTime, value)
	}
	if aau.mutation.CreatedByCleared() {
		_spec.ClearField(authorizationaudit.FieldCreatedBy, field.TypeString)
	}
	if value, ok := aau.mutation.UpdatedBy(); ok {
		_spec.SetField(authorizationaudit.FieldUpdatedBy, field.TypeString, value)
	}
	if aau.mutation.UpdatedByCleared() {
		_spec.ClearField(authorizationaudit.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := aau.mutation.UserID(); ok {
		_spec.SetField(authorizationaudit.FieldUserID, field.TypeString, value)
	}
	if value, ok := aau.mutation.Resource(); ok {
		_spec.SetField(authorizationaudit.FieldResource, field.TypeString, value)
	}
	if value, ok := aau.mutation.Action(); ok {
		_spec.SetField(authorizationaudit.FieldAction, field.TypeString, value)
	}
	if value, ok := aau.mutation.Allowed(); ok {
		_spec.SetField(authorizationaudit.FieldAllowed, field.TypeBool, value)
	}
	if value, ok := aau.mutation.Reason(); ok {
		_spec.SetField(authorizationaudit.FieldReason, field.TypeString, value)
	}
	if aau.mutation.ReasonCleared() {
		_spec.ClearField(authorizationaudit.FieldReason, field.TypeString)
	}
	if value, ok := aau.mutation.IPAddress(); ok {
		_spec.SetField(authorizationaudit.FieldIPAddress, field.TypeString, value)
	}
	if aau.mutation.IPAddressCleared() {
		_spec.ClearField(authorizationaudit.FieldIPAddress, field.TypeString)
	}
	if value, ok := aau.mutation.UserAgent(); ok {
		_spec.SetField(authorizationaudit.FieldUserAgent, field.TypeString, value)
	}
	if aau.mutation.UserAgentCleared() {
		_spec.ClearField(authorizationaudit.FieldUserAgent, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorizationaudit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aau.mutation.done = true
	return n, nil
}

// AuthorizationAuditUpdateOne is the builder for updating a single AuthorizationAudit entity.
type AuthorizationAuditUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthorizationAuditMutation
}

// SetStatus sets the "status" field.
func (aauo *AuthorizationAuditUpdateOne) SetStatus(s string) *AuthorizationAuditUpdateOne {
	aauo.mutation.SetStatus(s)
	return aauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aauo *AuthorizationAuditUpdateOne) SetNillableStatus(s *string) *AuthorizationAuditUpdateOne {
	if s != nil {
		aauo.SetStatus(*s)
	}
	return aauo
}

// SetUpdatedAt sets the "updated_at" field.
func (aauo *AuthorizationAuditUpdateOne) SetUpdatedAt(t time.Time) *AuthorizationAuditUpdateOne {
	aauo.mutation.SetUpdatedAt(t)
	return aauo
}

// SetUpdatedBy sets the "updated_by" field.
func (aauo *AuthorizationAuditUpdateOne) SetUpdatedBy(s string) *AuthorizationAuditUpdateOne {
	aauo.mutation.SetUpdatedBy(s)
	return aauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aauo *AuthorizationAuditUpdateOne) SetNillableUpdatedBy(s *string) *AuthorizationAuditUpdateOne {
	if s != nil {
		aauo.SetUpdatedBy(*s)
	}
	return aauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (aauo *AuthorizationAuditUpdateOne) ClearUpdatedBy() *AuthorizationAuditUpdateOne {
	aauo.mutation.ClearUpdatedBy()
	return aauo
}

// SetUserID sets the "user_id" field.
func (aauo *AuthorizationAuditUpdateOne) SetUserID(s string) *AuthorizationAuditUpdateOne {
	aauo.mutation.SetUserID(s)
	return aauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aauo *AuthorizationAuditUpdateOne) SetNillableUserID(s *string) *AuthorizationAuditUpdateOne {
	if s != nil {
		aauo.SetUserID(*s)
	}
	return aauo
}

// SetResource sets the "resource" field.
func (aauo *AuthorizationAuditUpdateOne) SetResource(s string) *AuthorizationAuditUpdateOne {
	aauo.mutation.SetResource(s)
	return aauo
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (aauo *AuthorizationAuditUpdateOne) SetNillableResource(s *string) *AuthorizationAuditUpdateOne {
	if s != nil {
		aauo.SetResource(*s)
	}
	return aauo
}

// SetAction sets the "action" field.
func (aauo *AuthorizationAuditUpdateOne) SetAction(s string) *AuthorizationAuditUpdateOne {
	aauo.mutation.SetAction(s)
	return aauo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (aauo *AuthorizationAuditUpdateOne) SetNillableAction(s *string) *AuthorizationAuditUpdateOne {
	if s != nil {
		aauo.SetAction(*s)
	}
	return aauo
}

// SetAllowed sets the "allowed" field.
func (aauo *AuthorizationAuditUpdateOne) SetAllowed(b bool) *AuthorizationAuditUpdateOne {
	aauo.mutation.SetAllowed(b)
	return aauo
}

// SetNillableAllowed sets the "allowed" field if the given value is not nil.
func (aauo *AuthorizationAuditUpdateOne) SetNillableAllowed(b *bool) *AuthorizationAuditUpdateOne {
	if b != nil {
		aauo.SetAllowed(*b)
	}
	return aauo
}

// SetReason sets the "reason" field.
func (aauo *AuthorizationAuditUpdateOne) SetReason(s string) *AuthorizationAuditUpdateOne {
	aauo.mutation.SetReason(s)
	return aauo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (aauo *AuthorizationAuditUpdateOne) SetNillableReason(s *string) *AuthorizationAuditUpdateOne {
	if s != nil {
		aauo.SetReason(*s)
	}
	return aauo
}

// ClearReason clears the value of the "reason" field.
func (aauo *AuthorizationAuditUpdateOne) ClearReason() *AuthorizationAuditUpdateOne {
	aauo.mutation.ClearReason()
	return aauo
}

// SetIPAddress sets the "ip_address" field.
func (aauo *AuthorizationAuditUpdateOne) SetIPAddress(s string) *AuthorizationAuditUpdateOne {
	aauo.mutation.SetIPAddress(s)
	return aauo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (aauo *AuthorizationAuditUpdateOne) SetNillableIPAddress(s *string) *AuthorizationAuditUpdateOne {
	if s != nil {
		aauo.SetIPAddress(*s)
	}
	return aauo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (aauo *AuthorizationAuditUpdateOne) ClearIPAddress() *AuthorizationAuditUpdateOne {
	aauo.mutation.ClearIPAddress()
	return aauo
}

// SetUserAgent sets the "user_agent" field.
func (aauo *AuthorizationAuditUpdateOne) SetUserAgent(s string) *AuthorizationAuditUpdateOne {
	aauo.mutation.SetUserAgent(s)
	return aauo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (aauo *AuthorizationAuditUpdateOne) SetNillableUserAgent(s *string) *AuthorizationAuditUpdateOne {
	if s != nil {
		aauo.SetUserAgent(*s)
	}
	return aauo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (aauo *AuthorizationAuditUpdateOne) ClearUserAgent() *AuthorizationAuditUpdateOne {
	aauo.mutation.ClearUserAgent()
	return aauo
}

// Mutation returns the AuthorizationAuditMutation object of the builder.
func (aauo *AuthorizationAuditUpdateOne) Mutation() *AuthorizationAuditMutation {
	return aauo.mutation
}

// Where appends a list predicates to the AuthorizationAuditUpdate builder.
func (aauo *AuthorizationAuditUpdateOne) Where(ps ...predicate.AuthorizationAudit) *AuthorizationAuditUpdateOne {
	aauo.mutation.Where(ps...)
	return aauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aauo *AuthorizationAuditUpdateOne) Select(field string, fields ...string) *AuthorizationAuditUpdateOne {
	aauo.fields = append([]string{field}, fields...)
	return aauo
}

// Save executes the query and returns the updated AuthorizationAudit entity.
func (aauo *AuthorizationAuditUpdateOne) Save(ctx context.Context) (*AuthorizationAudit, error) {
	aauo.defaults()
	return withHooks(ctx, aauo.sqlSave, aauo.mutation, aauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aauo *AuthorizationAuditUpdateOne) SaveX(ctx context.Context) *AuthorizationAudit {
	node, err := aauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aauo *AuthorizationAuditUpdateOne) Exec(ctx context.Context) error {
	_, err := aauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aauo *AuthorizationAuditUpdateOne) ExecX(ctx context.Context) {
	if err := aauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aauo *AuthorizationAuditUpdateOne) defaults() {
	if _, ok := aauo.mutation.UpdatedAt(); !ok {
		v := authorizationaudit.UpdateDefaultUpdatedAt()
		aauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aauo *AuthorizationAuditUpdateOne) check() error {
	if v, ok := aauo.mutation.UserID(); ok {
		if err := authorizationaudit.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "AuthorizationAudit.user_id": %w`, err)}
		}
	}
	if v, ok := aauo.mutation.Resource(); ok {
		if err := authorizationaudit.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: validator failed for field "AuthorizationAudit.resource": %w`, err)}
		}
	}
	if v, ok := aauo.mutation.Action(); ok {
		if err := authorizationaudit.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "AuthorizationAudit.action": %w`, err)}
		}
	}
	return nil
}

func (aauo *AuthorizationAuditUpdateOne) sqlSave(ctx context.Context) (_node *AuthorizationAudit, err error) {
	if err := aauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(authorizationaudit.Table, authorizationaudit.Columns, sqlgraph.NewFieldSpec(authorizationaudit.FieldID, field.TypeString))
	id, ok := aauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthorizationAudit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authorizationaudit.FieldID)
		for _, f := range fields {
			if !authorizationaudit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authorizationaudit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aauo.mutation.Status(); ok {
		_spec.SetField(authorizationaudit.FieldStatus, field.TypeString, value)
	}
	if value, ok := aauo.mutation.UpdatedAt(); ok {
		_spec.SetField(authorizationaudit.FieldUpdatedAt, field.TypeTime, value)
	}
	if aauo.mutation.CreatedByCleared() {
		_spec.ClearField(authorizationaudit.FieldCreatedBy, field.TypeString)
	}
	if value, ok := aauo.mutation.UpdatedBy(); ok {
		_spec.SetField(authorizationaudit.FieldUpdatedBy, field.TypeString, value)
	}
	if aauo.mutation.UpdatedByCleared() {
		_spec.ClearField(authorizationaudit.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := aauo.mutation.UserID(); ok {
		_spec.SetField(authorizationaudit.FieldUserID, field.TypeString, value)
	}
	if value, ok := aauo.mutation.Resource(); ok {
		_spec.SetField(authorizationaudit.FieldResource, field.TypeString, value)
	}
	if value, ok := aauo.mutation.Action(); ok {
		_spec.SetField(authorizationaudit.FieldAction, field.TypeString, value)
	}
	if value, ok := aauo.mutation.Allowed(); ok {
		_spec.SetField(authorizationaudit.FieldAllowed, field.TypeBool, value)
	}
	if value, ok := aauo.mutation.Reason(); ok {
		_spec.SetField(authorizationaudit.FieldReason, field.TypeString, value)
	}
	if aauo.mutation.ReasonCleared() {
		_spec.ClearField(authorizationaudit.FieldReason, field.TypeString)
	}
	if value, ok := aauo.mutation.IPAddress(); ok {
		_spec.SetField(authorizationaudit.FieldIPAddress, field.TypeString, value)
	}
	if aauo.mutation.IPAddressCleared() {
		_spec.ClearField(authorizationaudit.FieldIPAddress, field.TypeString)
	}
	if value, ok := aauo.mutation.UserAgent(); ok {
		_spec.SetField(authorizationaudit.FieldUserAgent, field.TypeString, value)
	}
	if aauo.mutation.UserAgentCleared() {
		_spec.ClearField(authorizationaudit.FieldUserAgent, field.TypeString)
	}
	_node = &AuthorizationAudit{config: aauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorizationaudit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aauo.mutation.done = true
	return _node, nil
}
