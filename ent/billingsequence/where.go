// Code generated by ent, DO NOT EDIT.

package billingsequence

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEQ(FieldTenantID, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEQ(FieldSubscriptionID, v))
}

// LastSequence applies equality check predicate on the "last_sequence" field. It's identical to LastSequenceEQ.
func LastSequence(v int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEQ(FieldLastSequence, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldContainsFold(FieldTenantID, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// LastSequenceEQ applies the EQ predicate on the "last_sequence" field.
func LastSequenceEQ(v int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEQ(FieldLastSequence, v))
}

// LastSequenceNEQ applies the NEQ predicate on the "last_sequence" field.
func LastSequenceNEQ(v int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldNEQ(FieldLastSequence, v))
}

// LastSequenceIn applies the In predicate on the "last_sequence" field.
func LastSequenceIn(vs ...int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldIn(FieldLastSequence, vs...))
}

// LastSequenceNotIn applies the NotIn predicate on the "last_sequence" field.
func LastSequenceNotIn(vs ...int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldNotIn(FieldLastSequence, vs...))
}

// LastSequenceGT applies the GT predicate on the "last_sequence" field.
func LastSequenceGT(v int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldGT(FieldLastSequence, v))
}

// LastSequenceGTE applies the GTE predicate on the "last_sequence" field.
func LastSequenceGTE(v int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldGTE(FieldLastSequence, v))
}

// LastSequenceLT applies the LT predicate on the "last_sequence" field.
func LastSequenceLT(v int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldLT(FieldLastSequence, v))
}

// LastSequenceLTE applies the LTE predicate on the "last_sequence" field.
func LastSequenceLTE(v int) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldLTE(FieldLastSequence, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BillingSequence {
	return predicate.BillingSequence(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BillingSequence) predicate.BillingSequence {
	return predicate.BillingSequence(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BillingSequence) predicate.BillingSequence {
	return predicate.BillingSequence(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BillingSequence) predicate.BillingSequence {
	return predicate.BillingSequence(sql.NotPredicates(p))
}
