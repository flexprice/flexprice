// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/billingsequence"
	"github.com/flexprice/flexprice/ent/predicate"
)

// BillingSequenceUpdate is the builder for updating BillingSequence entities.
type BillingSequenceUpdate struct {
	config
	hooks    []Hook
	mutation *BillingSequenceMutation
}

// Where appends a list predicates to the BillingSequenceUpdate builder.
func (bsu *BillingSequenceUpdate) Where(ps ...predicate.BillingSequence) *BillingSequenceUpdate {
	bsu.mutation.Where(ps...)
	return bsu
}

// SetTenantID sets the "tenant_id" field.
func (bsu *BillingSequenceUpdate) SetTenantID(s string) *BillingSequenceUpdate {
	bsu.mutation.SetTenantID(s)
	return bsu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (bsu *BillingSequenceUpdate) SetNillableTenantID(s *string) *BillingSequenceUpdate {
	if s != nil {
		bsu.SetTenantID(*s)
	}
	return bsu
}

// SetSubscriptionID sets the "subscription_id" field.
func (bsu *BillingSequenceUpdate) SetSubscriptionID(s string) *BillingSequenceUpdate {
	bsu.mutation.SetSubscriptionID(s)
	return bsu
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (bsu *BillingSequenceUpdate) SetNillableSubscriptionID(s *string) *BillingSequenceUpdate {
	if s != nil {
		bsu.SetSubscriptionID(*s)
	}
	return bsu
}

// SetLastSequence sets the "last_sequence" field.
func (bsu *BillingSequenceUpdate) SetLastSequence(i int) *BillingSequenceUpdate {
	bsu.mutation.ResetLastSequence()
	bsu.mutation.SetLastSequence(i)
	return bsu
}

// SetNillableLastSequence sets the "last_sequence" field if the given value is not nil.
func (bsu *BillingSequenceUpdate) SetNillableLastSequence(i *int) *BillingSequenceUpdate {
	if i != nil {
		bsu.SetLastSequence(*i)
	}
	return bsu
}

// AddLastSequence adds i to the "last_sequence" field.
func (bsu *BillingSequenceUpdate) AddLastSequence(i int) *BillingSequenceUpdate {
	bsu.mutation.AddLastSequence(i)
	return bsu
}

// SetUpdatedAt sets the "updated_at" field.
func (bsu *BillingSequenceUpdate) SetUpdatedAt(t time.Time) *BillingSequenceUpdate {
	bsu.mutation.SetUpdatedAt(t)
	return bsu
}

// Mutation returns the BillingSequenceMutation object of the builder.
func (bsu *BillingSequenceUpdate) Mutation() *BillingSequenceMutation {
	return bsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bsu *BillingSequenceUpdate) Save(ctx context.Context) (int, error) {
	bsu.defaults()
	return withHooks(ctx, bsu.sqlSave, bsu.mutation, bsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsu *BillingSequenceUpdate) SaveX(ctx context.Context) int {
	affected, err := bsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bsu *BillingSequenceUpdate) Exec(ctx context.Context) error {
	_, err := bsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsu *BillingSequenceUpdate) ExecX(ctx context.Context) {
	if err := bsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsu *BillingSequenceUpdate) defaults() {
	if _, ok := bsu.mutation.UpdatedAt(); !ok {
		v := billingsequence.UpdateDefaultUpdatedAt()
		bsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsu *BillingSequenceUpdate) check() error {
	if v, ok := bsu.mutation.TenantID(); ok {
		if err := billingsequence.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "BillingSequence.tenant_id": %w`, err)}
		}
	}
	if v, ok := bsu.mutation.SubscriptionID(); ok {
		if err := billingsequence.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`ent: validator failed for field "BillingSequence.subscription_id": %w`, err)}
		}
	}
	return nil
}

func (bsu *BillingSequenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingsequence.Table, billingsequence.Columns, sqlgraph.NewFieldSpec(billingsequence.FieldID, field.TypeInt))
	if ps := bsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsu.mutation.TenantID(); ok {
		_spec.SetField(billingsequence.FieldTenantID, field.TypeString, value)
	}
	if value, ok := bsu.mutation.SubscriptionID(); ok {
		_spec.SetField(billingsequence.FieldSubscriptionID, field.TypeString, value)
	}
	if value, ok := bsu.mutation.LastSequence(); ok {
		_spec.SetField(billingsequence.FieldLastSequence, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedLastSequence(); ok {
		_spec.AddField(billingsequence.FieldLastSequence, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.UpdatedAt(); ok {
		_spec.SetField(billingsequence.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingsequence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bsu.mutation.done = true
	return n, nil
}

// BillingSequenceUpdateOne is the builder for updating a single BillingSequence entity.
type BillingSequenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingSequenceMutation
}

// SetTenantID sets the "tenant_id" field.
func (bsuo *BillingSequenceUpdateOne) SetTenantID(s string) *BillingSequenceUpdateOne {
	bsuo.mutation.SetTenantID(s)
	return bsuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (bsuo *BillingSequenceUpdateOne) SetNillableTenantID(s *string) *BillingSequenceUpdateOne {
	if s != nil {
		bsuo.SetTenantID(*s)
	}
	return bsuo
}

// SetSubscriptionID sets the "subscription_id" field.
func (bsuo *BillingSequenceUpdateOne) SetSubscriptionID(s string) *BillingSequenceUpdateOne {
	bsuo.mutation.SetSubscriptionID(s)
	return bsuo
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (bsuo *BillingSequenceUpdateOne) SetNillableSubscriptionID(s *string) *BillingSequenceUpdateOne {
	if s != nil {
		bsuo.SetSubscriptionID(*s)
	}
	return bsuo
}

// SetLastSequence sets the "last_sequence" field.
func (bsuo *BillingSequenceUpdateOne) SetLastSequence(i int) *BillingSequenceUpdateOne {
	bsuo.mutation.ResetLastSequence()
	bsuo.mutation.SetLastSequence(i)
	return bsuo
}

// SetNillableLastSequence sets the "last_sequence" field if the given value is not nil.
func (bsuo *BillingSequenceUpdateOne) SetNillableLastSequence(i *int) *BillingSequenceUpdateOne {
	if i != nil {
		bsuo.SetLastSequence(*i)
	}
	return bsuo
}

// AddLastSequence adds i to the "last_sequence" field.
func (bsuo *BillingSequenceUpdateOne) AddLastSequence(i int) *BillingSequenceUpdateOne {
	bsuo.mutation.AddLastSequence(i)
	return bsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bsuo *BillingSequenceUpdateOne) SetUpdatedAt(t time.Time) *BillingSequenceUpdateOne {
	bsuo.mutation.SetUpdatedAt(t)
	return bsuo
}

// Mutation returns the BillingSequenceMutation object of the builder.
func (bsuo *BillingSequenceUpdateOne) Mutation() *BillingSequenceMutation {
	return bsuo.mutation
}

// Where appends a list predicates to the BillingSequenceUpdate builder.
func (bsuo *BillingSequenceUpdateOne) Where(ps ...predicate.BillingSequence) *BillingSequenceUpdateOne {
	bsuo.mutation.Where(ps...)
	return bsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bsuo *BillingSequenceUpdateOne) Select(field string, fields ...string) *BillingSequenceUpdateOne {
	bsuo.fields = append([]string{field}, fields...)
	return bsuo
}

// Save executes the query and returns the updated BillingSequence entity.
func (bsuo *BillingSequenceUpdateOne) Save(ctx context.Context) (*BillingSequence, error) {
	bsuo.defaults()
	return withHooks(ctx, bsuo.sqlSave, bsuo.mutation, bsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsuo *BillingSequenceUpdateOne) SaveX(ctx context.Context) *BillingSequence {
	node, err := bsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bsuo *BillingSequenceUpdateOne) Exec(ctx context.Context) error {
	_, err := bsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsuo *BillingSequenceUpdateOne) ExecX(ctx context.Context) {
	if err := bsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsuo *BillingSequenceUpdateOne) defaults() {
	if _, ok := bsuo.mutation.UpdatedAt(); !ok {
		v := billingsequence.UpdateDefaultUpdatedAt()
		bsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsuo *BillingSequenceUpdateOne) check() error {
	if v, ok := bsuo.mutation.TenantID(); ok {
		if err := billingsequence.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "BillingSequence.tenant_id": %w`, err)}
		}
	}
	if v, ok := bsuo.mutation.SubscriptionID(); ok {
		if err := billingsequence.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`ent: validator failed for field "BillingSequence.subscription_id": %w`, err)}
		}
	}
	return nil
}

func (bsuo *BillingSequenceUpdateOne) sqlSave(ctx context.Context) (_node *BillingSequence, err error) {
	if err := bsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingsequence.Table, billingsequence.Columns, sqlgraph.NewFieldSpec(billingsequence.FieldID, field.TypeInt))
	id, ok := bsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BillingSequence.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingsequence.FieldID)
		for _, f := range fields {
			if !billingsequence.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != billingsequence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsuo.mutation.TenantID(); ok {
		_spec.SetField(billingsequence.FieldTenantID, field.TypeString, value)
	}
	if value, ok := bsuo.mutation.SubscriptionID(); ok {
		_spec.SetField(billingsequence.FieldSubscriptionID, field.TypeString, value)
	}
	if value, ok := bsuo.mutation.LastSequence(); ok {
		_spec.SetField(billingsequence.FieldLastSequence, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedLastSequence(); ok {
		_spec.AddField(billingsequence.FieldLastSequence, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(billingsequence.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &BillingSequence{config: bsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingsequence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bsuo.mutation.done = true
	return _node, nil
}
