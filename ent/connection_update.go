// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/connection"
	"github.com/flexprice/flexprice/ent/predicate"
)

// ConnectionUpdate is the builder for updating Connection entities.
type ConnectionUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectionMutation
}

// Where appends a list predicates to the ConnectionUpdate builder.
func (cu *ConnectionUpdate) Where(ps ...predicate.Connection) *ConnectionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetStatus sets the "status" field.
func (cu *ConnectionUpdate) SetStatus(s string) *ConnectionUpdate {
	cu.mutation.SetStatus(s)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableStatus(s *string) *ConnectionUpdate {
	if s != nil {
		cu.SetStatus(*s)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ConnectionUpdate) SetUpdatedAt(t time.Time) *ConnectionUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *ConnectionUpdate) SetUpdatedBy(s string) *ConnectionUpdate {
	cu.mutation.SetUpdatedBy(s)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableUpdatedBy(s *string) *ConnectionUpdate {
	if s != nil {
		cu.SetUpdatedBy(*s)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *ConnectionUpdate) ClearUpdatedBy() *ConnectionUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetName sets the "name" field.
func (cu *ConnectionUpdate) SetName(s string) *ConnectionUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableName(s *string) *ConnectionUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of the "name" field.
func (cu *ConnectionUpdate) ClearName() *ConnectionUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetDescription sets the "description" field.
func (cu *ConnectionUpdate) SetDescription(s string) *ConnectionUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableDescription(s *string) *ConnectionUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *ConnectionUpdate) ClearDescription() *ConnectionUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetConnectionCode sets the "connection_code" field.
func (cu *ConnectionUpdate) SetConnectionCode(s string) *ConnectionUpdate {
	cu.mutation.SetConnectionCode(s)
	return cu
}

// SetNillableConnectionCode sets the "connection_code" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableConnectionCode(s *string) *ConnectionUpdate {
	if s != nil {
		cu.SetConnectionCode(*s)
	}
	return cu
}

// SetMetadata sets the "metadata" field.
func (cu *ConnectionUpdate) SetMetadata(m map[string]interface{}) *ConnectionUpdate {
	cu.mutation.SetMetadata(m)
	return cu
}

// ClearMetadata clears the value of the "metadata" field.
func (cu *ConnectionUpdate) ClearMetadata() *ConnectionUpdate {
	cu.mutation.ClearMetadata()
	return cu
}

// Mutation returns the ConnectionMutation object of the builder.
func (cu *ConnectionUpdate) Mutation() *ConnectionMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConnectionUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConnectionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConnectionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConnectionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ConnectionUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := connection.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConnectionUpdate) check() error {
	if v, ok := cu.mutation.ConnectionCode(); ok {
		if err := connection.ConnectionCodeValidator(v); err != nil {
			return &ValidationError{Name: "connection_code", err: fmt.Errorf(`ent: validator failed for field "Connection.connection_code": %w`, err)}
		}
	}
	return nil
}

func (cu *ConnectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(connection.Table, connection.Columns, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(connection.FieldStatus, field.TypeString, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(connection.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.CreatedByCleared() {
		_spec.ClearField(connection.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(connection.FieldUpdatedBy, field.TypeString, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(connection.FieldUpdatedBy, field.TypeString)
	}
	if cu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(connection.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(connection.FieldName, field.TypeString, value)
	}
	if cu.mutation.NameCleared() {
		_spec.ClearField(connection.FieldName, field.TypeString)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(connection.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(connection.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.ConnectionCode(); ok {
		_spec.SetField(connection.FieldConnectionCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.Metadata(); ok {
		_spec.SetField(connection.FieldMetadata, field.TypeJSON, value)
	}
	if cu.mutation.MetadataCleared() {
		_spec.ClearField(connection.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConnectionUpdateOne is the builder for updating a single Connection entity.
type ConnectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectionMutation
}

// SetStatus sets the "status" field.
func (cuo *ConnectionUpdateOne) SetStatus(s string) *ConnectionUpdateOne {
	cuo.mutation.SetStatus(s)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableStatus(s *string) *ConnectionUpdateOne {
	if s != nil {
		cuo.SetStatus(*s)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ConnectionUpdateOne) SetUpdatedAt(t time.Time) *ConnectionUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *ConnectionUpdateOne) SetUpdatedBy(s string) *ConnectionUpdateOne {
	cuo.mutation.SetUpdatedBy(s)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableUpdatedBy(s *string) *ConnectionUpdateOne {
	if s != nil {
		cuo.SetUpdatedBy(*s)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *ConnectionUpdateOne) ClearUpdatedBy() *ConnectionUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetName sets the "name" field.
func (cuo *ConnectionUpdateOne) SetName(s string) *ConnectionUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableName(s *string) *ConnectionUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of the "name" field.
func (cuo *ConnectionUpdateOne) ClearName() *ConnectionUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ConnectionUpdateOne) SetDescription(s string) *ConnectionUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableDescription(s *string) *ConnectionUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *ConnectionUpdateOne) ClearDescription() *ConnectionUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetConnectionCode sets the "connection_code" field.
func (cuo *ConnectionUpdateOne) SetConnectionCode(s string) *ConnectionUpdateOne {
	cuo.mutation.SetConnectionCode(s)
	return cuo
}

// SetNillableConnectionCode sets the "connection_code" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableConnectionCode(s *string) *ConnectionUpdateOne {
	if s != nil {
		cuo.SetConnectionCode(*s)
	}
	return cuo
}

// SetMetadata sets the "metadata" field.
func (cuo *ConnectionUpdateOne) SetMetadata(m map[string]interface{}) *ConnectionUpdateOne {
	cuo.mutation.SetMetadata(m)
	return cuo
}

// ClearMetadata clears the value of the "metadata" field.
func (cuo *ConnectionUpdateOne) ClearMetadata() *ConnectionUpdateOne {
	cuo.mutation.ClearMetadata()
	return cuo
}

// Mutation returns the ConnectionMutation object of the builder.
func (cuo *ConnectionUpdateOne) Mutation() *ConnectionMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ConnectionUpdate builder.
func (cuo *ConnectionUpdateOne) Where(ps ...predicate.Connection) *ConnectionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConnectionUpdateOne) Select(field string, fields ...string) *ConnectionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Connection entity.
func (cuo *ConnectionUpdateOne) Save(ctx context.Context) (*Connection, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConnectionUpdateOne) SaveX(ctx context.Context) *Connection {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConnectionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConnectionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ConnectionUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := connection.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConnectionUpdateOne) check() error {
	if v, ok := cuo.mutation.ConnectionCode(); ok {
		if err := connection.ConnectionCodeValidator(v); err != nil {
			return &ValidationError{Name: "connection_code", err: fmt.Errorf(`ent: validator failed for field "Connection.connection_code": %w`, err)}
		}
	}
	return nil
}

func (cuo *ConnectionUpdateOne) sqlSave(ctx context.Context) (_node *Connection, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connection.Table, connection.Columns, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Connection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connection.FieldID)
		for _, f := range fields {
			if !connection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(connection.FieldStatus, field.TypeString, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(connection.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.CreatedByCleared() {
		_spec.ClearField(connection.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(connection.FieldUpdatedBy, field.TypeString, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(connection.FieldUpdatedBy, field.TypeString)
	}
	if cuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(connection.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(connection.FieldName, field.TypeString, value)
	}
	if cuo.mutation.NameCleared() {
		_spec.ClearField(connection.FieldName, field.TypeString)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(connection.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(connection.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.ConnectionCode(); ok {
		_spec.SetField(connection.FieldConnectionCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Metadata(); ok {
		_spec.SetField(connection.FieldMetadata, field.TypeJSON, value)
	}
	if cuo.mutation.MetadataCleared() {
		_spec.ClearField(connection.FieldMetadata, field.TypeJSON)
	}
	_node = &Connection{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
