// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/creditgrant"
	"github.com/flexprice/flexprice/ent/predicate"
)

// CreditGrantDelete is the builder for deleting a CreditGrant entity.
type CreditGrantDelete struct {
	config
	hooks    []Hook
	mutation *CreditGrantMutation
}

// Where appends a list predicates to the CreditGrantDelete builder.
func (cgd *CreditGrantDelete) Where(ps ...predicate.CreditGrant) *CreditGrantDelete {
	cgd.mutation.Where(ps...)
	return cgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cgd *CreditGrantDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cgd.sqlExec, cgd.mutation, cgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cgd *CreditGrantDelete) ExecX(ctx context.Context) int {
	n, err := cgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cgd *CreditGrantDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(creditgrant.Table, sqlgraph.NewFieldSpec(creditgrant.FieldID, field.TypeString))
	if ps := cgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cgd.mutation.done = true
	return affected, err
}

// CreditGrantDeleteOne is the builder for deleting a single CreditGrant entity.
type CreditGrantDeleteOne struct {
	cgd *CreditGrantDelete
}

// Where appends a list predicates to the CreditGrantDelete builder.
func (cgdo *CreditGrantDeleteOne) Where(ps ...predicate.CreditGrant) *CreditGrantDeleteOne {
	cgdo.cgd.mutation.Where(ps...)
	return cgdo
}

// Exec executes the deletion query.
func (cgdo *CreditGrantDeleteOne) Exec(ctx context.Context) error {
	n, err := cgdo.cgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{creditgrant.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cgdo *CreditGrantDeleteOne) ExecX(ctx context.Context) {
	if err := cgdo.Exec(ctx); err != nil {
		panic(err)
	}
}
