// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/creditgrantapplication"
	"github.com/flexprice/flexprice/internal/types"
	"github.com/shopspring/decimal"
)

// CreditGrantApplication is the model entity for the CreditGrantApplication schema.
type CreditGrantApplication struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// CreditGrantID holds the value of the "credit_grant_id" field.
	CreditGrantID string `json:"credit_grant_id,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID string `json:"subscription_id,omitempty"`
	// ScheduledFor holds the value of the "scheduled_for" field.
	ScheduledFor time.Time `json:"scheduled_for,omitempty"`
	// AppliedAt holds the value of the "applied_at" field.
	AppliedAt *time.Time `json:"applied_at,omitempty"`
	// PeriodStart holds the value of the "period_start" field.
	PeriodStart time.Time `json:"period_start,omitempty"`
	// PeriodEnd holds the value of the "period_end" field.
	PeriodEnd time.Time `json:"period_end,omitempty"`
	// ApplicationStatus holds the value of the "application_status" field.
	ApplicationStatus types.ApplicationStatus `json:"application_status,omitempty"`
	// CreditsApplied holds the value of the "credits_applied" field.
	CreditsApplied decimal.Decimal `json:"credits_applied,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// ApplicationReason holds the value of the "application_reason" field.
	ApplicationReason types.CreditGrantApplicationReason `json:"application_reason,omitempty"`
	// SubscriptionStatusAtApplication holds the value of the "subscription_status_at_application" field.
	SubscriptionStatusAtApplication types.SubscriptionStatus `json:"subscription_status_at_application,omitempty"`
	// RetryCount holds the value of the "retry_count" field.
	RetryCount int `json:"retry_count,omitempty"`
	// FailureReason holds the value of the "failure_reason" field.
	FailureReason *string `json:"failure_reason,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata types.Metadata `json:"metadata,omitempty"`
	// IdempotencyKey holds the value of the "idempotency_key" field.
	IdempotencyKey string `json:"idempotency_key,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CreditGrantApplication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case creditgrantapplication.FieldCreditsApplied:
			values[i] = new(decimal.Decimal)
		case creditgrantapplication.FieldRetryCount:
			values[i] = new(sql.NullInt64)
		case creditgrantapplication.FieldID, creditgrantapplication.FieldTenantID, creditgrantapplication.FieldStatus, creditgrantapplication.FieldCreatedBy, creditgrantapplication.FieldUpdatedBy, creditgrantapplication.FieldEnvironmentID, creditgrantapplication.FieldCreditGrantID, creditgrantapplication.FieldSubscriptionID, creditgrantapplication.FieldApplicationStatus, creditgrantapplication.FieldCurrency, creditgrantapplication.FieldApplicationReason, creditgrantapplication.FieldSubscriptionStatusAtApplication, creditgrantapplication.FieldFailureReason, creditgrantapplication.FieldIdempotencyKey:
			values[i] = new(sql.NullString)
		case creditgrantapplication.FieldCreatedAt, creditgrantapplication.FieldUpdatedAt, creditgrantapplication.FieldScheduledFor, creditgrantapplication.FieldAppliedAt, creditgrantapplication.FieldPeriodStart, creditgrantapplication.FieldPeriodEnd:
			values[i] = new(sql.NullTime)
		case creditgrantapplication.FieldMetadata:
			values[i] = new(types.Metadata)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CreditGrantApplication fields.
func (cga *CreditGrantApplication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case creditgrantapplication.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cga.ID = value.String
			}
		case creditgrantapplication.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				cga.TenantID = value.String
			}
		case creditgrantapplication.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cga.Status = value.String
			}
		case creditgrantapplication.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cga.CreatedAt = value.Time
			}
		case creditgrantapplication.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cga.UpdatedAt = value.Time
			}
		case creditgrantapplication.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cga.CreatedBy = value.String
			}
		case creditgrantapplication.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				cga.UpdatedBy = value.String
			}
		case creditgrantapplication.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				cga.EnvironmentID = value.String
			}
		case creditgrantapplication.FieldCreditGrantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credit_grant_id", values[i])
			} else if value.Valid {
				cga.CreditGrantID = value.String
			}
		case creditgrantapplication.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				cga.SubscriptionID = value.String
			}
		case creditgrantapplication.FieldScheduledFor:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_for", values[i])
			} else if value.Valid {
				cga.ScheduledFor = value.Time
			}
		case creditgrantapplication.FieldAppliedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field applied_at", values[i])
			} else if value.Valid {
				cga.AppliedAt = new(time.Time)
				*cga.AppliedAt = value.Time
			}
		case creditgrantapplication.FieldPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[i])
			} else if value.Valid {
				cga.PeriodStart = value.Time
			}
		case creditgrantapplication.FieldPeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_end", values[i])
			} else if value.Valid {
				cga.PeriodEnd = value.Time
			}
		case creditgrantapplication.FieldApplicationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field application_status", values[i])
			} else if value.Valid {
				cga.ApplicationStatus = types.ApplicationStatus(value.String)
			}
		case creditgrantapplication.FieldCreditsApplied:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field credits_applied", values[i])
			} else if value != nil {
				cga.CreditsApplied = *value
			}
		case creditgrantapplication.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				cga.Currency = value.String
			}
		case creditgrantapplication.FieldApplicationReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field application_reason", values[i])
			} else if value.Valid {
				cga.ApplicationReason = types.CreditGrantApplicationReason(value.String)
			}
		case creditgrantapplication.FieldSubscriptionStatusAtApplication:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_status_at_application", values[i])
			} else if value.Valid {
				cga.SubscriptionStatusAtApplication = types.SubscriptionStatus(value.String)
			}
		case creditgrantapplication.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_count", values[i])
			} else if value.Valid {
				cga.RetryCount = int(value.Int64)
			}
		case creditgrantapplication.FieldFailureReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field failure_reason", values[i])
			} else if value.Valid {
				cga.FailureReason = new(string)
				*cga.FailureReason = value.String
			}
		case creditgrantapplication.FieldMetadata:
			if value, ok := values[i].(*types.Metadata); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil {
				cga.Metadata = *value
			}
		case creditgrantapplication.FieldIdempotencyKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idempotency_key", values[i])
			} else if value.Valid {
				cga.IdempotencyKey = value.String
			}
		default:
			cga.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CreditGrantApplication.
// This includes values selected through modifiers, order, etc.
func (cga *CreditGrantApplication) Value(name string) (ent.Value, error) {
	return cga.selectValues.Get(name)
}

// Update returns a builder for updating this CreditGrantApplication.
// Note that you need to call CreditGrantApplication.Unwrap() before calling this method if this CreditGrantApplication
// was returned from a transaction, and the transaction was committed or rolled back.
func (cga *CreditGrantApplication) Update() *CreditGrantApplicationUpdateOne {
	return NewCreditGrantApplicationClient(cga.config).UpdateOne(cga)
}

// Unwrap unwraps the CreditGrantApplication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cga *CreditGrantApplication) Unwrap() *CreditGrantApplication {
	_tx, ok := cga.config.driver.(*txDriver)
	if !ok {
		panic("ent: CreditGrantApplication is not a transactional entity")
	}
	cga.config.driver = _tx.drv
	return cga
}

// String implements the fmt.Stringer.
func (cga *CreditGrantApplication) String() string {
	var builder strings.Builder
	builder.WriteString("CreditGrantApplication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cga.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(cga.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(cga.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cga.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cga.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(cga.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(cga.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(cga.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("credit_grant_id=")
	builder.WriteString(cga.CreditGrantID)
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(cga.SubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("scheduled_for=")
	builder.WriteString(cga.ScheduledFor.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cga.AppliedAt; v != nil {
		builder.WriteString("applied_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("period_start=")
	builder.WriteString(cga.PeriodStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("period_end=")
	builder.WriteString(cga.PeriodEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("application_status=")
	builder.WriteString(fmt.Sprintf("%v", cga.ApplicationStatus))
	builder.WriteString(", ")
	builder.WriteString("credits_applied=")
	builder.WriteString(fmt.Sprintf("%v", cga.CreditsApplied))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(cga.Currency)
	builder.WriteString(", ")
	builder.WriteString("application_reason=")
	builder.WriteString(fmt.Sprintf("%v", cga.ApplicationReason))
	builder.WriteString(", ")
	builder.WriteString("subscription_status_at_application=")
	builder.WriteString(fmt.Sprintf("%v", cga.SubscriptionStatusAtApplication))
	builder.WriteString(", ")
	builder.WriteString("retry_count=")
	builder.WriteString(fmt.Sprintf("%v", cga.RetryCount))
	builder.WriteString(", ")
	if v := cga.FailureReason; v != nil {
		builder.WriteString("failure_reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", cga.Metadata))
	builder.WriteString(", ")
	builder.WriteString("idempotency_key=")
	builder.WriteString(cga.IdempotencyKey)
	builder.WriteByte(')')
	return builder.String()
}

// CreditGrantApplications is a parsable slice of CreditGrantApplication.
type CreditGrantApplications []*CreditGrantApplication
