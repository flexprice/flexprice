// Code generated by ent, DO NOT EDIT.

package creditgrantapplication

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the creditgrantapplication type in the database.
	Label = "credit_grant_application"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldCreditGrantID holds the string denoting the credit_grant_id field in the database.
	FieldCreditGrantID = "credit_grant_id"
	// FieldSubscriptionID holds the string denoting the subscription_id field in the database.
	FieldSubscriptionID = "subscription_id"
	// FieldScheduledFor holds the string denoting the scheduled_for field in the database.
	FieldScheduledFor = "scheduled_for"
	// FieldAppliedAt holds the string denoting the applied_at field in the database.
	FieldAppliedAt = "applied_at"
	// FieldPeriodStart holds the string denoting the period_start field in the database.
	FieldPeriodStart = "period_start"
	// FieldPeriodEnd holds the string denoting the period_end field in the database.
	FieldPeriodEnd = "period_end"
	// FieldApplicationStatus holds the string denoting the application_status field in the database.
	FieldApplicationStatus = "application_status"
	// FieldCreditsApplied holds the string denoting the credits_applied field in the database.
	FieldCreditsApplied = "credits_applied"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldApplicationReason holds the string denoting the application_reason field in the database.
	FieldApplicationReason = "application_reason"
	// FieldSubscriptionStatusAtApplication holds the string denoting the subscription_status_at_application field in the database.
	FieldSubscriptionStatusAtApplication = "subscription_status_at_application"
	// FieldIsProrated holds the string denoting the is_prorated field in the database.
	FieldIsProrated = "is_prorated"
	// FieldProrationFactor holds the string denoting the proration_factor field in the database.
	FieldProrationFactor = "proration_factor"
	// FieldFullPeriodAmount holds the string denoting the full_period_amount field in the database.
	FieldFullPeriodAmount = "full_period_amount"
	// FieldRetryCount holds the string denoting the retry_count field in the database.
	FieldRetryCount = "retry_count"
	// FieldFailureReason holds the string denoting the failure_reason field in the database.
	FieldFailureReason = "failure_reason"
	// FieldNextRetryAt holds the string denoting the next_retry_at field in the database.
	FieldNextRetryAt = "next_retry_at"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldIdempotencyKey holds the string denoting the idempotency_key field in the database.
	FieldIdempotencyKey = "idempotency_key"
	// Table holds the table name of the creditgrantapplication in the database.
	Table = "credit_grant_applications"
)

// Columns holds all SQL columns for creditgrantapplication fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldCreditGrantID,
	FieldSubscriptionID,
	FieldScheduledFor,
	FieldAppliedAt,
	FieldPeriodStart,
	FieldPeriodEnd,
	FieldApplicationStatus,
	FieldCreditsApplied,
	FieldCurrency,
	FieldApplicationReason,
	FieldSubscriptionStatusAtApplication,
	FieldIsProrated,
	FieldProrationFactor,
	FieldFullPeriodAmount,
	FieldRetryCount,
	FieldFailureReason,
	FieldNextRetryAt,
	FieldMetadata,
	FieldIdempotencyKey,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// CreditGrantIDValidator is a validator for the "credit_grant_id" field. It is called by the builders before save.
	CreditGrantIDValidator func(string) error
	// SubscriptionIDValidator is a validator for the "subscription_id" field. It is called by the builders before save.
	SubscriptionIDValidator func(string) error
	// DefaultApplicationStatus holds the default value on creation for the "application_status" field.
	DefaultApplicationStatus string
	// DefaultCreditsApplied holds the default value on creation for the "credits_applied" field.
	DefaultCreditsApplied decimal.Decimal
	// DefaultRetryCount holds the default value on creation for the "retry_count" field.
	DefaultRetryCount int
)

// OrderOption defines the ordering options for the CreditGrantApplication queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByCreditGrantID orders the results by the credit_grant_id field.
func ByCreditGrantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreditGrantID, opts...).ToFunc()
}

// BySubscriptionID orders the results by the subscription_id field.
func BySubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionID, opts...).ToFunc()
}

// ByScheduledFor orders the results by the scheduled_for field.
func ByScheduledFor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduledFor, opts...).ToFunc()
}

// ByAppliedAt orders the results by the applied_at field.
func ByAppliedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppliedAt, opts...).ToFunc()
}

// ByPeriodStart orders the results by the period_start field.
func ByPeriodStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriodStart, opts...).ToFunc()
}

// ByPeriodEnd orders the results by the period_end field.
func ByPeriodEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriodEnd, opts...).ToFunc()
}

// ByApplicationStatus orders the results by the application_status field.
func ByApplicationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationStatus, opts...).ToFunc()
}

// ByCreditsApplied orders the results by the credits_applied field.
func ByCreditsApplied(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreditsApplied, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByApplicationReason orders the results by the application_reason field.
func ByApplicationReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationReason, opts...).ToFunc()
}

// BySubscriptionStatusAtApplication orders the results by the subscription_status_at_application field.
func BySubscriptionStatusAtApplication(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionStatusAtApplication, opts...).ToFunc()
}

// ByIsProrated orders the results by the is_prorated field.
func ByIsProrated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsProrated, opts...).ToFunc()
}

// ByProrationFactor orders the results by the proration_factor field.
func ByProrationFactor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProrationFactor, opts...).ToFunc()
}

// ByFullPeriodAmount orders the results by the full_period_amount field.
func ByFullPeriodAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullPeriodAmount, opts...).ToFunc()
}

// ByRetryCount orders the results by the retry_count field.
func ByRetryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryCount, opts...).ToFunc()
}

// ByFailureReason orders the results by the failure_reason field.
func ByFailureReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailureReason, opts...).ToFunc()
}

// ByNextRetryAt orders the results by the next_retry_at field.
func ByNextRetryAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextRetryAt, opts...).ToFunc()
}

// ByMetadata orders the results by the metadata field.
func ByMetadata(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadata, opts...).ToFunc()
}

// ByIdempotencyKey orders the results by the idempotency_key field.
func ByIdempotencyKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdempotencyKey, opts...).ToFunc()
}
