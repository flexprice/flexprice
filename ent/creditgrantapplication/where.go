// Code generated by ent, DO NOT EDIT.

package creditgrantapplication

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/internal/types"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldUpdatedBy, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldEnvironmentID, v))
}

// CreditGrantID applies equality check predicate on the "credit_grant_id" field. It's identical to CreditGrantIDEQ.
func CreditGrantID(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldCreditGrantID, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldSubscriptionID, v))
}

// ScheduledFor applies equality check predicate on the "scheduled_for" field. It's identical to ScheduledForEQ.
func ScheduledFor(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldScheduledFor, v))
}

// AppliedAt applies equality check predicate on the "applied_at" field. It's identical to AppliedAtEQ.
func AppliedAt(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldAppliedAt, v))
}

// BillingPeriodStart applies equality check predicate on the "billing_period_start" field. It's identical to BillingPeriodStartEQ.
func BillingPeriodStart(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldBillingPeriodStart, v))
}

// BillingPeriodEnd applies equality check predicate on the "billing_period_end" field. It's identical to BillingPeriodEndEQ.
func BillingPeriodEnd(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldBillingPeriodEnd, v))
}

// ApplicationStatus applies equality check predicate on the "application_status" field. It's identical to ApplicationStatusEQ.
func ApplicationStatus(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldApplicationStatus, v))
}

// AmountApplied applies equality check predicate on the "amount_applied" field. It's identical to AmountAppliedEQ.
func AmountApplied(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldAmountApplied, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldCurrency, v))
}

// ApplicationReason applies equality check predicate on the "application_reason" field. It's identical to ApplicationReasonEQ.
func ApplicationReason(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldApplicationReason, v))
}

// SubscriptionStatusAtApplication applies equality check predicate on the "subscription_status_at_application" field. It's identical to SubscriptionStatusAtApplicationEQ.
func SubscriptionStatusAtApplication(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldSubscriptionStatusAtApplication, v))
}

// IsProrated applies equality check predicate on the "is_prorated" field. It's identical to IsProratedEQ.
func IsProrated(v bool) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldIsProrated, v))
}

// ProrationFactor applies equality check predicate on the "proration_factor" field. It's identical to ProrationFactorEQ.
func ProrationFactor(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldProrationFactor, v))
}

// FullPeriodAmount applies equality check predicate on the "full_period_amount" field. It's identical to FullPeriodAmountEQ.
func FullPeriodAmount(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldFullPeriodAmount, v))
}

// RetryCount applies equality check predicate on the "retry_count" field. It's identical to RetryCountEQ.
func RetryCount(v int) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldRetryCount, v))
}

// FailureReason applies equality check predicate on the "failure_reason" field. It's identical to FailureReasonEQ.
func FailureReason(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldFailureReason, v))
}

// NextRetryAt applies equality check predicate on the "next_retry_at" field. It's identical to NextRetryAtEQ.
func NextRetryAt(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldNextRetryAt, v))
}

// Metadata applies equality check predicate on the "metadata" field. It's identical to MetadataEQ.
func Metadata(v types.Metadata) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldMetadata, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContains(FieldEnvironmentID, v))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasPrefix(FieldEnvironmentID, v))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasSuffix(FieldEnvironmentID, v))
}

// EnvironmentIDIsNil applies the IsNil predicate on the "environment_id" field.
func EnvironmentIDIsNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIsNull(FieldEnvironmentID))
}

// EnvironmentIDNotNil applies the NotNil predicate on the "environment_id" field.
func EnvironmentIDNotNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotNull(FieldEnvironmentID))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEqualFold(FieldEnvironmentID, v))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContainsFold(FieldEnvironmentID, v))
}

// CreditGrantIDEQ applies the EQ predicate on the "credit_grant_id" field.
func CreditGrantIDEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldCreditGrantID, v))
}

// CreditGrantIDNEQ applies the NEQ predicate on the "credit_grant_id" field.
func CreditGrantIDNEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldCreditGrantID, v))
}

// CreditGrantIDIn applies the In predicate on the "credit_grant_id" field.
func CreditGrantIDIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldCreditGrantID, vs...))
}

// CreditGrantIDNotIn applies the NotIn predicate on the "credit_grant_id" field.
func CreditGrantIDNotIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldCreditGrantID, vs...))
}

// CreditGrantIDGT applies the GT predicate on the "credit_grant_id" field.
func CreditGrantIDGT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldCreditGrantID, v))
}

// CreditGrantIDGTE applies the GTE predicate on the "credit_grant_id" field.
func CreditGrantIDGTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldCreditGrantID, v))
}

// CreditGrantIDLT applies the LT predicate on the "credit_grant_id" field.
func CreditGrantIDLT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldCreditGrantID, v))
}

// CreditGrantIDLTE applies the LTE predicate on the "credit_grant_id" field.
func CreditGrantIDLTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldCreditGrantID, v))
}

// CreditGrantIDContains applies the Contains predicate on the "credit_grant_id" field.
func CreditGrantIDContains(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContains(FieldCreditGrantID, v))
}

// CreditGrantIDHasPrefix applies the HasPrefix predicate on the "credit_grant_id" field.
func CreditGrantIDHasPrefix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasPrefix(FieldCreditGrantID, v))
}

// CreditGrantIDHasSuffix applies the HasSuffix predicate on the "credit_grant_id" field.
func CreditGrantIDHasSuffix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasSuffix(FieldCreditGrantID, v))
}

// CreditGrantIDEqualFold applies the EqualFold predicate on the "credit_grant_id" field.
func CreditGrantIDEqualFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEqualFold(FieldCreditGrantID, v))
}

// CreditGrantIDContainsFold applies the ContainsFold predicate on the "credit_grant_id" field.
func CreditGrantIDContainsFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContainsFold(FieldCreditGrantID, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// ScheduledForEQ applies the EQ predicate on the "scheduled_for" field.
func ScheduledForEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldScheduledFor, v))
}

// ScheduledForNEQ applies the NEQ predicate on the "scheduled_for" field.
func ScheduledForNEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldScheduledFor, v))
}

// ScheduledForIn applies the In predicate on the "scheduled_for" field.
func ScheduledForIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldScheduledFor, vs...))
}

// ScheduledForNotIn applies the NotIn predicate on the "scheduled_for" field.
func ScheduledForNotIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldScheduledFor, vs...))
}

// ScheduledForGT applies the GT predicate on the "scheduled_for" field.
func ScheduledForGT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldScheduledFor, v))
}

// ScheduledForGTE applies the GTE predicate on the "scheduled_for" field.
func ScheduledForGTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldScheduledFor, v))
}

// ScheduledForLT applies the LT predicate on the "scheduled_for" field.
func ScheduledForLT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldScheduledFor, v))
}

// ScheduledForLTE applies the LTE predicate on the "scheduled_for" field.
func ScheduledForLTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldScheduledFor, v))
}

// AppliedAtEQ applies the EQ predicate on the "applied_at" field.
func AppliedAtEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldAppliedAt, v))
}

// AppliedAtNEQ applies the NEQ predicate on the "applied_at" field.
func AppliedAtNEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldAppliedAt, v))
}

// AppliedAtIn applies the In predicate on the "applied_at" field.
func AppliedAtIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldAppliedAt, vs...))
}

// AppliedAtNotIn applies the NotIn predicate on the "applied_at" field.
func AppliedAtNotIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldAppliedAt, vs...))
}

// AppliedAtGT applies the GT predicate on the "applied_at" field.
func AppliedAtGT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldAppliedAt, v))
}

// AppliedAtGTE applies the GTE predicate on the "applied_at" field.
func AppliedAtGTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldAppliedAt, v))
}

// AppliedAtLT applies the LT predicate on the "applied_at" field.
func AppliedAtLT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldAppliedAt, v))
}

// AppliedAtLTE applies the LTE predicate on the "applied_at" field.
func AppliedAtLTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldAppliedAt, v))
}

// AppliedAtIsNil applies the IsNil predicate on the "applied_at" field.
func AppliedAtIsNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIsNull(FieldAppliedAt))
}

// AppliedAtNotNil applies the NotNil predicate on the "applied_at" field.
func AppliedAtNotNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotNull(FieldAppliedAt))
}

// BillingPeriodStartEQ applies the EQ predicate on the "billing_period_start" field.
func BillingPeriodStartEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldBillingPeriodStart, v))
}

// BillingPeriodStartNEQ applies the NEQ predicate on the "billing_period_start" field.
func BillingPeriodStartNEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldBillingPeriodStart, v))
}

// BillingPeriodStartIn applies the In predicate on the "billing_period_start" field.
func BillingPeriodStartIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldBillingPeriodStart, vs...))
}

// BillingPeriodStartNotIn applies the NotIn predicate on the "billing_period_start" field.
func BillingPeriodStartNotIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldBillingPeriodStart, vs...))
}

// BillingPeriodStartGT applies the GT predicate on the "billing_period_start" field.
func BillingPeriodStartGT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldBillingPeriodStart, v))
}

// BillingPeriodStartGTE applies the GTE predicate on the "billing_period_start" field.
func BillingPeriodStartGTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldBillingPeriodStart, v))
}

// BillingPeriodStartLT applies the LT predicate on the "billing_period_start" field.
func BillingPeriodStartLT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldBillingPeriodStart, v))
}

// BillingPeriodStartLTE applies the LTE predicate on the "billing_period_start" field.
func BillingPeriodStartLTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldBillingPeriodStart, v))
}

// BillingPeriodEndEQ applies the EQ predicate on the "billing_period_end" field.
func BillingPeriodEndEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldBillingPeriodEnd, v))
}

// BillingPeriodEndNEQ applies the NEQ predicate on the "billing_period_end" field.
func BillingPeriodEndNEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldBillingPeriodEnd, v))
}

// BillingPeriodEndIn applies the In predicate on the "billing_period_end" field.
func BillingPeriodEndIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldBillingPeriodEnd, vs...))
}

// BillingPeriodEndNotIn applies the NotIn predicate on the "billing_period_end" field.
func BillingPeriodEndNotIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldBillingPeriodEnd, vs...))
}

// BillingPeriodEndGT applies the GT predicate on the "billing_period_end" field.
func BillingPeriodEndGT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldBillingPeriodEnd, v))
}

// BillingPeriodEndGTE applies the GTE predicate on the "billing_period_end" field.
func BillingPeriodEndGTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldBillingPeriodEnd, v))
}

// BillingPeriodEndLT applies the LT predicate on the "billing_period_end" field.
func BillingPeriodEndLT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldBillingPeriodEnd, v))
}

// BillingPeriodEndLTE applies the LTE predicate on the "billing_period_end" field.
func BillingPeriodEndLTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldBillingPeriodEnd, v))
}

// ApplicationStatusEQ applies the EQ predicate on the "application_status" field.
func ApplicationStatusEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldApplicationStatus, v))
}

// ApplicationStatusNEQ applies the NEQ predicate on the "application_status" field.
func ApplicationStatusNEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldApplicationStatus, v))
}

// ApplicationStatusIn applies the In predicate on the "application_status" field.
func ApplicationStatusIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldApplicationStatus, vs...))
}

// ApplicationStatusNotIn applies the NotIn predicate on the "application_status" field.
func ApplicationStatusNotIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldApplicationStatus, vs...))
}

// ApplicationStatusGT applies the GT predicate on the "application_status" field.
func ApplicationStatusGT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldApplicationStatus, v))
}

// ApplicationStatusGTE applies the GTE predicate on the "application_status" field.
func ApplicationStatusGTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldApplicationStatus, v))
}

// ApplicationStatusLT applies the LT predicate on the "application_status" field.
func ApplicationStatusLT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldApplicationStatus, v))
}

// ApplicationStatusLTE applies the LTE predicate on the "application_status" field.
func ApplicationStatusLTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldApplicationStatus, v))
}

// ApplicationStatusContains applies the Contains predicate on the "application_status" field.
func ApplicationStatusContains(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContains(FieldApplicationStatus, v))
}

// ApplicationStatusHasPrefix applies the HasPrefix predicate on the "application_status" field.
func ApplicationStatusHasPrefix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasPrefix(FieldApplicationStatus, v))
}

// ApplicationStatusHasSuffix applies the HasSuffix predicate on the "application_status" field.
func ApplicationStatusHasSuffix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasSuffix(FieldApplicationStatus, v))
}

// ApplicationStatusEqualFold applies the EqualFold predicate on the "application_status" field.
func ApplicationStatusEqualFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEqualFold(FieldApplicationStatus, v))
}

// ApplicationStatusContainsFold applies the ContainsFold predicate on the "application_status" field.
func ApplicationStatusContainsFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContainsFold(FieldApplicationStatus, v))
}

// AmountAppliedEQ applies the EQ predicate on the "amount_applied" field.
func AmountAppliedEQ(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldAmountApplied, v))
}

// AmountAppliedNEQ applies the NEQ predicate on the "amount_applied" field.
func AmountAppliedNEQ(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldAmountApplied, v))
}

// AmountAppliedIn applies the In predicate on the "amount_applied" field.
func AmountAppliedIn(vs ...decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldAmountApplied, vs...))
}

// AmountAppliedNotIn applies the NotIn predicate on the "amount_applied" field.
func AmountAppliedNotIn(vs ...decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldAmountApplied, vs...))
}

// AmountAppliedGT applies the GT predicate on the "amount_applied" field.
func AmountAppliedGT(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldAmountApplied, v))
}

// AmountAppliedGTE applies the GTE predicate on the "amount_applied" field.
func AmountAppliedGTE(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldAmountApplied, v))
}

// AmountAppliedLT applies the LT predicate on the "amount_applied" field.
func AmountAppliedLT(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldAmountApplied, v))
}

// AmountAppliedLTE applies the LTE predicate on the "amount_applied" field.
func AmountAppliedLTE(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldAmountApplied, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContainsFold(FieldCurrency, v))
}

// ApplicationReasonEQ applies the EQ predicate on the "application_reason" field.
func ApplicationReasonEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldApplicationReason, v))
}

// ApplicationReasonNEQ applies the NEQ predicate on the "application_reason" field.
func ApplicationReasonNEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldApplicationReason, v))
}

// ApplicationReasonIn applies the In predicate on the "application_reason" field.
func ApplicationReasonIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldApplicationReason, vs...))
}

// ApplicationReasonNotIn applies the NotIn predicate on the "application_reason" field.
func ApplicationReasonNotIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldApplicationReason, vs...))
}

// ApplicationReasonGT applies the GT predicate on the "application_reason" field.
func ApplicationReasonGT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldApplicationReason, v))
}

// ApplicationReasonGTE applies the GTE predicate on the "application_reason" field.
func ApplicationReasonGTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldApplicationReason, v))
}

// ApplicationReasonLT applies the LT predicate on the "application_reason" field.
func ApplicationReasonLT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldApplicationReason, v))
}

// ApplicationReasonLTE applies the LTE predicate on the "application_reason" field.
func ApplicationReasonLTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldApplicationReason, v))
}

// ApplicationReasonContains applies the Contains predicate on the "application_reason" field.
func ApplicationReasonContains(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContains(FieldApplicationReason, v))
}

// ApplicationReasonHasPrefix applies the HasPrefix predicate on the "application_reason" field.
func ApplicationReasonHasPrefix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasPrefix(FieldApplicationReason, v))
}

// ApplicationReasonHasSuffix applies the HasSuffix predicate on the "application_reason" field.
func ApplicationReasonHasSuffix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasSuffix(FieldApplicationReason, v))
}

// ApplicationReasonEqualFold applies the EqualFold predicate on the "application_reason" field.
func ApplicationReasonEqualFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEqualFold(FieldApplicationReason, v))
}

// ApplicationReasonContainsFold applies the ContainsFold predicate on the "application_reason" field.
func ApplicationReasonContainsFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContainsFold(FieldApplicationReason, v))
}

// SubscriptionStatusAtApplicationEQ applies the EQ predicate on the "subscription_status_at_application" field.
func SubscriptionStatusAtApplicationEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldSubscriptionStatusAtApplication, v))
}

// SubscriptionStatusAtApplicationNEQ applies the NEQ predicate on the "subscription_status_at_application" field.
func SubscriptionStatusAtApplicationNEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldSubscriptionStatusAtApplication, v))
}

// SubscriptionStatusAtApplicationIn applies the In predicate on the "subscription_status_at_application" field.
func SubscriptionStatusAtApplicationIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldSubscriptionStatusAtApplication, vs...))
}

// SubscriptionStatusAtApplicationNotIn applies the NotIn predicate on the "subscription_status_at_application" field.
func SubscriptionStatusAtApplicationNotIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldSubscriptionStatusAtApplication, vs...))
}

// SubscriptionStatusAtApplicationGT applies the GT predicate on the "subscription_status_at_application" field.
func SubscriptionStatusAtApplicationGT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldSubscriptionStatusAtApplication, v))
}

// SubscriptionStatusAtApplicationGTE applies the GTE predicate on the "subscription_status_at_application" field.
func SubscriptionStatusAtApplicationGTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldSubscriptionStatusAtApplication, v))
}

// SubscriptionStatusAtApplicationLT applies the LT predicate on the "subscription_status_at_application" field.
func SubscriptionStatusAtApplicationLT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldSubscriptionStatusAtApplication, v))
}

// SubscriptionStatusAtApplicationLTE applies the LTE predicate on the "subscription_status_at_application" field.
func SubscriptionStatusAtApplicationLTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldSubscriptionStatusAtApplication, v))
}

// SubscriptionStatusAtApplicationContains applies the Contains predicate on the "subscription_status_at_application" field.
func SubscriptionStatusAtApplicationContains(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContains(FieldSubscriptionStatusAtApplication, v))
}

// SubscriptionStatusAtApplicationHasPrefix applies the HasPrefix predicate on the "subscription_status_at_application" field.
func SubscriptionStatusAtApplicationHasPrefix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasPrefix(FieldSubscriptionStatusAtApplication, v))
}

// SubscriptionStatusAtApplicationHasSuffix applies the HasSuffix predicate on the "subscription_status_at_application" field.
func SubscriptionStatusAtApplicationHasSuffix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasSuffix(FieldSubscriptionStatusAtApplication, v))
}

// SubscriptionStatusAtApplicationEqualFold applies the EqualFold predicate on the "subscription_status_at_application" field.
func SubscriptionStatusAtApplicationEqualFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEqualFold(FieldSubscriptionStatusAtApplication, v))
}

// SubscriptionStatusAtApplicationContainsFold applies the ContainsFold predicate on the "subscription_status_at_application" field.
func SubscriptionStatusAtApplicationContainsFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContainsFold(FieldSubscriptionStatusAtApplication, v))
}

// IsProratedEQ applies the EQ predicate on the "is_prorated" field.
func IsProratedEQ(v bool) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldIsProrated, v))
}

// IsProratedNEQ applies the NEQ predicate on the "is_prorated" field.
func IsProratedNEQ(v bool) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldIsProrated, v))
}

// ProrationFactorEQ applies the EQ predicate on the "proration_factor" field.
func ProrationFactorEQ(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldProrationFactor, v))
}

// ProrationFactorNEQ applies the NEQ predicate on the "proration_factor" field.
func ProrationFactorNEQ(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldProrationFactor, v))
}

// ProrationFactorIn applies the In predicate on the "proration_factor" field.
func ProrationFactorIn(vs ...decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldProrationFactor, vs...))
}

// ProrationFactorNotIn applies the NotIn predicate on the "proration_factor" field.
func ProrationFactorNotIn(vs ...decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldProrationFactor, vs...))
}

// ProrationFactorGT applies the GT predicate on the "proration_factor" field.
func ProrationFactorGT(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldProrationFactor, v))
}

// ProrationFactorGTE applies the GTE predicate on the "proration_factor" field.
func ProrationFactorGTE(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldProrationFactor, v))
}

// ProrationFactorLT applies the LT predicate on the "proration_factor" field.
func ProrationFactorLT(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldProrationFactor, v))
}

// ProrationFactorLTE applies the LTE predicate on the "proration_factor" field.
func ProrationFactorLTE(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldProrationFactor, v))
}

// ProrationFactorIsNil applies the IsNil predicate on the "proration_factor" field.
func ProrationFactorIsNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIsNull(FieldProrationFactor))
}

// ProrationFactorNotNil applies the NotNil predicate on the "proration_factor" field.
func ProrationFactorNotNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotNull(FieldProrationFactor))
}

// FullPeriodAmountEQ applies the EQ predicate on the "full_period_amount" field.
func FullPeriodAmountEQ(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldFullPeriodAmount, v))
}

// FullPeriodAmountNEQ applies the NEQ predicate on the "full_period_amount" field.
func FullPeriodAmountNEQ(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldFullPeriodAmount, v))
}

// FullPeriodAmountIn applies the In predicate on the "full_period_amount" field.
func FullPeriodAmountIn(vs ...decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldFullPeriodAmount, vs...))
}

// FullPeriodAmountNotIn applies the NotIn predicate on the "full_period_amount" field.
func FullPeriodAmountNotIn(vs ...decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldFullPeriodAmount, vs...))
}

// FullPeriodAmountGT applies the GT predicate on the "full_period_amount" field.
func FullPeriodAmountGT(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldFullPeriodAmount, v))
}

// FullPeriodAmountGTE applies the GTE predicate on the "full_period_amount" field.
func FullPeriodAmountGTE(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldFullPeriodAmount, v))
}

// FullPeriodAmountLT applies the LT predicate on the "full_period_amount" field.
func FullPeriodAmountLT(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldFullPeriodAmount, v))
}

// FullPeriodAmountLTE applies the LTE predicate on the "full_period_amount" field.
func FullPeriodAmountLTE(v decimal.Decimal) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldFullPeriodAmount, v))
}

// FullPeriodAmountIsNil applies the IsNil predicate on the "full_period_amount" field.
func FullPeriodAmountIsNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIsNull(FieldFullPeriodAmount))
}

// FullPeriodAmountNotNil applies the NotNil predicate on the "full_period_amount" field.
func FullPeriodAmountNotNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotNull(FieldFullPeriodAmount))
}

// RetryCountEQ applies the EQ predicate on the "retry_count" field.
func RetryCountEQ(v int) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldRetryCount, v))
}

// RetryCountNEQ applies the NEQ predicate on the "retry_count" field.
func RetryCountNEQ(v int) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldRetryCount, v))
}

// RetryCountIn applies the In predicate on the "retry_count" field.
func RetryCountIn(vs ...int) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldRetryCount, vs...))
}

// RetryCountNotIn applies the NotIn predicate on the "retry_count" field.
func RetryCountNotIn(vs ...int) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldRetryCount, vs...))
}

// RetryCountGT applies the GT predicate on the "retry_count" field.
func RetryCountGT(v int) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldRetryCount, v))
}

// RetryCountGTE applies the GTE predicate on the "retry_count" field.
func RetryCountGTE(v int) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldRetryCount, v))
}

// RetryCountLT applies the LT predicate on the "retry_count" field.
func RetryCountLT(v int) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldRetryCount, v))
}

// RetryCountLTE applies the LTE predicate on the "retry_count" field.
func RetryCountLTE(v int) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldRetryCount, v))
}

// FailureReasonEQ applies the EQ predicate on the "failure_reason" field.
func FailureReasonEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldFailureReason, v))
}

// FailureReasonNEQ applies the NEQ predicate on the "failure_reason" field.
func FailureReasonNEQ(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldFailureReason, v))
}

// FailureReasonIn applies the In predicate on the "failure_reason" field.
func FailureReasonIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldFailureReason, vs...))
}

// FailureReasonNotIn applies the NotIn predicate on the "failure_reason" field.
func FailureReasonNotIn(vs ...string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldFailureReason, vs...))
}

// FailureReasonGT applies the GT predicate on the "failure_reason" field.
func FailureReasonGT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldFailureReason, v))
}

// FailureReasonGTE applies the GTE predicate on the "failure_reason" field.
func FailureReasonGTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldFailureReason, v))
}

// FailureReasonLT applies the LT predicate on the "failure_reason" field.
func FailureReasonLT(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldFailureReason, v))
}

// FailureReasonLTE applies the LTE predicate on the "failure_reason" field.
func FailureReasonLTE(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldFailureReason, v))
}

// FailureReasonContains applies the Contains predicate on the "failure_reason" field.
func FailureReasonContains(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContains(FieldFailureReason, v))
}

// FailureReasonHasPrefix applies the HasPrefix predicate on the "failure_reason" field.
func FailureReasonHasPrefix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasPrefix(FieldFailureReason, v))
}

// FailureReasonHasSuffix applies the HasSuffix predicate on the "failure_reason" field.
func FailureReasonHasSuffix(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldHasSuffix(FieldFailureReason, v))
}

// FailureReasonIsNil applies the IsNil predicate on the "failure_reason" field.
func FailureReasonIsNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIsNull(FieldFailureReason))
}

// FailureReasonNotNil applies the NotNil predicate on the "failure_reason" field.
func FailureReasonNotNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotNull(FieldFailureReason))
}

// FailureReasonEqualFold applies the EqualFold predicate on the "failure_reason" field.
func FailureReasonEqualFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEqualFold(FieldFailureReason, v))
}

// FailureReasonContainsFold applies the ContainsFold predicate on the "failure_reason" field.
func FailureReasonContainsFold(v string) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldContainsFold(FieldFailureReason, v))
}

// NextRetryAtEQ applies the EQ predicate on the "next_retry_at" field.
func NextRetryAtEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldNextRetryAt, v))
}

// NextRetryAtNEQ applies the NEQ predicate on the "next_retry_at" field.
func NextRetryAtNEQ(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldNextRetryAt, v))
}

// NextRetryAtIn applies the In predicate on the "next_retry_at" field.
func NextRetryAtIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldNextRetryAt, vs...))
}

// NextRetryAtNotIn applies the NotIn predicate on the "next_retry_at" field.
func NextRetryAtNotIn(vs ...time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldNextRetryAt, vs...))
}

// NextRetryAtGT applies the GT predicate on the "next_retry_at" field.
func NextRetryAtGT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldNextRetryAt, v))
}

// NextRetryAtGTE applies the GTE predicate on the "next_retry_at" field.
func NextRetryAtGTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldNextRetryAt, v))
}

// NextRetryAtLT applies the LT predicate on the "next_retry_at" field.
func NextRetryAtLT(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldNextRetryAt, v))
}

// NextRetryAtLTE applies the LTE predicate on the "next_retry_at" field.
func NextRetryAtLTE(v time.Time) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldNextRetryAt, v))
}

// NextRetryAtIsNil applies the IsNil predicate on the "next_retry_at" field.
func NextRetryAtIsNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIsNull(FieldNextRetryAt))
}

// NextRetryAtNotNil applies the NotNil predicate on the "next_retry_at" field.
func NextRetryAtNotNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotNull(FieldNextRetryAt))
}

// MetadataEQ applies the EQ predicate on the "metadata" field.
func MetadataEQ(v types.Metadata) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldEQ(FieldMetadata, v))
}

// MetadataNEQ applies the NEQ predicate on the "metadata" field.
func MetadataNEQ(v types.Metadata) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNEQ(FieldMetadata, v))
}

// MetadataIn applies the In predicate on the "metadata" field.
func MetadataIn(vs ...types.Metadata) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIn(FieldMetadata, vs...))
}

// MetadataNotIn applies the NotIn predicate on the "metadata" field.
func MetadataNotIn(vs ...types.Metadata) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotIn(FieldMetadata, vs...))
}

// MetadataGT applies the GT predicate on the "metadata" field.
func MetadataGT(v types.Metadata) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGT(FieldMetadata, v))
}

// MetadataGTE applies the GTE predicate on the "metadata" field.
func MetadataGTE(v types.Metadata) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldGTE(FieldMetadata, v))
}

// MetadataLT applies the LT predicate on the "metadata" field.
func MetadataLT(v types.Metadata) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLT(FieldMetadata, v))
}

// MetadataLTE applies the LTE predicate on the "metadata" field.
func MetadataLTE(v types.Metadata) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldLTE(FieldMetadata, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.FieldNotNull(FieldMetadata))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CreditGrantApplication) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CreditGrantApplication) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CreditGrantApplication) predicate.CreditGrantApplication {
	return predicate.CreditGrantApplication(sql.NotPredicates(p))
}
