// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/creditgrantapplication"
	"github.com/flexprice/flexprice/internal/types"
	"github.com/shopspring/decimal"
)

// CreditGrantApplicationCreate is the builder for creating a CreditGrantApplication entity.
type CreditGrantApplicationCreate struct {
	config
	mutation *CreditGrantApplicationMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (cgac *CreditGrantApplicationCreate) SetTenantID(s string) *CreditGrantApplicationCreate {
	cgac.mutation.SetTenantID(s)
	return cgac
}

// SetStatus sets the "status" field.
func (cgac *CreditGrantApplicationCreate) SetStatus(s string) *CreditGrantApplicationCreate {
	cgac.mutation.SetStatus(s)
	return cgac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cgac *CreditGrantApplicationCreate) SetNillableStatus(s *string) *CreditGrantApplicationCreate {
	if s != nil {
		cgac.SetStatus(*s)
	}
	return cgac
}

// SetCreatedAt sets the "created_at" field.
func (cgac *CreditGrantApplicationCreate) SetCreatedAt(t time.Time) *CreditGrantApplicationCreate {
	cgac.mutation.SetCreatedAt(t)
	return cgac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cgac *CreditGrantApplicationCreate) SetNillableCreatedAt(t *time.Time) *CreditGrantApplicationCreate {
	if t != nil {
		cgac.SetCreatedAt(*t)
	}
	return cgac
}

// SetUpdatedAt sets the "updated_at" field.
func (cgac *CreditGrantApplicationCreate) SetUpdatedAt(t time.Time) *CreditGrantApplicationCreate {
	cgac.mutation.SetUpdatedAt(t)
	return cgac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cgac *CreditGrantApplicationCreate) SetNillableUpdatedAt(t *time.Time) *CreditGrantApplicationCreate {
	if t != nil {
		cgac.SetUpdatedAt(*t)
	}
	return cgac
}

// SetCreatedBy sets the "created_by" field.
func (cgac *CreditGrantApplicationCreate) SetCreatedBy(s string) *CreditGrantApplicationCreate {
	cgac.mutation.SetCreatedBy(s)
	return cgac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cgac *CreditGrantApplicationCreate) SetNillableCreatedBy(s *string) *CreditGrantApplicationCreate {
	if s != nil {
		cgac.SetCreatedBy(*s)
	}
	return cgac
}

// SetUpdatedBy sets the "updated_by" field.
func (cgac *CreditGrantApplicationCreate) SetUpdatedBy(s string) *CreditGrantApplicationCreate {
	cgac.mutation.SetUpdatedBy(s)
	return cgac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cgac *CreditGrantApplicationCreate) SetNillableUpdatedBy(s *string) *CreditGrantApplicationCreate {
	if s != nil {
		cgac.SetUpdatedBy(*s)
	}
	return cgac
}

// SetEnvironmentID sets the "environment_id" field.
func (cgac *CreditGrantApplicationCreate) SetEnvironmentID(s string) *CreditGrantApplicationCreate {
	cgac.mutation.SetEnvironmentID(s)
	return cgac
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (cgac *CreditGrantApplicationCreate) SetNillableEnvironmentID(s *string) *CreditGrantApplicationCreate {
	if s != nil {
		cgac.SetEnvironmentID(*s)
	}
	return cgac
}

// SetCreditGrantID sets the "credit_grant_id" field.
func (cgac *CreditGrantApplicationCreate) SetCreditGrantID(s string) *CreditGrantApplicationCreate {
	cgac.mutation.SetCreditGrantID(s)
	return cgac
}

// SetSubscriptionID sets the "subscription_id" field.
func (cgac *CreditGrantApplicationCreate) SetSubscriptionID(s string) *CreditGrantApplicationCreate {
	cgac.mutation.SetSubscriptionID(s)
	return cgac
}

// SetScheduledFor sets the "scheduled_for" field.
func (cgac *CreditGrantApplicationCreate) SetScheduledFor(t time.Time) *CreditGrantApplicationCreate {
	cgac.mutation.SetScheduledFor(t)
	return cgac
}

// SetAppliedAt sets the "applied_at" field.
func (cgac *CreditGrantApplicationCreate) SetAppliedAt(t time.Time) *CreditGrantApplicationCreate {
	cgac.mutation.SetAppliedAt(t)
	return cgac
}

// SetNillableAppliedAt sets the "applied_at" field if the given value is not nil.
func (cgac *CreditGrantApplicationCreate) SetNillableAppliedAt(t *time.Time) *CreditGrantApplicationCreate {
	if t != nil {
		cgac.SetAppliedAt(*t)
	}
	return cgac
}

// SetPeriodStart sets the "period_start" field.
func (cgac *CreditGrantApplicationCreate) SetPeriodStart(t time.Time) *CreditGrantApplicationCreate {
	cgac.mutation.SetPeriodStart(t)
	return cgac
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (cgac *CreditGrantApplicationCreate) SetNillablePeriodStart(t *time.Time) *CreditGrantApplicationCreate {
	if t != nil {
		cgac.SetPeriodStart(*t)
	}
	return cgac
}

// SetPeriodEnd sets the "period_end" field.
func (cgac *CreditGrantApplicationCreate) SetPeriodEnd(t time.Time) *CreditGrantApplicationCreate {
	cgac.mutation.SetPeriodEnd(t)
	return cgac
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (cgac *CreditGrantApplicationCreate) SetNillablePeriodEnd(t *time.Time) *CreditGrantApplicationCreate {
	if t != nil {
		cgac.SetPeriodEnd(*t)
	}
	return cgac
}

// SetApplicationStatus sets the "application_status" field.
func (cgac *CreditGrantApplicationCreate) SetApplicationStatus(ts types.ApplicationStatus) *CreditGrantApplicationCreate {
	cgac.mutation.SetApplicationStatus(ts)
	return cgac
}

// SetNillableApplicationStatus sets the "application_status" field if the given value is not nil.
func (cgac *CreditGrantApplicationCreate) SetNillableApplicationStatus(ts *types.ApplicationStatus) *CreditGrantApplicationCreate {
	if ts != nil {
		cgac.SetApplicationStatus(*ts)
	}
	return cgac
}

// SetCreditsApplied sets the "credits_applied" field.
func (cgac *CreditGrantApplicationCreate) SetCreditsApplied(d decimal.Decimal) *CreditGrantApplicationCreate {
	cgac.mutation.SetCreditsApplied(d)
	return cgac
}

// SetNillableCreditsApplied sets the "credits_applied" field if the given value is not nil.
func (cgac *CreditGrantApplicationCreate) SetNillableCreditsApplied(d *decimal.Decimal) *CreditGrantApplicationCreate {
	if d != nil {
		cgac.SetCreditsApplied(*d)
	}
	return cgac
}

// SetApplicationReason sets the "application_reason" field.
func (cgac *CreditGrantApplicationCreate) SetApplicationReason(tgar types.CreditGrantApplicationReason) *CreditGrantApplicationCreate {
	cgac.mutation.SetApplicationReason(tgar)
	return cgac
}

// SetSubscriptionStatusAtApplication sets the "subscription_status_at_application" field.
func (cgac *CreditGrantApplicationCreate) SetSubscriptionStatusAtApplication(ts types.SubscriptionStatus) *CreditGrantApplicationCreate {
	cgac.mutation.SetSubscriptionStatusAtApplication(ts)
	return cgac
}

// SetRetryCount sets the "retry_count" field.
func (cgac *CreditGrantApplicationCreate) SetRetryCount(i int) *CreditGrantApplicationCreate {
	cgac.mutation.SetRetryCount(i)
	return cgac
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (cgac *CreditGrantApplicationCreate) SetNillableRetryCount(i *int) *CreditGrantApplicationCreate {
	if i != nil {
		cgac.SetRetryCount(*i)
	}
	return cgac
}

// SetFailureReason sets the "failure_reason" field.
func (cgac *CreditGrantApplicationCreate) SetFailureReason(s string) *CreditGrantApplicationCreate {
	cgac.mutation.SetFailureReason(s)
	return cgac
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (cgac *CreditGrantApplicationCreate) SetNillableFailureReason(s *string) *CreditGrantApplicationCreate {
	if s != nil {
		cgac.SetFailureReason(*s)
	}
	return cgac
}

// SetMetadata sets the "metadata" field.
func (cgac *CreditGrantApplicationCreate) SetMetadata(t types.Metadata) *CreditGrantApplicationCreate {
	cgac.mutation.SetMetadata(t)
	return cgac
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (cgac *CreditGrantApplicationCreate) SetIdempotencyKey(s string) *CreditGrantApplicationCreate {
	cgac.mutation.SetIdempotencyKey(s)
	return cgac
}

// SetID sets the "id" field.
func (cgac *CreditGrantApplicationCreate) SetID(s string) *CreditGrantApplicationCreate {
	cgac.mutation.SetID(s)
	return cgac
}

// Mutation returns the CreditGrantApplicationMutation object of the builder.
func (cgac *CreditGrantApplicationCreate) Mutation() *CreditGrantApplicationMutation {
	return cgac.mutation
}

// Save creates the CreditGrantApplication in the database.
func (cgac *CreditGrantApplicationCreate) Save(ctx context.Context) (*CreditGrantApplication, error) {
	cgac.defaults()
	return withHooks(ctx, cgac.sqlSave, cgac.mutation, cgac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cgac *CreditGrantApplicationCreate) SaveX(ctx context.Context) *CreditGrantApplication {
	v, err := cgac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgac *CreditGrantApplicationCreate) Exec(ctx context.Context) error {
	_, err := cgac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgac *CreditGrantApplicationCreate) ExecX(ctx context.Context) {
	if err := cgac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cgac *CreditGrantApplicationCreate) defaults() {
	if _, ok := cgac.mutation.Status(); !ok {
		v := creditgrantapplication.DefaultStatus
		cgac.mutation.SetStatus(v)
	}
	if _, ok := cgac.mutation.CreatedAt(); !ok {
		v := creditgrantapplication.DefaultCreatedAt()
		cgac.mutation.SetCreatedAt(v)
	}
	if _, ok := cgac.mutation.UpdatedAt(); !ok {
		v := creditgrantapplication.DefaultUpdatedAt()
		cgac.mutation.SetUpdatedAt(v)
	}
	if _, ok := cgac.mutation.EnvironmentID(); !ok {
		v := creditgrantapplication.DefaultEnvironmentID
		cgac.mutation.SetEnvironmentID(v)
	}
	if _, ok := cgac.mutation.ApplicationStatus(); !ok {
		v := creditgrantapplication.DefaultApplicationStatus
		cgac.mutation.SetApplicationStatus(v)
	}
	if _, ok := cgac.mutation.CreditsApplied(); !ok {
		v := creditgrantapplication.DefaultCreditsApplied
		cgac.mutation.SetCreditsApplied(v)
	}
	if _, ok := cgac.mutation.RetryCount(); !ok {
		v := creditgrantapplication.DefaultRetryCount
		cgac.mutation.SetRetryCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cgac *CreditGrantApplicationCreate) check() error {
	if _, ok := cgac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CreditGrantApplication.tenant_id"`)}
	}
	if v, ok := cgac.mutation.TenantID(); ok {
		if err := creditgrantapplication.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "CreditGrantApplication.tenant_id": %w`, err)}
		}
	}
	if _, ok := cgac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CreditGrantApplication.status"`)}
	}
	if _, ok := cgac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CreditGrantApplication.created_at"`)}
	}
	if _, ok := cgac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CreditGrantApplication.updated_at"`)}
	}
	if _, ok := cgac.mutation.CreditGrantID(); !ok {
		return &ValidationError{Name: "credit_grant_id", err: errors.New(`ent: missing required field "CreditGrantApplication.credit_grant_id"`)}
	}
	if v, ok := cgac.mutation.CreditGrantID(); ok {
		if err := creditgrantapplication.CreditGrantIDValidator(v); err != nil {
			return &ValidationError{Name: "credit_grant_id", err: fmt.Errorf(`ent: validator failed for field "CreditGrantApplication.credit_grant_id": %w`, err)}
		}
	}
	if _, ok := cgac.mutation.SubscriptionID(); !ok {
		return &ValidationError{Name: "subscription_id", err: errors.New(`ent: missing required field "CreditGrantApplication.subscription_id"`)}
	}
	if v, ok := cgac.mutation.SubscriptionID(); ok {
		if err := creditgrantapplication.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`ent: validator failed for field "CreditGrantApplication.subscription_id": %w`, err)}
		}
	}
	if _, ok := cgac.mutation.ScheduledFor(); !ok {
		return &ValidationError{Name: "scheduled_for", err: errors.New(`ent: missing required field "CreditGrantApplication.scheduled_for"`)}
	}
	if _, ok := cgac.mutation.ApplicationStatus(); !ok {
		return &ValidationError{Name: "application_status", err: errors.New(`ent: missing required field "CreditGrantApplication.application_status"`)}
	}
	if _, ok := cgac.mutation.CreditsApplied(); !ok {
		return &ValidationError{Name: "credits_applied", err: errors.New(`ent: missing required field "CreditGrantApplication.credits_applied"`)}
	}
	if _, ok := cgac.mutation.ApplicationReason(); !ok {
		return &ValidationError{Name: "application_reason", err: errors.New(`ent: missing required field "CreditGrantApplication.application_reason"`)}
	}
	if v, ok := cgac.mutation.ApplicationReason(); ok {
		if err := creditgrantapplication.ApplicationReasonValidator(string(v)); err != nil {
			return &ValidationError{Name: "application_reason", err: fmt.Errorf(`ent: validator failed for field "CreditGrantApplication.application_reason": %w`, err)}
		}
	}
	if _, ok := cgac.mutation.SubscriptionStatusAtApplication(); !ok {
		return &ValidationError{Name: "subscription_status_at_application", err: errors.New(`ent: missing required field "CreditGrantApplication.subscription_status_at_application"`)}
	}
	if v, ok := cgac.mutation.SubscriptionStatusAtApplication(); ok {
		if err := creditgrantapplication.SubscriptionStatusAtApplicationValidator(string(v)); err != nil {
			return &ValidationError{Name: "subscription_status_at_application", err: fmt.Errorf(`ent: validator failed for field "CreditGrantApplication.subscription_status_at_application": %w`, err)}
		}
	}
	if _, ok := cgac.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`ent: missing required field "CreditGrantApplication.retry_count"`)}
	}
	if _, ok := cgac.mutation.IdempotencyKey(); !ok {
		return &ValidationError{Name: "idempotency_key", err: errors.New(`ent: missing required field "CreditGrantApplication.idempotency_key"`)}
	}
	return nil
}

func (cgac *CreditGrantApplicationCreate) sqlSave(ctx context.Context) (*CreditGrantApplication, error) {
	if err := cgac.check(); err != nil {
		return nil, err
	}
	_node, _spec := cgac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cgac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CreditGrantApplication.ID type: %T", _spec.ID.Value)
		}
	}
	cgac.mutation.id = &_node.ID
	cgac.mutation.done = true
	return _node, nil
}

func (cgac *CreditGrantApplicationCreate) createSpec() (*CreditGrantApplication, *sqlgraph.CreateSpec) {
	var (
		_node = &CreditGrantApplication{config: cgac.config}
		_spec = sqlgraph.NewCreateSpec(creditgrantapplication.Table, sqlgraph.NewFieldSpec(creditgrantapplication.FieldID, field.TypeString))
	)
	if id, ok := cgac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cgac.mutation.TenantID(); ok {
		_spec.SetField(creditgrantapplication.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := cgac.mutation.Status(); ok {
		_spec.SetField(creditgrantapplication.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cgac.mutation.CreatedAt(); ok {
		_spec.SetField(creditgrantapplication.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cgac.mutation.UpdatedAt(); ok {
		_spec.SetField(creditgrantapplication.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cgac.mutation.CreatedBy(); ok {
		_spec.SetField(creditgrantapplication.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cgac.mutation.UpdatedBy(); ok {
		_spec.SetField(creditgrantapplication.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cgac.mutation.EnvironmentID(); ok {
		_spec.SetField(creditgrantapplication.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := cgac.mutation.CreditGrantID(); ok {
		_spec.SetField(creditgrantapplication.FieldCreditGrantID, field.TypeString, value)
		_node.CreditGrantID = value
	}
	if value, ok := cgac.mutation.SubscriptionID(); ok {
		_spec.SetField(creditgrantapplication.FieldSubscriptionID, field.TypeString, value)
		_node.SubscriptionID = value
	}
	if value, ok := cgac.mutation.ScheduledFor(); ok {
		_spec.SetField(creditgrantapplication.FieldScheduledFor, field.TypeTime, value)
		_node.ScheduledFor = value
	}
	if value, ok := cgac.mutation.AppliedAt(); ok {
		_spec.SetField(creditgrantapplication.FieldAppliedAt, field.TypeTime, value)
		_node.AppliedAt = &value
	}
	if value, ok := cgac.mutation.PeriodStart(); ok {
		_spec.SetField(creditgrantapplication.FieldPeriodStart, field.TypeTime, value)
		_node.PeriodStart = &value
	}
	if value, ok := cgac.mutation.PeriodEnd(); ok {
		_spec.SetField(creditgrantapplication.FieldPeriodEnd, field.TypeTime, value)
		_node.PeriodEnd = &value
	}
	if value, ok := cgac.mutation.ApplicationStatus(); ok {
		_spec.SetField(creditgrantapplication.FieldApplicationStatus, field.TypeString, value)
		_node.ApplicationStatus = value
	}
	if value, ok := cgac.mutation.CreditsApplied(); ok {
		_spec.SetField(creditgrantapplication.FieldCreditsApplied, field.TypeOther, value)
		_node.CreditsApplied = value
	}
	if value, ok := cgac.mutation.ApplicationReason(); ok {
		_spec.SetField(creditgrantapplication.FieldApplicationReason, field.TypeString, value)
		_node.ApplicationReason = value
	}
	if value, ok := cgac.mutation.SubscriptionStatusAtApplication(); ok {
		_spec.SetField(creditgrantapplication.FieldSubscriptionStatusAtApplication, field.TypeString, value)
		_node.SubscriptionStatusAtApplication = value
	}
	if value, ok := cgac.mutation.RetryCount(); ok {
		_spec.SetField(creditgrantapplication.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := cgac.mutation.FailureReason(); ok {
		_spec.SetField(creditgrantapplication.FieldFailureReason, field.TypeString, value)
		_node.FailureReason = &value
	}
	if value, ok := cgac.mutation.Metadata(); ok {
		_spec.SetField(creditgrantapplication.FieldMetadata, field.TypeOther, value)
		_node.Metadata = value
	}
	if value, ok := cgac.mutation.IdempotencyKey(); ok {
		_spec.SetField(creditgrantapplication.FieldIdempotencyKey, field.TypeString, value)
		_node.IdempotencyKey = value
	}
	return _node, _spec
}

// CreditGrantApplicationCreateBulk is the builder for creating many CreditGrantApplication entities in bulk.
type CreditGrantApplicationCreateBulk struct {
	config
	err      error
	builders []*CreditGrantApplicationCreate
}

// Save creates the CreditGrantApplication entities in the database.
func (cgacb *CreditGrantApplicationCreateBulk) Save(ctx context.Context) ([]*CreditGrantApplication, error) {
	if cgacb.err != nil {
		return nil, cgacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cgacb.builders))
	nodes := make([]*CreditGrantApplication, len(cgacb.builders))
	mutators := make([]Mutator, len(cgacb.builders))
	for i := range cgacb.builders {
		func(i int, root context.Context) {
			builder := cgacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CreditGrantApplicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cgacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cgacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cgacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cgacb *CreditGrantApplicationCreateBulk) SaveX(ctx context.Context) []*CreditGrantApplication {
	v, err := cgacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgacb *CreditGrantApplicationCreateBulk) Exec(ctx context.Context) error {
	_, err := cgacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgacb *CreditGrantApplicationCreateBulk) ExecX(ctx context.Context) {
	if err := cgacb.Exec(ctx); err != nil {
		panic(err)
	}
}
