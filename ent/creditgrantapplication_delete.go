// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/creditgrantapplication"
	"github.com/flexprice/flexprice/ent/predicate"
)

// CreditGrantApplicationDelete is the builder for deleting a CreditGrantApplication entity.
type CreditGrantApplicationDelete struct {
	config
	hooks    []Hook
	mutation *CreditGrantApplicationMutation
}

// Where appends a list predicates to the CreditGrantApplicationDelete builder.
func (cgad *CreditGrantApplicationDelete) Where(ps ...predicate.CreditGrantApplication) *CreditGrantApplicationDelete {
	cgad.mutation.Where(ps...)
	return cgad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cgad *CreditGrantApplicationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cgad.sqlExec, cgad.mutation, cgad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cgad *CreditGrantApplicationDelete) ExecX(ctx context.Context) int {
	n, err := cgad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cgad *CreditGrantApplicationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(creditgrantapplication.Table, sqlgraph.NewFieldSpec(creditgrantapplication.FieldID, field.TypeString))
	if ps := cgad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cgad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cgad.mutation.done = true
	return affected, err
}

// CreditGrantApplicationDeleteOne is the builder for deleting a single CreditGrantApplication entity.
type CreditGrantApplicationDeleteOne struct {
	cgad *CreditGrantApplicationDelete
}

// Where appends a list predicates to the CreditGrantApplicationDelete builder.
func (cgado *CreditGrantApplicationDeleteOne) Where(ps ...predicate.CreditGrantApplication) *CreditGrantApplicationDeleteOne {
	cgado.cgad.mutation.Where(ps...)
	return cgado
}

// Exec executes the deletion query.
func (cgado *CreditGrantApplicationDeleteOne) Exec(ctx context.Context) error {
	n, err := cgado.cgad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{creditgrantapplication.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cgado *CreditGrantApplicationDeleteOne) ExecX(ctx context.Context) {
	if err := cgado.Exec(ctx); err != nil {
		panic(err)
	}
}
