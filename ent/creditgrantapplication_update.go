// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/creditgrantapplication"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/internal/types"
	"github.com/shopspring/decimal"
)

// CreditGrantApplicationUpdate is the builder for updating CreditGrantApplication entities.
type CreditGrantApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *CreditGrantApplicationMutation
}

// Where appends a list predicates to the CreditGrantApplicationUpdate builder.
func (cgau *CreditGrantApplicationUpdate) Where(ps ...predicate.CreditGrantApplication) *CreditGrantApplicationUpdate {
	cgau.mutation.Where(ps...)
	return cgau
}

// SetStatus sets the "status" field.
func (cgau *CreditGrantApplicationUpdate) SetStatus(s string) *CreditGrantApplicationUpdate {
	cgau.mutation.SetStatus(s)
	return cgau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillableStatus(s *string) *CreditGrantApplicationUpdate {
	if s != nil {
		cgau.SetStatus(*s)
	}
	return cgau
}

// SetUpdatedAt sets the "updated_at" field.
func (cgau *CreditGrantApplicationUpdate) SetUpdatedAt(t time.Time) *CreditGrantApplicationUpdate {
	cgau.mutation.SetUpdatedAt(t)
	return cgau
}

// SetUpdatedBy sets the "updated_by" field.
func (cgau *CreditGrantApplicationUpdate) SetUpdatedBy(s string) *CreditGrantApplicationUpdate {
	cgau.mutation.SetUpdatedBy(s)
	return cgau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillableUpdatedBy(s *string) *CreditGrantApplicationUpdate {
	if s != nil {
		cgau.SetUpdatedBy(*s)
	}
	return cgau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cgau *CreditGrantApplicationUpdate) ClearUpdatedBy() *CreditGrantApplicationUpdate {
	cgau.mutation.ClearUpdatedBy()
	return cgau
}

// SetScheduledFor sets the "scheduled_for" field.
func (cgau *CreditGrantApplicationUpdate) SetScheduledFor(t time.Time) *CreditGrantApplicationUpdate {
	cgau.mutation.SetScheduledFor(t)
	return cgau
}

// SetNillableScheduledFor sets the "scheduled_for" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillableScheduledFor(t *time.Time) *CreditGrantApplicationUpdate {
	if t != nil {
		cgau.SetScheduledFor(*t)
	}
	return cgau
}

// SetAppliedAt sets the "applied_at" field.
func (cgau *CreditGrantApplicationUpdate) SetAppliedAt(t time.Time) *CreditGrantApplicationUpdate {
	cgau.mutation.SetAppliedAt(t)
	return cgau
}

// SetNillableAppliedAt sets the "applied_at" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillableAppliedAt(t *time.Time) *CreditGrantApplicationUpdate {
	if t != nil {
		cgau.SetAppliedAt(*t)
	}
	return cgau
}

// ClearAppliedAt clears the value of the "applied_at" field.
func (cgau *CreditGrantApplicationUpdate) ClearAppliedAt() *CreditGrantApplicationUpdate {
	cgau.mutation.ClearAppliedAt()
	return cgau
}

// SetPeriodStart sets the "period_start" field.
func (cgau *CreditGrantApplicationUpdate) SetPeriodStart(t time.Time) *CreditGrantApplicationUpdate {
	cgau.mutation.SetPeriodStart(t)
	return cgau
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillablePeriodStart(t *time.Time) *CreditGrantApplicationUpdate {
	if t != nil {
		cgau.SetPeriodStart(*t)
	}
	return cgau
}

// SetPeriodEnd sets the "period_end" field.
func (cgau *CreditGrantApplicationUpdate) SetPeriodEnd(t time.Time) *CreditGrantApplicationUpdate {
	cgau.mutation.SetPeriodEnd(t)
	return cgau
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillablePeriodEnd(t *time.Time) *CreditGrantApplicationUpdate {
	if t != nil {
		cgau.SetPeriodEnd(*t)
	}
	return cgau
}

// SetApplicationStatus sets the "application_status" field.
func (cgau *CreditGrantApplicationUpdate) SetApplicationStatus(s string) *CreditGrantApplicationUpdate {
	cgau.mutation.SetApplicationStatus(s)
	return cgau
}

// SetNillableApplicationStatus sets the "application_status" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillableApplicationStatus(s *string) *CreditGrantApplicationUpdate {
	if s != nil {
		cgau.SetApplicationStatus(*s)
	}
	return cgau
}

// SetCreditsApplied sets the "credits_applied" field.
func (cgau *CreditGrantApplicationUpdate) SetCreditsApplied(d decimal.Decimal) *CreditGrantApplicationUpdate {
	cgau.mutation.SetCreditsApplied(d)
	return cgau
}

// SetNillableCreditsApplied sets the "credits_applied" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillableCreditsApplied(d *decimal.Decimal) *CreditGrantApplicationUpdate {
	if d != nil {
		cgau.SetCreditsApplied(*d)
	}
	return cgau
}

// SetCurrency sets the "currency" field.
func (cgau *CreditGrantApplicationUpdate) SetCurrency(s string) *CreditGrantApplicationUpdate {
	cgau.mutation.SetCurrency(s)
	return cgau
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillableCurrency(s *string) *CreditGrantApplicationUpdate {
	if s != nil {
		cgau.SetCurrency(*s)
	}
	return cgau
}

// SetApplicationReason sets the "application_reason" field.
func (cgau *CreditGrantApplicationUpdate) SetApplicationReason(s string) *CreditGrantApplicationUpdate {
	cgau.mutation.SetApplicationReason(s)
	return cgau
}

// SetNillableApplicationReason sets the "application_reason" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillableApplicationReason(s *string) *CreditGrantApplicationUpdate {
	if s != nil {
		cgau.SetApplicationReason(*s)
	}
	return cgau
}

// SetSubscriptionStatusAtApplication sets the "subscription_status_at_application" field.
func (cgau *CreditGrantApplicationUpdate) SetSubscriptionStatusAtApplication(s string) *CreditGrantApplicationUpdate {
	cgau.mutation.SetSubscriptionStatusAtApplication(s)
	return cgau
}

// SetNillableSubscriptionStatusAtApplication sets the "subscription_status_at_application" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillableSubscriptionStatusAtApplication(s *string) *CreditGrantApplicationUpdate {
	if s != nil {
		cgau.SetSubscriptionStatusAtApplication(*s)
	}
	return cgau
}

// SetRetryCount sets the "retry_count" field.
func (cgau *CreditGrantApplicationUpdate) SetRetryCount(i int) *CreditGrantApplicationUpdate {
	cgau.mutation.ResetRetryCount()
	cgau.mutation.SetRetryCount(i)
	return cgau
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillableRetryCount(i *int) *CreditGrantApplicationUpdate {
	if i != nil {
		cgau.SetRetryCount(*i)
	}
	return cgau
}

// AddRetryCount adds i to the "retry_count" field.
func (cgau *CreditGrantApplicationUpdate) AddRetryCount(i int) *CreditGrantApplicationUpdate {
	cgau.mutation.AddRetryCount(i)
	return cgau
}

// SetFailureReason sets the "failure_reason" field.
func (cgau *CreditGrantApplicationUpdate) SetFailureReason(s string) *CreditGrantApplicationUpdate {
	cgau.mutation.SetFailureReason(s)
	return cgau
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillableFailureReason(s *string) *CreditGrantApplicationUpdate {
	if s != nil {
		cgau.SetFailureReason(*s)
	}
	return cgau
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (cgau *CreditGrantApplicationUpdate) ClearFailureReason() *CreditGrantApplicationUpdate {
	cgau.mutation.ClearFailureReason()
	return cgau
}

// SetNextRetryAt sets the "next_retry_at" field.
func (cgau *CreditGrantApplicationUpdate) SetNextRetryAt(t time.Time) *CreditGrantApplicationUpdate {
	cgau.mutation.SetNextRetryAt(t)
	return cgau
}

// SetNillableNextRetryAt sets the "next_retry_at" field if the given value is not nil.
func (cgau *CreditGrantApplicationUpdate) SetNillableNextRetryAt(t *time.Time) *CreditGrantApplicationUpdate {
	if t != nil {
		cgau.SetNextRetryAt(*t)
	}
	return cgau
}

// ClearNextRetryAt clears the value of the "next_retry_at" field.
func (cgau *CreditGrantApplicationUpdate) ClearNextRetryAt() *CreditGrantApplicationUpdate {
	cgau.mutation.ClearNextRetryAt()
	return cgau
}

// SetMetadata sets the "metadata" field.
func (cgau *CreditGrantApplicationUpdate) SetMetadata(t types.Metadata) *CreditGrantApplicationUpdate {
	cgau.mutation.SetMetadata(t)
	return cgau
}

// ClearMetadata clears the value of the "metadata" field.
func (cgau *CreditGrantApplicationUpdate) ClearMetadata() *CreditGrantApplicationUpdate {
	cgau.mutation.ClearMetadata()
	return cgau
}

// Mutation returns the CreditGrantApplicationMutation object of the builder.
func (cgau *CreditGrantApplicationUpdate) Mutation() *CreditGrantApplicationMutation {
	return cgau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cgau *CreditGrantApplicationUpdate) Save(ctx context.Context) (int, error) {
	cgau.defaults()
	return withHooks(ctx, cgau.sqlSave, cgau.mutation, cgau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cgau *CreditGrantApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := cgau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cgau *CreditGrantApplicationUpdate) Exec(ctx context.Context) error {
	_, err := cgau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgau *CreditGrantApplicationUpdate) ExecX(ctx context.Context) {
	if err := cgau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cgau *CreditGrantApplicationUpdate) defaults() {
	if _, ok := cgau.mutation.UpdatedAt(); !ok {
		v := creditgrantapplication.UpdateDefaultUpdatedAt()
		cgau.mutation.SetUpdatedAt(v)
	}
}

func (cgau *CreditGrantApplicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(creditgrantapplication.Table, creditgrantapplication.Columns, sqlgraph.NewFieldSpec(creditgrantapplication.FieldID, field.TypeString))
	if ps := cgau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cgau.mutation.Status(); ok {
		_spec.SetField(creditgrantapplication.FieldStatus, field.TypeString, value)
	}
	if value, ok := cgau.mutation.UpdatedAt(); ok {
		_spec.SetField(creditgrantapplication.FieldUpdatedAt, field.TypeTime, value)
	}
	if cgau.mutation.CreatedByCleared() {
		_spec.ClearField(creditgrantapplication.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cgau.mutation.UpdatedBy(); ok {
		_spec.SetField(creditgrantapplication.FieldUpdatedBy, field.TypeString, value)
	}
	if cgau.mutation.UpdatedByCleared() {
		_spec.ClearField(creditgrantapplication.FieldUpdatedBy, field.TypeString)
	}
	if cgau.mutation.EnvironmentIDCleared() {
		_spec.ClearField(creditgrantapplication.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cgau.mutation.ScheduledFor(); ok {
		_spec.SetField(creditgrantapplication.FieldScheduledFor, field.TypeTime, value)
	}
	if value, ok := cgau.mutation.AppliedAt(); ok {
		_spec.SetField(creditgrantapplication.FieldAppliedAt, field.TypeTime, value)
	}
	if cgau.mutation.AppliedAtCleared() {
		_spec.ClearField(creditgrantapplication.FieldAppliedAt, field.TypeTime)
	}
	if value, ok := cgau.mutation.PeriodStart(); ok {
		_spec.SetField(creditgrantapplication.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := cgau.mutation.PeriodEnd(); ok {
		_spec.SetField(creditgrantapplication.FieldPeriodEnd, field.TypeTime, value)
	}
	if value, ok := cgau.mutation.ApplicationStatus(); ok {
		_spec.SetField(creditgrantapplication.FieldApplicationStatus, field.TypeString, value)
	}
	if value, ok := cgau.mutation.CreditsApplied(); ok {
		_spec.SetField(creditgrantapplication.FieldCreditsApplied, field.TypeOther, value)
	}
	if value, ok := cgau.mutation.Currency(); ok {
		_spec.SetField(creditgrantapplication.FieldCurrency, field.TypeString, value)
	}
	if value, ok := cgau.mutation.ApplicationReason(); ok {
		_spec.SetField(creditgrantapplication.FieldApplicationReason, field.TypeString, value)
	}
	if value, ok := cgau.mutation.SubscriptionStatusAtApplication(); ok {
		_spec.SetField(creditgrantapplication.FieldSubscriptionStatusAtApplication, field.TypeString, value)
	}
	if value, ok := cgau.mutation.RetryCount(); ok {
		_spec.SetField(creditgrantapplication.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := cgau.mutation.AddedRetryCount(); ok {
		_spec.AddField(creditgrantapplication.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := cgau.mutation.FailureReason(); ok {
		_spec.SetField(creditgrantapplication.FieldFailureReason, field.TypeString, value)
	}
	if cgau.mutation.FailureReasonCleared() {
		_spec.ClearField(creditgrantapplication.FieldFailureReason, field.TypeString)
	}
	if value, ok := cgau.mutation.NextRetryAt(); ok {
		_spec.SetField(creditgrantapplication.FieldNextRetryAt, field.TypeTime, value)
	}
	if cgau.mutation.NextRetryAtCleared() {
		_spec.ClearField(creditgrantapplication.FieldNextRetryAt, field.TypeTime)
	}
	if value, ok := cgau.mutation.Metadata(); ok {
		_spec.SetField(creditgrantapplication.FieldMetadata, field.TypeOther, value)
	}
	if cgau.mutation.MetadataCleared() {
		_spec.ClearField(creditgrantapplication.FieldMetadata, field.TypeOther)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cgau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creditgrantapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cgau.mutation.done = true
	return n, nil
}

// CreditGrantApplicationUpdateOne is the builder for updating a single CreditGrantApplication entity.
type CreditGrantApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CreditGrantApplicationMutation
}

// SetStatus sets the "status" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetStatus(s string) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetStatus(s)
	return cgauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillableStatus(s *string) *CreditGrantApplicationUpdateOne {
	if s != nil {
		cgauo.SetStatus(*s)
	}
	return cgauo
}

// SetUpdatedAt sets the "updated_at" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetUpdatedAt(t time.Time) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetUpdatedAt(t)
	return cgauo
}

// SetUpdatedBy sets the "updated_by" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetUpdatedBy(s string) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetUpdatedBy(s)
	return cgauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillableUpdatedBy(s *string) *CreditGrantApplicationUpdateOne {
	if s != nil {
		cgauo.SetUpdatedBy(*s)
	}
	return cgauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cgauo *CreditGrantApplicationUpdateOne) ClearUpdatedBy() *CreditGrantApplicationUpdateOne {
	cgauo.mutation.ClearUpdatedBy()
	return cgauo
}

// SetScheduledFor sets the "scheduled_for" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetScheduledFor(t time.Time) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetScheduledFor(t)
	return cgauo
}

// SetNillableScheduledFor sets the "scheduled_for" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillableScheduledFor(t *time.Time) *CreditGrantApplicationUpdateOne {
	if t != nil {
		cgauo.SetScheduledFor(*t)
	}
	return cgauo
}

// SetAppliedAt sets the "applied_at" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetAppliedAt(t time.Time) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetAppliedAt(t)
	return cgauo
}

// SetNillableAppliedAt sets the "applied_at" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillableAppliedAt(t *time.Time) *CreditGrantApplicationUpdateOne {
	if t != nil {
		cgauo.SetAppliedAt(*t)
	}
	return cgauo
}

// ClearAppliedAt clears the value of the "applied_at" field.
func (cgauo *CreditGrantApplicationUpdateOne) ClearAppliedAt() *CreditGrantApplicationUpdateOne {
	cgauo.mutation.ClearAppliedAt()
	return cgauo
}

// SetPeriodStart sets the "period_start" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetPeriodStart(t time.Time) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetPeriodStart(t)
	return cgauo
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillablePeriodStart(t *time.Time) *CreditGrantApplicationUpdateOne {
	if t != nil {
		cgauo.SetPeriodStart(*t)
	}
	return cgauo
}

// SetPeriodEnd sets the "period_end" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetPeriodEnd(t time.Time) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetPeriodEnd(t)
	return cgauo
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillablePeriodEnd(t *time.Time) *CreditGrantApplicationUpdateOne {
	if t != nil {
		cgauo.SetPeriodEnd(*t)
	}
	return cgauo
}

// SetApplicationStatus sets the "application_status" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetApplicationStatus(s string) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetApplicationStatus(s)
	return cgauo
}

// SetNillableApplicationStatus sets the "application_status" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillableApplicationStatus(s *string) *CreditGrantApplicationUpdateOne {
	if s != nil {
		cgauo.SetApplicationStatus(*s)
	}
	return cgauo
}

// SetCreditsApplied sets the "credits_applied" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetCreditsApplied(d decimal.Decimal) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetCreditsApplied(d)
	return cgauo
}

// SetNillableCreditsApplied sets the "credits_applied" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillableCreditsApplied(d *decimal.Decimal) *CreditGrantApplicationUpdateOne {
	if d != nil {
		cgauo.SetCreditsApplied(*d)
	}
	return cgauo
}

// SetCurrency sets the "currency" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetCurrency(s string) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetCurrency(s)
	return cgauo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillableCurrency(s *string) *CreditGrantApplicationUpdateOne {
	if s != nil {
		cgauo.SetCurrency(*s)
	}
	return cgauo
}

// SetApplicationReason sets the "application_reason" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetApplicationReason(s string) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetApplicationReason(s)
	return cgauo
}

// SetNillableApplicationReason sets the "application_reason" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillableApplicationReason(s *string) *CreditGrantApplicationUpdateOne {
	if s != nil {
		cgauo.SetApplicationReason(*s)
	}
	return cgauo
}

// SetSubscriptionStatusAtApplication sets the "subscription_status_at_application" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetSubscriptionStatusAtApplication(s string) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetSubscriptionStatusAtApplication(s)
	return cgauo
}

// SetNillableSubscriptionStatusAtApplication sets the "subscription_status_at_application" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillableSubscriptionStatusAtApplication(s *string) *CreditGrantApplicationUpdateOne {
	if s != nil {
		cgauo.SetSubscriptionStatusAtApplication(*s)
	}
	return cgauo
}

// SetRetryCount sets the "retry_count" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetRetryCount(i int) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.ResetRetryCount()
	cgauo.mutation.SetRetryCount(i)
	return cgauo
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillableRetryCount(i *int) *CreditGrantApplicationUpdateOne {
	if i != nil {
		cgauo.SetRetryCount(*i)
	}
	return cgauo
}

// AddRetryCount adds i to the "retry_count" field.
func (cgauo *CreditGrantApplicationUpdateOne) AddRetryCount(i int) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.AddRetryCount(i)
	return cgauo
}

// SetFailureReason sets the "failure_reason" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetFailureReason(s string) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetFailureReason(s)
	return cgauo
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillableFailureReason(s *string) *CreditGrantApplicationUpdateOne {
	if s != nil {
		cgauo.SetFailureReason(*s)
	}
	return cgauo
}

// ClearFailureReason clears the value of the "failure_reason" field.
func (cgauo *CreditGrantApplicationUpdateOne) ClearFailureReason() *CreditGrantApplicationUpdateOne {
	cgauo.mutation.ClearFailureReason()
	return cgauo
}

// SetNextRetryAt sets the "next_retry_at" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetNextRetryAt(t time.Time) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetNextRetryAt(t)
	return cgauo
}

// SetNillableNextRetryAt sets the "next_retry_at" field if the given value is not nil.
func (cgauo *CreditGrantApplicationUpdateOne) SetNillableNextRetryAt(t *time.Time) *CreditGrantApplicationUpdateOne {
	if t != nil {
		cgauo.SetNextRetryAt(*t)
	}
	return cgauo
}

// ClearNextRetryAt clears the value of the "next_retry_at" field.
func (cgauo *CreditGrantApplicationUpdateOne) ClearNextRetryAt() *CreditGrantApplicationUpdateOne {
	cgauo.mutation.ClearNextRetryAt()
	return cgauo
}

// SetMetadata sets the "metadata" field.
func (cgauo *CreditGrantApplicationUpdateOne) SetMetadata(t types.Metadata) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.SetMetadata(t)
	return cgauo
}

// ClearMetadata clears the value of the "metadata" field.
func (cgauo *CreditGrantApplicationUpdateOne) ClearMetadata() *CreditGrantApplicationUpdateOne {
	cgauo.mutation.ClearMetadata()
	return cgauo
}

// Mutation returns the CreditGrantApplicationMutation object of the builder.
func (cgauo *CreditGrantApplicationUpdateOne) Mutation() *CreditGrantApplicationMutation {
	return cgauo.mutation
}

// Where appends a list predicates to the CreditGrantApplicationUpdate builder.
func (cgauo *CreditGrantApplicationUpdateOne) Where(ps ...predicate.CreditGrantApplication) *CreditGrantApplicationUpdateOne {
	cgauo.mutation.Where(ps...)
	return cgauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cgauo *CreditGrantApplicationUpdateOne) Select(field string, fields ...string) *CreditGrantApplicationUpdateOne {
	cgauo.fields = append([]string{field}, fields...)
	return cgauo
}

// Save executes the query and returns the updated CreditGrantApplication entity.
func (cgauo *CreditGrantApplicationUpdateOne) Save(ctx context.Context) (*CreditGrantApplication, error) {
	cgauo.defaults()
	return withHooks(ctx, cgauo.sqlSave, cgauo.mutation, cgauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cgauo *CreditGrantApplicationUpdateOne) SaveX(ctx context.Context) *CreditGrantApplication {
	node, err := cgauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cgauo *CreditGrantApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := cgauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgauo *CreditGrantApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := cgauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cgauo *CreditGrantApplicationUpdateOne) defaults() {
	if _, ok := cgauo.mutation.UpdatedAt(); !ok {
		v := creditgrantapplication.UpdateDefaultUpdatedAt()
		cgauo.mutation.SetUpdatedAt(v)
	}
}

func (cgauo *CreditGrantApplicationUpdateOne) sqlSave(ctx context.Context) (_node *CreditGrantApplication, err error) {
	_spec := sqlgraph.NewUpdateSpec(creditgrantapplication.Table, creditgrantapplication.Columns, sqlgraph.NewFieldSpec(creditgrantapplication.FieldID, field.TypeString))
	id, ok := cgauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CreditGrantApplication.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cgauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, creditgrantapplication.FieldID)
		for _, f := range fields {
			if !creditgrantapplication.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != creditgrantapplication.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cgauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cgauo.mutation.Status(); ok {
		_spec.SetField(creditgrantapplication.FieldStatus, field.TypeString, value)
	}
	if value, ok := cgauo.mutation.UpdatedAt(); ok {
		_spec.SetField(creditgrantapplication.FieldUpdatedAt, field.TypeTime, value)
	}
	if cgauo.mutation.CreatedByCleared() {
		_spec.ClearField(creditgrantapplication.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cgauo.mutation.UpdatedBy(); ok {
		_spec.SetField(creditgrantapplication.FieldUpdatedBy, field.TypeString, value)
	}
	if cgauo.mutation.UpdatedByCleared() {
		_spec.ClearField(creditgrantapplication.FieldUpdatedBy, field.TypeString)
	}
	if cgauo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(creditgrantapplication.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cgauo.mutation.ScheduledFor(); ok {
		_spec.SetField(creditgrantapplication.FieldScheduledFor, field.TypeTime, value)
	}
	if value, ok := cgauo.mutation.AppliedAt(); ok {
		_spec.SetField(creditgrantapplication.FieldAppliedAt, field.TypeTime, value)
	}
	if cgauo.mutation.AppliedAtCleared() {
		_spec.ClearField(creditgrantapplication.FieldAppliedAt, field.TypeTime)
	}
	if value, ok := cgauo.mutation.PeriodStart(); ok {
		_spec.SetField(creditgrantapplication.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := cgauo.mutation.PeriodEnd(); ok {
		_spec.SetField(creditgrantapplication.FieldPeriodEnd, field.TypeTime, value)
	}
	if value, ok := cgauo.mutation.ApplicationStatus(); ok {
		_spec.SetField(creditgrantapplication.FieldApplicationStatus, field.TypeString, value)
	}
	if value, ok := cgauo.mutation.CreditsApplied(); ok {
		_spec.SetField(creditgrantapplication.FieldCreditsApplied, field.TypeOther, value)
	}
	if value, ok := cgauo.mutation.Currency(); ok {
		_spec.SetField(creditgrantapplication.FieldCurrency, field.TypeString, value)
	}
	if value, ok := cgauo.mutation.ApplicationReason(); ok {
		_spec.SetField(creditgrantapplication.FieldApplicationReason, field.TypeString, value)
	}
	if value, ok := cgauo.mutation.SubscriptionStatusAtApplication(); ok {
		_spec.SetField(creditgrantapplication.FieldSubscriptionStatusAtApplication, field.TypeString, value)
	}
	if value, ok := cgauo.mutation.RetryCount(); ok {
		_spec.SetField(creditgrantapplication.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := cgauo.mutation.AddedRetryCount(); ok {
		_spec.AddField(creditgrantapplication.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := cgauo.mutation.FailureReason(); ok {
		_spec.SetField(creditgrantapplication.FieldFailureReason, field.TypeString, value)
	}
	if cgauo.mutation.FailureReasonCleared() {
		_spec.ClearField(creditgrantapplication.FieldFailureReason, field.TypeString)
	}
	if value, ok := cgauo.mutation.NextRetryAt(); ok {
		_spec.SetField(creditgrantapplication.FieldNextRetryAt, field.TypeTime, value)
	}
	if cgauo.mutation.NextRetryAtCleared() {
		_spec.ClearField(creditgrantapplication.FieldNextRetryAt, field.TypeTime)
	}
	if value, ok := cgauo.mutation.Metadata(); ok {
		_spec.SetField(creditgrantapplication.FieldMetadata, field.TypeOther, value)
	}
	if cgauo.mutation.MetadataCleared() {
		_spec.ClearField(creditgrantapplication.FieldMetadata, field.TypeOther)
	}
	_node = &CreditGrantApplication{config: cgauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cgauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creditgrantapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cgauo.mutation.done = true
	return _node, nil
}
