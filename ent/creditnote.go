// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/creditnote"
	"github.com/flexprice/flexprice/internal/types"
)

// CreditNote is the model entity for the CreditNote schema.
type CreditNote struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID string `json:"invoice_id,omitempty"`
	// CreditNoteNumber holds the value of the "credit_note_number" field.
	CreditNoteNumber string `json:"credit_note_number,omitempty"`
	// CreditNoteStatus holds the value of the "credit_note_status" field.
	CreditNoteStatus types.CreditNoteStatus `json:"credit_note_status,omitempty"`
	// CreditNoteType holds the value of the "credit_note_type" field.
	CreditNoteType types.CreditNoteType `json:"credit_note_type,omitempty"`
	// RefundStatus holds the value of the "refund_status" field.
	RefundStatus *types.PaymentStatus `json:"refund_status,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason *types.CreditNoteReason `json:"reason,omitempty"`
	// Memo holds the value of the "memo" field.
	Memo string `json:"memo,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// IdempotencyKey holds the value of the "idempotency_key" field.
	IdempotencyKey *string `json:"idempotency_key,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CreditNoteQuery when eager-loading is set.
	Edges        CreditNoteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CreditNoteEdges holds the relations/edges for other nodes in the graph.
type CreditNoteEdges struct {
	// LineItems holds the value of the line_items edge.
	LineItems []*CreditNoteLineItem `json:"line_items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LineItemsOrErr returns the LineItems value or an error if the edge
// was not loaded in eager-loading.
func (e CreditNoteEdges) LineItemsOrErr() ([]*CreditNoteLineItem, error) {
	if e.loadedTypes[0] {
		return e.LineItems, nil
	}
	return nil, &NotLoadedError{edge: "line_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CreditNote) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case creditnote.FieldMetadata:
			values[i] = new([]byte)
		case creditnote.FieldID, creditnote.FieldTenantID, creditnote.FieldStatus, creditnote.FieldCreatedBy, creditnote.FieldUpdatedBy, creditnote.FieldEnvironmentID, creditnote.FieldInvoiceID, creditnote.FieldCreditNoteNumber, creditnote.FieldCreditNoteStatus, creditnote.FieldCreditNoteType, creditnote.FieldRefundStatus, creditnote.FieldReason, creditnote.FieldMemo, creditnote.FieldCurrency, creditnote.FieldIdempotencyKey:
			values[i] = new(sql.NullString)
		case creditnote.FieldCreatedAt, creditnote.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CreditNote fields.
func (cn *CreditNote) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case creditnote.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cn.ID = value.String
			}
		case creditnote.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				cn.TenantID = value.String
			}
		case creditnote.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cn.Status = value.String
			}
		case creditnote.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cn.CreatedAt = value.Time
			}
		case creditnote.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cn.UpdatedAt = value.Time
			}
		case creditnote.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cn.CreatedBy = value.String
			}
		case creditnote.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				cn.UpdatedBy = value.String
			}
		case creditnote.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				cn.EnvironmentID = value.String
			}
		case creditnote.FieldInvoiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value.Valid {
				cn.InvoiceID = value.String
			}
		case creditnote.FieldCreditNoteNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credit_note_number", values[i])
			} else if value.Valid {
				cn.CreditNoteNumber = value.String
			}
		case creditnote.FieldCreditNoteStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credit_note_status", values[i])
			} else if value.Valid {
				cn.CreditNoteStatus = types.CreditNoteStatus(value.String)
			}
		case creditnote.FieldCreditNoteType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credit_note_type", values[i])
			} else if value.Valid {
				cn.CreditNoteType = types.CreditNoteType(value.String)
			}
		case creditnote.FieldRefundStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refund_status", values[i])
			} else if value.Valid {
				cn.RefundStatus = new(types.PaymentStatus)
				*cn.RefundStatus = types.PaymentStatus(value.String)
			}
		case creditnote.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				cn.Reason = new(types.CreditNoteReason)
				*cn.Reason = types.CreditNoteReason(value.String)
			}
		case creditnote.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				cn.Memo = value.String
			}
		case creditnote.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				cn.Currency = value.String
			}
		case creditnote.FieldIdempotencyKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idempotency_key", values[i])
			} else if value.Valid {
				cn.IdempotencyKey = new(string)
				*cn.IdempotencyKey = value.String
			}
		case creditnote.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cn.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			cn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CreditNote.
// This includes values selected through modifiers, order, etc.
func (cn *CreditNote) Value(name string) (ent.Value, error) {
	return cn.selectValues.Get(name)
}

// QueryLineItems queries the "line_items" edge of the CreditNote entity.
func (cn *CreditNote) QueryLineItems() *CreditNoteLineItemQuery {
	return NewCreditNoteClient(cn.config).QueryLineItems(cn)
}

// Update returns a builder for updating this CreditNote.
// Note that you need to call CreditNote.Unwrap() before calling this method if this CreditNote
// was returned from a transaction, and the transaction was committed or rolled back.
func (cn *CreditNote) Update() *CreditNoteUpdateOne {
	return NewCreditNoteClient(cn.config).UpdateOne(cn)
}

// Unwrap unwraps the CreditNote entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cn *CreditNote) Unwrap() *CreditNote {
	_tx, ok := cn.config.driver.(*txDriver)
	if !ok {
		panic("ent: CreditNote is not a transactional entity")
	}
	cn.config.driver = _tx.drv
	return cn
}

// String implements the fmt.Stringer.
func (cn *CreditNote) String() string {
	var builder strings.Builder
	builder.WriteString("CreditNote(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cn.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(cn.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(cn.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cn.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cn.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(cn.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(cn.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(cn.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("invoice_id=")
	builder.WriteString(cn.InvoiceID)
	builder.WriteString(", ")
	builder.WriteString("credit_note_number=")
	builder.WriteString(cn.CreditNoteNumber)
	builder.WriteString(", ")
	builder.WriteString("credit_note_status=")
	builder.WriteString(fmt.Sprintf("%v", cn.CreditNoteStatus))
	builder.WriteString(", ")
	builder.WriteString("credit_note_type=")
	builder.WriteString(fmt.Sprintf("%v", cn.CreditNoteType))
	builder.WriteString(", ")
	if v := cn.RefundStatus; v != nil {
		builder.WriteString("refund_status=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cn.Reason; v != nil {
		builder.WriteString("reason=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("memo=")
	builder.WriteString(cn.Memo)
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(cn.Currency)
	builder.WriteString(", ")
	if v := cn.IdempotencyKey; v != nil {
		builder.WriteString("idempotency_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", cn.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// CreditNotes is a parsable slice of CreditNote.
type CreditNotes []*CreditNote
