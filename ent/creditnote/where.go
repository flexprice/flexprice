// Code generated by ent, DO NOT EDIT.

package creditnote

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/internal/types"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldUpdatedBy, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldEnvironmentID, v))
}

// InvoiceID applies equality check predicate on the "invoice_id" field. It's identical to InvoiceIDEQ.
func InvoiceID(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldInvoiceID, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldCustomerID, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldSubscriptionID, v))
}

// CreditNoteNumber applies equality check predicate on the "credit_note_number" field. It's identical to CreditNoteNumberEQ.
func CreditNoteNumber(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldCreditNoteNumber, v))
}

// CreditNoteStatus applies equality check predicate on the "credit_note_status" field. It's identical to CreditNoteStatusEQ.
func CreditNoteStatus(v types.CreditNoteStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldEQ(FieldCreditNoteStatus, vc))
}

// CreditNoteType applies equality check predicate on the "credit_note_type" field. It's identical to CreditNoteTypeEQ.
func CreditNoteType(v types.CreditNoteType) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldEQ(FieldCreditNoteType, vc))
}

// RefundStatus applies equality check predicate on the "refund_status" field. It's identical to RefundStatusEQ.
func RefundStatus(v types.PaymentStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldEQ(FieldRefundStatus, vc))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v types.CreditNoteReason) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldEQ(FieldReason, vc))
}

// Memo applies equality check predicate on the "memo" field. It's identical to MemoEQ.
func Memo(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldMemo, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldCurrency, v))
}

// IdempotencyKey applies equality check predicate on the "idempotency_key" field. It's identical to IdempotencyKeyEQ.
func IdempotencyKey(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldIdempotencyKey, v))
}

// VoidedAt applies equality check predicate on the "voided_at" field. It's identical to VoidedAtEQ.
func VoidedAt(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldVoidedAt, v))
}

// FinalizedAt applies equality check predicate on the "finalized_at" field. It's identical to FinalizedAtEQ.
func FinalizedAt(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldFinalizedAt, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v decimal.Decimal) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldTotalAmount, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContains(FieldEnvironmentID, v))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasPrefix(FieldEnvironmentID, v))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasSuffix(FieldEnvironmentID, v))
}

// EnvironmentIDIsNil applies the IsNil predicate on the "environment_id" field.
func EnvironmentIDIsNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIsNull(FieldEnvironmentID))
}

// EnvironmentIDNotNil applies the NotNil predicate on the "environment_id" field.
func EnvironmentIDNotNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotNull(FieldEnvironmentID))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEqualFold(FieldEnvironmentID, v))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContainsFold(FieldEnvironmentID, v))
}

// InvoiceIDEQ applies the EQ predicate on the "invoice_id" field.
func InvoiceIDEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldInvoiceID, v))
}

// InvoiceIDNEQ applies the NEQ predicate on the "invoice_id" field.
func InvoiceIDNEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldInvoiceID, v))
}

// InvoiceIDIn applies the In predicate on the "invoice_id" field.
func InvoiceIDIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldInvoiceID, vs...))
}

// InvoiceIDNotIn applies the NotIn predicate on the "invoice_id" field.
func InvoiceIDNotIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldInvoiceID, vs...))
}

// InvoiceIDGT applies the GT predicate on the "invoice_id" field.
func InvoiceIDGT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldInvoiceID, v))
}

// InvoiceIDGTE applies the GTE predicate on the "invoice_id" field.
func InvoiceIDGTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldInvoiceID, v))
}

// InvoiceIDLT applies the LT predicate on the "invoice_id" field.
func InvoiceIDLT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldInvoiceID, v))
}

// InvoiceIDLTE applies the LTE predicate on the "invoice_id" field.
func InvoiceIDLTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldInvoiceID, v))
}

// InvoiceIDContains applies the Contains predicate on the "invoice_id" field.
func InvoiceIDContains(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContains(FieldInvoiceID, v))
}

// InvoiceIDHasPrefix applies the HasPrefix predicate on the "invoice_id" field.
func InvoiceIDHasPrefix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasPrefix(FieldInvoiceID, v))
}

// InvoiceIDHasSuffix applies the HasSuffix predicate on the "invoice_id" field.
func InvoiceIDHasSuffix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasSuffix(FieldInvoiceID, v))
}

// InvoiceIDEqualFold applies the EqualFold predicate on the "invoice_id" field.
func InvoiceIDEqualFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEqualFold(FieldInvoiceID, v))
}

// InvoiceIDContainsFold applies the ContainsFold predicate on the "invoice_id" field.
func InvoiceIDContainsFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContainsFold(FieldInvoiceID, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldCustomerID, v))
}

// CustomerIDContains applies the Contains predicate on the "customer_id" field.
func CustomerIDContains(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContains(FieldCustomerID, v))
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "customer_id" field.
func CustomerIDHasPrefix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasPrefix(FieldCustomerID, v))
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "customer_id" field.
func CustomerIDHasSuffix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasSuffix(FieldCustomerID, v))
}

// CustomerIDEqualFold applies the EqualFold predicate on the "customer_id" field.
func CustomerIDEqualFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEqualFold(FieldCustomerID, v))
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "customer_id" field.
func CustomerIDContainsFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContainsFold(FieldCustomerID, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDIsNil applies the IsNil predicate on the "subscription_id" field.
func SubscriptionIDIsNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIsNull(FieldSubscriptionID))
}

// SubscriptionIDNotNil applies the NotNil predicate on the "subscription_id" field.
func SubscriptionIDNotNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotNull(FieldSubscriptionID))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// CreditNoteNumberEQ applies the EQ predicate on the "credit_note_number" field.
func CreditNoteNumberEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldCreditNoteNumber, v))
}

// CreditNoteNumberNEQ applies the NEQ predicate on the "credit_note_number" field.
func CreditNoteNumberNEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldCreditNoteNumber, v))
}

// CreditNoteNumberIn applies the In predicate on the "credit_note_number" field.
func CreditNoteNumberIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldCreditNoteNumber, vs...))
}

// CreditNoteNumberNotIn applies the NotIn predicate on the "credit_note_number" field.
func CreditNoteNumberNotIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldCreditNoteNumber, vs...))
}

// CreditNoteNumberGT applies the GT predicate on the "credit_note_number" field.
func CreditNoteNumberGT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldCreditNoteNumber, v))
}

// CreditNoteNumberGTE applies the GTE predicate on the "credit_note_number" field.
func CreditNoteNumberGTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldCreditNoteNumber, v))
}

// CreditNoteNumberLT applies the LT predicate on the "credit_note_number" field.
func CreditNoteNumberLT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldCreditNoteNumber, v))
}

// CreditNoteNumberLTE applies the LTE predicate on the "credit_note_number" field.
func CreditNoteNumberLTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldCreditNoteNumber, v))
}

// CreditNoteNumberContains applies the Contains predicate on the "credit_note_number" field.
func CreditNoteNumberContains(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContains(FieldCreditNoteNumber, v))
}

// CreditNoteNumberHasPrefix applies the HasPrefix predicate on the "credit_note_number" field.
func CreditNoteNumberHasPrefix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasPrefix(FieldCreditNoteNumber, v))
}

// CreditNoteNumberHasSuffix applies the HasSuffix predicate on the "credit_note_number" field.
func CreditNoteNumberHasSuffix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasSuffix(FieldCreditNoteNumber, v))
}

// CreditNoteNumberEqualFold applies the EqualFold predicate on the "credit_note_number" field.
func CreditNoteNumberEqualFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEqualFold(FieldCreditNoteNumber, v))
}

// CreditNoteNumberContainsFold applies the ContainsFold predicate on the "credit_note_number" field.
func CreditNoteNumberContainsFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContainsFold(FieldCreditNoteNumber, v))
}

// CreditNoteStatusEQ applies the EQ predicate on the "credit_note_status" field.
func CreditNoteStatusEQ(v types.CreditNoteStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldEQ(FieldCreditNoteStatus, vc))
}

// CreditNoteStatusNEQ applies the NEQ predicate on the "credit_note_status" field.
func CreditNoteStatusNEQ(v types.CreditNoteStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldNEQ(FieldCreditNoteStatus, vc))
}

// CreditNoteStatusIn applies the In predicate on the "credit_note_status" field.
func CreditNoteStatusIn(vs ...types.CreditNoteStatus) predicate.CreditNote {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditNote(sql.FieldIn(FieldCreditNoteStatus, v...))
}

// CreditNoteStatusNotIn applies the NotIn predicate on the "credit_note_status" field.
func CreditNoteStatusNotIn(vs ...types.CreditNoteStatus) predicate.CreditNote {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditNote(sql.FieldNotIn(FieldCreditNoteStatus, v...))
}

// CreditNoteStatusGT applies the GT predicate on the "credit_note_status" field.
func CreditNoteStatusGT(v types.CreditNoteStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldGT(FieldCreditNoteStatus, vc))
}

// CreditNoteStatusGTE applies the GTE predicate on the "credit_note_status" field.
func CreditNoteStatusGTE(v types.CreditNoteStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldGTE(FieldCreditNoteStatus, vc))
}

// CreditNoteStatusLT applies the LT predicate on the "credit_note_status" field.
func CreditNoteStatusLT(v types.CreditNoteStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldLT(FieldCreditNoteStatus, vc))
}

// CreditNoteStatusLTE applies the LTE predicate on the "credit_note_status" field.
func CreditNoteStatusLTE(v types.CreditNoteStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldLTE(FieldCreditNoteStatus, vc))
}

// CreditNoteStatusContains applies the Contains predicate on the "credit_note_status" field.
func CreditNoteStatusContains(v types.CreditNoteStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldContains(FieldCreditNoteStatus, vc))
}

// CreditNoteStatusHasPrefix applies the HasPrefix predicate on the "credit_note_status" field.
func CreditNoteStatusHasPrefix(v types.CreditNoteStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldHasPrefix(FieldCreditNoteStatus, vc))
}

// CreditNoteStatusHasSuffix applies the HasSuffix predicate on the "credit_note_status" field.
func CreditNoteStatusHasSuffix(v types.CreditNoteStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldHasSuffix(FieldCreditNoteStatus, vc))
}

// CreditNoteStatusEqualFold applies the EqualFold predicate on the "credit_note_status" field.
func CreditNoteStatusEqualFold(v types.CreditNoteStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldEqualFold(FieldCreditNoteStatus, vc))
}

// CreditNoteStatusContainsFold applies the ContainsFold predicate on the "credit_note_status" field.
func CreditNoteStatusContainsFold(v types.CreditNoteStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldContainsFold(FieldCreditNoteStatus, vc))
}

// CreditNoteTypeEQ applies the EQ predicate on the "credit_note_type" field.
func CreditNoteTypeEQ(v types.CreditNoteType) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldEQ(FieldCreditNoteType, vc))
}

// CreditNoteTypeNEQ applies the NEQ predicate on the "credit_note_type" field.
func CreditNoteTypeNEQ(v types.CreditNoteType) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldNEQ(FieldCreditNoteType, vc))
}

// CreditNoteTypeIn applies the In predicate on the "credit_note_type" field.
func CreditNoteTypeIn(vs ...types.CreditNoteType) predicate.CreditNote {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditNote(sql.FieldIn(FieldCreditNoteType, v...))
}

// CreditNoteTypeNotIn applies the NotIn predicate on the "credit_note_type" field.
func CreditNoteTypeNotIn(vs ...types.CreditNoteType) predicate.CreditNote {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditNote(sql.FieldNotIn(FieldCreditNoteType, v...))
}

// CreditNoteTypeGT applies the GT predicate on the "credit_note_type" field.
func CreditNoteTypeGT(v types.CreditNoteType) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldGT(FieldCreditNoteType, vc))
}

// CreditNoteTypeGTE applies the GTE predicate on the "credit_note_type" field.
func CreditNoteTypeGTE(v types.CreditNoteType) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldGTE(FieldCreditNoteType, vc))
}

// CreditNoteTypeLT applies the LT predicate on the "credit_note_type" field.
func CreditNoteTypeLT(v types.CreditNoteType) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldLT(FieldCreditNoteType, vc))
}

// CreditNoteTypeLTE applies the LTE predicate on the "credit_note_type" field.
func CreditNoteTypeLTE(v types.CreditNoteType) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldLTE(FieldCreditNoteType, vc))
}

// CreditNoteTypeContains applies the Contains predicate on the "credit_note_type" field.
func CreditNoteTypeContains(v types.CreditNoteType) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldContains(FieldCreditNoteType, vc))
}

// CreditNoteTypeHasPrefix applies the HasPrefix predicate on the "credit_note_type" field.
func CreditNoteTypeHasPrefix(v types.CreditNoteType) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldHasPrefix(FieldCreditNoteType, vc))
}

// CreditNoteTypeHasSuffix applies the HasSuffix predicate on the "credit_note_type" field.
func CreditNoteTypeHasSuffix(v types.CreditNoteType) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldHasSuffix(FieldCreditNoteType, vc))
}

// CreditNoteTypeEqualFold applies the EqualFold predicate on the "credit_note_type" field.
func CreditNoteTypeEqualFold(v types.CreditNoteType) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldEqualFold(FieldCreditNoteType, vc))
}

// CreditNoteTypeContainsFold applies the ContainsFold predicate on the "credit_note_type" field.
func CreditNoteTypeContainsFold(v types.CreditNoteType) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldContainsFold(FieldCreditNoteType, vc))
}

// RefundStatusEQ applies the EQ predicate on the "refund_status" field.
func RefundStatusEQ(v types.PaymentStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldEQ(FieldRefundStatus, vc))
}

// RefundStatusNEQ applies the NEQ predicate on the "refund_status" field.
func RefundStatusNEQ(v types.PaymentStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldNEQ(FieldRefundStatus, vc))
}

// RefundStatusIn applies the In predicate on the "refund_status" field.
func RefundStatusIn(vs ...types.PaymentStatus) predicate.CreditNote {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditNote(sql.FieldIn(FieldRefundStatus, v...))
}

// RefundStatusNotIn applies the NotIn predicate on the "refund_status" field.
func RefundStatusNotIn(vs ...types.PaymentStatus) predicate.CreditNote {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditNote(sql.FieldNotIn(FieldRefundStatus, v...))
}

// RefundStatusGT applies the GT predicate on the "refund_status" field.
func RefundStatusGT(v types.PaymentStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldGT(FieldRefundStatus, vc))
}

// RefundStatusGTE applies the GTE predicate on the "refund_status" field.
func RefundStatusGTE(v types.PaymentStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldGTE(FieldRefundStatus, vc))
}

// RefundStatusLT applies the LT predicate on the "refund_status" field.
func RefundStatusLT(v types.PaymentStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldLT(FieldRefundStatus, vc))
}

// RefundStatusLTE applies the LTE predicate on the "refund_status" field.
func RefundStatusLTE(v types.PaymentStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldLTE(FieldRefundStatus, vc))
}

// RefundStatusContains applies the Contains predicate on the "refund_status" field.
func RefundStatusContains(v types.PaymentStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldContains(FieldRefundStatus, vc))
}

// RefundStatusHasPrefix applies the HasPrefix predicate on the "refund_status" field.
func RefundStatusHasPrefix(v types.PaymentStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldHasPrefix(FieldRefundStatus, vc))
}

// RefundStatusHasSuffix applies the HasSuffix predicate on the "refund_status" field.
func RefundStatusHasSuffix(v types.PaymentStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldHasSuffix(FieldRefundStatus, vc))
}

// RefundStatusIsNil applies the IsNil predicate on the "refund_status" field.
func RefundStatusIsNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIsNull(FieldRefundStatus))
}

// RefundStatusNotNil applies the NotNil predicate on the "refund_status" field.
func RefundStatusNotNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotNull(FieldRefundStatus))
}

// RefundStatusEqualFold applies the EqualFold predicate on the "refund_status" field.
func RefundStatusEqualFold(v types.PaymentStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldEqualFold(FieldRefundStatus, vc))
}

// RefundStatusContainsFold applies the ContainsFold predicate on the "refund_status" field.
func RefundStatusContainsFold(v types.PaymentStatus) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldContainsFold(FieldRefundStatus, vc))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v types.CreditNoteReason) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldEQ(FieldReason, vc))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v types.CreditNoteReason) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldNEQ(FieldReason, vc))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...types.CreditNoteReason) predicate.CreditNote {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditNote(sql.FieldIn(FieldReason, v...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...types.CreditNoteReason) predicate.CreditNote {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.CreditNote(sql.FieldNotIn(FieldReason, v...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v types.CreditNoteReason) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldGT(FieldReason, vc))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v types.CreditNoteReason) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldGTE(FieldReason, vc))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v types.CreditNoteReason) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldLT(FieldReason, vc))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v types.CreditNoteReason) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldLTE(FieldReason, vc))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v types.CreditNoteReason) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldContains(FieldReason, vc))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v types.CreditNoteReason) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldHasPrefix(FieldReason, vc))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v types.CreditNoteReason) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldHasSuffix(FieldReason, vc))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v types.CreditNoteReason) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldEqualFold(FieldReason, vc))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v types.CreditNoteReason) predicate.CreditNote {
	vc := string(v)
	return predicate.CreditNote(sql.FieldContainsFold(FieldReason, vc))
}

// MemoEQ applies the EQ predicate on the "memo" field.
func MemoEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldMemo, v))
}

// MemoNEQ applies the NEQ predicate on the "memo" field.
func MemoNEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldMemo, v))
}

// MemoIn applies the In predicate on the "memo" field.
func MemoIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldMemo, vs...))
}

// MemoNotIn applies the NotIn predicate on the "memo" field.
func MemoNotIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldMemo, vs...))
}

// MemoGT applies the GT predicate on the "memo" field.
func MemoGT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldMemo, v))
}

// MemoGTE applies the GTE predicate on the "memo" field.
func MemoGTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldMemo, v))
}

// MemoLT applies the LT predicate on the "memo" field.
func MemoLT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldMemo, v))
}

// MemoLTE applies the LTE predicate on the "memo" field.
func MemoLTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldMemo, v))
}

// MemoContains applies the Contains predicate on the "memo" field.
func MemoContains(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContains(FieldMemo, v))
}

// MemoHasPrefix applies the HasPrefix predicate on the "memo" field.
func MemoHasPrefix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasPrefix(FieldMemo, v))
}

// MemoHasSuffix applies the HasSuffix predicate on the "memo" field.
func MemoHasSuffix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasSuffix(FieldMemo, v))
}

// MemoEqualFold applies the EqualFold predicate on the "memo" field.
func MemoEqualFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEqualFold(FieldMemo, v))
}

// MemoContainsFold applies the ContainsFold predicate on the "memo" field.
func MemoContainsFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContainsFold(FieldMemo, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContainsFold(FieldCurrency, v))
}

// IdempotencyKeyEQ applies the EQ predicate on the "idempotency_key" field.
func IdempotencyKeyEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldIdempotencyKey, v))
}

// IdempotencyKeyNEQ applies the NEQ predicate on the "idempotency_key" field.
func IdempotencyKeyNEQ(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldIdempotencyKey, v))
}

// IdempotencyKeyIn applies the In predicate on the "idempotency_key" field.
func IdempotencyKeyIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldIdempotencyKey, vs...))
}

// IdempotencyKeyNotIn applies the NotIn predicate on the "idempotency_key" field.
func IdempotencyKeyNotIn(vs ...string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldIdempotencyKey, vs...))
}

// IdempotencyKeyGT applies the GT predicate on the "idempotency_key" field.
func IdempotencyKeyGT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldIdempotencyKey, v))
}

// IdempotencyKeyGTE applies the GTE predicate on the "idempotency_key" field.
func IdempotencyKeyGTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldIdempotencyKey, v))
}

// IdempotencyKeyLT applies the LT predicate on the "idempotency_key" field.
func IdempotencyKeyLT(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldIdempotencyKey, v))
}

// IdempotencyKeyLTE applies the LTE predicate on the "idempotency_key" field.
func IdempotencyKeyLTE(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldIdempotencyKey, v))
}

// IdempotencyKeyContains applies the Contains predicate on the "idempotency_key" field.
func IdempotencyKeyContains(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContains(FieldIdempotencyKey, v))
}

// IdempotencyKeyHasPrefix applies the HasPrefix predicate on the "idempotency_key" field.
func IdempotencyKeyHasPrefix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasPrefix(FieldIdempotencyKey, v))
}

// IdempotencyKeyHasSuffix applies the HasSuffix predicate on the "idempotency_key" field.
func IdempotencyKeyHasSuffix(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldHasSuffix(FieldIdempotencyKey, v))
}

// IdempotencyKeyIsNil applies the IsNil predicate on the "idempotency_key" field.
func IdempotencyKeyIsNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIsNull(FieldIdempotencyKey))
}

// IdempotencyKeyNotNil applies the NotNil predicate on the "idempotency_key" field.
func IdempotencyKeyNotNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotNull(FieldIdempotencyKey))
}

// IdempotencyKeyEqualFold applies the EqualFold predicate on the "idempotency_key" field.
func IdempotencyKeyEqualFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEqualFold(FieldIdempotencyKey, v))
}

// IdempotencyKeyContainsFold applies the ContainsFold predicate on the "idempotency_key" field.
func IdempotencyKeyContainsFold(v string) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldContainsFold(FieldIdempotencyKey, v))
}

// VoidedAtEQ applies the EQ predicate on the "voided_at" field.
func VoidedAtEQ(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldVoidedAt, v))
}

// VoidedAtNEQ applies the NEQ predicate on the "voided_at" field.
func VoidedAtNEQ(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldVoidedAt, v))
}

// VoidedAtIn applies the In predicate on the "voided_at" field.
func VoidedAtIn(vs ...time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldVoidedAt, vs...))
}

// VoidedAtNotIn applies the NotIn predicate on the "voided_at" field.
func VoidedAtNotIn(vs ...time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldVoidedAt, vs...))
}

// VoidedAtGT applies the GT predicate on the "voided_at" field.
func VoidedAtGT(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldVoidedAt, v))
}

// VoidedAtGTE applies the GTE predicate on the "voided_at" field.
func VoidedAtGTE(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldVoidedAt, v))
}

// VoidedAtLT applies the LT predicate on the "voided_at" field.
func VoidedAtLT(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldVoidedAt, v))
}

// VoidedAtLTE applies the LTE predicate on the "voided_at" field.
func VoidedAtLTE(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldVoidedAt, v))
}

// VoidedAtIsNil applies the IsNil predicate on the "voided_at" field.
func VoidedAtIsNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIsNull(FieldVoidedAt))
}

// VoidedAtNotNil applies the NotNil predicate on the "voided_at" field.
func VoidedAtNotNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotNull(FieldVoidedAt))
}

// FinalizedAtEQ applies the EQ predicate on the "finalized_at" field.
func FinalizedAtEQ(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldFinalizedAt, v))
}

// FinalizedAtNEQ applies the NEQ predicate on the "finalized_at" field.
func FinalizedAtNEQ(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldFinalizedAt, v))
}

// FinalizedAtIn applies the In predicate on the "finalized_at" field.
func FinalizedAtIn(vs ...time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldFinalizedAt, vs...))
}

// FinalizedAtNotIn applies the NotIn predicate on the "finalized_at" field.
func FinalizedAtNotIn(vs ...time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldFinalizedAt, vs...))
}

// FinalizedAtGT applies the GT predicate on the "finalized_at" field.
func FinalizedAtGT(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldFinalizedAt, v))
}

// FinalizedAtGTE applies the GTE predicate on the "finalized_at" field.
func FinalizedAtGTE(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldFinalizedAt, v))
}

// FinalizedAtLT applies the LT predicate on the "finalized_at" field.
func FinalizedAtLT(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldFinalizedAt, v))
}

// FinalizedAtLTE applies the LTE predicate on the "finalized_at" field.
func FinalizedAtLTE(v time.Time) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldFinalizedAt, v))
}

// FinalizedAtIsNil applies the IsNil predicate on the "finalized_at" field.
func FinalizedAtIsNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIsNull(FieldFinalizedAt))
}

// FinalizedAtNotNil applies the NotNil predicate on the "finalized_at" field.
func FinalizedAtNotNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotNull(FieldFinalizedAt))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotNull(FieldMetadata))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v decimal.Decimal) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v decimal.Decimal) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...decimal.Decimal) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...decimal.Decimal) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v decimal.Decimal) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v decimal.Decimal) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v decimal.Decimal) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v decimal.Decimal) predicate.CreditNote {
	return predicate.CreditNote(sql.FieldLTE(FieldTotalAmount, v))
}

// HasLineItems applies the HasEdge predicate on the "line_items" edge.
func HasLineItems() predicate.CreditNote {
	return predicate.CreditNote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LineItemsTable, LineItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLineItemsWith applies the HasEdge predicate on the "line_items" edge with a given conditions (other predicates).
func HasLineItemsWith(preds ...predicate.CreditNoteLineItem) predicate.CreditNote {
	return predicate.CreditNote(func(s *sql.Selector) {
		step := newLineItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CreditNote) predicate.CreditNote {
	return predicate.CreditNote(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CreditNote) predicate.CreditNote {
	return predicate.CreditNote(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CreditNote) predicate.CreditNote {
	return predicate.CreditNote(sql.NotPredicates(p))
}
