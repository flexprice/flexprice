// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/creditnote"
	"github.com/flexprice/flexprice/ent/creditnotelineitem"
	"github.com/flexprice/flexprice/internal/types"
	"github.com/shopspring/decimal"
)

// CreditNoteCreate is the builder for creating a CreditNote entity.
type CreditNoteCreate struct {
	config
	mutation *CreditNoteMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (cnc *CreditNoteCreate) SetTenantID(s string) *CreditNoteCreate {
	cnc.mutation.SetTenantID(s)
	return cnc
}

// SetStatus sets the "status" field.
func (cnc *CreditNoteCreate) SetStatus(s string) *CreditNoteCreate {
	cnc.mutation.SetStatus(s)
	return cnc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cnc *CreditNoteCreate) SetNillableStatus(s *string) *CreditNoteCreate {
	if s != nil {
		cnc.SetStatus(*s)
	}
	return cnc
}

// SetCreatedAt sets the "created_at" field.
func (cnc *CreditNoteCreate) SetCreatedAt(t time.Time) *CreditNoteCreate {
	cnc.mutation.SetCreatedAt(t)
	return cnc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cnc *CreditNoteCreate) SetNillableCreatedAt(t *time.Time) *CreditNoteCreate {
	if t != nil {
		cnc.SetCreatedAt(*t)
	}
	return cnc
}

// SetUpdatedAt sets the "updated_at" field.
func (cnc *CreditNoteCreate) SetUpdatedAt(t time.Time) *CreditNoteCreate {
	cnc.mutation.SetUpdatedAt(t)
	return cnc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cnc *CreditNoteCreate) SetNillableUpdatedAt(t *time.Time) *CreditNoteCreate {
	if t != nil {
		cnc.SetUpdatedAt(*t)
	}
	return cnc
}

// SetCreatedBy sets the "created_by" field.
func (cnc *CreditNoteCreate) SetCreatedBy(s string) *CreditNoteCreate {
	cnc.mutation.SetCreatedBy(s)
	return cnc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cnc *CreditNoteCreate) SetNillableCreatedBy(s *string) *CreditNoteCreate {
	if s != nil {
		cnc.SetCreatedBy(*s)
	}
	return cnc
}

// SetUpdatedBy sets the "updated_by" field.
func (cnc *CreditNoteCreate) SetUpdatedBy(s string) *CreditNoteCreate {
	cnc.mutation.SetUpdatedBy(s)
	return cnc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cnc *CreditNoteCreate) SetNillableUpdatedBy(s *string) *CreditNoteCreate {
	if s != nil {
		cnc.SetUpdatedBy(*s)
	}
	return cnc
}

// SetEnvironmentID sets the "environment_id" field.
func (cnc *CreditNoteCreate) SetEnvironmentID(s string) *CreditNoteCreate {
	cnc.mutation.SetEnvironmentID(s)
	return cnc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (cnc *CreditNoteCreate) SetNillableEnvironmentID(s *string) *CreditNoteCreate {
	if s != nil {
		cnc.SetEnvironmentID(*s)
	}
	return cnc
}

// SetInvoiceID sets the "invoice_id" field.
func (cnc *CreditNoteCreate) SetInvoiceID(s string) *CreditNoteCreate {
	cnc.mutation.SetInvoiceID(s)
	return cnc
}

// SetCustomerID sets the "customer_id" field.
func (cnc *CreditNoteCreate) SetCustomerID(s string) *CreditNoteCreate {
	cnc.mutation.SetCustomerID(s)
	return cnc
}

// SetSubscriptionID sets the "subscription_id" field.
func (cnc *CreditNoteCreate) SetSubscriptionID(s string) *CreditNoteCreate {
	cnc.mutation.SetSubscriptionID(s)
	return cnc
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (cnc *CreditNoteCreate) SetNillableSubscriptionID(s *string) *CreditNoteCreate {
	if s != nil {
		cnc.SetSubscriptionID(*s)
	}
	return cnc
}

// SetCreditNoteNumber sets the "credit_note_number" field.
func (cnc *CreditNoteCreate) SetCreditNoteNumber(s string) *CreditNoteCreate {
	cnc.mutation.SetCreditNoteNumber(s)
	return cnc
}

// SetCreditNoteStatus sets the "credit_note_status" field.
func (cnc *CreditNoteCreate) SetCreditNoteStatus(tns types.CreditNoteStatus) *CreditNoteCreate {
	cnc.mutation.SetCreditNoteStatus(tns)
	return cnc
}

// SetNillableCreditNoteStatus sets the "credit_note_status" field if the given value is not nil.
func (cnc *CreditNoteCreate) SetNillableCreditNoteStatus(tns *types.CreditNoteStatus) *CreditNoteCreate {
	if tns != nil {
		cnc.SetCreditNoteStatus(*tns)
	}
	return cnc
}

// SetCreditNoteType sets the "credit_note_type" field.
func (cnc *CreditNoteCreate) SetCreditNoteType(tnt types.CreditNoteType) *CreditNoteCreate {
	cnc.mutation.SetCreditNoteType(tnt)
	return cnc
}

// SetRefundStatus sets the "refund_status" field.
func (cnc *CreditNoteCreate) SetRefundStatus(ts types.PaymentStatus) *CreditNoteCreate {
	cnc.mutation.SetRefundStatus(ts)
	return cnc
}

// SetNillableRefundStatus sets the "refund_status" field if the given value is not nil.
func (cnc *CreditNoteCreate) SetNillableRefundStatus(ts *types.PaymentStatus) *CreditNoteCreate {
	if ts != nil {
		cnc.SetRefundStatus(*ts)
	}
	return cnc
}

// SetReason sets the "reason" field.
func (cnc *CreditNoteCreate) SetReason(tnr types.CreditNoteReason) *CreditNoteCreate {
	cnc.mutation.SetReason(tnr)
	return cnc
}

// SetMemo sets the "memo" field.
func (cnc *CreditNoteCreate) SetMemo(s string) *CreditNoteCreate {
	cnc.mutation.SetMemo(s)
	return cnc
}

// SetCurrency sets the "currency" field.
func (cnc *CreditNoteCreate) SetCurrency(s string) *CreditNoteCreate {
	cnc.mutation.SetCurrency(s)
	return cnc
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (cnc *CreditNoteCreate) SetIdempotencyKey(s string) *CreditNoteCreate {
	cnc.mutation.SetIdempotencyKey(s)
	return cnc
}

// SetNillableIdempotencyKey sets the "idempotency_key" field if the given value is not nil.
func (cnc *CreditNoteCreate) SetNillableIdempotencyKey(s *string) *CreditNoteCreate {
	if s != nil {
		cnc.SetIdempotencyKey(*s)
	}
	return cnc
}

// SetMetadata sets the "metadata" field.
func (cnc *CreditNoteCreate) SetMetadata(m map[string]string) *CreditNoteCreate {
	cnc.mutation.SetMetadata(m)
	return cnc
}

// SetTotalAmount sets the "total_amount" field.
func (cnc *CreditNoteCreate) SetTotalAmount(d decimal.Decimal) *CreditNoteCreate {
	cnc.mutation.SetTotalAmount(d)
	return cnc
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (cnc *CreditNoteCreate) SetNillableTotalAmount(d *decimal.Decimal) *CreditNoteCreate {
	if d != nil {
		cnc.SetTotalAmount(*d)
	}
	return cnc
}

// SetID sets the "id" field.
func (cnc *CreditNoteCreate) SetID(s string) *CreditNoteCreate {
	cnc.mutation.SetID(s)
	return cnc
}

// AddLineItemIDs adds the "line_items" edge to the CreditNoteLineItem entity by IDs.
func (cnc *CreditNoteCreate) AddLineItemIDs(ids ...string) *CreditNoteCreate {
	cnc.mutation.AddLineItemIDs(ids...)
	return cnc
}

// AddLineItems adds the "line_items" edges to the CreditNoteLineItem entity.
func (cnc *CreditNoteCreate) AddLineItems(c ...*CreditNoteLineItem) *CreditNoteCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnc.AddLineItemIDs(ids...)
}

// Mutation returns the CreditNoteMutation object of the builder.
func (cnc *CreditNoteCreate) Mutation() *CreditNoteMutation {
	return cnc.mutation
}

// Save creates the CreditNote in the database.
func (cnc *CreditNoteCreate) Save(ctx context.Context) (*CreditNote, error) {
	cnc.defaults()
	return withHooks(ctx, cnc.sqlSave, cnc.mutation, cnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cnc *CreditNoteCreate) SaveX(ctx context.Context) *CreditNote {
	v, err := cnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cnc *CreditNoteCreate) Exec(ctx context.Context) error {
	_, err := cnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnc *CreditNoteCreate) ExecX(ctx context.Context) {
	if err := cnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cnc *CreditNoteCreate) defaults() {
	if _, ok := cnc.mutation.Status(); !ok {
		v := creditnote.DefaultStatus
		cnc.mutation.SetStatus(v)
	}
	if _, ok := cnc.mutation.CreatedAt(); !ok {
		v := creditnote.DefaultCreatedAt()
		cnc.mutation.SetCreatedAt(v)
	}
	if _, ok := cnc.mutation.UpdatedAt(); !ok {
		v := creditnote.DefaultUpdatedAt()
		cnc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cnc.mutation.EnvironmentID(); !ok {
		v := creditnote.DefaultEnvironmentID
		cnc.mutation.SetEnvironmentID(v)
	}
	if _, ok := cnc.mutation.CreditNoteStatus(); !ok {
		v := creditnote.DefaultCreditNoteStatus
		cnc.mutation.SetCreditNoteStatus(v)
	}
	if _, ok := cnc.mutation.TotalAmount(); !ok {
		v := creditnote.DefaultTotalAmount
		cnc.mutation.SetTotalAmount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cnc *CreditNoteCreate) check() error {
	if _, ok := cnc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CreditNote.tenant_id"`)}
	}
	if v, ok := cnc.mutation.TenantID(); ok {
		if err := creditnote.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "CreditNote.tenant_id": %w`, err)}
		}
	}
	if _, ok := cnc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CreditNote.status"`)}
	}
	if _, ok := cnc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CreditNote.created_at"`)}
	}
	if _, ok := cnc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CreditNote.updated_at"`)}
	}
	if _, ok := cnc.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice_id", err: errors.New(`ent: missing required field "CreditNote.invoice_id"`)}
	}
	if v, ok := cnc.mutation.InvoiceID(); ok {
		if err := creditnote.InvoiceIDValidator(v); err != nil {
			return &ValidationError{Name: "invoice_id", err: fmt.Errorf(`ent: validator failed for field "CreditNote.invoice_id": %w`, err)}
		}
	}
	if _, ok := cnc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "CreditNote.customer_id"`)}
	}
	if v, ok := cnc.mutation.CustomerID(); ok {
		if err := creditnote.CustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_id", err: fmt.Errorf(`ent: validator failed for field "CreditNote.customer_id": %w`, err)}
		}
	}
	if _, ok := cnc.mutation.CreditNoteNumber(); !ok {
		return &ValidationError{Name: "credit_note_number", err: errors.New(`ent: missing required field "CreditNote.credit_note_number"`)}
	}
	if _, ok := cnc.mutation.CreditNoteStatus(); !ok {
		return &ValidationError{Name: "credit_note_status", err: errors.New(`ent: missing required field "CreditNote.credit_note_status"`)}
	}
	if v, ok := cnc.mutation.CreditNoteStatus(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "credit_note_status", err: fmt.Errorf(`ent: validator failed for field "CreditNote.credit_note_status": %w`, err)}
		}
	}
	if _, ok := cnc.mutation.CreditNoteType(); !ok {
		return &ValidationError{Name: "credit_note_type", err: errors.New(`ent: missing required field "CreditNote.credit_note_type"`)}
	}
	if v, ok := cnc.mutation.CreditNoteType(); ok {
		if err := creditnote.CreditNoteTypeValidator(string(v)); err != nil {
			return &ValidationError{Name: "credit_note_type", err: fmt.Errorf(`ent: validator failed for field "CreditNote.credit_note_type": %w`, err)}
		}
	}
	if v, ok := cnc.mutation.RefundStatus(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "refund_status", err: fmt.Errorf(`ent: validator failed for field "CreditNote.refund_status": %w`, err)}
		}
	}
	if _, ok := cnc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "CreditNote.reason"`)}
	}
	if v, ok := cnc.mutation.Reason(); ok {
		if err := creditnote.ReasonValidator(string(v)); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "CreditNote.reason": %w`, err)}
		}
	}
	if _, ok := cnc.mutation.Memo(); !ok {
		return &ValidationError{Name: "memo", err: errors.New(`ent: missing required field "CreditNote.memo"`)}
	}
	if _, ok := cnc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "CreditNote.currency"`)}
	}
	if _, ok := cnc.mutation.TotalAmount(); !ok {
		return &ValidationError{Name: "total_amount", err: errors.New(`ent: missing required field "CreditNote.total_amount"`)}
	}
	return nil
}

func (cnc *CreditNoteCreate) sqlSave(ctx context.Context) (*CreditNote, error) {
	if err := cnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CreditNote.ID type: %T", _spec.ID.Value)
		}
	}
	cnc.mutation.id = &_node.ID
	cnc.mutation.done = true
	return _node, nil
}

func (cnc *CreditNoteCreate) createSpec() (*CreditNote, *sqlgraph.CreateSpec) {
	var (
		_node = &CreditNote{config: cnc.config}
		_spec = sqlgraph.NewCreateSpec(creditnote.Table, sqlgraph.NewFieldSpec(creditnote.FieldID, field.TypeString))
	)
	if id, ok := cnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cnc.mutation.TenantID(); ok {
		_spec.SetField(creditnote.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := cnc.mutation.Status(); ok {
		_spec.SetField(creditnote.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cnc.mutation.CreatedAt(); ok {
		_spec.SetField(creditnote.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cnc.mutation.UpdatedAt(); ok {
		_spec.SetField(creditnote.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cnc.mutation.CreatedBy(); ok {
		_spec.SetField(creditnote.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cnc.mutation.UpdatedBy(); ok {
		_spec.SetField(creditnote.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cnc.mutation.EnvironmentID(); ok {
		_spec.SetField(creditnote.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := cnc.mutation.InvoiceID(); ok {
		_spec.SetField(creditnote.FieldInvoiceID, field.TypeString, value)
		_node.InvoiceID = value
	}
	if value, ok := cnc.mutation.CustomerID(); ok {
		_spec.SetField(creditnote.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := cnc.mutation.SubscriptionID(); ok {
		_spec.SetField(creditnote.FieldSubscriptionID, field.TypeString, value)
		_node.SubscriptionID = &value
	}
	if value, ok := cnc.mutation.CreditNoteNumber(); ok {
		_spec.SetField(creditnote.FieldCreditNoteNumber, field.TypeString, value)
		_node.CreditNoteNumber = value
	}
	if value, ok := cnc.mutation.CreditNoteStatus(); ok {
		_spec.SetField(creditnote.FieldCreditNoteStatus, field.TypeString, value)
		_node.CreditNoteStatus = value
	}
	if value, ok := cnc.mutation.CreditNoteType(); ok {
		_spec.SetField(creditnote.FieldCreditNoteType, field.TypeString, value)
		_node.CreditNoteType = value
	}
	if value, ok := cnc.mutation.RefundStatus(); ok {
		_spec.SetField(creditnote.FieldRefundStatus, field.TypeString, value)
		_node.RefundStatus = &value
	}
	if value, ok := cnc.mutation.Reason(); ok {
		_spec.SetField(creditnote.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := cnc.mutation.Memo(); ok {
		_spec.SetField(creditnote.FieldMemo, field.TypeString, value)
		_node.Memo = value
	}
	if value, ok := cnc.mutation.Currency(); ok {
		_spec.SetField(creditnote.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := cnc.mutation.IdempotencyKey(); ok {
		_spec.SetField(creditnote.FieldIdempotencyKey, field.TypeString, value)
		_node.IdempotencyKey = &value
	}
	if value, ok := cnc.mutation.Metadata(); ok {
		_spec.SetField(creditnote.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := cnc.mutation.TotalAmount(); ok {
		_spec.SetField(creditnote.FieldTotalAmount, field.TypeOther, value)
		_node.TotalAmount = value
	}
	if nodes := cnc.mutation.LineItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   creditnote.LineItemsTable,
			Columns: []string{creditnote.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditnotelineitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CreditNoteCreateBulk is the builder for creating many CreditNote entities in bulk.
type CreditNoteCreateBulk struct {
	config
	err      error
	builders []*CreditNoteCreate
}

// Save creates the CreditNote entities in the database.
func (cncb *CreditNoteCreateBulk) Save(ctx context.Context) ([]*CreditNote, error) {
	if cncb.err != nil {
		return nil, cncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cncb.builders))
	nodes := make([]*CreditNote, len(cncb.builders))
	mutators := make([]Mutator, len(cncb.builders))
	for i := range cncb.builders {
		func(i int, root context.Context) {
			builder := cncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CreditNoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cncb *CreditNoteCreateBulk) SaveX(ctx context.Context) []*CreditNote {
	v, err := cncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cncb *CreditNoteCreateBulk) Exec(ctx context.Context) error {
	_, err := cncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cncb *CreditNoteCreateBulk) ExecX(ctx context.Context) {
	if err := cncb.Exec(ctx); err != nil {
		panic(err)
	}
}
