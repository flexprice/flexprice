// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/creditnote"
	"github.com/flexprice/flexprice/ent/creditnotelineitem"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/internal/types"
)

// CreditNoteUpdate is the builder for updating CreditNote entities.
type CreditNoteUpdate struct {
	config
	hooks    []Hook
	mutation *CreditNoteMutation
}

// Where appends a list predicates to the CreditNoteUpdate builder.
func (cnu *CreditNoteUpdate) Where(ps ...predicate.CreditNote) *CreditNoteUpdate {
	cnu.mutation.Where(ps...)
	return cnu
}

// SetStatus sets the "status" field.
func (cnu *CreditNoteUpdate) SetStatus(s string) *CreditNoteUpdate {
	cnu.mutation.SetStatus(s)
	return cnu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cnu *CreditNoteUpdate) SetNillableStatus(s *string) *CreditNoteUpdate {
	if s != nil {
		cnu.SetStatus(*s)
	}
	return cnu
}

// SetUpdatedAt sets the "updated_at" field.
func (cnu *CreditNoteUpdate) SetUpdatedAt(t time.Time) *CreditNoteUpdate {
	cnu.mutation.SetUpdatedAt(t)
	return cnu
}

// SetUpdatedBy sets the "updated_by" field.
func (cnu *CreditNoteUpdate) SetUpdatedBy(s string) *CreditNoteUpdate {
	cnu.mutation.SetUpdatedBy(s)
	return cnu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cnu *CreditNoteUpdate) SetNillableUpdatedBy(s *string) *CreditNoteUpdate {
	if s != nil {
		cnu.SetUpdatedBy(*s)
	}
	return cnu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cnu *CreditNoteUpdate) ClearUpdatedBy() *CreditNoteUpdate {
	cnu.mutation.ClearUpdatedBy()
	return cnu
}

// SetCreditNoteStatus sets the "credit_note_status" field.
func (cnu *CreditNoteUpdate) SetCreditNoteStatus(tns types.CreditNoteStatus) *CreditNoteUpdate {
	cnu.mutation.SetCreditNoteStatus(tns)
	return cnu
}

// SetNillableCreditNoteStatus sets the "credit_note_status" field if the given value is not nil.
func (cnu *CreditNoteUpdate) SetNillableCreditNoteStatus(tns *types.CreditNoteStatus) *CreditNoteUpdate {
	if tns != nil {
		cnu.SetCreditNoteStatus(*tns)
	}
	return cnu
}

// SetCreditNoteType sets the "credit_note_type" field.
func (cnu *CreditNoteUpdate) SetCreditNoteType(tnt types.CreditNoteType) *CreditNoteUpdate {
	cnu.mutation.SetCreditNoteType(tnt)
	return cnu
}

// SetNillableCreditNoteType sets the "credit_note_type" field if the given value is not nil.
func (cnu *CreditNoteUpdate) SetNillableCreditNoteType(tnt *types.CreditNoteType) *CreditNoteUpdate {
	if tnt != nil {
		cnu.SetCreditNoteType(*tnt)
	}
	return cnu
}

// SetRefundStatus sets the "refund_status" field.
func (cnu *CreditNoteUpdate) SetRefundStatus(ts types.PaymentStatus) *CreditNoteUpdate {
	cnu.mutation.SetRefundStatus(ts)
	return cnu
}

// SetNillableRefundStatus sets the "refund_status" field if the given value is not nil.
func (cnu *CreditNoteUpdate) SetNillableRefundStatus(ts *types.PaymentStatus) *CreditNoteUpdate {
	if ts != nil {
		cnu.SetRefundStatus(*ts)
	}
	return cnu
}

// ClearRefundStatus clears the value of the "refund_status" field.
func (cnu *CreditNoteUpdate) ClearRefundStatus() *CreditNoteUpdate {
	cnu.mutation.ClearRefundStatus()
	return cnu
}

// SetReason sets the "reason" field.
func (cnu *CreditNoteUpdate) SetReason(tnr types.CreditNoteReason) *CreditNoteUpdate {
	cnu.mutation.SetReason(tnr)
	return cnu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (cnu *CreditNoteUpdate) SetNillableReason(tnr *types.CreditNoteReason) *CreditNoteUpdate {
	if tnr != nil {
		cnu.SetReason(*tnr)
	}
	return cnu
}

// SetMetadata sets the "metadata" field.
func (cnu *CreditNoteUpdate) SetMetadata(m map[string]string) *CreditNoteUpdate {
	cnu.mutation.SetMetadata(m)
	return cnu
}

// ClearMetadata clears the value of the "metadata" field.
func (cnu *CreditNoteUpdate) ClearMetadata() *CreditNoteUpdate {
	cnu.mutation.ClearMetadata()
	return cnu
}

// AddLineItemIDs adds the "line_items" edge to the CreditNoteLineItem entity by IDs.
func (cnu *CreditNoteUpdate) AddLineItemIDs(ids ...string) *CreditNoteUpdate {
	cnu.mutation.AddLineItemIDs(ids...)
	return cnu
}

// AddLineItems adds the "line_items" edges to the CreditNoteLineItem entity.
func (cnu *CreditNoteUpdate) AddLineItems(c ...*CreditNoteLineItem) *CreditNoteUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnu.AddLineItemIDs(ids...)
}

// Mutation returns the CreditNoteMutation object of the builder.
func (cnu *CreditNoteUpdate) Mutation() *CreditNoteMutation {
	return cnu.mutation
}

// ClearLineItems clears all "line_items" edges to the CreditNoteLineItem entity.
func (cnu *CreditNoteUpdate) ClearLineItems() *CreditNoteUpdate {
	cnu.mutation.ClearLineItems()
	return cnu
}

// RemoveLineItemIDs removes the "line_items" edge to CreditNoteLineItem entities by IDs.
func (cnu *CreditNoteUpdate) RemoveLineItemIDs(ids ...string) *CreditNoteUpdate {
	cnu.mutation.RemoveLineItemIDs(ids...)
	return cnu
}

// RemoveLineItems removes "line_items" edges to CreditNoteLineItem entities.
func (cnu *CreditNoteUpdate) RemoveLineItems(c ...*CreditNoteLineItem) *CreditNoteUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnu.RemoveLineItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cnu *CreditNoteUpdate) Save(ctx context.Context) (int, error) {
	cnu.defaults()
	return withHooks(ctx, cnu.sqlSave, cnu.mutation, cnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cnu *CreditNoteUpdate) SaveX(ctx context.Context) int {
	affected, err := cnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cnu *CreditNoteUpdate) Exec(ctx context.Context) error {
	_, err := cnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnu *CreditNoteUpdate) ExecX(ctx context.Context) {
	if err := cnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cnu *CreditNoteUpdate) defaults() {
	if _, ok := cnu.mutation.UpdatedAt(); !ok {
		v := creditnote.UpdateDefaultUpdatedAt()
		cnu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cnu *CreditNoteUpdate) check() error {
	if v, ok := cnu.mutation.CreditNoteStatus(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "credit_note_status", err: fmt.Errorf(`ent: validator failed for field "CreditNote.credit_note_status": %w`, err)}
		}
	}
	if v, ok := cnu.mutation.CreditNoteType(); ok {
		if err := creditnote.CreditNoteTypeValidator(string(v)); err != nil {
			return &ValidationError{Name: "credit_note_type", err: fmt.Errorf(`ent: validator failed for field "CreditNote.credit_note_type": %w`, err)}
		}
	}
	if v, ok := cnu.mutation.RefundStatus(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "refund_status", err: fmt.Errorf(`ent: validator failed for field "CreditNote.refund_status": %w`, err)}
		}
	}
	if v, ok := cnu.mutation.Reason(); ok {
		if err := creditnote.ReasonValidator(string(v)); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "CreditNote.reason": %w`, err)}
		}
	}
	return nil
}

func (cnu *CreditNoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(creditnote.Table, creditnote.Columns, sqlgraph.NewFieldSpec(creditnote.FieldID, field.TypeString))
	if ps := cnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cnu.mutation.Status(); ok {
		_spec.SetField(creditnote.FieldStatus, field.TypeString, value)
	}
	if value, ok := cnu.mutation.UpdatedAt(); ok {
		_spec.SetField(creditnote.FieldUpdatedAt, field.TypeTime, value)
	}
	if cnu.mutation.CreatedByCleared() {
		_spec.ClearField(creditnote.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cnu.mutation.UpdatedBy(); ok {
		_spec.SetField(creditnote.FieldUpdatedBy, field.TypeString, value)
	}
	if cnu.mutation.UpdatedByCleared() {
		_spec.ClearField(creditnote.FieldUpdatedBy, field.TypeString)
	}
	if cnu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(creditnote.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cnu.mutation.CreditNoteStatus(); ok {
		_spec.SetField(creditnote.FieldCreditNoteStatus, field.TypeString, value)
	}
	if value, ok := cnu.mutation.CreditNoteType(); ok {
		_spec.SetField(creditnote.FieldCreditNoteType, field.TypeString, value)
	}
	if value, ok := cnu.mutation.RefundStatus(); ok {
		_spec.SetField(creditnote.FieldRefundStatus, field.TypeString, value)
	}
	if cnu.mutation.RefundStatusCleared() {
		_spec.ClearField(creditnote.FieldRefundStatus, field.TypeString)
	}
	if value, ok := cnu.mutation.Reason(); ok {
		_spec.SetField(creditnote.FieldReason, field.TypeString, value)
	}
	if cnu.mutation.IdempotencyKeyCleared() {
		_spec.ClearField(creditnote.FieldIdempotencyKey, field.TypeString)
	}
	if value, ok := cnu.mutation.Metadata(); ok {
		_spec.SetField(creditnote.FieldMetadata, field.TypeJSON, value)
	}
	if cnu.mutation.MetadataCleared() {
		_spec.ClearField(creditnote.FieldMetadata, field.TypeJSON)
	}
	if cnu.mutation.LineItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   creditnote.LineItemsTable,
			Columns: []string{creditnote.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditnotelineitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnu.mutation.RemovedLineItemsIDs(); len(nodes) > 0 && !cnu.mutation.LineItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   creditnote.LineItemsTable,
			Columns: []string{creditnote.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditnotelineitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnu.mutation.LineItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   creditnote.LineItemsTable,
			Columns: []string{creditnote.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditnotelineitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creditnote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cnu.mutation.done = true
	return n, nil
}

// CreditNoteUpdateOne is the builder for updating a single CreditNote entity.
type CreditNoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CreditNoteMutation
}

// SetStatus sets the "status" field.
func (cnuo *CreditNoteUpdateOne) SetStatus(s string) *CreditNoteUpdateOne {
	cnuo.mutation.SetStatus(s)
	return cnuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cnuo *CreditNoteUpdateOne) SetNillableStatus(s *string) *CreditNoteUpdateOne {
	if s != nil {
		cnuo.SetStatus(*s)
	}
	return cnuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cnuo *CreditNoteUpdateOne) SetUpdatedAt(t time.Time) *CreditNoteUpdateOne {
	cnuo.mutation.SetUpdatedAt(t)
	return cnuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cnuo *CreditNoteUpdateOne) SetUpdatedBy(s string) *CreditNoteUpdateOne {
	cnuo.mutation.SetUpdatedBy(s)
	return cnuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cnuo *CreditNoteUpdateOne) SetNillableUpdatedBy(s *string) *CreditNoteUpdateOne {
	if s != nil {
		cnuo.SetUpdatedBy(*s)
	}
	return cnuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cnuo *CreditNoteUpdateOne) ClearUpdatedBy() *CreditNoteUpdateOne {
	cnuo.mutation.ClearUpdatedBy()
	return cnuo
}

// SetCreditNoteStatus sets the "credit_note_status" field.
func (cnuo *CreditNoteUpdateOne) SetCreditNoteStatus(tns types.CreditNoteStatus) *CreditNoteUpdateOne {
	cnuo.mutation.SetCreditNoteStatus(tns)
	return cnuo
}

// SetNillableCreditNoteStatus sets the "credit_note_status" field if the given value is not nil.
func (cnuo *CreditNoteUpdateOne) SetNillableCreditNoteStatus(tns *types.CreditNoteStatus) *CreditNoteUpdateOne {
	if tns != nil {
		cnuo.SetCreditNoteStatus(*tns)
	}
	return cnuo
}

// SetCreditNoteType sets the "credit_note_type" field.
func (cnuo *CreditNoteUpdateOne) SetCreditNoteType(tnt types.CreditNoteType) *CreditNoteUpdateOne {
	cnuo.mutation.SetCreditNoteType(tnt)
	return cnuo
}

// SetNillableCreditNoteType sets the "credit_note_type" field if the given value is not nil.
func (cnuo *CreditNoteUpdateOne) SetNillableCreditNoteType(tnt *types.CreditNoteType) *CreditNoteUpdateOne {
	if tnt != nil {
		cnuo.SetCreditNoteType(*tnt)
	}
	return cnuo
}

// SetRefundStatus sets the "refund_status" field.
func (cnuo *CreditNoteUpdateOne) SetRefundStatus(ts types.PaymentStatus) *CreditNoteUpdateOne {
	cnuo.mutation.SetRefundStatus(ts)
	return cnuo
}

// SetNillableRefundStatus sets the "refund_status" field if the given value is not nil.
func (cnuo *CreditNoteUpdateOne) SetNillableRefundStatus(ts *types.PaymentStatus) *CreditNoteUpdateOne {
	if ts != nil {
		cnuo.SetRefundStatus(*ts)
	}
	return cnuo
}

// ClearRefundStatus clears the value of the "refund_status" field.
func (cnuo *CreditNoteUpdateOne) ClearRefundStatus() *CreditNoteUpdateOne {
	cnuo.mutation.ClearRefundStatus()
	return cnuo
}

// SetReason sets the "reason" field.
func (cnuo *CreditNoteUpdateOne) SetReason(tnr types.CreditNoteReason) *CreditNoteUpdateOne {
	cnuo.mutation.SetReason(tnr)
	return cnuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (cnuo *CreditNoteUpdateOne) SetNillableReason(tnr *types.CreditNoteReason) *CreditNoteUpdateOne {
	if tnr != nil {
		cnuo.SetReason(*tnr)
	}
	return cnuo
}

// SetMetadata sets the "metadata" field.
func (cnuo *CreditNoteUpdateOne) SetMetadata(m map[string]string) *CreditNoteUpdateOne {
	cnuo.mutation.SetMetadata(m)
	return cnuo
}

// ClearMetadata clears the value of the "metadata" field.
func (cnuo *CreditNoteUpdateOne) ClearMetadata() *CreditNoteUpdateOne {
	cnuo.mutation.ClearMetadata()
	return cnuo
}

// AddLineItemIDs adds the "line_items" edge to the CreditNoteLineItem entity by IDs.
func (cnuo *CreditNoteUpdateOne) AddLineItemIDs(ids ...string) *CreditNoteUpdateOne {
	cnuo.mutation.AddLineItemIDs(ids...)
	return cnuo
}

// AddLineItems adds the "line_items" edges to the CreditNoteLineItem entity.
func (cnuo *CreditNoteUpdateOne) AddLineItems(c ...*CreditNoteLineItem) *CreditNoteUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnuo.AddLineItemIDs(ids...)
}

// Mutation returns the CreditNoteMutation object of the builder.
func (cnuo *CreditNoteUpdateOne) Mutation() *CreditNoteMutation {
	return cnuo.mutation
}

// ClearLineItems clears all "line_items" edges to the CreditNoteLineItem entity.
func (cnuo *CreditNoteUpdateOne) ClearLineItems() *CreditNoteUpdateOne {
	cnuo.mutation.ClearLineItems()
	return cnuo
}

// RemoveLineItemIDs removes the "line_items" edge to CreditNoteLineItem entities by IDs.
func (cnuo *CreditNoteUpdateOne) RemoveLineItemIDs(ids ...string) *CreditNoteUpdateOne {
	cnuo.mutation.RemoveLineItemIDs(ids...)
	return cnuo
}

// RemoveLineItems removes "line_items" edges to CreditNoteLineItem entities.
func (cnuo *CreditNoteUpdateOne) RemoveLineItems(c ...*CreditNoteLineItem) *CreditNoteUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnuo.RemoveLineItemIDs(ids...)
}

// Where appends a list predicates to the CreditNoteUpdate builder.
func (cnuo *CreditNoteUpdateOne) Where(ps ...predicate.CreditNote) *CreditNoteUpdateOne {
	cnuo.mutation.Where(ps...)
	return cnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cnuo *CreditNoteUpdateOne) Select(field string, fields ...string) *CreditNoteUpdateOne {
	cnuo.fields = append([]string{field}, fields...)
	return cnuo
}

// Save executes the query and returns the updated CreditNote entity.
func (cnuo *CreditNoteUpdateOne) Save(ctx context.Context) (*CreditNote, error) {
	cnuo.defaults()
	return withHooks(ctx, cnuo.sqlSave, cnuo.mutation, cnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cnuo *CreditNoteUpdateOne) SaveX(ctx context.Context) *CreditNote {
	node, err := cnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cnuo *CreditNoteUpdateOne) Exec(ctx context.Context) error {
	_, err := cnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnuo *CreditNoteUpdateOne) ExecX(ctx context.Context) {
	if err := cnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cnuo *CreditNoteUpdateOne) defaults() {
	if _, ok := cnuo.mutation.UpdatedAt(); !ok {
		v := creditnote.UpdateDefaultUpdatedAt()
		cnuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cnuo *CreditNoteUpdateOne) check() error {
	if v, ok := cnuo.mutation.CreditNoteStatus(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "credit_note_status", err: fmt.Errorf(`ent: validator failed for field "CreditNote.credit_note_status": %w`, err)}
		}
	}
	if v, ok := cnuo.mutation.CreditNoteType(); ok {
		if err := creditnote.CreditNoteTypeValidator(string(v)); err != nil {
			return &ValidationError{Name: "credit_note_type", err: fmt.Errorf(`ent: validator failed for field "CreditNote.credit_note_type": %w`, err)}
		}
	}
	if v, ok := cnuo.mutation.RefundStatus(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "refund_status", err: fmt.Errorf(`ent: validator failed for field "CreditNote.refund_status": %w`, err)}
		}
	}
	if v, ok := cnuo.mutation.Reason(); ok {
		if err := creditnote.ReasonValidator(string(v)); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "CreditNote.reason": %w`, err)}
		}
	}
	return nil
}

func (cnuo *CreditNoteUpdateOne) sqlSave(ctx context.Context) (_node *CreditNote, err error) {
	if err := cnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(creditnote.Table, creditnote.Columns, sqlgraph.NewFieldSpec(creditnote.FieldID, field.TypeString))
	id, ok := cnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CreditNote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, creditnote.FieldID)
		for _, f := range fields {
			if !creditnote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != creditnote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cnuo.mutation.Status(); ok {
		_spec.SetField(creditnote.FieldStatus, field.TypeString, value)
	}
	if value, ok := cnuo.mutation.UpdatedAt(); ok {
		_spec.SetField(creditnote.FieldUpdatedAt, field.TypeTime, value)
	}
	if cnuo.mutation.CreatedByCleared() {
		_spec.ClearField(creditnote.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cnuo.mutation.UpdatedBy(); ok {
		_spec.SetField(creditnote.FieldUpdatedBy, field.TypeString, value)
	}
	if cnuo.mutation.UpdatedByCleared() {
		_spec.ClearField(creditnote.FieldUpdatedBy, field.TypeString)
	}
	if cnuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(creditnote.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cnuo.mutation.CreditNoteStatus(); ok {
		_spec.SetField(creditnote.FieldCreditNoteStatus, field.TypeString, value)
	}
	if value, ok := cnuo.mutation.CreditNoteType(); ok {
		_spec.SetField(creditnote.FieldCreditNoteType, field.TypeString, value)
	}
	if value, ok := cnuo.mutation.RefundStatus(); ok {
		_spec.SetField(creditnote.FieldRefundStatus, field.TypeString, value)
	}
	if cnuo.mutation.RefundStatusCleared() {
		_spec.ClearField(creditnote.FieldRefundStatus, field.TypeString)
	}
	if value, ok := cnuo.mutation.Reason(); ok {
		_spec.SetField(creditnote.FieldReason, field.TypeString, value)
	}
	if cnuo.mutation.IdempotencyKeyCleared() {
		_spec.ClearField(creditnote.FieldIdempotencyKey, field.TypeString)
	}
	if value, ok := cnuo.mutation.Metadata(); ok {
		_spec.SetField(creditnote.FieldMetadata, field.TypeJSON, value)
	}
	if cnuo.mutation.MetadataCleared() {
		_spec.ClearField(creditnote.FieldMetadata, field.TypeJSON)
	}
	if cnuo.mutation.LineItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   creditnote.LineItemsTable,
			Columns: []string{creditnote.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditnotelineitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnuo.mutation.RemovedLineItemsIDs(); len(nodes) > 0 && !cnuo.mutation.LineItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   creditnote.LineItemsTable,
			Columns: []string{creditnote.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditnotelineitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnuo.mutation.LineItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   creditnote.LineItemsTable,
			Columns: []string{creditnote.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditnotelineitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CreditNote{config: cnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creditnote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cnuo.mutation.done = true
	return _node, nil
}
