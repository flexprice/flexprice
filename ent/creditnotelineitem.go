// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/creditnote"
	"github.com/flexprice/flexprice/ent/creditnotelineitem"
	"github.com/shopspring/decimal"
)

// CreditNoteLineItem is the model entity for the CreditNoteLineItem schema.
type CreditNoteLineItem struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// CreditNoteID holds the value of the "credit_note_id" field.
	CreditNoteID string `json:"credit_note_id,omitempty"`
	// InvoiceLineItemID holds the value of the "invoice_line_item_id" field.
	InvoiceLineItemID string `json:"invoice_line_item_id,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity decimal.Decimal `json:"quantity,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CreditNoteLineItemQuery when eager-loading is set.
	Edges        CreditNoteLineItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CreditNoteLineItemEdges holds the relations/edges for other nodes in the graph.
type CreditNoteLineItemEdges struct {
	// CreditNote holds the value of the credit_note edge.
	CreditNote *CreditNote `json:"credit_note,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CreditNoteOrErr returns the CreditNote value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CreditNoteLineItemEdges) CreditNoteOrErr() (*CreditNote, error) {
	if e.CreditNote != nil {
		return e.CreditNote, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: creditnote.Label}
	}
	return nil, &NotLoadedError{edge: "credit_note"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CreditNoteLineItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case creditnotelineitem.FieldMetadata:
			values[i] = new([]byte)
		case creditnotelineitem.FieldAmount, creditnotelineitem.FieldQuantity:
			values[i] = new(decimal.Decimal)
		case creditnotelineitem.FieldID, creditnotelineitem.FieldTenantID, creditnotelineitem.FieldStatus, creditnotelineitem.FieldCreatedBy, creditnotelineitem.FieldUpdatedBy, creditnotelineitem.FieldEnvironmentID, creditnotelineitem.FieldCreditNoteID, creditnotelineitem.FieldInvoiceLineItemID, creditnotelineitem.FieldDisplayName, creditnotelineitem.FieldCurrency:
			values[i] = new(sql.NullString)
		case creditnotelineitem.FieldCreatedAt, creditnotelineitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CreditNoteLineItem fields.
func (cnli *CreditNoteLineItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case creditnotelineitem.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cnli.ID = value.String
			}
		case creditnotelineitem.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				cnli.TenantID = value.String
			}
		case creditnotelineitem.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cnli.Status = value.String
			}
		case creditnotelineitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cnli.CreatedAt = value.Time
			}
		case creditnotelineitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cnli.UpdatedAt = value.Time
			}
		case creditnotelineitem.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cnli.CreatedBy = value.String
			}
		case creditnotelineitem.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				cnli.UpdatedBy = value.String
			}
		case creditnotelineitem.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				cnli.EnvironmentID = value.String
			}
		case creditnotelineitem.FieldCreditNoteID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credit_note_id", values[i])
			} else if value.Valid {
				cnli.CreditNoteID = value.String
			}
		case creditnotelineitem.FieldInvoiceLineItemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_line_item_id", values[i])
			} else if value.Valid {
				cnli.InvoiceLineItemID = value.String
			}
		case creditnotelineitem.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				cnli.DisplayName = value.String
			}
		case creditnotelineitem.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				cnli.Amount = *value
			}
		case creditnotelineitem.FieldQuantity:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value != nil {
				cnli.Quantity = *value
			}
		case creditnotelineitem.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				cnli.Currency = value.String
			}
		case creditnotelineitem.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cnli.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			cnli.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CreditNoteLineItem.
// This includes values selected through modifiers, order, etc.
func (cnli *CreditNoteLineItem) Value(name string) (ent.Value, error) {
	return cnli.selectValues.Get(name)
}

// QueryCreditNote queries the "credit_note" edge of the CreditNoteLineItem entity.
func (cnli *CreditNoteLineItem) QueryCreditNote() *CreditNoteQuery {
	return NewCreditNoteLineItemClient(cnli.config).QueryCreditNote(cnli)
}

// Update returns a builder for updating this CreditNoteLineItem.
// Note that you need to call CreditNoteLineItem.Unwrap() before calling this method if this CreditNoteLineItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (cnli *CreditNoteLineItem) Update() *CreditNoteLineItemUpdateOne {
	return NewCreditNoteLineItemClient(cnli.config).UpdateOne(cnli)
}

// Unwrap unwraps the CreditNoteLineItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cnli *CreditNoteLineItem) Unwrap() *CreditNoteLineItem {
	_tx, ok := cnli.config.driver.(*txDriver)
	if !ok {
		panic("ent: CreditNoteLineItem is not a transactional entity")
	}
	cnli.config.driver = _tx.drv
	return cnli
}

// String implements the fmt.Stringer.
func (cnli *CreditNoteLineItem) String() string {
	var builder strings.Builder
	builder.WriteString("CreditNoteLineItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cnli.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(cnli.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(cnli.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cnli.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cnli.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(cnli.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(cnli.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(cnli.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("credit_note_id=")
	builder.WriteString(cnli.CreditNoteID)
	builder.WriteString(", ")
	builder.WriteString("invoice_line_item_id=")
	builder.WriteString(cnli.InvoiceLineItemID)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(cnli.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", cnli.Amount))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", cnli.Quantity))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(cnli.Currency)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", cnli.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// CreditNoteLineItems is a parsable slice of CreditNoteLineItem.
type CreditNoteLineItems []*CreditNoteLineItem
