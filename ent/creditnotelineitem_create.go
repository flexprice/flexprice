// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/creditnote"
	"github.com/flexprice/flexprice/ent/creditnotelineitem"
	"github.com/shopspring/decimal"
)

// CreditNoteLineItemCreate is the builder for creating a CreditNoteLineItem entity.
type CreditNoteLineItemCreate struct {
	config
	mutation *CreditNoteLineItemMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (cnlic *CreditNoteLineItemCreate) SetTenantID(s string) *CreditNoteLineItemCreate {
	cnlic.mutation.SetTenantID(s)
	return cnlic
}

// SetStatus sets the "status" field.
func (cnlic *CreditNoteLineItemCreate) SetStatus(s string) *CreditNoteLineItemCreate {
	cnlic.mutation.SetStatus(s)
	return cnlic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cnlic *CreditNoteLineItemCreate) SetNillableStatus(s *string) *CreditNoteLineItemCreate {
	if s != nil {
		cnlic.SetStatus(*s)
	}
	return cnlic
}

// SetCreatedAt sets the "created_at" field.
func (cnlic *CreditNoteLineItemCreate) SetCreatedAt(t time.Time) *CreditNoteLineItemCreate {
	cnlic.mutation.SetCreatedAt(t)
	return cnlic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cnlic *CreditNoteLineItemCreate) SetNillableCreatedAt(t *time.Time) *CreditNoteLineItemCreate {
	if t != nil {
		cnlic.SetCreatedAt(*t)
	}
	return cnlic
}

// SetUpdatedAt sets the "updated_at" field.
func (cnlic *CreditNoteLineItemCreate) SetUpdatedAt(t time.Time) *CreditNoteLineItemCreate {
	cnlic.mutation.SetUpdatedAt(t)
	return cnlic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cnlic *CreditNoteLineItemCreate) SetNillableUpdatedAt(t *time.Time) *CreditNoteLineItemCreate {
	if t != nil {
		cnlic.SetUpdatedAt(*t)
	}
	return cnlic
}

// SetCreatedBy sets the "created_by" field.
func (cnlic *CreditNoteLineItemCreate) SetCreatedBy(s string) *CreditNoteLineItemCreate {
	cnlic.mutation.SetCreatedBy(s)
	return cnlic
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cnlic *CreditNoteLineItemCreate) SetNillableCreatedBy(s *string) *CreditNoteLineItemCreate {
	if s != nil {
		cnlic.SetCreatedBy(*s)
	}
	return cnlic
}

// SetUpdatedBy sets the "updated_by" field.
func (cnlic *CreditNoteLineItemCreate) SetUpdatedBy(s string) *CreditNoteLineItemCreate {
	cnlic.mutation.SetUpdatedBy(s)
	return cnlic
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cnlic *CreditNoteLineItemCreate) SetNillableUpdatedBy(s *string) *CreditNoteLineItemCreate {
	if s != nil {
		cnlic.SetUpdatedBy(*s)
	}
	return cnlic
}

// SetEnvironmentID sets the "environment_id" field.
func (cnlic *CreditNoteLineItemCreate) SetEnvironmentID(s string) *CreditNoteLineItemCreate {
	cnlic.mutation.SetEnvironmentID(s)
	return cnlic
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (cnlic *CreditNoteLineItemCreate) SetNillableEnvironmentID(s *string) *CreditNoteLineItemCreate {
	if s != nil {
		cnlic.SetEnvironmentID(*s)
	}
	return cnlic
}

// SetCreditNoteID sets the "credit_note_id" field.
func (cnlic *CreditNoteLineItemCreate) SetCreditNoteID(s string) *CreditNoteLineItemCreate {
	cnlic.mutation.SetCreditNoteID(s)
	return cnlic
}

// SetInvoiceLineItemID sets the "invoice_line_item_id" field.
func (cnlic *CreditNoteLineItemCreate) SetInvoiceLineItemID(s string) *CreditNoteLineItemCreate {
	cnlic.mutation.SetInvoiceLineItemID(s)
	return cnlic
}

// SetDisplayName sets the "display_name" field.
func (cnlic *CreditNoteLineItemCreate) SetDisplayName(s string) *CreditNoteLineItemCreate {
	cnlic.mutation.SetDisplayName(s)
	return cnlic
}

// SetAmount sets the "amount" field.
func (cnlic *CreditNoteLineItemCreate) SetAmount(d decimal.Decimal) *CreditNoteLineItemCreate {
	cnlic.mutation.SetAmount(d)
	return cnlic
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cnlic *CreditNoteLineItemCreate) SetNillableAmount(d *decimal.Decimal) *CreditNoteLineItemCreate {
	if d != nil {
		cnlic.SetAmount(*d)
	}
	return cnlic
}

// SetCurrency sets the "currency" field.
func (cnlic *CreditNoteLineItemCreate) SetCurrency(s string) *CreditNoteLineItemCreate {
	cnlic.mutation.SetCurrency(s)
	return cnlic
}

// SetMetadata sets the "metadata" field.
func (cnlic *CreditNoteLineItemCreate) SetMetadata(m map[string]string) *CreditNoteLineItemCreate {
	cnlic.mutation.SetMetadata(m)
	return cnlic
}

// SetID sets the "id" field.
func (cnlic *CreditNoteLineItemCreate) SetID(s string) *CreditNoteLineItemCreate {
	cnlic.mutation.SetID(s)
	return cnlic
}

// SetCreditNote sets the "credit_note" edge to the CreditNote entity.
func (cnlic *CreditNoteLineItemCreate) SetCreditNote(c *CreditNote) *CreditNoteLineItemCreate {
	return cnlic.SetCreditNoteID(c.ID)
}

// Mutation returns the CreditNoteLineItemMutation object of the builder.
func (cnlic *CreditNoteLineItemCreate) Mutation() *CreditNoteLineItemMutation {
	return cnlic.mutation
}

// Save creates the CreditNoteLineItem in the database.
func (cnlic *CreditNoteLineItemCreate) Save(ctx context.Context) (*CreditNoteLineItem, error) {
	cnlic.defaults()
	return withHooks(ctx, cnlic.sqlSave, cnlic.mutation, cnlic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cnlic *CreditNoteLineItemCreate) SaveX(ctx context.Context) *CreditNoteLineItem {
	v, err := cnlic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cnlic *CreditNoteLineItemCreate) Exec(ctx context.Context) error {
	_, err := cnlic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnlic *CreditNoteLineItemCreate) ExecX(ctx context.Context) {
	if err := cnlic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cnlic *CreditNoteLineItemCreate) defaults() {
	if _, ok := cnlic.mutation.Status(); !ok {
		v := creditnotelineitem.DefaultStatus
		cnlic.mutation.SetStatus(v)
	}
	if _, ok := cnlic.mutation.CreatedAt(); !ok {
		v := creditnotelineitem.DefaultCreatedAt()
		cnlic.mutation.SetCreatedAt(v)
	}
	if _, ok := cnlic.mutation.UpdatedAt(); !ok {
		v := creditnotelineitem.DefaultUpdatedAt()
		cnlic.mutation.SetUpdatedAt(v)
	}
	if _, ok := cnlic.mutation.EnvironmentID(); !ok {
		v := creditnotelineitem.DefaultEnvironmentID
		cnlic.mutation.SetEnvironmentID(v)
	}
	if _, ok := cnlic.mutation.Amount(); !ok {
		v := creditnotelineitem.DefaultAmount
		cnlic.mutation.SetAmount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cnlic *CreditNoteLineItemCreate) check() error {
	if _, ok := cnlic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CreditNoteLineItem.tenant_id"`)}
	}
	if v, ok := cnlic.mutation.TenantID(); ok {
		if err := creditnotelineitem.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "CreditNoteLineItem.tenant_id": %w`, err)}
		}
	}
	if _, ok := cnlic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CreditNoteLineItem.status"`)}
	}
	if _, ok := cnlic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CreditNoteLineItem.created_at"`)}
	}
	if _, ok := cnlic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CreditNoteLineItem.updated_at"`)}
	}
	if _, ok := cnlic.mutation.CreditNoteID(); !ok {
		return &ValidationError{Name: "credit_note_id", err: errors.New(`ent: missing required field "CreditNoteLineItem.credit_note_id"`)}
	}
	if v, ok := cnlic.mutation.CreditNoteID(); ok {
		if err := creditnotelineitem.CreditNoteIDValidator(v); err != nil {
			return &ValidationError{Name: "credit_note_id", err: fmt.Errorf(`ent: validator failed for field "CreditNoteLineItem.credit_note_id": %w`, err)}
		}
	}
	if _, ok := cnlic.mutation.InvoiceLineItemID(); !ok {
		return &ValidationError{Name: "invoice_line_item_id", err: errors.New(`ent: missing required field "CreditNoteLineItem.invoice_line_item_id"`)}
	}
	if v, ok := cnlic.mutation.InvoiceLineItemID(); ok {
		if err := creditnotelineitem.InvoiceLineItemIDValidator(v); err != nil {
			return &ValidationError{Name: "invoice_line_item_id", err: fmt.Errorf(`ent: validator failed for field "CreditNoteLineItem.invoice_line_item_id": %w`, err)}
		}
	}
	if _, ok := cnlic.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "CreditNoteLineItem.display_name"`)}
	}
	if v, ok := cnlic.mutation.DisplayName(); ok {
		if err := creditnotelineitem.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "CreditNoteLineItem.display_name": %w`, err)}
		}
	}
	if _, ok := cnlic.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "CreditNoteLineItem.amount"`)}
	}
	if _, ok := cnlic.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "CreditNoteLineItem.currency"`)}
	}
	if v, ok := cnlic.mutation.Currency(); ok {
		if err := creditnotelineitem.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "CreditNoteLineItem.currency": %w`, err)}
		}
	}
	if len(cnlic.mutation.CreditNoteIDs()) == 0 {
		return &ValidationError{Name: "credit_note", err: errors.New(`ent: missing required edge "CreditNoteLineItem.credit_note"`)}
	}
	return nil
}

func (cnlic *CreditNoteLineItemCreate) sqlSave(ctx context.Context) (*CreditNoteLineItem, error) {
	if err := cnlic.check(); err != nil {
		return nil, err
	}
	_node, _spec := cnlic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cnlic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CreditNoteLineItem.ID type: %T", _spec.ID.Value)
		}
	}
	cnlic.mutation.id = &_node.ID
	cnlic.mutation.done = true
	return _node, nil
}

func (cnlic *CreditNoteLineItemCreate) createSpec() (*CreditNoteLineItem, *sqlgraph.CreateSpec) {
	var (
		_node = &CreditNoteLineItem{config: cnlic.config}
		_spec = sqlgraph.NewCreateSpec(creditnotelineitem.Table, sqlgraph.NewFieldSpec(creditnotelineitem.FieldID, field.TypeString))
	)
	if id, ok := cnlic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cnlic.mutation.TenantID(); ok {
		_spec.SetField(creditnotelineitem.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := cnlic.mutation.Status(); ok {
		_spec.SetField(creditnotelineitem.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cnlic.mutation.CreatedAt(); ok {
		_spec.SetField(creditnotelineitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cnlic.mutation.UpdatedAt(); ok {
		_spec.SetField(creditnotelineitem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cnlic.mutation.CreatedBy(); ok {
		_spec.SetField(creditnotelineitem.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cnlic.mutation.UpdatedBy(); ok {
		_spec.SetField(creditnotelineitem.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cnlic.mutation.EnvironmentID(); ok {
		_spec.SetField(creditnotelineitem.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := cnlic.mutation.InvoiceLineItemID(); ok {
		_spec.SetField(creditnotelineitem.FieldInvoiceLineItemID, field.TypeString, value)
		_node.InvoiceLineItemID = value
	}
	if value, ok := cnlic.mutation.DisplayName(); ok {
		_spec.SetField(creditnotelineitem.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := cnlic.mutation.Amount(); ok {
		_spec.SetField(creditnotelineitem.FieldAmount, field.TypeOther, value)
		_node.Amount = value
	}
	if value, ok := cnlic.mutation.Currency(); ok {
		_spec.SetField(creditnotelineitem.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := cnlic.mutation.Metadata(); ok {
		_spec.SetField(creditnotelineitem.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := cnlic.mutation.CreditNoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creditnotelineitem.CreditNoteTable,
			Columns: []string{creditnotelineitem.CreditNoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditnote.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreditNoteID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CreditNoteLineItemCreateBulk is the builder for creating many CreditNoteLineItem entities in bulk.
type CreditNoteLineItemCreateBulk struct {
	config
	err      error
	builders []*CreditNoteLineItemCreate
}

// Save creates the CreditNoteLineItem entities in the database.
func (cnlicb *CreditNoteLineItemCreateBulk) Save(ctx context.Context) ([]*CreditNoteLineItem, error) {
	if cnlicb.err != nil {
		return nil, cnlicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cnlicb.builders))
	nodes := make([]*CreditNoteLineItem, len(cnlicb.builders))
	mutators := make([]Mutator, len(cnlicb.builders))
	for i := range cnlicb.builders {
		func(i int, root context.Context) {
			builder := cnlicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CreditNoteLineItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cnlicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cnlicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cnlicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cnlicb *CreditNoteLineItemCreateBulk) SaveX(ctx context.Context) []*CreditNoteLineItem {
	v, err := cnlicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cnlicb *CreditNoteLineItemCreateBulk) Exec(ctx context.Context) error {
	_, err := cnlicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnlicb *CreditNoteLineItemCreateBulk) ExecX(ctx context.Context) {
	if err := cnlicb.Exec(ctx); err != nil {
		panic(err)
	}
}
