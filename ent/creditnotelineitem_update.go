// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/creditnotelineitem"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/shopspring/decimal"
)

// CreditNoteLineItemUpdate is the builder for updating CreditNoteLineItem entities.
type CreditNoteLineItemUpdate struct {
	config
	hooks    []Hook
	mutation *CreditNoteLineItemMutation
}

// Where appends a list predicates to the CreditNoteLineItemUpdate builder.
func (cnliu *CreditNoteLineItemUpdate) Where(ps ...predicate.CreditNoteLineItem) *CreditNoteLineItemUpdate {
	cnliu.mutation.Where(ps...)
	return cnliu
}

// SetStatus sets the "status" field.
func (cnliu *CreditNoteLineItemUpdate) SetStatus(s string) *CreditNoteLineItemUpdate {
	cnliu.mutation.SetStatus(s)
	return cnliu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cnliu *CreditNoteLineItemUpdate) SetNillableStatus(s *string) *CreditNoteLineItemUpdate {
	if s != nil {
		cnliu.SetStatus(*s)
	}
	return cnliu
}

// SetUpdatedAt sets the "updated_at" field.
func (cnliu *CreditNoteLineItemUpdate) SetUpdatedAt(t time.Time) *CreditNoteLineItemUpdate {
	cnliu.mutation.SetUpdatedAt(t)
	return cnliu
}

// SetUpdatedBy sets the "updated_by" field.
func (cnliu *CreditNoteLineItemUpdate) SetUpdatedBy(s string) *CreditNoteLineItemUpdate {
	cnliu.mutation.SetUpdatedBy(s)
	return cnliu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cnliu *CreditNoteLineItemUpdate) SetNillableUpdatedBy(s *string) *CreditNoteLineItemUpdate {
	if s != nil {
		cnliu.SetUpdatedBy(*s)
	}
	return cnliu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cnliu *CreditNoteLineItemUpdate) ClearUpdatedBy() *CreditNoteLineItemUpdate {
	cnliu.mutation.ClearUpdatedBy()
	return cnliu
}

// SetDisplayName sets the "display_name" field.
func (cnliu *CreditNoteLineItemUpdate) SetDisplayName(s string) *CreditNoteLineItemUpdate {
	cnliu.mutation.SetDisplayName(s)
	return cnliu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cnliu *CreditNoteLineItemUpdate) SetNillableDisplayName(s *string) *CreditNoteLineItemUpdate {
	if s != nil {
		cnliu.SetDisplayName(*s)
	}
	return cnliu
}

// SetAmount sets the "amount" field.
func (cnliu *CreditNoteLineItemUpdate) SetAmount(d decimal.Decimal) *CreditNoteLineItemUpdate {
	cnliu.mutation.SetAmount(d)
	return cnliu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cnliu *CreditNoteLineItemUpdate) SetNillableAmount(d *decimal.Decimal) *CreditNoteLineItemUpdate {
	if d != nil {
		cnliu.SetAmount(*d)
	}
	return cnliu
}

// SetQuantity sets the "quantity" field.
func (cnliu *CreditNoteLineItemUpdate) SetQuantity(d decimal.Decimal) *CreditNoteLineItemUpdate {
	cnliu.mutation.SetQuantity(d)
	return cnliu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (cnliu *CreditNoteLineItemUpdate) SetNillableQuantity(d *decimal.Decimal) *CreditNoteLineItemUpdate {
	if d != nil {
		cnliu.SetQuantity(*d)
	}
	return cnliu
}

// SetCurrency sets the "currency" field.
func (cnliu *CreditNoteLineItemUpdate) SetCurrency(s string) *CreditNoteLineItemUpdate {
	cnliu.mutation.SetCurrency(s)
	return cnliu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cnliu *CreditNoteLineItemUpdate) SetNillableCurrency(s *string) *CreditNoteLineItemUpdate {
	if s != nil {
		cnliu.SetCurrency(*s)
	}
	return cnliu
}

// SetMetadata sets the "metadata" field.
func (cnliu *CreditNoteLineItemUpdate) SetMetadata(m map[string]string) *CreditNoteLineItemUpdate {
	cnliu.mutation.SetMetadata(m)
	return cnliu
}

// ClearMetadata clears the value of the "metadata" field.
func (cnliu *CreditNoteLineItemUpdate) ClearMetadata() *CreditNoteLineItemUpdate {
	cnliu.mutation.ClearMetadata()
	return cnliu
}

// Mutation returns the CreditNoteLineItemMutation object of the builder.
func (cnliu *CreditNoteLineItemUpdate) Mutation() *CreditNoteLineItemMutation {
	return cnliu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cnliu *CreditNoteLineItemUpdate) Save(ctx context.Context) (int, error) {
	cnliu.defaults()
	return withHooks(ctx, cnliu.sqlSave, cnliu.mutation, cnliu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cnliu *CreditNoteLineItemUpdate) SaveX(ctx context.Context) int {
	affected, err := cnliu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cnliu *CreditNoteLineItemUpdate) Exec(ctx context.Context) error {
	_, err := cnliu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnliu *CreditNoteLineItemUpdate) ExecX(ctx context.Context) {
	if err := cnliu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cnliu *CreditNoteLineItemUpdate) defaults() {
	if _, ok := cnliu.mutation.UpdatedAt(); !ok {
		v := creditnotelineitem.UpdateDefaultUpdatedAt()
		cnliu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cnliu *CreditNoteLineItemUpdate) check() error {
	if v, ok := cnliu.mutation.DisplayName(); ok {
		if err := creditnotelineitem.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "CreditNoteLineItem.display_name": %w`, err)}
		}
	}
	if v, ok := cnliu.mutation.Currency(); ok {
		if err := creditnotelineitem.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "CreditNoteLineItem.currency": %w`, err)}
		}
	}
	if cnliu.mutation.CreditNoteCleared() && len(cnliu.mutation.CreditNoteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CreditNoteLineItem.credit_note"`)
	}
	return nil
}

func (cnliu *CreditNoteLineItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cnliu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(creditnotelineitem.Table, creditnotelineitem.Columns, sqlgraph.NewFieldSpec(creditnotelineitem.FieldID, field.TypeString))
	if ps := cnliu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cnliu.mutation.Status(); ok {
		_spec.SetField(creditnotelineitem.FieldStatus, field.TypeString, value)
	}
	if value, ok := cnliu.mutation.UpdatedAt(); ok {
		_spec.SetField(creditnotelineitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if cnliu.mutation.CreatedByCleared() {
		_spec.ClearField(creditnotelineitem.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cnliu.mutation.UpdatedBy(); ok {
		_spec.SetField(creditnotelineitem.FieldUpdatedBy, field.TypeString, value)
	}
	if cnliu.mutation.UpdatedByCleared() {
		_spec.ClearField(creditnotelineitem.FieldUpdatedBy, field.TypeString)
	}
	if cnliu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(creditnotelineitem.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cnliu.mutation.DisplayName(); ok {
		_spec.SetField(creditnotelineitem.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := cnliu.mutation.Amount(); ok {
		_spec.SetField(creditnotelineitem.FieldAmount, field.TypeOther, value)
	}
	if value, ok := cnliu.mutation.Quantity(); ok {
		_spec.SetField(creditnotelineitem.FieldQuantity, field.TypeOther, value)
	}
	if value, ok := cnliu.mutation.Currency(); ok {
		_spec.SetField(creditnotelineitem.FieldCurrency, field.TypeString, value)
	}
	if value, ok := cnliu.mutation.Metadata(); ok {
		_spec.SetField(creditnotelineitem.FieldMetadata, field.TypeJSON, value)
	}
	if cnliu.mutation.MetadataCleared() {
		_spec.ClearField(creditnotelineitem.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cnliu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creditnotelineitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cnliu.mutation.done = true
	return n, nil
}

// CreditNoteLineItemUpdateOne is the builder for updating a single CreditNoteLineItem entity.
type CreditNoteLineItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CreditNoteLineItemMutation
}

// SetStatus sets the "status" field.
func (cnliuo *CreditNoteLineItemUpdateOne) SetStatus(s string) *CreditNoteLineItemUpdateOne {
	cnliuo.mutation.SetStatus(s)
	return cnliuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cnliuo *CreditNoteLineItemUpdateOne) SetNillableStatus(s *string) *CreditNoteLineItemUpdateOne {
	if s != nil {
		cnliuo.SetStatus(*s)
	}
	return cnliuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cnliuo *CreditNoteLineItemUpdateOne) SetUpdatedAt(t time.Time) *CreditNoteLineItemUpdateOne {
	cnliuo.mutation.SetUpdatedAt(t)
	return cnliuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cnliuo *CreditNoteLineItemUpdateOne) SetUpdatedBy(s string) *CreditNoteLineItemUpdateOne {
	cnliuo.mutation.SetUpdatedBy(s)
	return cnliuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cnliuo *CreditNoteLineItemUpdateOne) SetNillableUpdatedBy(s *string) *CreditNoteLineItemUpdateOne {
	if s != nil {
		cnliuo.SetUpdatedBy(*s)
	}
	return cnliuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cnliuo *CreditNoteLineItemUpdateOne) ClearUpdatedBy() *CreditNoteLineItemUpdateOne {
	cnliuo.mutation.ClearUpdatedBy()
	return cnliuo
}

// SetDisplayName sets the "display_name" field.
func (cnliuo *CreditNoteLineItemUpdateOne) SetDisplayName(s string) *CreditNoteLineItemUpdateOne {
	cnliuo.mutation.SetDisplayName(s)
	return cnliuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cnliuo *CreditNoteLineItemUpdateOne) SetNillableDisplayName(s *string) *CreditNoteLineItemUpdateOne {
	if s != nil {
		cnliuo.SetDisplayName(*s)
	}
	return cnliuo
}

// SetAmount sets the "amount" field.
func (cnliuo *CreditNoteLineItemUpdateOne) SetAmount(d decimal.Decimal) *CreditNoteLineItemUpdateOne {
	cnliuo.mutation.SetAmount(d)
	return cnliuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cnliuo *CreditNoteLineItemUpdateOne) SetNillableAmount(d *decimal.Decimal) *CreditNoteLineItemUpdateOne {
	if d != nil {
		cnliuo.SetAmount(*d)
	}
	return cnliuo
}

// SetQuantity sets the "quantity" field.
func (cnliuo *CreditNoteLineItemUpdateOne) SetQuantity(d decimal.Decimal) *CreditNoteLineItemUpdateOne {
	cnliuo.mutation.SetQuantity(d)
	return cnliuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (cnliuo *CreditNoteLineItemUpdateOne) SetNillableQuantity(d *decimal.Decimal) *CreditNoteLineItemUpdateOne {
	if d != nil {
		cnliuo.SetQuantity(*d)
	}
	return cnliuo
}

// SetCurrency sets the "currency" field.
func (cnliuo *CreditNoteLineItemUpdateOne) SetCurrency(s string) *CreditNoteLineItemUpdateOne {
	cnliuo.mutation.SetCurrency(s)
	return cnliuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cnliuo *CreditNoteLineItemUpdateOne) SetNillableCurrency(s *string) *CreditNoteLineItemUpdateOne {
	if s != nil {
		cnliuo.SetCurrency(*s)
	}
	return cnliuo
}

// SetMetadata sets the "metadata" field.
func (cnliuo *CreditNoteLineItemUpdateOne) SetMetadata(m map[string]string) *CreditNoteLineItemUpdateOne {
	cnliuo.mutation.SetMetadata(m)
	return cnliuo
}

// ClearMetadata clears the value of the "metadata" field.
func (cnliuo *CreditNoteLineItemUpdateOne) ClearMetadata() *CreditNoteLineItemUpdateOne {
	cnliuo.mutation.ClearMetadata()
	return cnliuo
}

// Mutation returns the CreditNoteLineItemMutation object of the builder.
func (cnliuo *CreditNoteLineItemUpdateOne) Mutation() *CreditNoteLineItemMutation {
	return cnliuo.mutation
}

// Where appends a list predicates to the CreditNoteLineItemUpdate builder.
func (cnliuo *CreditNoteLineItemUpdateOne) Where(ps ...predicate.CreditNoteLineItem) *CreditNoteLineItemUpdateOne {
	cnliuo.mutation.Where(ps...)
	return cnliuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cnliuo *CreditNoteLineItemUpdateOne) Select(field string, fields ...string) *CreditNoteLineItemUpdateOne {
	cnliuo.fields = append([]string{field}, fields...)
	return cnliuo
}

// Save executes the query and returns the updated CreditNoteLineItem entity.
func (cnliuo *CreditNoteLineItemUpdateOne) Save(ctx context.Context) (*CreditNoteLineItem, error) {
	cnliuo.defaults()
	return withHooks(ctx, cnliuo.sqlSave, cnliuo.mutation, cnliuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cnliuo *CreditNoteLineItemUpdateOne) SaveX(ctx context.Context) *CreditNoteLineItem {
	node, err := cnliuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cnliuo *CreditNoteLineItemUpdateOne) Exec(ctx context.Context) error {
	_, err := cnliuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnliuo *CreditNoteLineItemUpdateOne) ExecX(ctx context.Context) {
	if err := cnliuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cnliuo *CreditNoteLineItemUpdateOne) defaults() {
	if _, ok := cnliuo.mutation.UpdatedAt(); !ok {
		v := creditnotelineitem.UpdateDefaultUpdatedAt()
		cnliuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cnliuo *CreditNoteLineItemUpdateOne) check() error {
	if v, ok := cnliuo.mutation.DisplayName(); ok {
		if err := creditnotelineitem.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "CreditNoteLineItem.display_name": %w`, err)}
		}
	}
	if v, ok := cnliuo.mutation.Currency(); ok {
		if err := creditnotelineitem.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "CreditNoteLineItem.currency": %w`, err)}
		}
	}
	if cnliuo.mutation.CreditNoteCleared() && len(cnliuo.mutation.CreditNoteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CreditNoteLineItem.credit_note"`)
	}
	return nil
}

func (cnliuo *CreditNoteLineItemUpdateOne) sqlSave(ctx context.Context) (_node *CreditNoteLineItem, err error) {
	if err := cnliuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(creditnotelineitem.Table, creditnotelineitem.Columns, sqlgraph.NewFieldSpec(creditnotelineitem.FieldID, field.TypeString))
	id, ok := cnliuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CreditNoteLineItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cnliuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, creditnotelineitem.FieldID)
		for _, f := range fields {
			if !creditnotelineitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != creditnotelineitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cnliuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cnliuo.mutation.Status(); ok {
		_spec.SetField(creditnotelineitem.FieldStatus, field.TypeString, value)
	}
	if value, ok := cnliuo.mutation.UpdatedAt(); ok {
		_spec.SetField(creditnotelineitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if cnliuo.mutation.CreatedByCleared() {
		_spec.ClearField(creditnotelineitem.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cnliuo.mutation.UpdatedBy(); ok {
		_spec.SetField(creditnotelineitem.FieldUpdatedBy, field.TypeString, value)
	}
	if cnliuo.mutation.UpdatedByCleared() {
		_spec.ClearField(creditnotelineitem.FieldUpdatedBy, field.TypeString)
	}
	if cnliuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(creditnotelineitem.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cnliuo.mutation.DisplayName(); ok {
		_spec.SetField(creditnotelineitem.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := cnliuo.mutation.Amount(); ok {
		_spec.SetField(creditnotelineitem.FieldAmount, field.TypeOther, value)
	}
	if value, ok := cnliuo.mutation.Quantity(); ok {
		_spec.SetField(creditnotelineitem.FieldQuantity, field.TypeOther, value)
	}
	if value, ok := cnliuo.mutation.Currency(); ok {
		_spec.SetField(creditnotelineitem.FieldCurrency, field.TypeString, value)
	}
	if value, ok := cnliuo.mutation.Metadata(); ok {
		_spec.SetField(creditnotelineitem.FieldMetadata, field.TypeJSON, value)
	}
	if cnliuo.mutation.MetadataCleared() {
		_spec.ClearField(creditnotelineitem.FieldMetadata, field.TypeJSON)
	}
	_node = &CreditNoteLineItem{config: cnliuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cnliuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creditnotelineitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cnliuo.mutation.done = true
	return _node, nil
}
