// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/custompricingunit"
	"github.com/shopspring/decimal"
)

// CustomPricingUnit is the model entity for the CustomPricingUnit schema.
type CustomPricingUnit struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// BaseCurrency holds the value of the "base_currency" field.
	BaseCurrency string `json:"base_currency,omitempty"`
	// ConversionRate holds the value of the "conversion_rate" field.
	ConversionRate decimal.Decimal `json:"conversion_rate,omitempty"`
	// Precision holds the value of the "precision" field.
	Precision int `json:"precision,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomPricingUnitQuery when eager-loading is set.
	Edges        CustomPricingUnitEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomPricingUnitEdges holds the relations/edges for other nodes in the graph.
type CustomPricingUnitEdges struct {
	// Prices holds the value of the prices edge.
	Prices []*Price `json:"prices,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PricesOrErr returns the Prices value or an error if the edge
// was not loaded in eager-loading.
func (e CustomPricingUnitEdges) PricesOrErr() ([]*Price, error) {
	if e.loadedTypes[0] {
		return e.Prices, nil
	}
	return nil, &NotLoadedError{edge: "prices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomPricingUnit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case custompricingunit.FieldConversionRate:
			values[i] = new(decimal.Decimal)
		case custompricingunit.FieldPrecision:
			values[i] = new(sql.NullInt64)
		case custompricingunit.FieldID, custompricingunit.FieldTenantID, custompricingunit.FieldStatus, custompricingunit.FieldCreatedBy, custompricingunit.FieldUpdatedBy, custompricingunit.FieldEnvironmentID, custompricingunit.FieldName, custompricingunit.FieldCode, custompricingunit.FieldSymbol, custompricingunit.FieldBaseCurrency:
			values[i] = new(sql.NullString)
		case custompricingunit.FieldCreatedAt, custompricingunit.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomPricingUnit fields.
func (cpu *CustomPricingUnit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case custompricingunit.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cpu.ID = value.String
			}
		case custompricingunit.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				cpu.TenantID = value.String
			}
		case custompricingunit.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cpu.Status = value.String
			}
		case custompricingunit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cpu.CreatedAt = value.Time
			}
		case custompricingunit.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cpu.UpdatedAt = value.Time
			}
		case custompricingunit.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cpu.CreatedBy = value.String
			}
		case custompricingunit.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				cpu.UpdatedBy = value.String
			}
		case custompricingunit.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				cpu.EnvironmentID = value.String
			}
		case custompricingunit.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cpu.Name = value.String
			}
		case custompricingunit.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				cpu.Code = value.String
			}
		case custompricingunit.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				cpu.Symbol = value.String
			}
		case custompricingunit.FieldBaseCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base_currency", values[i])
			} else if value.Valid {
				cpu.BaseCurrency = value.String
			}
		case custompricingunit.FieldConversionRate:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field conversion_rate", values[i])
			} else if value != nil {
				cpu.ConversionRate = *value
			}
		case custompricingunit.FieldPrecision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field precision", values[i])
			} else if value.Valid {
				cpu.Precision = int(value.Int64)
			}
		default:
			cpu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomPricingUnit.
// This includes values selected through modifiers, order, etc.
func (cpu *CustomPricingUnit) Value(name string) (ent.Value, error) {
	return cpu.selectValues.Get(name)
}

// QueryPrices queries the "prices" edge of the CustomPricingUnit entity.
func (cpu *CustomPricingUnit) QueryPrices() *PriceQuery {
	return NewCustomPricingUnitClient(cpu.config).QueryPrices(cpu)
}

// Update returns a builder for updating this CustomPricingUnit.
// Note that you need to call CustomPricingUnit.Unwrap() before calling this method if this CustomPricingUnit
// was returned from a transaction, and the transaction was committed or rolled back.
func (cpu *CustomPricingUnit) Update() *CustomPricingUnitUpdateOne {
	return NewCustomPricingUnitClient(cpu.config).UpdateOne(cpu)
}

// Unwrap unwraps the CustomPricingUnit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cpu *CustomPricingUnit) Unwrap() *CustomPricingUnit {
	_tx, ok := cpu.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomPricingUnit is not a transactional entity")
	}
	cpu.config.driver = _tx.drv
	return cpu
}

// String implements the fmt.Stringer.
func (cpu *CustomPricingUnit) String() string {
	var builder strings.Builder
	builder.WriteString("CustomPricingUnit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cpu.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(cpu.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(cpu.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cpu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cpu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(cpu.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(cpu.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(cpu.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cpu.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(cpu.Code)
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(cpu.Symbol)
	builder.WriteString(", ")
	builder.WriteString("base_currency=")
	builder.WriteString(cpu.BaseCurrency)
	builder.WriteString(", ")
	builder.WriteString("conversion_rate=")
	builder.WriteString(fmt.Sprintf("%v", cpu.ConversionRate))
	builder.WriteString(", ")
	builder.WriteString("precision=")
	builder.WriteString(fmt.Sprintf("%v", cpu.Precision))
	builder.WriteByte(')')
	return builder.String()
}

// CustomPricingUnits is a parsable slice of CustomPricingUnit.
type CustomPricingUnits []*CustomPricingUnit
