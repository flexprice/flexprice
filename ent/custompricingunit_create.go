// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/custompricingunit"
	"github.com/flexprice/flexprice/ent/price"
	"github.com/shopspring/decimal"
)

// CustomPricingUnitCreate is the builder for creating a CustomPricingUnit entity.
type CustomPricingUnitCreate struct {
	config
	mutation *CustomPricingUnitMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (cpuc *CustomPricingUnitCreate) SetTenantID(s string) *CustomPricingUnitCreate {
	cpuc.mutation.SetTenantID(s)
	return cpuc
}

// SetStatus sets the "status" field.
func (cpuc *CustomPricingUnitCreate) SetStatus(s string) *CustomPricingUnitCreate {
	cpuc.mutation.SetStatus(s)
	return cpuc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cpuc *CustomPricingUnitCreate) SetNillableStatus(s *string) *CustomPricingUnitCreate {
	if s != nil {
		cpuc.SetStatus(*s)
	}
	return cpuc
}

// SetCreatedAt sets the "created_at" field.
func (cpuc *CustomPricingUnitCreate) SetCreatedAt(t time.Time) *CustomPricingUnitCreate {
	cpuc.mutation.SetCreatedAt(t)
	return cpuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cpuc *CustomPricingUnitCreate) SetNillableCreatedAt(t *time.Time) *CustomPricingUnitCreate {
	if t != nil {
		cpuc.SetCreatedAt(*t)
	}
	return cpuc
}

// SetUpdatedAt sets the "updated_at" field.
func (cpuc *CustomPricingUnitCreate) SetUpdatedAt(t time.Time) *CustomPricingUnitCreate {
	cpuc.mutation.SetUpdatedAt(t)
	return cpuc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cpuc *CustomPricingUnitCreate) SetNillableUpdatedAt(t *time.Time) *CustomPricingUnitCreate {
	if t != nil {
		cpuc.SetUpdatedAt(*t)
	}
	return cpuc
}

// SetCreatedBy sets the "created_by" field.
func (cpuc *CustomPricingUnitCreate) SetCreatedBy(s string) *CustomPricingUnitCreate {
	cpuc.mutation.SetCreatedBy(s)
	return cpuc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cpuc *CustomPricingUnitCreate) SetNillableCreatedBy(s *string) *CustomPricingUnitCreate {
	if s != nil {
		cpuc.SetCreatedBy(*s)
	}
	return cpuc
}

// SetUpdatedBy sets the "updated_by" field.
func (cpuc *CustomPricingUnitCreate) SetUpdatedBy(s string) *CustomPricingUnitCreate {
	cpuc.mutation.SetUpdatedBy(s)
	return cpuc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cpuc *CustomPricingUnitCreate) SetNillableUpdatedBy(s *string) *CustomPricingUnitCreate {
	if s != nil {
		cpuc.SetUpdatedBy(*s)
	}
	return cpuc
}

// SetEnvironmentID sets the "environment_id" field.
func (cpuc *CustomPricingUnitCreate) SetEnvironmentID(s string) *CustomPricingUnitCreate {
	cpuc.mutation.SetEnvironmentID(s)
	return cpuc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (cpuc *CustomPricingUnitCreate) SetNillableEnvironmentID(s *string) *CustomPricingUnitCreate {
	if s != nil {
		cpuc.SetEnvironmentID(*s)
	}
	return cpuc
}

// SetName sets the "name" field.
func (cpuc *CustomPricingUnitCreate) SetName(s string) *CustomPricingUnitCreate {
	cpuc.mutation.SetName(s)
	return cpuc
}

// SetCode sets the "code" field.
func (cpuc *CustomPricingUnitCreate) SetCode(s string) *CustomPricingUnitCreate {
	cpuc.mutation.SetCode(s)
	return cpuc
}

// SetSymbol sets the "symbol" field.
func (cpuc *CustomPricingUnitCreate) SetSymbol(s string) *CustomPricingUnitCreate {
	cpuc.mutation.SetSymbol(s)
	return cpuc
}

// SetBaseCurrency sets the "base_currency" field.
func (cpuc *CustomPricingUnitCreate) SetBaseCurrency(s string) *CustomPricingUnitCreate {
	cpuc.mutation.SetBaseCurrency(s)
	return cpuc
}

// SetConversionRate sets the "conversion_rate" field.
func (cpuc *CustomPricingUnitCreate) SetConversionRate(d decimal.Decimal) *CustomPricingUnitCreate {
	cpuc.mutation.SetConversionRate(d)
	return cpuc
}

// SetPrecision sets the "precision" field.
func (cpuc *CustomPricingUnitCreate) SetPrecision(i int) *CustomPricingUnitCreate {
	cpuc.mutation.SetPrecision(i)
	return cpuc
}

// SetNillablePrecision sets the "precision" field if the given value is not nil.
func (cpuc *CustomPricingUnitCreate) SetNillablePrecision(i *int) *CustomPricingUnitCreate {
	if i != nil {
		cpuc.SetPrecision(*i)
	}
	return cpuc
}

// SetID sets the "id" field.
func (cpuc *CustomPricingUnitCreate) SetID(s string) *CustomPricingUnitCreate {
	cpuc.mutation.SetID(s)
	return cpuc
}

// AddPriceIDs adds the "prices" edge to the Price entity by IDs.
func (cpuc *CustomPricingUnitCreate) AddPriceIDs(ids ...string) *CustomPricingUnitCreate {
	cpuc.mutation.AddPriceIDs(ids...)
	return cpuc
}

// AddPrices adds the "prices" edges to the Price entity.
func (cpuc *CustomPricingUnitCreate) AddPrices(p ...*Price) *CustomPricingUnitCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cpuc.AddPriceIDs(ids...)
}

// Mutation returns the CustomPricingUnitMutation object of the builder.
func (cpuc *CustomPricingUnitCreate) Mutation() *CustomPricingUnitMutation {
	return cpuc.mutation
}

// Save creates the CustomPricingUnit in the database.
func (cpuc *CustomPricingUnitCreate) Save(ctx context.Context) (*CustomPricingUnit, error) {
	cpuc.defaults()
	return withHooks(ctx, cpuc.sqlSave, cpuc.mutation, cpuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cpuc *CustomPricingUnitCreate) SaveX(ctx context.Context) *CustomPricingUnit {
	v, err := cpuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpuc *CustomPricingUnitCreate) Exec(ctx context.Context) error {
	_, err := cpuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuc *CustomPricingUnitCreate) ExecX(ctx context.Context) {
	if err := cpuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpuc *CustomPricingUnitCreate) defaults() {
	if _, ok := cpuc.mutation.Status(); !ok {
		v := custompricingunit.DefaultStatus
		cpuc.mutation.SetStatus(v)
	}
	if _, ok := cpuc.mutation.CreatedAt(); !ok {
		v := custompricingunit.DefaultCreatedAt()
		cpuc.mutation.SetCreatedAt(v)
	}
	if _, ok := cpuc.mutation.UpdatedAt(); !ok {
		v := custompricingunit.DefaultUpdatedAt()
		cpuc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cpuc.mutation.EnvironmentID(); !ok {
		v := custompricingunit.DefaultEnvironmentID
		cpuc.mutation.SetEnvironmentID(v)
	}
	if _, ok := cpuc.mutation.Precision(); !ok {
		v := custompricingunit.DefaultPrecision
		cpuc.mutation.SetPrecision(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpuc *CustomPricingUnitCreate) check() error {
	if _, ok := cpuc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CustomPricingUnit.tenant_id"`)}
	}
	if v, ok := cpuc.mutation.TenantID(); ok {
		if err := custompricingunit.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.tenant_id": %w`, err)}
		}
	}
	if _, ok := cpuc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CustomPricingUnit.status"`)}
	}
	if _, ok := cpuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CustomPricingUnit.created_at"`)}
	}
	if _, ok := cpuc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CustomPricingUnit.updated_at"`)}
	}
	if _, ok := cpuc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CustomPricingUnit.name"`)}
	}
	if v, ok := cpuc.mutation.Name(); ok {
		if err := custompricingunit.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.name": %w`, err)}
		}
	}
	if _, ok := cpuc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "CustomPricingUnit.code"`)}
	}
	if v, ok := cpuc.mutation.Code(); ok {
		if err := custompricingunit.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.code": %w`, err)}
		}
	}
	if _, ok := cpuc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "CustomPricingUnit.symbol"`)}
	}
	if v, ok := cpuc.mutation.Symbol(); ok {
		if err := custompricingunit.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.symbol": %w`, err)}
		}
	}
	if _, ok := cpuc.mutation.BaseCurrency(); !ok {
		return &ValidationError{Name: "base_currency", err: errors.New(`ent: missing required field "CustomPricingUnit.base_currency"`)}
	}
	if v, ok := cpuc.mutation.BaseCurrency(); ok {
		if err := custompricingunit.BaseCurrencyValidator(v); err != nil {
			return &ValidationError{Name: "base_currency", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.base_currency": %w`, err)}
		}
	}
	if _, ok := cpuc.mutation.ConversionRate(); !ok {
		return &ValidationError{Name: "conversion_rate", err: errors.New(`ent: missing required field "CustomPricingUnit.conversion_rate"`)}
	}
	if _, ok := cpuc.mutation.Precision(); !ok {
		return &ValidationError{Name: "precision", err: errors.New(`ent: missing required field "CustomPricingUnit.precision"`)}
	}
	if v, ok := cpuc.mutation.Precision(); ok {
		if err := custompricingunit.PrecisionValidator(v); err != nil {
			return &ValidationError{Name: "precision", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.precision": %w`, err)}
		}
	}
	return nil
}

func (cpuc *CustomPricingUnitCreate) sqlSave(ctx context.Context) (*CustomPricingUnit, error) {
	if err := cpuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cpuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CustomPricingUnit.ID type: %T", _spec.ID.Value)
		}
	}
	cpuc.mutation.id = &_node.ID
	cpuc.mutation.done = true
	return _node, nil
}

func (cpuc *CustomPricingUnitCreate) createSpec() (*CustomPricingUnit, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomPricingUnit{config: cpuc.config}
		_spec = sqlgraph.NewCreateSpec(custompricingunit.Table, sqlgraph.NewFieldSpec(custompricingunit.FieldID, field.TypeString))
	)
	if id, ok := cpuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cpuc.mutation.TenantID(); ok {
		_spec.SetField(custompricingunit.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := cpuc.mutation.Status(); ok {
		_spec.SetField(custompricingunit.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cpuc.mutation.CreatedAt(); ok {
		_spec.SetField(custompricingunit.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cpuc.mutation.UpdatedAt(); ok {
		_spec.SetField(custompricingunit.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cpuc.mutation.CreatedBy(); ok {
		_spec.SetField(custompricingunit.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cpuc.mutation.UpdatedBy(); ok {
		_spec.SetField(custompricingunit.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cpuc.mutation.EnvironmentID(); ok {
		_spec.SetField(custompricingunit.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := cpuc.mutation.Name(); ok {
		_spec.SetField(custompricingunit.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cpuc.mutation.Code(); ok {
		_spec.SetField(custompricingunit.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cpuc.mutation.Symbol(); ok {
		_spec.SetField(custompricingunit.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := cpuc.mutation.BaseCurrency(); ok {
		_spec.SetField(custompricingunit.FieldBaseCurrency, field.TypeString, value)
		_node.BaseCurrency = value
	}
	if value, ok := cpuc.mutation.ConversionRate(); ok {
		_spec.SetField(custompricingunit.FieldConversionRate, field.TypeOther, value)
		_node.ConversionRate = value
	}
	if value, ok := cpuc.mutation.Precision(); ok {
		_spec.SetField(custompricingunit.FieldPrecision, field.TypeInt, value)
		_node.Precision = value
	}
	if nodes := cpuc.mutation.PricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   custompricingunit.PricesTable,
			Columns: []string{custompricingunit.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomPricingUnitCreateBulk is the builder for creating many CustomPricingUnit entities in bulk.
type CustomPricingUnitCreateBulk struct {
	config
	err      error
	builders []*CustomPricingUnitCreate
}

// Save creates the CustomPricingUnit entities in the database.
func (cpucb *CustomPricingUnitCreateBulk) Save(ctx context.Context) ([]*CustomPricingUnit, error) {
	if cpucb.err != nil {
		return nil, cpucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cpucb.builders))
	nodes := make([]*CustomPricingUnit, len(cpucb.builders))
	mutators := make([]Mutator, len(cpucb.builders))
	for i := range cpucb.builders {
		func(i int, root context.Context) {
			builder := cpucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomPricingUnitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpucb *CustomPricingUnitCreateBulk) SaveX(ctx context.Context) []*CustomPricingUnit {
	v, err := cpucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpucb *CustomPricingUnitCreateBulk) Exec(ctx context.Context) error {
	_, err := cpucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpucb *CustomPricingUnitCreateBulk) ExecX(ctx context.Context) {
	if err := cpucb.Exec(ctx); err != nil {
		panic(err)
	}
}
