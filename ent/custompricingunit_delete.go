// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/custompricingunit"
	"github.com/flexprice/flexprice/ent/predicate"
)

// CustomPricingUnitDelete is the builder for deleting a CustomPricingUnit entity.
type CustomPricingUnitDelete struct {
	config
	hooks    []Hook
	mutation *CustomPricingUnitMutation
}

// Where appends a list predicates to the CustomPricingUnitDelete builder.
func (cpud *CustomPricingUnitDelete) Where(ps ...predicate.CustomPricingUnit) *CustomPricingUnitDelete {
	cpud.mutation.Where(ps...)
	return cpud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cpud *CustomPricingUnitDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cpud.sqlExec, cpud.mutation, cpud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cpud *CustomPricingUnitDelete) ExecX(ctx context.Context) int {
	n, err := cpud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cpud *CustomPricingUnitDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(custompricingunit.Table, sqlgraph.NewFieldSpec(custompricingunit.FieldID, field.TypeString))
	if ps := cpud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cpud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cpud.mutation.done = true
	return affected, err
}

// CustomPricingUnitDeleteOne is the builder for deleting a single CustomPricingUnit entity.
type CustomPricingUnitDeleteOne struct {
	cpud *CustomPricingUnitDelete
}

// Where appends a list predicates to the CustomPricingUnitDelete builder.
func (cpudo *CustomPricingUnitDeleteOne) Where(ps ...predicate.CustomPricingUnit) *CustomPricingUnitDeleteOne {
	cpudo.cpud.mutation.Where(ps...)
	return cpudo
}

// Exec executes the deletion query.
func (cpudo *CustomPricingUnitDeleteOne) Exec(ctx context.Context) error {
	n, err := cpudo.cpud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{custompricingunit.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cpudo *CustomPricingUnitDeleteOne) ExecX(ctx context.Context) {
	if err := cpudo.Exec(ctx); err != nil {
		panic(err)
	}
}
