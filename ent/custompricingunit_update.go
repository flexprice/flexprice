// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/custompricingunit"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/price"
)

// CustomPricingUnitUpdate is the builder for updating CustomPricingUnit entities.
type CustomPricingUnitUpdate struct {
	config
	hooks    []Hook
	mutation *CustomPricingUnitMutation
}

// Where appends a list predicates to the CustomPricingUnitUpdate builder.
func (cpuu *CustomPricingUnitUpdate) Where(ps ...predicate.CustomPricingUnit) *CustomPricingUnitUpdate {
	cpuu.mutation.Where(ps...)
	return cpuu
}

// SetStatus sets the "status" field.
func (cpuu *CustomPricingUnitUpdate) SetStatus(s string) *CustomPricingUnitUpdate {
	cpuu.mutation.SetStatus(s)
	return cpuu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cpuu *CustomPricingUnitUpdate) SetNillableStatus(s *string) *CustomPricingUnitUpdate {
	if s != nil {
		cpuu.SetStatus(*s)
	}
	return cpuu
}

// SetUpdatedAt sets the "updated_at" field.
func (cpuu *CustomPricingUnitUpdate) SetUpdatedAt(t time.Time) *CustomPricingUnitUpdate {
	cpuu.mutation.SetUpdatedAt(t)
	return cpuu
}

// SetUpdatedBy sets the "updated_by" field.
func (cpuu *CustomPricingUnitUpdate) SetUpdatedBy(s string) *CustomPricingUnitUpdate {
	cpuu.mutation.SetUpdatedBy(s)
	return cpuu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cpuu *CustomPricingUnitUpdate) SetNillableUpdatedBy(s *string) *CustomPricingUnitUpdate {
	if s != nil {
		cpuu.SetUpdatedBy(*s)
	}
	return cpuu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cpuu *CustomPricingUnitUpdate) ClearUpdatedBy() *CustomPricingUnitUpdate {
	cpuu.mutation.ClearUpdatedBy()
	return cpuu
}

// SetName sets the "name" field.
func (cpuu *CustomPricingUnitUpdate) SetName(s string) *CustomPricingUnitUpdate {
	cpuu.mutation.SetName(s)
	return cpuu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cpuu *CustomPricingUnitUpdate) SetNillableName(s *string) *CustomPricingUnitUpdate {
	if s != nil {
		cpuu.SetName(*s)
	}
	return cpuu
}

// SetCode sets the "code" field.
func (cpuu *CustomPricingUnitUpdate) SetCode(s string) *CustomPricingUnitUpdate {
	cpuu.mutation.SetCode(s)
	return cpuu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cpuu *CustomPricingUnitUpdate) SetNillableCode(s *string) *CustomPricingUnitUpdate {
	if s != nil {
		cpuu.SetCode(*s)
	}
	return cpuu
}

// SetSymbol sets the "symbol" field.
func (cpuu *CustomPricingUnitUpdate) SetSymbol(s string) *CustomPricingUnitUpdate {
	cpuu.mutation.SetSymbol(s)
	return cpuu
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (cpuu *CustomPricingUnitUpdate) SetNillableSymbol(s *string) *CustomPricingUnitUpdate {
	if s != nil {
		cpuu.SetSymbol(*s)
	}
	return cpuu
}

// SetBaseCurrency sets the "base_currency" field.
func (cpuu *CustomPricingUnitUpdate) SetBaseCurrency(s string) *CustomPricingUnitUpdate {
	cpuu.mutation.SetBaseCurrency(s)
	return cpuu
}

// SetNillableBaseCurrency sets the "base_currency" field if the given value is not nil.
func (cpuu *CustomPricingUnitUpdate) SetNillableBaseCurrency(s *string) *CustomPricingUnitUpdate {
	if s != nil {
		cpuu.SetBaseCurrency(*s)
	}
	return cpuu
}

// SetPrecision sets the "precision" field.
func (cpuu *CustomPricingUnitUpdate) SetPrecision(i int) *CustomPricingUnitUpdate {
	cpuu.mutation.ResetPrecision()
	cpuu.mutation.SetPrecision(i)
	return cpuu
}

// SetNillablePrecision sets the "precision" field if the given value is not nil.
func (cpuu *CustomPricingUnitUpdate) SetNillablePrecision(i *int) *CustomPricingUnitUpdate {
	if i != nil {
		cpuu.SetPrecision(*i)
	}
	return cpuu
}

// AddPrecision adds i to the "precision" field.
func (cpuu *CustomPricingUnitUpdate) AddPrecision(i int) *CustomPricingUnitUpdate {
	cpuu.mutation.AddPrecision(i)
	return cpuu
}

// AddPriceIDs adds the "prices" edge to the Price entity by IDs.
func (cpuu *CustomPricingUnitUpdate) AddPriceIDs(ids ...string) *CustomPricingUnitUpdate {
	cpuu.mutation.AddPriceIDs(ids...)
	return cpuu
}

// AddPrices adds the "prices" edges to the Price entity.
func (cpuu *CustomPricingUnitUpdate) AddPrices(p ...*Price) *CustomPricingUnitUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cpuu.AddPriceIDs(ids...)
}

// Mutation returns the CustomPricingUnitMutation object of the builder.
func (cpuu *CustomPricingUnitUpdate) Mutation() *CustomPricingUnitMutation {
	return cpuu.mutation
}

// ClearPrices clears all "prices" edges to the Price entity.
func (cpuu *CustomPricingUnitUpdate) ClearPrices() *CustomPricingUnitUpdate {
	cpuu.mutation.ClearPrices()
	return cpuu
}

// RemovePriceIDs removes the "prices" edge to Price entities by IDs.
func (cpuu *CustomPricingUnitUpdate) RemovePriceIDs(ids ...string) *CustomPricingUnitUpdate {
	cpuu.mutation.RemovePriceIDs(ids...)
	return cpuu
}

// RemovePrices removes "prices" edges to Price entities.
func (cpuu *CustomPricingUnitUpdate) RemovePrices(p ...*Price) *CustomPricingUnitUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cpuu.RemovePriceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpuu *CustomPricingUnitUpdate) Save(ctx context.Context) (int, error) {
	cpuu.defaults()
	return withHooks(ctx, cpuu.sqlSave, cpuu.mutation, cpuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuu *CustomPricingUnitUpdate) SaveX(ctx context.Context) int {
	affected, err := cpuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpuu *CustomPricingUnitUpdate) Exec(ctx context.Context) error {
	_, err := cpuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuu *CustomPricingUnitUpdate) ExecX(ctx context.Context) {
	if err := cpuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpuu *CustomPricingUnitUpdate) defaults() {
	if _, ok := cpuu.mutation.UpdatedAt(); !ok {
		v := custompricingunit.UpdateDefaultUpdatedAt()
		cpuu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpuu *CustomPricingUnitUpdate) check() error {
	if v, ok := cpuu.mutation.Name(); ok {
		if err := custompricingunit.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.name": %w`, err)}
		}
	}
	if v, ok := cpuu.mutation.Code(); ok {
		if err := custompricingunit.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.code": %w`, err)}
		}
	}
	if v, ok := cpuu.mutation.Symbol(); ok {
		if err := custompricingunit.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.symbol": %w`, err)}
		}
	}
	if v, ok := cpuu.mutation.BaseCurrency(); ok {
		if err := custompricingunit.BaseCurrencyValidator(v); err != nil {
			return &ValidationError{Name: "base_currency", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.base_currency": %w`, err)}
		}
	}
	if v, ok := cpuu.mutation.Precision(); ok {
		if err := custompricingunit.PrecisionValidator(v); err != nil {
			return &ValidationError{Name: "precision", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.precision": %w`, err)}
		}
	}
	return nil
}

func (cpuu *CustomPricingUnitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cpuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(custompricingunit.Table, custompricingunit.Columns, sqlgraph.NewFieldSpec(custompricingunit.FieldID, field.TypeString))
	if ps := cpuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuu.mutation.Status(); ok {
		_spec.SetField(custompricingunit.FieldStatus, field.TypeString, value)
	}
	if value, ok := cpuu.mutation.UpdatedAt(); ok {
		_spec.SetField(custompricingunit.FieldUpdatedAt, field.TypeTime, value)
	}
	if cpuu.mutation.CreatedByCleared() {
		_spec.ClearField(custompricingunit.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cpuu.mutation.UpdatedBy(); ok {
		_spec.SetField(custompricingunit.FieldUpdatedBy, field.TypeString, value)
	}
	if cpuu.mutation.UpdatedByCleared() {
		_spec.ClearField(custompricingunit.FieldUpdatedBy, field.TypeString)
	}
	if cpuu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(custompricingunit.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cpuu.mutation.Name(); ok {
		_spec.SetField(custompricingunit.FieldName, field.TypeString, value)
	}
	if value, ok := cpuu.mutation.Code(); ok {
		_spec.SetField(custompricingunit.FieldCode, field.TypeString, value)
	}
	if value, ok := cpuu.mutation.Symbol(); ok {
		_spec.SetField(custompricingunit.FieldSymbol, field.TypeString, value)
	}
	if value, ok := cpuu.mutation.BaseCurrency(); ok {
		_spec.SetField(custompricingunit.FieldBaseCurrency, field.TypeString, value)
	}
	if value, ok := cpuu.mutation.Precision(); ok {
		_spec.SetField(custompricingunit.FieldPrecision, field.TypeInt, value)
	}
	if value, ok := cpuu.mutation.AddedPrecision(); ok {
		_spec.AddField(custompricingunit.FieldPrecision, field.TypeInt, value)
	}
	if cpuu.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   custompricingunit.PricesTable,
			Columns: []string{custompricingunit.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuu.mutation.RemovedPricesIDs(); len(nodes) > 0 && !cpuu.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   custompricingunit.PricesTable,
			Columns: []string{custompricingunit.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuu.mutation.PricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   custompricingunit.PricesTable,
			Columns: []string{custompricingunit.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{custompricingunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cpuu.mutation.done = true
	return n, nil
}

// CustomPricingUnitUpdateOne is the builder for updating a single CustomPricingUnit entity.
type CustomPricingUnitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomPricingUnitMutation
}

// SetStatus sets the "status" field.
func (cpuuo *CustomPricingUnitUpdateOne) SetStatus(s string) *CustomPricingUnitUpdateOne {
	cpuuo.mutation.SetStatus(s)
	return cpuuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cpuuo *CustomPricingUnitUpdateOne) SetNillableStatus(s *string) *CustomPricingUnitUpdateOne {
	if s != nil {
		cpuuo.SetStatus(*s)
	}
	return cpuuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cpuuo *CustomPricingUnitUpdateOne) SetUpdatedAt(t time.Time) *CustomPricingUnitUpdateOne {
	cpuuo.mutation.SetUpdatedAt(t)
	return cpuuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cpuuo *CustomPricingUnitUpdateOne) SetUpdatedBy(s string) *CustomPricingUnitUpdateOne {
	cpuuo.mutation.SetUpdatedBy(s)
	return cpuuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cpuuo *CustomPricingUnitUpdateOne) SetNillableUpdatedBy(s *string) *CustomPricingUnitUpdateOne {
	if s != nil {
		cpuuo.SetUpdatedBy(*s)
	}
	return cpuuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cpuuo *CustomPricingUnitUpdateOne) ClearUpdatedBy() *CustomPricingUnitUpdateOne {
	cpuuo.mutation.ClearUpdatedBy()
	return cpuuo
}

// SetName sets the "name" field.
func (cpuuo *CustomPricingUnitUpdateOne) SetName(s string) *CustomPricingUnitUpdateOne {
	cpuuo.mutation.SetName(s)
	return cpuuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cpuuo *CustomPricingUnitUpdateOne) SetNillableName(s *string) *CustomPricingUnitUpdateOne {
	if s != nil {
		cpuuo.SetName(*s)
	}
	return cpuuo
}

// SetCode sets the "code" field.
func (cpuuo *CustomPricingUnitUpdateOne) SetCode(s string) *CustomPricingUnitUpdateOne {
	cpuuo.mutation.SetCode(s)
	return cpuuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cpuuo *CustomPricingUnitUpdateOne) SetNillableCode(s *string) *CustomPricingUnitUpdateOne {
	if s != nil {
		cpuuo.SetCode(*s)
	}
	return cpuuo
}

// SetSymbol sets the "symbol" field.
func (cpuuo *CustomPricingUnitUpdateOne) SetSymbol(s string) *CustomPricingUnitUpdateOne {
	cpuuo.mutation.SetSymbol(s)
	return cpuuo
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (cpuuo *CustomPricingUnitUpdateOne) SetNillableSymbol(s *string) *CustomPricingUnitUpdateOne {
	if s != nil {
		cpuuo.SetSymbol(*s)
	}
	return cpuuo
}

// SetBaseCurrency sets the "base_currency" field.
func (cpuuo *CustomPricingUnitUpdateOne) SetBaseCurrency(s string) *CustomPricingUnitUpdateOne {
	cpuuo.mutation.SetBaseCurrency(s)
	return cpuuo
}

// SetNillableBaseCurrency sets the "base_currency" field if the given value is not nil.
func (cpuuo *CustomPricingUnitUpdateOne) SetNillableBaseCurrency(s *string) *CustomPricingUnitUpdateOne {
	if s != nil {
		cpuuo.SetBaseCurrency(*s)
	}
	return cpuuo
}

// SetPrecision sets the "precision" field.
func (cpuuo *CustomPricingUnitUpdateOne) SetPrecision(i int) *CustomPricingUnitUpdateOne {
	cpuuo.mutation.ResetPrecision()
	cpuuo.mutation.SetPrecision(i)
	return cpuuo
}

// SetNillablePrecision sets the "precision" field if the given value is not nil.
func (cpuuo *CustomPricingUnitUpdateOne) SetNillablePrecision(i *int) *CustomPricingUnitUpdateOne {
	if i != nil {
		cpuuo.SetPrecision(*i)
	}
	return cpuuo
}

// AddPrecision adds i to the "precision" field.
func (cpuuo *CustomPricingUnitUpdateOne) AddPrecision(i int) *CustomPricingUnitUpdateOne {
	cpuuo.mutation.AddPrecision(i)
	return cpuuo
}

// AddPriceIDs adds the "prices" edge to the Price entity by IDs.
func (cpuuo *CustomPricingUnitUpdateOne) AddPriceIDs(ids ...string) *CustomPricingUnitUpdateOne {
	cpuuo.mutation.AddPriceIDs(ids...)
	return cpuuo
}

// AddPrices adds the "prices" edges to the Price entity.
func (cpuuo *CustomPricingUnitUpdateOne) AddPrices(p ...*Price) *CustomPricingUnitUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cpuuo.AddPriceIDs(ids...)
}

// Mutation returns the CustomPricingUnitMutation object of the builder.
func (cpuuo *CustomPricingUnitUpdateOne) Mutation() *CustomPricingUnitMutation {
	return cpuuo.mutation
}

// ClearPrices clears all "prices" edges to the Price entity.
func (cpuuo *CustomPricingUnitUpdateOne) ClearPrices() *CustomPricingUnitUpdateOne {
	cpuuo.mutation.ClearPrices()
	return cpuuo
}

// RemovePriceIDs removes the "prices" edge to Price entities by IDs.
func (cpuuo *CustomPricingUnitUpdateOne) RemovePriceIDs(ids ...string) *CustomPricingUnitUpdateOne {
	cpuuo.mutation.RemovePriceIDs(ids...)
	return cpuuo
}

// RemovePrices removes "prices" edges to Price entities.
func (cpuuo *CustomPricingUnitUpdateOne) RemovePrices(p ...*Price) *CustomPricingUnitUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cpuuo.RemovePriceIDs(ids...)
}

// Where appends a list predicates to the CustomPricingUnitUpdate builder.
func (cpuuo *CustomPricingUnitUpdateOne) Where(ps ...predicate.CustomPricingUnit) *CustomPricingUnitUpdateOne {
	cpuuo.mutation.Where(ps...)
	return cpuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuuo *CustomPricingUnitUpdateOne) Select(field string, fields ...string) *CustomPricingUnitUpdateOne {
	cpuuo.fields = append([]string{field}, fields...)
	return cpuuo
}

// Save executes the query and returns the updated CustomPricingUnit entity.
func (cpuuo *CustomPricingUnitUpdateOne) Save(ctx context.Context) (*CustomPricingUnit, error) {
	cpuuo.defaults()
	return withHooks(ctx, cpuuo.sqlSave, cpuuo.mutation, cpuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuuo *CustomPricingUnitUpdateOne) SaveX(ctx context.Context) *CustomPricingUnit {
	node, err := cpuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuuo *CustomPricingUnitUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuuo *CustomPricingUnitUpdateOne) ExecX(ctx context.Context) {
	if err := cpuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpuuo *CustomPricingUnitUpdateOne) defaults() {
	if _, ok := cpuuo.mutation.UpdatedAt(); !ok {
		v := custompricingunit.UpdateDefaultUpdatedAt()
		cpuuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpuuo *CustomPricingUnitUpdateOne) check() error {
	if v, ok := cpuuo.mutation.Name(); ok {
		if err := custompricingunit.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.name": %w`, err)}
		}
	}
	if v, ok := cpuuo.mutation.Code(); ok {
		if err := custompricingunit.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.code": %w`, err)}
		}
	}
	if v, ok := cpuuo.mutation.Symbol(); ok {
		if err := custompricingunit.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.symbol": %w`, err)}
		}
	}
	if v, ok := cpuuo.mutation.BaseCurrency(); ok {
		if err := custompricingunit.BaseCurrencyValidator(v); err != nil {
			return &ValidationError{Name: "base_currency", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.base_currency": %w`, err)}
		}
	}
	if v, ok := cpuuo.mutation.Precision(); ok {
		if err := custompricingunit.PrecisionValidator(v); err != nil {
			return &ValidationError{Name: "precision", err: fmt.Errorf(`ent: validator failed for field "CustomPricingUnit.precision": %w`, err)}
		}
	}
	return nil
}

func (cpuuo *CustomPricingUnitUpdateOne) sqlSave(ctx context.Context) (_node *CustomPricingUnit, err error) {
	if err := cpuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(custompricingunit.Table, custompricingunit.Columns, sqlgraph.NewFieldSpec(custompricingunit.FieldID, field.TypeString))
	id, ok := cpuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomPricingUnit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, custompricingunit.FieldID)
		for _, f := range fields {
			if !custompricingunit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != custompricingunit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuuo.mutation.Status(); ok {
		_spec.SetField(custompricingunit.FieldStatus, field.TypeString, value)
	}
	if value, ok := cpuuo.mutation.UpdatedAt(); ok {
		_spec.SetField(custompricingunit.FieldUpdatedAt, field.TypeTime, value)
	}
	if cpuuo.mutation.CreatedByCleared() {
		_spec.ClearField(custompricingunit.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cpuuo.mutation.UpdatedBy(); ok {
		_spec.SetField(custompricingunit.FieldUpdatedBy, field.TypeString, value)
	}
	if cpuuo.mutation.UpdatedByCleared() {
		_spec.ClearField(custompricingunit.FieldUpdatedBy, field.TypeString)
	}
	if cpuuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(custompricingunit.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := cpuuo.mutation.Name(); ok {
		_spec.SetField(custompricingunit.FieldName, field.TypeString, value)
	}
	if value, ok := cpuuo.mutation.Code(); ok {
		_spec.SetField(custompricingunit.FieldCode, field.TypeString, value)
	}
	if value, ok := cpuuo.mutation.Symbol(); ok {
		_spec.SetField(custompricingunit.FieldSymbol, field.TypeString, value)
	}
	if value, ok := cpuuo.mutation.BaseCurrency(); ok {
		_spec.SetField(custompricingunit.FieldBaseCurrency, field.TypeString, value)
	}
	if value, ok := cpuuo.mutation.Precision(); ok {
		_spec.SetField(custompricingunit.FieldPrecision, field.TypeInt, value)
	}
	if value, ok := cpuuo.mutation.AddedPrecision(); ok {
		_spec.AddField(custompricingunit.FieldPrecision, field.TypeInt, value)
	}
	if cpuuo.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   custompricingunit.PricesTable,
			Columns: []string{custompricingunit.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuuo.mutation.RemovedPricesIDs(); len(nodes) > 0 && !cpuuo.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   custompricingunit.PricesTable,
			Columns: []string{custompricingunit.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuuo.mutation.PricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   custompricingunit.PricesTable,
			Columns: []string{custompricingunit.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CustomPricingUnit{config: cpuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{custompricingunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cpuuo.mutation.done = true
	return _node, nil
}
