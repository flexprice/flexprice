// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/defaulttaxrateconfig"
)

// DefaultTaxRateConfig is the model entity for the DefaultTaxRateConfig schema.
type DefaultTaxRateConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// Reference to the TaxRate entity
	TaxRateID string `json:"tax_rate_id,omitempty"`
	// Type of entity this tax rate applies to
	EntityType string `json:"entity_type,omitempty"`
	// ID of the entity this tax rate applies to
	EntityID string `json:"entity_id,omitempty"`
	// Priority for tax resolution (lower number = higher priority)
	Priority int `json:"priority,omitempty"`
	// Whether this tax should be automatically applied
	AutoApply bool `json:"auto_apply,omitempty"`
	// Start date for this tax assignment
	ValidFrom *time.Time `json:"valid_from,omitempty"`
	// End date for this tax assignment
	ValidTo *time.Time `json:"valid_to,omitempty"`
	// Currency
	Currency string `json:"currency,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata     map[string]string `json:"metadata,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DefaultTaxRateConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case defaulttaxrateconfig.FieldMetadata:
			values[i] = new([]byte)
		case defaulttaxrateconfig.FieldAutoApply:
			values[i] = new(sql.NullBool)
		case defaulttaxrateconfig.FieldPriority:
			values[i] = new(sql.NullInt64)
		case defaulttaxrateconfig.FieldID, defaulttaxrateconfig.FieldTenantID, defaulttaxrateconfig.FieldStatus, defaulttaxrateconfig.FieldCreatedBy, defaulttaxrateconfig.FieldUpdatedBy, defaulttaxrateconfig.FieldEnvironmentID, defaulttaxrateconfig.FieldTaxRateID, defaulttaxrateconfig.FieldEntityType, defaulttaxrateconfig.FieldEntityID, defaulttaxrateconfig.FieldCurrency:
			values[i] = new(sql.NullString)
		case defaulttaxrateconfig.FieldCreatedAt, defaulttaxrateconfig.FieldUpdatedAt, defaulttaxrateconfig.FieldValidFrom, defaulttaxrateconfig.FieldValidTo:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DefaultTaxRateConfig fields.
func (dtrc *DefaultTaxRateConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case defaulttaxrateconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				dtrc.ID = value.String
			}
		case defaulttaxrateconfig.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				dtrc.TenantID = value.String
			}
		case defaulttaxrateconfig.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				dtrc.Status = value.String
			}
		case defaulttaxrateconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dtrc.CreatedAt = value.Time
			}
		case defaulttaxrateconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dtrc.UpdatedAt = value.Time
			}
		case defaulttaxrateconfig.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				dtrc.CreatedBy = value.String
			}
		case defaulttaxrateconfig.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				dtrc.UpdatedBy = value.String
			}
		case defaulttaxrateconfig.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				dtrc.EnvironmentID = value.String
			}
		case defaulttaxrateconfig.FieldTaxRateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_rate_id", values[i])
			} else if value.Valid {
				dtrc.TaxRateID = value.String
			}
		case defaulttaxrateconfig.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				dtrc.EntityType = value.String
			}
		case defaulttaxrateconfig.FieldEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				dtrc.EntityID = value.String
			}
		case defaulttaxrateconfig.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				dtrc.Priority = int(value.Int64)
			}
		case defaulttaxrateconfig.FieldAutoApply:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_apply", values[i])
			} else if value.Valid {
				dtrc.AutoApply = value.Bool
			}
		case defaulttaxrateconfig.FieldValidFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_from", values[i])
			} else if value.Valid {
				dtrc.ValidFrom = new(time.Time)
				*dtrc.ValidFrom = value.Time
			}
		case defaulttaxrateconfig.FieldValidTo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_to", values[i])
			} else if value.Valid {
				dtrc.ValidTo = new(time.Time)
				*dtrc.ValidTo = value.Time
			}
		case defaulttaxrateconfig.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				dtrc.Currency = value.String
			}
		case defaulttaxrateconfig.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dtrc.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			dtrc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DefaultTaxRateConfig.
// This includes values selected through modifiers, order, etc.
func (dtrc *DefaultTaxRateConfig) Value(name string) (ent.Value, error) {
	return dtrc.selectValues.Get(name)
}

// Update returns a builder for updating this DefaultTaxRateConfig.
// Note that you need to call DefaultTaxRateConfig.Unwrap() before calling this method if this DefaultTaxRateConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (dtrc *DefaultTaxRateConfig) Update() *DefaultTaxRateConfigUpdateOne {
	return NewDefaultTaxRateConfigClient(dtrc.config).UpdateOne(dtrc)
}

// Unwrap unwraps the DefaultTaxRateConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dtrc *DefaultTaxRateConfig) Unwrap() *DefaultTaxRateConfig {
	_tx, ok := dtrc.config.driver.(*txDriver)
	if !ok {
		panic("ent: DefaultTaxRateConfig is not a transactional entity")
	}
	dtrc.config.driver = _tx.drv
	return dtrc
}

// String implements the fmt.Stringer.
func (dtrc *DefaultTaxRateConfig) String() string {
	var builder strings.Builder
	builder.WriteString("DefaultTaxRateConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dtrc.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(dtrc.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(dtrc.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(dtrc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dtrc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(dtrc.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(dtrc.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(dtrc.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("tax_rate_id=")
	builder.WriteString(dtrc.TaxRateID)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(dtrc.EntityType)
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(dtrc.EntityID)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", dtrc.Priority))
	builder.WriteString(", ")
	builder.WriteString("auto_apply=")
	builder.WriteString(fmt.Sprintf("%v", dtrc.AutoApply))
	builder.WriteString(", ")
	if v := dtrc.ValidFrom; v != nil {
		builder.WriteString("valid_from=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := dtrc.ValidTo; v != nil {
		builder.WriteString("valid_to=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(dtrc.Currency)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", dtrc.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// DefaultTaxRateConfigs is a parsable slice of DefaultTaxRateConfig.
type DefaultTaxRateConfigs []*DefaultTaxRateConfig
