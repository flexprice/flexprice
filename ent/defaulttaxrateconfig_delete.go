// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/defaulttaxrateconfig"
	"github.com/flexprice/flexprice/ent/predicate"
)

// DefaultTaxRateConfigDelete is the builder for deleting a DefaultTaxRateConfig entity.
type DefaultTaxRateConfigDelete struct {
	config
	hooks    []Hook
	mutation *DefaultTaxRateConfigMutation
}

// Where appends a list predicates to the DefaultTaxRateConfigDelete builder.
func (dtrcd *DefaultTaxRateConfigDelete) Where(ps ...predicate.DefaultTaxRateConfig) *DefaultTaxRateConfigDelete {
	dtrcd.mutation.Where(ps...)
	return dtrcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dtrcd *DefaultTaxRateConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dtrcd.sqlExec, dtrcd.mutation, dtrcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dtrcd *DefaultTaxRateConfigDelete) ExecX(ctx context.Context) int {
	n, err := dtrcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dtrcd *DefaultTaxRateConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(defaulttaxrateconfig.Table, sqlgraph.NewFieldSpec(defaulttaxrateconfig.FieldID, field.TypeString))
	if ps := dtrcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dtrcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dtrcd.mutation.done = true
	return affected, err
}

// DefaultTaxRateConfigDeleteOne is the builder for deleting a single DefaultTaxRateConfig entity.
type DefaultTaxRateConfigDeleteOne struct {
	dtrcd *DefaultTaxRateConfigDelete
}

// Where appends a list predicates to the DefaultTaxRateConfigDelete builder.
func (dtrcdo *DefaultTaxRateConfigDeleteOne) Where(ps ...predicate.DefaultTaxRateConfig) *DefaultTaxRateConfigDeleteOne {
	dtrcdo.dtrcd.mutation.Where(ps...)
	return dtrcdo
}

// Exec executes the deletion query.
func (dtrcdo *DefaultTaxRateConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := dtrcdo.dtrcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{defaulttaxrateconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dtrcdo *DefaultTaxRateConfigDeleteOne) ExecX(ctx context.Context) {
	if err := dtrcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
