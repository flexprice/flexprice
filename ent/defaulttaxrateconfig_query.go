// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/defaulttaxrateconfig"
	"github.com/flexprice/flexprice/ent/predicate"
)

// DefaultTaxRateConfigQuery is the builder for querying DefaultTaxRateConfig entities.
type DefaultTaxRateConfigQuery struct {
	config
	ctx        *QueryContext
	order      []defaulttaxrateconfig.OrderOption
	inters     []Interceptor
	predicates []predicate.DefaultTaxRateConfig
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DefaultTaxRateConfigQuery builder.
func (dtrcq *DefaultTaxRateConfigQuery) Where(ps ...predicate.DefaultTaxRateConfig) *DefaultTaxRateConfigQuery {
	dtrcq.predicates = append(dtrcq.predicates, ps...)
	return dtrcq
}

// Limit the number of records to be returned by this query.
func (dtrcq *DefaultTaxRateConfigQuery) Limit(limit int) *DefaultTaxRateConfigQuery {
	dtrcq.ctx.Limit = &limit
	return dtrcq
}

// Offset to start from.
func (dtrcq *DefaultTaxRateConfigQuery) Offset(offset int) *DefaultTaxRateConfigQuery {
	dtrcq.ctx.Offset = &offset
	return dtrcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dtrcq *DefaultTaxRateConfigQuery) Unique(unique bool) *DefaultTaxRateConfigQuery {
	dtrcq.ctx.Unique = &unique
	return dtrcq
}

// Order specifies how the records should be ordered.
func (dtrcq *DefaultTaxRateConfigQuery) Order(o ...defaulttaxrateconfig.OrderOption) *DefaultTaxRateConfigQuery {
	dtrcq.order = append(dtrcq.order, o...)
	return dtrcq
}

// First returns the first DefaultTaxRateConfig entity from the query.
// Returns a *NotFoundError when no DefaultTaxRateConfig was found.
func (dtrcq *DefaultTaxRateConfigQuery) First(ctx context.Context) (*DefaultTaxRateConfig, error) {
	nodes, err := dtrcq.Limit(1).All(setContextOp(ctx, dtrcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{defaulttaxrateconfig.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dtrcq *DefaultTaxRateConfigQuery) FirstX(ctx context.Context) *DefaultTaxRateConfig {
	node, err := dtrcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DefaultTaxRateConfig ID from the query.
// Returns a *NotFoundError when no DefaultTaxRateConfig ID was found.
func (dtrcq *DefaultTaxRateConfigQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = dtrcq.Limit(1).IDs(setContextOp(ctx, dtrcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{defaulttaxrateconfig.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dtrcq *DefaultTaxRateConfigQuery) FirstIDX(ctx context.Context) string {
	id, err := dtrcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DefaultTaxRateConfig entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DefaultTaxRateConfig entity is found.
// Returns a *NotFoundError when no DefaultTaxRateConfig entities are found.
func (dtrcq *DefaultTaxRateConfigQuery) Only(ctx context.Context) (*DefaultTaxRateConfig, error) {
	nodes, err := dtrcq.Limit(2).All(setContextOp(ctx, dtrcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{defaulttaxrateconfig.Label}
	default:
		return nil, &NotSingularError{defaulttaxrateconfig.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dtrcq *DefaultTaxRateConfigQuery) OnlyX(ctx context.Context) *DefaultTaxRateConfig {
	node, err := dtrcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DefaultTaxRateConfig ID in the query.
// Returns a *NotSingularError when more than one DefaultTaxRateConfig ID is found.
// Returns a *NotFoundError when no entities are found.
func (dtrcq *DefaultTaxRateConfigQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = dtrcq.Limit(2).IDs(setContextOp(ctx, dtrcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{defaulttaxrateconfig.Label}
	default:
		err = &NotSingularError{defaulttaxrateconfig.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dtrcq *DefaultTaxRateConfigQuery) OnlyIDX(ctx context.Context) string {
	id, err := dtrcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DefaultTaxRateConfigs.
func (dtrcq *DefaultTaxRateConfigQuery) All(ctx context.Context) ([]*DefaultTaxRateConfig, error) {
	ctx = setContextOp(ctx, dtrcq.ctx, ent.OpQueryAll)
	if err := dtrcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DefaultTaxRateConfig, *DefaultTaxRateConfigQuery]()
	return withInterceptors[[]*DefaultTaxRateConfig](ctx, dtrcq, qr, dtrcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dtrcq *DefaultTaxRateConfigQuery) AllX(ctx context.Context) []*DefaultTaxRateConfig {
	nodes, err := dtrcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DefaultTaxRateConfig IDs.
func (dtrcq *DefaultTaxRateConfigQuery) IDs(ctx context.Context) (ids []string, err error) {
	if dtrcq.ctx.Unique == nil && dtrcq.path != nil {
		dtrcq.Unique(true)
	}
	ctx = setContextOp(ctx, dtrcq.ctx, ent.OpQueryIDs)
	if err = dtrcq.Select(defaulttaxrateconfig.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dtrcq *DefaultTaxRateConfigQuery) IDsX(ctx context.Context) []string {
	ids, err := dtrcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dtrcq *DefaultTaxRateConfigQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dtrcq.ctx, ent.OpQueryCount)
	if err := dtrcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dtrcq, querierCount[*DefaultTaxRateConfigQuery](), dtrcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dtrcq *DefaultTaxRateConfigQuery) CountX(ctx context.Context) int {
	count, err := dtrcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dtrcq *DefaultTaxRateConfigQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dtrcq.ctx, ent.OpQueryExist)
	switch _, err := dtrcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dtrcq *DefaultTaxRateConfigQuery) ExistX(ctx context.Context) bool {
	exist, err := dtrcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DefaultTaxRateConfigQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dtrcq *DefaultTaxRateConfigQuery) Clone() *DefaultTaxRateConfigQuery {
	if dtrcq == nil {
		return nil
	}
	return &DefaultTaxRateConfigQuery{
		config:     dtrcq.config,
		ctx:        dtrcq.ctx.Clone(),
		order:      append([]defaulttaxrateconfig.OrderOption{}, dtrcq.order...),
		inters:     append([]Interceptor{}, dtrcq.inters...),
		predicates: append([]predicate.DefaultTaxRateConfig{}, dtrcq.predicates...),
		// clone intermediate query.
		sql:  dtrcq.sql.Clone(),
		path: dtrcq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID string `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DefaultTaxRateConfig.Query().
//		GroupBy(defaulttaxrateconfig.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dtrcq *DefaultTaxRateConfigQuery) GroupBy(field string, fields ...string) *DefaultTaxRateConfigGroupBy {
	dtrcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DefaultTaxRateConfigGroupBy{build: dtrcq}
	grbuild.flds = &dtrcq.ctx.Fields
	grbuild.label = defaulttaxrateconfig.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID string `json:"tenant_id,omitempty"`
//	}
//
//	client.DefaultTaxRateConfig.Query().
//		Select(defaulttaxrateconfig.FieldTenantID).
//		Scan(ctx, &v)
func (dtrcq *DefaultTaxRateConfigQuery) Select(fields ...string) *DefaultTaxRateConfigSelect {
	dtrcq.ctx.Fields = append(dtrcq.ctx.Fields, fields...)
	sbuild := &DefaultTaxRateConfigSelect{DefaultTaxRateConfigQuery: dtrcq}
	sbuild.label = defaulttaxrateconfig.Label
	sbuild.flds, sbuild.scan = &dtrcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DefaultTaxRateConfigSelect configured with the given aggregations.
func (dtrcq *DefaultTaxRateConfigQuery) Aggregate(fns ...AggregateFunc) *DefaultTaxRateConfigSelect {
	return dtrcq.Select().Aggregate(fns...)
}

func (dtrcq *DefaultTaxRateConfigQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dtrcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dtrcq); err != nil {
				return err
			}
		}
	}
	for _, f := range dtrcq.ctx.Fields {
		if !defaulttaxrateconfig.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dtrcq.path != nil {
		prev, err := dtrcq.path(ctx)
		if err != nil {
			return err
		}
		dtrcq.sql = prev
	}
	return nil
}

func (dtrcq *DefaultTaxRateConfigQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DefaultTaxRateConfig, error) {
	var (
		nodes = []*DefaultTaxRateConfig{}
		_spec = dtrcq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DefaultTaxRateConfig).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DefaultTaxRateConfig{config: dtrcq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dtrcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (dtrcq *DefaultTaxRateConfigQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dtrcq.querySpec()
	_spec.Node.Columns = dtrcq.ctx.Fields
	if len(dtrcq.ctx.Fields) > 0 {
		_spec.Unique = dtrcq.ctx.Unique != nil && *dtrcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dtrcq.driver, _spec)
}

func (dtrcq *DefaultTaxRateConfigQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(defaulttaxrateconfig.Table, defaulttaxrateconfig.Columns, sqlgraph.NewFieldSpec(defaulttaxrateconfig.FieldID, field.TypeString))
	_spec.From = dtrcq.sql
	if unique := dtrcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dtrcq.path != nil {
		_spec.Unique = true
	}
	if fields := dtrcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, defaulttaxrateconfig.FieldID)
		for i := range fields {
			if fields[i] != defaulttaxrateconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dtrcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dtrcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dtrcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dtrcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dtrcq *DefaultTaxRateConfigQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dtrcq.driver.Dialect())
	t1 := builder.Table(defaulttaxrateconfig.Table)
	columns := dtrcq.ctx.Fields
	if len(columns) == 0 {
		columns = defaulttaxrateconfig.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dtrcq.sql != nil {
		selector = dtrcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dtrcq.ctx.Unique != nil && *dtrcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dtrcq.predicates {
		p(selector)
	}
	for _, p := range dtrcq.order {
		p(selector)
	}
	if offset := dtrcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dtrcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DefaultTaxRateConfigGroupBy is the group-by builder for DefaultTaxRateConfig entities.
type DefaultTaxRateConfigGroupBy struct {
	selector
	build *DefaultTaxRateConfigQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dtrcgb *DefaultTaxRateConfigGroupBy) Aggregate(fns ...AggregateFunc) *DefaultTaxRateConfigGroupBy {
	dtrcgb.fns = append(dtrcgb.fns, fns...)
	return dtrcgb
}

// Scan applies the selector query and scans the result into the given value.
func (dtrcgb *DefaultTaxRateConfigGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dtrcgb.build.ctx, ent.OpQueryGroupBy)
	if err := dtrcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DefaultTaxRateConfigQuery, *DefaultTaxRateConfigGroupBy](ctx, dtrcgb.build, dtrcgb, dtrcgb.build.inters, v)
}

func (dtrcgb *DefaultTaxRateConfigGroupBy) sqlScan(ctx context.Context, root *DefaultTaxRateConfigQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dtrcgb.fns))
	for _, fn := range dtrcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dtrcgb.flds)+len(dtrcgb.fns))
		for _, f := range *dtrcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dtrcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dtrcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DefaultTaxRateConfigSelect is the builder for selecting fields of DefaultTaxRateConfig entities.
type DefaultTaxRateConfigSelect struct {
	*DefaultTaxRateConfigQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dtrcs *DefaultTaxRateConfigSelect) Aggregate(fns ...AggregateFunc) *DefaultTaxRateConfigSelect {
	dtrcs.fns = append(dtrcs.fns, fns...)
	return dtrcs
}

// Scan applies the selector query and scans the result into the given value.
func (dtrcs *DefaultTaxRateConfigSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dtrcs.ctx, ent.OpQuerySelect)
	if err := dtrcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DefaultTaxRateConfigQuery, *DefaultTaxRateConfigSelect](ctx, dtrcs.DefaultTaxRateConfigQuery, dtrcs, dtrcs.inters, v)
}

func (dtrcs *DefaultTaxRateConfigSelect) sqlScan(ctx context.Context, root *DefaultTaxRateConfigQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dtrcs.fns))
	for _, fn := range dtrcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dtrcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dtrcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
