// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/defaulttaxrateconfig"
	"github.com/flexprice/flexprice/ent/predicate"
)

// DefaultTaxRateConfigUpdate is the builder for updating DefaultTaxRateConfig entities.
type DefaultTaxRateConfigUpdate struct {
	config
	hooks    []Hook
	mutation *DefaultTaxRateConfigMutation
}

// Where appends a list predicates to the DefaultTaxRateConfigUpdate builder.
func (dtrcu *DefaultTaxRateConfigUpdate) Where(ps ...predicate.DefaultTaxRateConfig) *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.Where(ps...)
	return dtrcu
}

// SetStatus sets the "status" field.
func (dtrcu *DefaultTaxRateConfigUpdate) SetStatus(s string) *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.SetStatus(s)
	return dtrcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dtrcu *DefaultTaxRateConfigUpdate) SetNillableStatus(s *string) *DefaultTaxRateConfigUpdate {
	if s != nil {
		dtrcu.SetStatus(*s)
	}
	return dtrcu
}

// SetUpdatedAt sets the "updated_at" field.
func (dtrcu *DefaultTaxRateConfigUpdate) SetUpdatedAt(t time.Time) *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.SetUpdatedAt(t)
	return dtrcu
}

// SetUpdatedBy sets the "updated_by" field.
func (dtrcu *DefaultTaxRateConfigUpdate) SetUpdatedBy(s string) *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.SetUpdatedBy(s)
	return dtrcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dtrcu *DefaultTaxRateConfigUpdate) SetNillableUpdatedBy(s *string) *DefaultTaxRateConfigUpdate {
	if s != nil {
		dtrcu.SetUpdatedBy(*s)
	}
	return dtrcu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dtrcu *DefaultTaxRateConfigUpdate) ClearUpdatedBy() *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.ClearUpdatedBy()
	return dtrcu
}

// SetEntityID sets the "entity_id" field.
func (dtrcu *DefaultTaxRateConfigUpdate) SetEntityID(s string) *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.SetEntityID(s)
	return dtrcu
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (dtrcu *DefaultTaxRateConfigUpdate) SetNillableEntityID(s *string) *DefaultTaxRateConfigUpdate {
	if s != nil {
		dtrcu.SetEntityID(*s)
	}
	return dtrcu
}

// SetPriority sets the "priority" field.
func (dtrcu *DefaultTaxRateConfigUpdate) SetPriority(i int) *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.ResetPriority()
	dtrcu.mutation.SetPriority(i)
	return dtrcu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (dtrcu *DefaultTaxRateConfigUpdate) SetNillablePriority(i *int) *DefaultTaxRateConfigUpdate {
	if i != nil {
		dtrcu.SetPriority(*i)
	}
	return dtrcu
}

// AddPriority adds i to the "priority" field.
func (dtrcu *DefaultTaxRateConfigUpdate) AddPriority(i int) *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.AddPriority(i)
	return dtrcu
}

// SetAutoApply sets the "auto_apply" field.
func (dtrcu *DefaultTaxRateConfigUpdate) SetAutoApply(b bool) *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.SetAutoApply(b)
	return dtrcu
}

// SetNillableAutoApply sets the "auto_apply" field if the given value is not nil.
func (dtrcu *DefaultTaxRateConfigUpdate) SetNillableAutoApply(b *bool) *DefaultTaxRateConfigUpdate {
	if b != nil {
		dtrcu.SetAutoApply(*b)
	}
	return dtrcu
}

// SetValidFrom sets the "valid_from" field.
func (dtrcu *DefaultTaxRateConfigUpdate) SetValidFrom(t time.Time) *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.SetValidFrom(t)
	return dtrcu
}

// SetNillableValidFrom sets the "valid_from" field if the given value is not nil.
func (dtrcu *DefaultTaxRateConfigUpdate) SetNillableValidFrom(t *time.Time) *DefaultTaxRateConfigUpdate {
	if t != nil {
		dtrcu.SetValidFrom(*t)
	}
	return dtrcu
}

// ClearValidFrom clears the value of the "valid_from" field.
func (dtrcu *DefaultTaxRateConfigUpdate) ClearValidFrom() *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.ClearValidFrom()
	return dtrcu
}

// SetValidTo sets the "valid_to" field.
func (dtrcu *DefaultTaxRateConfigUpdate) SetValidTo(t time.Time) *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.SetValidTo(t)
	return dtrcu
}

// SetNillableValidTo sets the "valid_to" field if the given value is not nil.
func (dtrcu *DefaultTaxRateConfigUpdate) SetNillableValidTo(t *time.Time) *DefaultTaxRateConfigUpdate {
	if t != nil {
		dtrcu.SetValidTo(*t)
	}
	return dtrcu
}

// ClearValidTo clears the value of the "valid_to" field.
func (dtrcu *DefaultTaxRateConfigUpdate) ClearValidTo() *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.ClearValidTo()
	return dtrcu
}

// SetMetadata sets the "metadata" field.
func (dtrcu *DefaultTaxRateConfigUpdate) SetMetadata(m map[string]string) *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.SetMetadata(m)
	return dtrcu
}

// ClearMetadata clears the value of the "metadata" field.
func (dtrcu *DefaultTaxRateConfigUpdate) ClearMetadata() *DefaultTaxRateConfigUpdate {
	dtrcu.mutation.ClearMetadata()
	return dtrcu
}

// Mutation returns the DefaultTaxRateConfigMutation object of the builder.
func (dtrcu *DefaultTaxRateConfigUpdate) Mutation() *DefaultTaxRateConfigMutation {
	return dtrcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dtrcu *DefaultTaxRateConfigUpdate) Save(ctx context.Context) (int, error) {
	dtrcu.defaults()
	return withHooks(ctx, dtrcu.sqlSave, dtrcu.mutation, dtrcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtrcu *DefaultTaxRateConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := dtrcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtrcu *DefaultTaxRateConfigUpdate) Exec(ctx context.Context) error {
	_, err := dtrcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtrcu *DefaultTaxRateConfigUpdate) ExecX(ctx context.Context) {
	if err := dtrcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtrcu *DefaultTaxRateConfigUpdate) defaults() {
	if _, ok := dtrcu.mutation.UpdatedAt(); !ok {
		v := defaulttaxrateconfig.UpdateDefaultUpdatedAt()
		dtrcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtrcu *DefaultTaxRateConfigUpdate) check() error {
	if v, ok := dtrcu.mutation.EntityID(); ok {
		if err := defaulttaxrateconfig.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "DefaultTaxRateConfig.entity_id": %w`, err)}
		}
	}
	return nil
}

func (dtrcu *DefaultTaxRateConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dtrcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(defaulttaxrateconfig.Table, defaulttaxrateconfig.Columns, sqlgraph.NewFieldSpec(defaulttaxrateconfig.FieldID, field.TypeString))
	if ps := dtrcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtrcu.mutation.Status(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldStatus, field.TypeString, value)
	}
	if value, ok := dtrcu.mutation.UpdatedAt(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if dtrcu.mutation.CreatedByCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldCreatedBy, field.TypeString)
	}
	if value, ok := dtrcu.mutation.UpdatedBy(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldUpdatedBy, field.TypeString, value)
	}
	if dtrcu.mutation.UpdatedByCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldUpdatedBy, field.TypeString)
	}
	if dtrcu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := dtrcu.mutation.EntityID(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldEntityID, field.TypeString, value)
	}
	if value, ok := dtrcu.mutation.Priority(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldPriority, field.TypeInt, value)
	}
	if value, ok := dtrcu.mutation.AddedPriority(); ok {
		_spec.AddField(defaulttaxrateconfig.FieldPriority, field.TypeInt, value)
	}
	if value, ok := dtrcu.mutation.AutoApply(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldAutoApply, field.TypeBool, value)
	}
	if value, ok := dtrcu.mutation.ValidFrom(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldValidFrom, field.TypeTime, value)
	}
	if dtrcu.mutation.ValidFromCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldValidFrom, field.TypeTime)
	}
	if value, ok := dtrcu.mutation.ValidTo(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldValidTo, field.TypeTime, value)
	}
	if dtrcu.mutation.ValidToCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldValidTo, field.TypeTime)
	}
	if dtrcu.mutation.CurrencyCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldCurrency, field.TypeString)
	}
	if value, ok := dtrcu.mutation.Metadata(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldMetadata, field.TypeJSON, value)
	}
	if dtrcu.mutation.MetadataCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dtrcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{defaulttaxrateconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dtrcu.mutation.done = true
	return n, nil
}

// DefaultTaxRateConfigUpdateOne is the builder for updating a single DefaultTaxRateConfig entity.
type DefaultTaxRateConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DefaultTaxRateConfigMutation
}

// SetStatus sets the "status" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetStatus(s string) *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.SetStatus(s)
	return dtrcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetNillableStatus(s *string) *DefaultTaxRateConfigUpdateOne {
	if s != nil {
		dtrcuo.SetStatus(*s)
	}
	return dtrcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetUpdatedAt(t time.Time) *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.SetUpdatedAt(t)
	return dtrcuo
}

// SetUpdatedBy sets the "updated_by" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetUpdatedBy(s string) *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.SetUpdatedBy(s)
	return dtrcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetNillableUpdatedBy(s *string) *DefaultTaxRateConfigUpdateOne {
	if s != nil {
		dtrcuo.SetUpdatedBy(*s)
	}
	return dtrcuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) ClearUpdatedBy() *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.ClearUpdatedBy()
	return dtrcuo
}

// SetEntityID sets the "entity_id" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetEntityID(s string) *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.SetEntityID(s)
	return dtrcuo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetNillableEntityID(s *string) *DefaultTaxRateConfigUpdateOne {
	if s != nil {
		dtrcuo.SetEntityID(*s)
	}
	return dtrcuo
}

// SetPriority sets the "priority" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetPriority(i int) *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.ResetPriority()
	dtrcuo.mutation.SetPriority(i)
	return dtrcuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetNillablePriority(i *int) *DefaultTaxRateConfigUpdateOne {
	if i != nil {
		dtrcuo.SetPriority(*i)
	}
	return dtrcuo
}

// AddPriority adds i to the "priority" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) AddPriority(i int) *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.AddPriority(i)
	return dtrcuo
}

// SetAutoApply sets the "auto_apply" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetAutoApply(b bool) *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.SetAutoApply(b)
	return dtrcuo
}

// SetNillableAutoApply sets the "auto_apply" field if the given value is not nil.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetNillableAutoApply(b *bool) *DefaultTaxRateConfigUpdateOne {
	if b != nil {
		dtrcuo.SetAutoApply(*b)
	}
	return dtrcuo
}

// SetValidFrom sets the "valid_from" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetValidFrom(t time.Time) *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.SetValidFrom(t)
	return dtrcuo
}

// SetNillableValidFrom sets the "valid_from" field if the given value is not nil.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetNillableValidFrom(t *time.Time) *DefaultTaxRateConfigUpdateOne {
	if t != nil {
		dtrcuo.SetValidFrom(*t)
	}
	return dtrcuo
}

// ClearValidFrom clears the value of the "valid_from" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) ClearValidFrom() *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.ClearValidFrom()
	return dtrcuo
}

// SetValidTo sets the "valid_to" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetValidTo(t time.Time) *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.SetValidTo(t)
	return dtrcuo
}

// SetNillableValidTo sets the "valid_to" field if the given value is not nil.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetNillableValidTo(t *time.Time) *DefaultTaxRateConfigUpdateOne {
	if t != nil {
		dtrcuo.SetValidTo(*t)
	}
	return dtrcuo
}

// ClearValidTo clears the value of the "valid_to" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) ClearValidTo() *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.ClearValidTo()
	return dtrcuo
}

// SetMetadata sets the "metadata" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SetMetadata(m map[string]string) *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.SetMetadata(m)
	return dtrcuo
}

// ClearMetadata clears the value of the "metadata" field.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) ClearMetadata() *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.ClearMetadata()
	return dtrcuo
}

// Mutation returns the DefaultTaxRateConfigMutation object of the builder.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) Mutation() *DefaultTaxRateConfigMutation {
	return dtrcuo.mutation
}

// Where appends a list predicates to the DefaultTaxRateConfigUpdate builder.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) Where(ps ...predicate.DefaultTaxRateConfig) *DefaultTaxRateConfigUpdateOne {
	dtrcuo.mutation.Where(ps...)
	return dtrcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) Select(field string, fields ...string) *DefaultTaxRateConfigUpdateOne {
	dtrcuo.fields = append([]string{field}, fields...)
	return dtrcuo
}

// Save executes the query and returns the updated DefaultTaxRateConfig entity.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) Save(ctx context.Context) (*DefaultTaxRateConfig, error) {
	dtrcuo.defaults()
	return withHooks(ctx, dtrcuo.sqlSave, dtrcuo.mutation, dtrcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) SaveX(ctx context.Context) *DefaultTaxRateConfig {
	node, err := dtrcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := dtrcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) ExecX(ctx context.Context) {
	if err := dtrcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) defaults() {
	if _, ok := dtrcuo.mutation.UpdatedAt(); !ok {
		v := defaulttaxrateconfig.UpdateDefaultUpdatedAt()
		dtrcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtrcuo *DefaultTaxRateConfigUpdateOne) check() error {
	if v, ok := dtrcuo.mutation.EntityID(); ok {
		if err := defaulttaxrateconfig.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "DefaultTaxRateConfig.entity_id": %w`, err)}
		}
	}
	return nil
}

func (dtrcuo *DefaultTaxRateConfigUpdateOne) sqlSave(ctx context.Context) (_node *DefaultTaxRateConfig, err error) {
	if err := dtrcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(defaulttaxrateconfig.Table, defaulttaxrateconfig.Columns, sqlgraph.NewFieldSpec(defaulttaxrateconfig.FieldID, field.TypeString))
	id, ok := dtrcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DefaultTaxRateConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dtrcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, defaulttaxrateconfig.FieldID)
		for _, f := range fields {
			if !defaulttaxrateconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != defaulttaxrateconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dtrcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtrcuo.mutation.Status(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldStatus, field.TypeString, value)
	}
	if value, ok := dtrcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if dtrcuo.mutation.CreatedByCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldCreatedBy, field.TypeString)
	}
	if value, ok := dtrcuo.mutation.UpdatedBy(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldUpdatedBy, field.TypeString, value)
	}
	if dtrcuo.mutation.UpdatedByCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldUpdatedBy, field.TypeString)
	}
	if dtrcuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := dtrcuo.mutation.EntityID(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldEntityID, field.TypeString, value)
	}
	if value, ok := dtrcuo.mutation.Priority(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldPriority, field.TypeInt, value)
	}
	if value, ok := dtrcuo.mutation.AddedPriority(); ok {
		_spec.AddField(defaulttaxrateconfig.FieldPriority, field.TypeInt, value)
	}
	if value, ok := dtrcuo.mutation.AutoApply(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldAutoApply, field.TypeBool, value)
	}
	if value, ok := dtrcuo.mutation.ValidFrom(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldValidFrom, field.TypeTime, value)
	}
	if dtrcuo.mutation.ValidFromCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldValidFrom, field.TypeTime)
	}
	if value, ok := dtrcuo.mutation.ValidTo(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldValidTo, field.TypeTime, value)
	}
	if dtrcuo.mutation.ValidToCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldValidTo, field.TypeTime)
	}
	if dtrcuo.mutation.CurrencyCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldCurrency, field.TypeString)
	}
	if value, ok := dtrcuo.mutation.Metadata(); ok {
		_spec.SetField(defaulttaxrateconfig.FieldMetadata, field.TypeJSON, value)
	}
	if dtrcuo.mutation.MetadataCleared() {
		_spec.ClearField(defaulttaxrateconfig.FieldMetadata, field.TypeJSON)
	}
	_node = &DefaultTaxRateConfig{config: dtrcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dtrcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{defaulttaxrateconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dtrcuo.mutation.done = true
	return _node, nil
}
