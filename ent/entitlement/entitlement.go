// Code generated by ent, DO NOT EDIT.

package entitlement

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the entitlement type in the database.
	Label = "entitlement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldEntityType holds the string denoting the entity_type field in the database.
	FieldEntityType = "entity_type"
	// FieldEntityID holds the string denoting the entity_id field in the database.
	FieldEntityID = "entity_id"
	// FieldFeatureID holds the string denoting the feature_id field in the database.
	FieldFeatureID = "feature_id"
	// FieldFeatureType holds the string denoting the feature_type field in the database.
	FieldFeatureType = "feature_type"
	// FieldIsEnabled holds the string denoting the is_enabled field in the database.
	FieldIsEnabled = "is_enabled"
	// FieldUsageLimit holds the string denoting the usage_limit field in the database.
	FieldUsageLimit = "usage_limit"
	// FieldUsageResetPeriod holds the string denoting the usage_reset_period field in the database.
	FieldUsageResetPeriod = "usage_reset_period"
	// FieldIsSoftLimit holds the string denoting the is_soft_limit field in the database.
	FieldIsSoftLimit = "is_soft_limit"
	// FieldStaticValue holds the string denoting the static_value field in the database.
	FieldStaticValue = "static_value"
	// FieldDisplayOrder holds the string denoting the display_order field in the database.
	FieldDisplayOrder = "display_order"
	// FieldParentEntitlementID holds the string denoting the parent_entitlement_id field in the database.
	FieldParentEntitlementID = "parent_entitlement_id"
	// Table holds the table name of the entitlement in the database.
	Table = "entitlements"
)

// Columns holds all SQL columns for entitlement fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldEntityType,
	FieldEntityID,
	FieldFeatureID,
	FieldFeatureType,
	FieldIsEnabled,
	FieldUsageLimit,
	FieldUsageResetPeriod,
	FieldIsSoftLimit,
	FieldStaticValue,
	FieldDisplayOrder,
	FieldParentEntitlementID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "entitlements"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"addon_entitlements",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// DefaultEntityType holds the default value on creation for the "entity_type" field.
	DefaultEntityType string
	// FeatureIDValidator is a validator for the "feature_id" field. It is called by the builders before save.
	FeatureIDValidator func(string) error
	// FeatureTypeValidator is a validator for the "feature_type" field. It is called by the builders before save.
	FeatureTypeValidator func(string) error
	// DefaultIsEnabled holds the default value on creation for the "is_enabled" field.
	DefaultIsEnabled bool
	// DefaultIsSoftLimit holds the default value on creation for the "is_soft_limit" field.
	DefaultIsSoftLimit bool
	// DefaultDisplayOrder holds the default value on creation for the "display_order" field.
	DefaultDisplayOrder int
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Entitlement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByEntityType orders the results by the entity_type field.
func ByEntityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityType, opts...).ToFunc()
}

// ByEntityID orders the results by the entity_id field.
func ByEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityID, opts...).ToFunc()
}

// ByFeatureID orders the results by the feature_id field.
func ByFeatureID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureID, opts...).ToFunc()
}

// ByFeatureType orders the results by the feature_type field.
func ByFeatureType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureType, opts...).ToFunc()
}

// ByIsEnabled orders the results by the is_enabled field.
func ByIsEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsEnabled, opts...).ToFunc()
}

// ByUsageLimit orders the results by the usage_limit field.
func ByUsageLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageLimit, opts...).ToFunc()
}

// ByUsageResetPeriod orders the results by the usage_reset_period field.
func ByUsageResetPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageResetPeriod, opts...).ToFunc()
}

// ByIsSoftLimit orders the results by the is_soft_limit field.
func ByIsSoftLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSoftLimit, opts...).ToFunc()
}

// ByStaticValue orders the results by the static_value field.
func ByStaticValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStaticValue, opts...).ToFunc()
}

// ByDisplayOrder orders the results by the display_order field.
func ByDisplayOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayOrder, opts...).ToFunc()
}

// ByParentEntitlementID orders the results by the parent_entitlement_id field.
func ByParentEntitlementID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentEntitlementID, opts...).ToFunc()
}
