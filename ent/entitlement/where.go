// Code generated by ent, DO NOT EDIT.

package entitlement

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUpdatedBy, v))
}

// PlanID applies equality check predicate on the "plan_id" field. It's identical to PlanIDEQ.
func PlanID(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldPlanID, v))
}

// FeatureID applies equality check predicate on the "feature_id" field. It's identical to FeatureIDEQ.
func FeatureID(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldFeatureID, v))
}

// FeatureType applies equality check predicate on the "feature_type" field. It's identical to FeatureTypeEQ.
func FeatureType(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldFeatureType, v))
}

// IsEnabled applies equality check predicate on the "is_enabled" field. It's identical to IsEnabledEQ.
func IsEnabled(v bool) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldIsEnabled, v))
}

// UsageLimit applies equality check predicate on the "usage_limit" field. It's identical to UsageLimitEQ.
func UsageLimit(v int64) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUsageLimit, v))
}

// UsageResetPeriod applies equality check predicate on the "usage_reset_period" field. It's identical to UsageResetPeriodEQ.
func UsageResetPeriod(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUsageResetPeriod, v))
}

// IsSoftLimit applies equality check predicate on the "is_soft_limit" field. It's identical to IsSoftLimitEQ.
func IsSoftLimit(v bool) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldIsSoftLimit, v))
}

// StaticValue applies equality check predicate on the "static_value" field. It's identical to StaticValueEQ.
func StaticValue(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldStaticValue, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// PlanIDEQ applies the EQ predicate on the "plan_id" field.
func PlanIDEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldPlanID, v))
}

// PlanIDNEQ applies the NEQ predicate on the "plan_id" field.
func PlanIDNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldPlanID, v))
}

// PlanIDIn applies the In predicate on the "plan_id" field.
func PlanIDIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldPlanID, vs...))
}

// PlanIDNotIn applies the NotIn predicate on the "plan_id" field.
func PlanIDNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldPlanID, vs...))
}

// PlanIDGT applies the GT predicate on the "plan_id" field.
func PlanIDGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldPlanID, v))
}

// PlanIDGTE applies the GTE predicate on the "plan_id" field.
func PlanIDGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldPlanID, v))
}

// PlanIDLT applies the LT predicate on the "plan_id" field.
func PlanIDLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldPlanID, v))
}

// PlanIDLTE applies the LTE predicate on the "plan_id" field.
func PlanIDLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldPlanID, v))
}

// PlanIDContains applies the Contains predicate on the "plan_id" field.
func PlanIDContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldPlanID, v))
}

// PlanIDHasPrefix applies the HasPrefix predicate on the "plan_id" field.
func PlanIDHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldPlanID, v))
}

// PlanIDHasSuffix applies the HasSuffix predicate on the "plan_id" field.
func PlanIDHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldPlanID, v))
}

// PlanIDEqualFold applies the EqualFold predicate on the "plan_id" field.
func PlanIDEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldPlanID, v))
}

// PlanIDContainsFold applies the ContainsFold predicate on the "plan_id" field.
func PlanIDContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldPlanID, v))
}

// FeatureIDEQ applies the EQ predicate on the "feature_id" field.
func FeatureIDEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldFeatureID, v))
}

// FeatureIDNEQ applies the NEQ predicate on the "feature_id" field.
func FeatureIDNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldFeatureID, v))
}

// FeatureIDIn applies the In predicate on the "feature_id" field.
func FeatureIDIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldFeatureID, vs...))
}

// FeatureIDNotIn applies the NotIn predicate on the "feature_id" field.
func FeatureIDNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldFeatureID, vs...))
}

// FeatureIDGT applies the GT predicate on the "feature_id" field.
func FeatureIDGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldFeatureID, v))
}

// FeatureIDGTE applies the GTE predicate on the "feature_id" field.
func FeatureIDGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldFeatureID, v))
}

// FeatureIDLT applies the LT predicate on the "feature_id" field.
func FeatureIDLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldFeatureID, v))
}

// FeatureIDLTE applies the LTE predicate on the "feature_id" field.
func FeatureIDLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldFeatureID, v))
}

// FeatureIDContains applies the Contains predicate on the "feature_id" field.
func FeatureIDContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldFeatureID, v))
}

// FeatureIDHasPrefix applies the HasPrefix predicate on the "feature_id" field.
func FeatureIDHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldFeatureID, v))
}

// FeatureIDHasSuffix applies the HasSuffix predicate on the "feature_id" field.
func FeatureIDHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldFeatureID, v))
}

// FeatureIDEqualFold applies the EqualFold predicate on the "feature_id" field.
func FeatureIDEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldFeatureID, v))
}

// FeatureIDContainsFold applies the ContainsFold predicate on the "feature_id" field.
func FeatureIDContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldFeatureID, v))
}

// FeatureTypeEQ applies the EQ predicate on the "feature_type" field.
func FeatureTypeEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldFeatureType, v))
}

// FeatureTypeNEQ applies the NEQ predicate on the "feature_type" field.
func FeatureTypeNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldFeatureType, v))
}

// FeatureTypeIn applies the In predicate on the "feature_type" field.
func FeatureTypeIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldFeatureType, vs...))
}

// FeatureTypeNotIn applies the NotIn predicate on the "feature_type" field.
func FeatureTypeNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldFeatureType, vs...))
}

// FeatureTypeGT applies the GT predicate on the "feature_type" field.
func FeatureTypeGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldFeatureType, v))
}

// FeatureTypeGTE applies the GTE predicate on the "feature_type" field.
func FeatureTypeGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldFeatureType, v))
}

// FeatureTypeLT applies the LT predicate on the "feature_type" field.
func FeatureTypeLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldFeatureType, v))
}

// FeatureTypeLTE applies the LTE predicate on the "feature_type" field.
func FeatureTypeLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldFeatureType, v))
}

// FeatureTypeContains applies the Contains predicate on the "feature_type" field.
func FeatureTypeContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldFeatureType, v))
}

// FeatureTypeHasPrefix applies the HasPrefix predicate on the "feature_type" field.
func FeatureTypeHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldFeatureType, v))
}

// FeatureTypeHasSuffix applies the HasSuffix predicate on the "feature_type" field.
func FeatureTypeHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldFeatureType, v))
}

// FeatureTypeEqualFold applies the EqualFold predicate on the "feature_type" field.
func FeatureTypeEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldFeatureType, v))
}

// FeatureTypeContainsFold applies the ContainsFold predicate on the "feature_type" field.
func FeatureTypeContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldFeatureType, v))
}

// IsEnabledEQ applies the EQ predicate on the "is_enabled" field.
func IsEnabledEQ(v bool) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldIsEnabled, v))
}

// IsEnabledNEQ applies the NEQ predicate on the "is_enabled" field.
func IsEnabledNEQ(v bool) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldIsEnabled, v))
}

// UsageLimitEQ applies the EQ predicate on the "usage_limit" field.
func UsageLimitEQ(v int64) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUsageLimit, v))
}

// UsageLimitNEQ applies the NEQ predicate on the "usage_limit" field.
func UsageLimitNEQ(v int64) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldUsageLimit, v))
}

// UsageLimitIn applies the In predicate on the "usage_limit" field.
func UsageLimitIn(vs ...int64) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldUsageLimit, vs...))
}

// UsageLimitNotIn applies the NotIn predicate on the "usage_limit" field.
func UsageLimitNotIn(vs ...int64) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldUsageLimit, vs...))
}

// UsageLimitGT applies the GT predicate on the "usage_limit" field.
func UsageLimitGT(v int64) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldUsageLimit, v))
}

// UsageLimitGTE applies the GTE predicate on the "usage_limit" field.
func UsageLimitGTE(v int64) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldUsageLimit, v))
}

// UsageLimitLT applies the LT predicate on the "usage_limit" field.
func UsageLimitLT(v int64) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldUsageLimit, v))
}

// UsageLimitLTE applies the LTE predicate on the "usage_limit" field.
func UsageLimitLTE(v int64) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldUsageLimit, v))
}

// UsageLimitIsNil applies the IsNil predicate on the "usage_limit" field.
func UsageLimitIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldUsageLimit))
}

// UsageLimitNotNil applies the NotNil predicate on the "usage_limit" field.
func UsageLimitNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldUsageLimit))
}

// UsageResetPeriodEQ applies the EQ predicate on the "usage_reset_period" field.
func UsageResetPeriodEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUsageResetPeriod, v))
}

// UsageResetPeriodNEQ applies the NEQ predicate on the "usage_reset_period" field.
func UsageResetPeriodNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldUsageResetPeriod, v))
}

// UsageResetPeriodIn applies the In predicate on the "usage_reset_period" field.
func UsageResetPeriodIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldUsageResetPeriod, vs...))
}

// UsageResetPeriodNotIn applies the NotIn predicate on the "usage_reset_period" field.
func UsageResetPeriodNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldUsageResetPeriod, vs...))
}

// UsageResetPeriodGT applies the GT predicate on the "usage_reset_period" field.
func UsageResetPeriodGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldUsageResetPeriod, v))
}

// UsageResetPeriodGTE applies the GTE predicate on the "usage_reset_period" field.
func UsageResetPeriodGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldUsageResetPeriod, v))
}

// UsageResetPeriodLT applies the LT predicate on the "usage_reset_period" field.
func UsageResetPeriodLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldUsageResetPeriod, v))
}

// UsageResetPeriodLTE applies the LTE predicate on the "usage_reset_period" field.
func UsageResetPeriodLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldUsageResetPeriod, v))
}

// UsageResetPeriodContains applies the Contains predicate on the "usage_reset_period" field.
func UsageResetPeriodContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldUsageResetPeriod, v))
}

// UsageResetPeriodHasPrefix applies the HasPrefix predicate on the "usage_reset_period" field.
func UsageResetPeriodHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldUsageResetPeriod, v))
}

// UsageResetPeriodHasSuffix applies the HasSuffix predicate on the "usage_reset_period" field.
func UsageResetPeriodHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldUsageResetPeriod, v))
}

// UsageResetPeriodIsNil applies the IsNil predicate on the "usage_reset_period" field.
func UsageResetPeriodIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldUsageResetPeriod))
}

// UsageResetPeriodNotNil applies the NotNil predicate on the "usage_reset_period" field.
func UsageResetPeriodNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldUsageResetPeriod))
}

// UsageResetPeriodEqualFold applies the EqualFold predicate on the "usage_reset_period" field.
func UsageResetPeriodEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldUsageResetPeriod, v))
}

// UsageResetPeriodContainsFold applies the ContainsFold predicate on the "usage_reset_period" field.
func UsageResetPeriodContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldUsageResetPeriod, v))
}

// IsSoftLimitEQ applies the EQ predicate on the "is_soft_limit" field.
func IsSoftLimitEQ(v bool) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldIsSoftLimit, v))
}

// IsSoftLimitNEQ applies the NEQ predicate on the "is_soft_limit" field.
func IsSoftLimitNEQ(v bool) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldIsSoftLimit, v))
}

// StaticValueEQ applies the EQ predicate on the "static_value" field.
func StaticValueEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldStaticValue, v))
}

// StaticValueNEQ applies the NEQ predicate on the "static_value" field.
func StaticValueNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldStaticValue, v))
}

// StaticValueIn applies the In predicate on the "static_value" field.
func StaticValueIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldStaticValue, vs...))
}

// StaticValueNotIn applies the NotIn predicate on the "static_value" field.
func StaticValueNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldStaticValue, vs...))
}

// StaticValueGT applies the GT predicate on the "static_value" field.
func StaticValueGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldStaticValue, v))
}

// StaticValueGTE applies the GTE predicate on the "static_value" field.
func StaticValueGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldStaticValue, v))
}

// StaticValueLT applies the LT predicate on the "static_value" field.
func StaticValueLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldStaticValue, v))
}

// StaticValueLTE applies the LTE predicate on the "static_value" field.
func StaticValueLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldStaticValue, v))
}

// StaticValueContains applies the Contains predicate on the "static_value" field.
func StaticValueContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldStaticValue, v))
}

// StaticValueHasPrefix applies the HasPrefix predicate on the "static_value" field.
func StaticValueHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldStaticValue, v))
}

// StaticValueHasSuffix applies the HasSuffix predicate on the "static_value" field.
func StaticValueHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldStaticValue, v))
}

// StaticValueIsNil applies the IsNil predicate on the "static_value" field.
func StaticValueIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldStaticValue))
}

// StaticValueNotNil applies the NotNil predicate on the "static_value" field.
func StaticValueNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldStaticValue))
}

// StaticValueEqualFold applies the EqualFold predicate on the "static_value" field.
func StaticValueEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldStaticValue, v))
}

// StaticValueContainsFold applies the ContainsFold predicate on the "static_value" field.
func StaticValueContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldStaticValue, v))
}

// HasPlan applies the HasEdge predicate on the "plan" edge.
func HasPlan() predicate.Entitlement {
	return predicate.Entitlement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlanTable, PlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlanWith applies the HasEdge predicate on the "plan" edge with a given conditions (other predicates).
func HasPlanWith(preds ...predicate.Plan) predicate.Entitlement {
	return predicate.Entitlement(func(s *sql.Selector) {
		step := newPlanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Entitlement) predicate.Entitlement {
	return predicate.Entitlement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Entitlement) predicate.Entitlement {
	return predicate.Entitlement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Entitlement) predicate.Entitlement {
	return predicate.Entitlement(sql.NotPredicates(p))
}
