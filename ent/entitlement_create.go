// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/entitlement"
	"github.com/flexprice/flexprice/ent/plan"
)

// EntitlementCreate is the builder for creating a Entitlement entity.
type EntitlementCreate struct {
	config
	mutation *EntitlementMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (ec *EntitlementCreate) SetTenantID(s string) *EntitlementCreate {
	ec.mutation.SetTenantID(s)
	return ec
}

// SetStatus sets the "status" field.
func (ec *EntitlementCreate) SetStatus(s string) *EntitlementCreate {
	ec.mutation.SetStatus(s)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableStatus(s *string) *EntitlementCreate {
	if s != nil {
		ec.SetStatus(*s)
	}
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EntitlementCreate) SetCreatedAt(t time.Time) *EntitlementCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableCreatedAt(t *time.Time) *EntitlementCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EntitlementCreate) SetUpdatedAt(t time.Time) *EntitlementCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableUpdatedAt(t *time.Time) *EntitlementCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetCreatedBy sets the "created_by" field.
func (ec *EntitlementCreate) SetCreatedBy(s string) *EntitlementCreate {
	ec.mutation.SetCreatedBy(s)
	return ec
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableCreatedBy(s *string) *EntitlementCreate {
	if s != nil {
		ec.SetCreatedBy(*s)
	}
	return ec
}

// SetUpdatedBy sets the "updated_by" field.
func (ec *EntitlementCreate) SetUpdatedBy(s string) *EntitlementCreate {
	ec.mutation.SetUpdatedBy(s)
	return ec
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableUpdatedBy(s *string) *EntitlementCreate {
	if s != nil {
		ec.SetUpdatedBy(*s)
	}
	return ec
}

// SetPlanID sets the "plan_id" field.
func (ec *EntitlementCreate) SetPlanID(s string) *EntitlementCreate {
	ec.mutation.SetPlanID(s)
	return ec
}

// SetFeatureID sets the "feature_id" field.
func (ec *EntitlementCreate) SetFeatureID(s string) *EntitlementCreate {
	ec.mutation.SetFeatureID(s)
	return ec
}

// SetFeatureType sets the "feature_type" field.
func (ec *EntitlementCreate) SetFeatureType(s string) *EntitlementCreate {
	ec.mutation.SetFeatureType(s)
	return ec
}

// SetIsEnabled sets the "is_enabled" field.
func (ec *EntitlementCreate) SetIsEnabled(b bool) *EntitlementCreate {
	ec.mutation.SetIsEnabled(b)
	return ec
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableIsEnabled(b *bool) *EntitlementCreate {
	if b != nil {
		ec.SetIsEnabled(*b)
	}
	return ec
}

// SetUsageLimit sets the "usage_limit" field.
func (ec *EntitlementCreate) SetUsageLimit(i int64) *EntitlementCreate {
	ec.mutation.SetUsageLimit(i)
	return ec
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableUsageLimit(i *int64) *EntitlementCreate {
	if i != nil {
		ec.SetUsageLimit(*i)
	}
	return ec
}

// SetUsageResetPeriod sets the "usage_reset_period" field.
func (ec *EntitlementCreate) SetUsageResetPeriod(s string) *EntitlementCreate {
	ec.mutation.SetUsageResetPeriod(s)
	return ec
}

// SetNillableUsageResetPeriod sets the "usage_reset_period" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableUsageResetPeriod(s *string) *EntitlementCreate {
	if s != nil {
		ec.SetUsageResetPeriod(*s)
	}
	return ec
}

// SetIsSoftLimit sets the "is_soft_limit" field.
func (ec *EntitlementCreate) SetIsSoftLimit(b bool) *EntitlementCreate {
	ec.mutation.SetIsSoftLimit(b)
	return ec
}

// SetNillableIsSoftLimit sets the "is_soft_limit" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableIsSoftLimit(b *bool) *EntitlementCreate {
	if b != nil {
		ec.SetIsSoftLimit(*b)
	}
	return ec
}

// SetStaticValue sets the "static_value" field.
func (ec *EntitlementCreate) SetStaticValue(s string) *EntitlementCreate {
	ec.mutation.SetStaticValue(s)
	return ec
}

// SetNillableStaticValue sets the "static_value" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableStaticValue(s *string) *EntitlementCreate {
	if s != nil {
		ec.SetStaticValue(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EntitlementCreate) SetID(s string) *EntitlementCreate {
	ec.mutation.SetID(s)
	return ec
}

// SetPlan sets the "plan" edge to the Plan entity.
func (ec *EntitlementCreate) SetPlan(p *Plan) *EntitlementCreate {
	return ec.SetPlanID(p.ID)
}

// Mutation returns the EntitlementMutation object of the builder.
func (ec *EntitlementCreate) Mutation() *EntitlementMutation {
	return ec.mutation
}

// Save creates the Entitlement in the database.
func (ec *EntitlementCreate) Save(ctx context.Context) (*Entitlement, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EntitlementCreate) SaveX(ctx context.Context) *Entitlement {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EntitlementCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EntitlementCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EntitlementCreate) defaults() {
	if _, ok := ec.mutation.Status(); !ok {
		v := entitlement.DefaultStatus
		ec.mutation.SetStatus(v)
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := entitlement.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := entitlement.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.IsEnabled(); !ok {
		v := entitlement.DefaultIsEnabled
		ec.mutation.SetIsEnabled(v)
	}
	if _, ok := ec.mutation.IsSoftLimit(); !ok {
		v := entitlement.DefaultIsSoftLimit
		ec.mutation.SetIsSoftLimit(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EntitlementCreate) check() error {
	if _, ok := ec.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Entitlement.tenant_id"`)}
	}
	if v, ok := ec.mutation.TenantID(); ok {
		if err := entitlement.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Entitlement.tenant_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Entitlement.status"`)}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Entitlement.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Entitlement.updated_at"`)}
	}
	if _, ok := ec.mutation.PlanID(); !ok {
		return &ValidationError{Name: "plan_id", err: errors.New(`ent: missing required field "Entitlement.plan_id"`)}
	}
	if v, ok := ec.mutation.PlanID(); ok {
		if err := entitlement.PlanIDValidator(v); err != nil {
			return &ValidationError{Name: "plan_id", err: fmt.Errorf(`ent: validator failed for field "Entitlement.plan_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.FeatureID(); !ok {
		return &ValidationError{Name: "feature_id", err: errors.New(`ent: missing required field "Entitlement.feature_id"`)}
	}
	if v, ok := ec.mutation.FeatureID(); ok {
		if err := entitlement.FeatureIDValidator(v); err != nil {
			return &ValidationError{Name: "feature_id", err: fmt.Errorf(`ent: validator failed for field "Entitlement.feature_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.FeatureType(); !ok {
		return &ValidationError{Name: "feature_type", err: errors.New(`ent: missing required field "Entitlement.feature_type"`)}
	}
	if v, ok := ec.mutation.FeatureType(); ok {
		if err := entitlement.FeatureTypeValidator(v); err != nil {
			return &ValidationError{Name: "feature_type", err: fmt.Errorf(`ent: validator failed for field "Entitlement.feature_type": %w`, err)}
		}
	}
	if _, ok := ec.mutation.IsEnabled(); !ok {
		return &ValidationError{Name: "is_enabled", err: errors.New(`ent: missing required field "Entitlement.is_enabled"`)}
	}
	if _, ok := ec.mutation.IsSoftLimit(); !ok {
		return &ValidationError{Name: "is_soft_limit", err: errors.New(`ent: missing required field "Entitlement.is_soft_limit"`)}
	}
	if v, ok := ec.mutation.ID(); ok {
		if err := entitlement.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Entitlement.id": %w`, err)}
		}
	}
	if len(ec.mutation.PlanIDs()) == 0 {
		return &ValidationError{Name: "plan", err: errors.New(`ent: missing required edge "Entitlement.plan"`)}
	}
	return nil
}

func (ec *EntitlementCreate) sqlSave(ctx context.Context) (*Entitlement, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Entitlement.ID type: %T", _spec.ID.Value)
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EntitlementCreate) createSpec() (*Entitlement, *sqlgraph.CreateSpec) {
	var (
		_node = &Entitlement{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(entitlement.Table, sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.TenantID(); ok {
		_spec.SetField(entitlement.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(entitlement.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(entitlement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.CreatedBy(); ok {
		_spec.SetField(entitlement.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ec.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlement.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ec.mutation.FeatureID(); ok {
		_spec.SetField(entitlement.FieldFeatureID, field.TypeString, value)
		_node.FeatureID = value
	}
	if value, ok := ec.mutation.FeatureType(); ok {
		_spec.SetField(entitlement.FieldFeatureType, field.TypeString, value)
		_node.FeatureType = value
	}
	if value, ok := ec.mutation.IsEnabled(); ok {
		_spec.SetField(entitlement.FieldIsEnabled, field.TypeBool, value)
		_node.IsEnabled = value
	}
	if value, ok := ec.mutation.UsageLimit(); ok {
		_spec.SetField(entitlement.FieldUsageLimit, field.TypeInt64, value)
		_node.UsageLimit = &value
	}
	if value, ok := ec.mutation.UsageResetPeriod(); ok {
		_spec.SetField(entitlement.FieldUsageResetPeriod, field.TypeString, value)
		_node.UsageResetPeriod = value
	}
	if value, ok := ec.mutation.IsSoftLimit(); ok {
		_spec.SetField(entitlement.FieldIsSoftLimit, field.TypeBool, value)
		_node.IsSoftLimit = value
	}
	if value, ok := ec.mutation.StaticValue(); ok {
		_spec.SetField(entitlement.FieldStaticValue, field.TypeString, value)
		_node.StaticValue = value
	}
	if nodes := ec.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlement.PlanTable,
			Columns: []string{entitlement.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntitlementCreateBulk is the builder for creating many Entitlement entities in bulk.
type EntitlementCreateBulk struct {
	config
	err      error
	builders []*EntitlementCreate
}

// Save creates the Entitlement entities in the database.
func (ecb *EntitlementCreateBulk) Save(ctx context.Context) ([]*Entitlement, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Entitlement, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntitlementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EntitlementCreateBulk) SaveX(ctx context.Context) []*Entitlement {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EntitlementCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EntitlementCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
