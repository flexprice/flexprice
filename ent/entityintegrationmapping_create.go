// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/entityintegrationmapping"
)

// EntityIntegrationMappingCreate is the builder for creating a EntityIntegrationMapping entity.
type EntityIntegrationMappingCreate struct {
	config
	mutation *EntityIntegrationMappingMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (eimc *EntityIntegrationMappingCreate) SetTenantID(s string) *EntityIntegrationMappingCreate {
	eimc.mutation.SetTenantID(s)
	return eimc
}

// SetStatus sets the "status" field.
func (eimc *EntityIntegrationMappingCreate) SetStatus(s string) *EntityIntegrationMappingCreate {
	eimc.mutation.SetStatus(s)
	return eimc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eimc *EntityIntegrationMappingCreate) SetNillableStatus(s *string) *EntityIntegrationMappingCreate {
	if s != nil {
		eimc.SetStatus(*s)
	}
	return eimc
}

// SetCreatedAt sets the "created_at" field.
func (eimc *EntityIntegrationMappingCreate) SetCreatedAt(t time.Time) *EntityIntegrationMappingCreate {
	eimc.mutation.SetCreatedAt(t)
	return eimc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eimc *EntityIntegrationMappingCreate) SetNillableCreatedAt(t *time.Time) *EntityIntegrationMappingCreate {
	if t != nil {
		eimc.SetCreatedAt(*t)
	}
	return eimc
}

// SetUpdatedAt sets the "updated_at" field.
func (eimc *EntityIntegrationMappingCreate) SetUpdatedAt(t time.Time) *EntityIntegrationMappingCreate {
	eimc.mutation.SetUpdatedAt(t)
	return eimc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eimc *EntityIntegrationMappingCreate) SetNillableUpdatedAt(t *time.Time) *EntityIntegrationMappingCreate {
	if t != nil {
		eimc.SetUpdatedAt(*t)
	}
	return eimc
}

// SetCreatedBy sets the "created_by" field.
func (eimc *EntityIntegrationMappingCreate) SetCreatedBy(s string) *EntityIntegrationMappingCreate {
	eimc.mutation.SetCreatedBy(s)
	return eimc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (eimc *EntityIntegrationMappingCreate) SetNillableCreatedBy(s *string) *EntityIntegrationMappingCreate {
	if s != nil {
		eimc.SetCreatedBy(*s)
	}
	return eimc
}

// SetUpdatedBy sets the "updated_by" field.
func (eimc *EntityIntegrationMappingCreate) SetUpdatedBy(s string) *EntityIntegrationMappingCreate {
	eimc.mutation.SetUpdatedBy(s)
	return eimc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eimc *EntityIntegrationMappingCreate) SetNillableUpdatedBy(s *string) *EntityIntegrationMappingCreate {
	if s != nil {
		eimc.SetUpdatedBy(*s)
	}
	return eimc
}

// SetEnvironmentID sets the "environment_id" field.
func (eimc *EntityIntegrationMappingCreate) SetEnvironmentID(s string) *EntityIntegrationMappingCreate {
	eimc.mutation.SetEnvironmentID(s)
	return eimc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (eimc *EntityIntegrationMappingCreate) SetNillableEnvironmentID(s *string) *EntityIntegrationMappingCreate {
	if s != nil {
		eimc.SetEnvironmentID(*s)
	}
	return eimc
}

// SetEntityID sets the "entity_id" field.
func (eimc *EntityIntegrationMappingCreate) SetEntityID(s string) *EntityIntegrationMappingCreate {
	eimc.mutation.SetEntityID(s)
	return eimc
}

// SetEntityType sets the "entity_type" field.
func (eimc *EntityIntegrationMappingCreate) SetEntityType(s string) *EntityIntegrationMappingCreate {
	eimc.mutation.SetEntityType(s)
	return eimc
}

// SetProviderType sets the "provider_type" field.
func (eimc *EntityIntegrationMappingCreate) SetProviderType(s string) *EntityIntegrationMappingCreate {
	eimc.mutation.SetProviderType(s)
	return eimc
}

// SetProviderEntityID sets the "provider_entity_id" field.
func (eimc *EntityIntegrationMappingCreate) SetProviderEntityID(s string) *EntityIntegrationMappingCreate {
	eimc.mutation.SetProviderEntityID(s)
	return eimc
}

// SetMetadata sets the "metadata" field.
func (eimc *EntityIntegrationMappingCreate) SetMetadata(m map[string]interface{}) *EntityIntegrationMappingCreate {
	eimc.mutation.SetMetadata(m)
	return eimc
}

// SetID sets the "id" field.
func (eimc *EntityIntegrationMappingCreate) SetID(s string) *EntityIntegrationMappingCreate {
	eimc.mutation.SetID(s)
	return eimc
}

// Mutation returns the EntityIntegrationMappingMutation object of the builder.
func (eimc *EntityIntegrationMappingCreate) Mutation() *EntityIntegrationMappingMutation {
	return eimc.mutation
}

// Save creates the EntityIntegrationMapping in the database.
func (eimc *EntityIntegrationMappingCreate) Save(ctx context.Context) (*EntityIntegrationMapping, error) {
	eimc.defaults()
	return withHooks(ctx, eimc.sqlSave, eimc.mutation, eimc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eimc *EntityIntegrationMappingCreate) SaveX(ctx context.Context) *EntityIntegrationMapping {
	v, err := eimc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eimc *EntityIntegrationMappingCreate) Exec(ctx context.Context) error {
	_, err := eimc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eimc *EntityIntegrationMappingCreate) ExecX(ctx context.Context) {
	if err := eimc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eimc *EntityIntegrationMappingCreate) defaults() {
	if _, ok := eimc.mutation.Status(); !ok {
		v := entityintegrationmapping.DefaultStatus
		eimc.mutation.SetStatus(v)
	}
	if _, ok := eimc.mutation.CreatedAt(); !ok {
		v := entityintegrationmapping.DefaultCreatedAt()
		eimc.mutation.SetCreatedAt(v)
	}
	if _, ok := eimc.mutation.UpdatedAt(); !ok {
		v := entityintegrationmapping.DefaultUpdatedAt()
		eimc.mutation.SetUpdatedAt(v)
	}
	if _, ok := eimc.mutation.EnvironmentID(); !ok {
		v := entityintegrationmapping.DefaultEnvironmentID
		eimc.mutation.SetEnvironmentID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eimc *EntityIntegrationMappingCreate) check() error {
	if _, ok := eimc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "EntityIntegrationMapping.tenant_id"`)}
	}
	if v, ok := eimc.mutation.TenantID(); ok {
		if err := entityintegrationmapping.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "EntityIntegrationMapping.tenant_id": %w`, err)}
		}
	}
	if _, ok := eimc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "EntityIntegrationMapping.status"`)}
	}
	if _, ok := eimc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EntityIntegrationMapping.created_at"`)}
	}
	if _, ok := eimc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EntityIntegrationMapping.updated_at"`)}
	}
	if _, ok := eimc.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "EntityIntegrationMapping.entity_id"`)}
	}
	if v, ok := eimc.mutation.EntityID(); ok {
		if err := entityintegrationmapping.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "EntityIntegrationMapping.entity_id": %w`, err)}
		}
	}
	if _, ok := eimc.mutation.EntityType(); !ok {
		return &ValidationError{Name: "entity_type", err: errors.New(`ent: missing required field "EntityIntegrationMapping.entity_type"`)}
	}
	if v, ok := eimc.mutation.EntityType(); ok {
		if err := entityintegrationmapping.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "EntityIntegrationMapping.entity_type": %w`, err)}
		}
	}
	if _, ok := eimc.mutation.ProviderType(); !ok {
		return &ValidationError{Name: "provider_type", err: errors.New(`ent: missing required field "EntityIntegrationMapping.provider_type"`)}
	}
	if v, ok := eimc.mutation.ProviderType(); ok {
		if err := entityintegrationmapping.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "EntityIntegrationMapping.provider_type": %w`, err)}
		}
	}
	if _, ok := eimc.mutation.ProviderEntityID(); !ok {
		return &ValidationError{Name: "provider_entity_id", err: errors.New(`ent: missing required field "EntityIntegrationMapping.provider_entity_id"`)}
	}
	if v, ok := eimc.mutation.ProviderEntityID(); ok {
		if err := entityintegrationmapping.ProviderEntityIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_entity_id", err: fmt.Errorf(`ent: validator failed for field "EntityIntegrationMapping.provider_entity_id": %w`, err)}
		}
	}
	return nil
}

func (eimc *EntityIntegrationMappingCreate) sqlSave(ctx context.Context) (*EntityIntegrationMapping, error) {
	if err := eimc.check(); err != nil {
		return nil, err
	}
	_node, _spec := eimc.createSpec()
	if err := sqlgraph.CreateNode(ctx, eimc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected EntityIntegrationMapping.ID type: %T", _spec.ID.Value)
		}
	}
	eimc.mutation.id = &_node.ID
	eimc.mutation.done = true
	return _node, nil
}

func (eimc *EntityIntegrationMappingCreate) createSpec() (*EntityIntegrationMapping, *sqlgraph.CreateSpec) {
	var (
		_node = &EntityIntegrationMapping{config: eimc.config}
		_spec = sqlgraph.NewCreateSpec(entityintegrationmapping.Table, sqlgraph.NewFieldSpec(entityintegrationmapping.FieldID, field.TypeString))
	)
	if id, ok := eimc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eimc.mutation.TenantID(); ok {
		_spec.SetField(entityintegrationmapping.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := eimc.mutation.Status(); ok {
		_spec.SetField(entityintegrationmapping.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := eimc.mutation.CreatedAt(); ok {
		_spec.SetField(entityintegrationmapping.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := eimc.mutation.UpdatedAt(); ok {
		_spec.SetField(entityintegrationmapping.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := eimc.mutation.CreatedBy(); ok {
		_spec.SetField(entityintegrationmapping.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := eimc.mutation.UpdatedBy(); ok {
		_spec.SetField(entityintegrationmapping.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := eimc.mutation.EnvironmentID(); ok {
		_spec.SetField(entityintegrationmapping.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := eimc.mutation.EntityID(); ok {
		_spec.SetField(entityintegrationmapping.FieldEntityID, field.TypeString, value)
		_node.EntityID = value
	}
	if value, ok := eimc.mutation.EntityType(); ok {
		_spec.SetField(entityintegrationmapping.FieldEntityType, field.TypeString, value)
		_node.EntityType = value
	}
	if value, ok := eimc.mutation.ProviderType(); ok {
		_spec.SetField(entityintegrationmapping.FieldProviderType, field.TypeString, value)
		_node.ProviderType = value
	}
	if value, ok := eimc.mutation.ProviderEntityID(); ok {
		_spec.SetField(entityintegrationmapping.FieldProviderEntityID, field.TypeString, value)
		_node.ProviderEntityID = value
	}
	if value, ok := eimc.mutation.Metadata(); ok {
		_spec.SetField(entityintegrationmapping.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// EntityIntegrationMappingCreateBulk is the builder for creating many EntityIntegrationMapping entities in bulk.
type EntityIntegrationMappingCreateBulk struct {
	config
	err      error
	builders []*EntityIntegrationMappingCreate
}

// Save creates the EntityIntegrationMapping entities in the database.
func (eimcb *EntityIntegrationMappingCreateBulk) Save(ctx context.Context) ([]*EntityIntegrationMapping, error) {
	if eimcb.err != nil {
		return nil, eimcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eimcb.builders))
	nodes := make([]*EntityIntegrationMapping, len(eimcb.builders))
	mutators := make([]Mutator, len(eimcb.builders))
	for i := range eimcb.builders {
		func(i int, root context.Context) {
			builder := eimcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntityIntegrationMappingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eimcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eimcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eimcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eimcb *EntityIntegrationMappingCreateBulk) SaveX(ctx context.Context) []*EntityIntegrationMapping {
	v, err := eimcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eimcb *EntityIntegrationMappingCreateBulk) Exec(ctx context.Context) error {
	_, err := eimcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eimcb *EntityIntegrationMappingCreateBulk) ExecX(ctx context.Context) {
	if err := eimcb.Exec(ctx); err != nil {
		panic(err)
	}
}
