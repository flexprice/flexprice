// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/entityintegrationmapping"
	"github.com/flexprice/flexprice/ent/predicate"
)

// EntityIntegrationMappingDelete is the builder for deleting a EntityIntegrationMapping entity.
type EntityIntegrationMappingDelete struct {
	config
	hooks    []Hook
	mutation *EntityIntegrationMappingMutation
}

// Where appends a list predicates to the EntityIntegrationMappingDelete builder.
func (eimd *EntityIntegrationMappingDelete) Where(ps ...predicate.EntityIntegrationMapping) *EntityIntegrationMappingDelete {
	eimd.mutation.Where(ps...)
	return eimd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (eimd *EntityIntegrationMappingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, eimd.sqlExec, eimd.mutation, eimd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (eimd *EntityIntegrationMappingDelete) ExecX(ctx context.Context) int {
	n, err := eimd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (eimd *EntityIntegrationMappingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(entityintegrationmapping.Table, sqlgraph.NewFieldSpec(entityintegrationmapping.FieldID, field.TypeString))
	if ps := eimd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, eimd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	eimd.mutation.done = true
	return affected, err
}

// EntityIntegrationMappingDeleteOne is the builder for deleting a single EntityIntegrationMapping entity.
type EntityIntegrationMappingDeleteOne struct {
	eimd *EntityIntegrationMappingDelete
}

// Where appends a list predicates to the EntityIntegrationMappingDelete builder.
func (eimdo *EntityIntegrationMappingDeleteOne) Where(ps ...predicate.EntityIntegrationMapping) *EntityIntegrationMappingDeleteOne {
	eimdo.eimd.mutation.Where(ps...)
	return eimdo
}

// Exec executes the deletion query.
func (eimdo *EntityIntegrationMappingDeleteOne) Exec(ctx context.Context) error {
	n, err := eimdo.eimd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{entityintegrationmapping.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (eimdo *EntityIntegrationMappingDeleteOne) ExecX(ctx context.Context) {
	if err := eimdo.Exec(ctx); err != nil {
		panic(err)
	}
}
