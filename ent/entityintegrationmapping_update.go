// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/entityintegrationmapping"
	"github.com/flexprice/flexprice/ent/predicate"
)

// EntityIntegrationMappingUpdate is the builder for updating EntityIntegrationMapping entities.
type EntityIntegrationMappingUpdate struct {
	config
	hooks    []Hook
	mutation *EntityIntegrationMappingMutation
}

// Where appends a list predicates to the EntityIntegrationMappingUpdate builder.
func (eimu *EntityIntegrationMappingUpdate) Where(ps ...predicate.EntityIntegrationMapping) *EntityIntegrationMappingUpdate {
	eimu.mutation.Where(ps...)
	return eimu
}

// SetStatus sets the "status" field.
func (eimu *EntityIntegrationMappingUpdate) SetStatus(s string) *EntityIntegrationMappingUpdate {
	eimu.mutation.SetStatus(s)
	return eimu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eimu *EntityIntegrationMappingUpdate) SetNillableStatus(s *string) *EntityIntegrationMappingUpdate {
	if s != nil {
		eimu.SetStatus(*s)
	}
	return eimu
}

// SetUpdatedAt sets the "updated_at" field.
func (eimu *EntityIntegrationMappingUpdate) SetUpdatedAt(t time.Time) *EntityIntegrationMappingUpdate {
	eimu.mutation.SetUpdatedAt(t)
	return eimu
}

// SetUpdatedBy sets the "updated_by" field.
func (eimu *EntityIntegrationMappingUpdate) SetUpdatedBy(s string) *EntityIntegrationMappingUpdate {
	eimu.mutation.SetUpdatedBy(s)
	return eimu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eimu *EntityIntegrationMappingUpdate) SetNillableUpdatedBy(s *string) *EntityIntegrationMappingUpdate {
	if s != nil {
		eimu.SetUpdatedBy(*s)
	}
	return eimu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (eimu *EntityIntegrationMappingUpdate) ClearUpdatedBy() *EntityIntegrationMappingUpdate {
	eimu.mutation.ClearUpdatedBy()
	return eimu
}

// SetMetadata sets the "metadata" field.
func (eimu *EntityIntegrationMappingUpdate) SetMetadata(m map[string]interface{}) *EntityIntegrationMappingUpdate {
	eimu.mutation.SetMetadata(m)
	return eimu
}

// ClearMetadata clears the value of the "metadata" field.
func (eimu *EntityIntegrationMappingUpdate) ClearMetadata() *EntityIntegrationMappingUpdate {
	eimu.mutation.ClearMetadata()
	return eimu
}

// Mutation returns the EntityIntegrationMappingMutation object of the builder.
func (eimu *EntityIntegrationMappingUpdate) Mutation() *EntityIntegrationMappingMutation {
	return eimu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eimu *EntityIntegrationMappingUpdate) Save(ctx context.Context) (int, error) {
	eimu.defaults()
	return withHooks(ctx, eimu.sqlSave, eimu.mutation, eimu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eimu *EntityIntegrationMappingUpdate) SaveX(ctx context.Context) int {
	affected, err := eimu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eimu *EntityIntegrationMappingUpdate) Exec(ctx context.Context) error {
	_, err := eimu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eimu *EntityIntegrationMappingUpdate) ExecX(ctx context.Context) {
	if err := eimu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eimu *EntityIntegrationMappingUpdate) defaults() {
	if _, ok := eimu.mutation.UpdatedAt(); !ok {
		v := entityintegrationmapping.UpdateDefaultUpdatedAt()
		eimu.mutation.SetUpdatedAt(v)
	}
}

func (eimu *EntityIntegrationMappingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entityintegrationmapping.Table, entityintegrationmapping.Columns, sqlgraph.NewFieldSpec(entityintegrationmapping.FieldID, field.TypeString))
	if ps := eimu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eimu.mutation.Status(); ok {
		_spec.SetField(entityintegrationmapping.FieldStatus, field.TypeString, value)
	}
	if value, ok := eimu.mutation.UpdatedAt(); ok {
		_spec.SetField(entityintegrationmapping.FieldUpdatedAt, field.TypeTime, value)
	}
	if eimu.mutation.CreatedByCleared() {
		_spec.ClearField(entityintegrationmapping.FieldCreatedBy, field.TypeString)
	}
	if value, ok := eimu.mutation.UpdatedBy(); ok {
		_spec.SetField(entityintegrationmapping.FieldUpdatedBy, field.TypeString, value)
	}
	if eimu.mutation.UpdatedByCleared() {
		_spec.ClearField(entityintegrationmapping.FieldUpdatedBy, field.TypeString)
	}
	if eimu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(entityintegrationmapping.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := eimu.mutation.Metadata(); ok {
		_spec.SetField(entityintegrationmapping.FieldMetadata, field.TypeJSON, value)
	}
	if eimu.mutation.MetadataCleared() {
		_spec.ClearField(entityintegrationmapping.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eimu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entityintegrationmapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eimu.mutation.done = true
	return n, nil
}

// EntityIntegrationMappingUpdateOne is the builder for updating a single EntityIntegrationMapping entity.
type EntityIntegrationMappingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntityIntegrationMappingMutation
}

// SetStatus sets the "status" field.
func (eimuo *EntityIntegrationMappingUpdateOne) SetStatus(s string) *EntityIntegrationMappingUpdateOne {
	eimuo.mutation.SetStatus(s)
	return eimuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eimuo *EntityIntegrationMappingUpdateOne) SetNillableStatus(s *string) *EntityIntegrationMappingUpdateOne {
	if s != nil {
		eimuo.SetStatus(*s)
	}
	return eimuo
}

// SetUpdatedAt sets the "updated_at" field.
func (eimuo *EntityIntegrationMappingUpdateOne) SetUpdatedAt(t time.Time) *EntityIntegrationMappingUpdateOne {
	eimuo.mutation.SetUpdatedAt(t)
	return eimuo
}

// SetUpdatedBy sets the "updated_by" field.
func (eimuo *EntityIntegrationMappingUpdateOne) SetUpdatedBy(s string) *EntityIntegrationMappingUpdateOne {
	eimuo.mutation.SetUpdatedBy(s)
	return eimuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eimuo *EntityIntegrationMappingUpdateOne) SetNillableUpdatedBy(s *string) *EntityIntegrationMappingUpdateOne {
	if s != nil {
		eimuo.SetUpdatedBy(*s)
	}
	return eimuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (eimuo *EntityIntegrationMappingUpdateOne) ClearUpdatedBy() *EntityIntegrationMappingUpdateOne {
	eimuo.mutation.ClearUpdatedBy()
	return eimuo
}

// SetMetadata sets the "metadata" field.
func (eimuo *EntityIntegrationMappingUpdateOne) SetMetadata(m map[string]interface{}) *EntityIntegrationMappingUpdateOne {
	eimuo.mutation.SetMetadata(m)
	return eimuo
}

// ClearMetadata clears the value of the "metadata" field.
func (eimuo *EntityIntegrationMappingUpdateOne) ClearMetadata() *EntityIntegrationMappingUpdateOne {
	eimuo.mutation.ClearMetadata()
	return eimuo
}

// Mutation returns the EntityIntegrationMappingMutation object of the builder.
func (eimuo *EntityIntegrationMappingUpdateOne) Mutation() *EntityIntegrationMappingMutation {
	return eimuo.mutation
}

// Where appends a list predicates to the EntityIntegrationMappingUpdate builder.
func (eimuo *EntityIntegrationMappingUpdateOne) Where(ps ...predicate.EntityIntegrationMapping) *EntityIntegrationMappingUpdateOne {
	eimuo.mutation.Where(ps...)
	return eimuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eimuo *EntityIntegrationMappingUpdateOne) Select(field string, fields ...string) *EntityIntegrationMappingUpdateOne {
	eimuo.fields = append([]string{field}, fields...)
	return eimuo
}

// Save executes the query and returns the updated EntityIntegrationMapping entity.
func (eimuo *EntityIntegrationMappingUpdateOne) Save(ctx context.Context) (*EntityIntegrationMapping, error) {
	eimuo.defaults()
	return withHooks(ctx, eimuo.sqlSave, eimuo.mutation, eimuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eimuo *EntityIntegrationMappingUpdateOne) SaveX(ctx context.Context) *EntityIntegrationMapping {
	node, err := eimuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eimuo *EntityIntegrationMappingUpdateOne) Exec(ctx context.Context) error {
	_, err := eimuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eimuo *EntityIntegrationMappingUpdateOne) ExecX(ctx context.Context) {
	if err := eimuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eimuo *EntityIntegrationMappingUpdateOne) defaults() {
	if _, ok := eimuo.mutation.UpdatedAt(); !ok {
		v := entityintegrationmapping.UpdateDefaultUpdatedAt()
		eimuo.mutation.SetUpdatedAt(v)
	}
}

func (eimuo *EntityIntegrationMappingUpdateOne) sqlSave(ctx context.Context) (_node *EntityIntegrationMapping, err error) {
	_spec := sqlgraph.NewUpdateSpec(entityintegrationmapping.Table, entityintegrationmapping.Columns, sqlgraph.NewFieldSpec(entityintegrationmapping.FieldID, field.TypeString))
	id, ok := eimuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntityIntegrationMapping.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eimuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entityintegrationmapping.FieldID)
		for _, f := range fields {
			if !entityintegrationmapping.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entityintegrationmapping.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eimuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eimuo.mutation.Status(); ok {
		_spec.SetField(entityintegrationmapping.FieldStatus, field.TypeString, value)
	}
	if value, ok := eimuo.mutation.UpdatedAt(); ok {
		_spec.SetField(entityintegrationmapping.FieldUpdatedAt, field.TypeTime, value)
	}
	if eimuo.mutation.CreatedByCleared() {
		_spec.ClearField(entityintegrationmapping.FieldCreatedBy, field.TypeString)
	}
	if value, ok := eimuo.mutation.UpdatedBy(); ok {
		_spec.SetField(entityintegrationmapping.FieldUpdatedBy, field.TypeString, value)
	}
	if eimuo.mutation.UpdatedByCleared() {
		_spec.ClearField(entityintegrationmapping.FieldUpdatedBy, field.TypeString)
	}
	if eimuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(entityintegrationmapping.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := eimuo.mutation.Metadata(); ok {
		_spec.SetField(entityintegrationmapping.FieldMetadata, field.TypeJSON, value)
	}
	if eimuo.mutation.MetadataCleared() {
		_spec.ClearField(entityintegrationmapping.FieldMetadata, field.TypeJSON)
	}
	_node = &EntityIntegrationMapping{config: eimuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eimuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entityintegrationmapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eimuo.mutation.done = true
	return _node, nil
}
