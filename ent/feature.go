// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/feature"
)

// Feature is the model entity for the Feature schema.
type Feature struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// LookupKey holds the value of the "lookup_key" field.
	LookupKey string `json:"lookup_key,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// MeterID holds the value of the "meter_id" field.
	MeterID *string `json:"meter_id,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// UnitSingular holds the value of the "unit_singular" field.
	UnitSingular *string `json:"unit_singular,omitempty"`
	// UnitPlural holds the value of the "unit_plural" field.
	UnitPlural   *string `json:"unit_plural,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Feature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feature.FieldMetadata:
			values[i] = new([]byte)
		case feature.FieldID, feature.FieldTenantID, feature.FieldStatus, feature.FieldCreatedBy, feature.FieldUpdatedBy, feature.FieldLookupKey, feature.FieldName, feature.FieldDescription, feature.FieldType, feature.FieldMeterID, feature.FieldUnitSingular, feature.FieldUnitPlural:
			values[i] = new(sql.NullString)
		case feature.FieldCreatedAt, feature.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Feature fields.
func (f *Feature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feature.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				f.ID = value.String
			}
		case feature.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				f.TenantID = value.String
			}
		case feature.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				f.Status = value.String
			}
		case feature.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case feature.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case feature.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				f.CreatedBy = value.String
			}
		case feature.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				f.UpdatedBy = value.String
			}
		case feature.FieldLookupKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lookup_key", values[i])
			} else if value.Valid {
				f.LookupKey = value.String
			}
		case feature.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case feature.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				f.Description = new(string)
				*f.Description = value.String
			}
		case feature.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				f.Type = value.String
			}
		case feature.FieldMeterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meter_id", values[i])
			} else if value.Valid {
				f.MeterID = new(string)
				*f.MeterID = value.String
			}
		case feature.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &f.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case feature.FieldUnitSingular:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit_singular", values[i])
			} else if value.Valid {
				f.UnitSingular = new(string)
				*f.UnitSingular = value.String
			}
		case feature.FieldUnitPlural:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit_plural", values[i])
			} else if value.Valid {
				f.UnitPlural = new(string)
				*f.UnitPlural = value.String
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Feature.
// This includes values selected through modifiers, order, etc.
func (f *Feature) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// Update returns a builder for updating this Feature.
// Note that you need to call Feature.Unwrap() before calling this method if this Feature
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Feature) Update() *FeatureUpdateOne {
	return NewFeatureClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Feature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Feature) Unwrap() *Feature {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Feature is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Feature) String() string {
	var builder strings.Builder
	builder.WriteString("Feature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(f.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(f.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(f.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(f.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("lookup_key=")
	builder.WriteString(f.LookupKey)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	if v := f.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(f.Type)
	builder.WriteString(", ")
	if v := f.MeterID; v != nil {
		builder.WriteString("meter_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", f.Metadata))
	builder.WriteString(", ")
	if v := f.UnitSingular; v != nil {
		builder.WriteString("unit_singular=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := f.UnitPlural; v != nil {
		builder.WriteString("unit_plural=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Features is a parsable slice of Feature.
type Features []*Feature
