// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/integrationentity"
	"github.com/flexprice/flexprice/ent/schema"
	"github.com/flexprice/flexprice/internal/types"
)

// IntegrationEntity is the model entity for the IntegrationEntity schema.
type IntegrationEntity struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// Type of entity being connected (e.g., customer, payment)
	EntityType types.EntityType `json:"entity_type,omitempty"`
	// ID of the FlexPrice entity
	EntityID string `json:"entity_id,omitempty"`
	// Type of external provider (e.g., stripe, razorpay)
	ProviderType types.SecretProvider `json:"provider_type,omitempty"`
	// ID of the entity in the external system
	ProviderID string `json:"provider_id,omitempty"`
	// Synchronization status (pending, synced, failed)
	SyncStatus types.SyncStatus `json:"sync_status,omitempty"`
	// Timestamp of the last successful sync
	LastSyncedAt time.Time `json:"last_synced_at,omitempty"`
	// Message from the last sync error
	LastErrorMsg string `json:"last_error_msg,omitempty"`
	// History of sync events
	SyncHistory []schema.SyncEvent `json:"sync_history,omitempty"`
	// Additional metadata for the connection
	Metadata     map[string]string `json:"metadata,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IntegrationEntity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case integrationentity.FieldSyncHistory, integrationentity.FieldMetadata:
			values[i] = new([]byte)
		case integrationentity.FieldID, integrationentity.FieldTenantID, integrationentity.FieldStatus, integrationentity.FieldCreatedBy, integrationentity.FieldUpdatedBy, integrationentity.FieldEnvironmentID, integrationentity.FieldEntityType, integrationentity.FieldEntityID, integrationentity.FieldProviderType, integrationentity.FieldProviderID, integrationentity.FieldSyncStatus, integrationentity.FieldLastErrorMsg:
			values[i] = new(sql.NullString)
		case integrationentity.FieldCreatedAt, integrationentity.FieldUpdatedAt, integrationentity.FieldLastSyncedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IntegrationEntity fields.
func (ie *IntegrationEntity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case integrationentity.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ie.ID = value.String
			}
		case integrationentity.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ie.TenantID = value.String
			}
		case integrationentity.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ie.Status = value.String
			}
		case integrationentity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ie.CreatedAt = value.Time
			}
		case integrationentity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ie.UpdatedAt = value.Time
			}
		case integrationentity.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ie.CreatedBy = value.String
			}
		case integrationentity.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ie.UpdatedBy = value.String
			}
		case integrationentity.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				ie.EnvironmentID = value.String
			}
		case integrationentity.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				ie.EntityType = types.EntityType(value.String)
			}
		case integrationentity.FieldEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				ie.EntityID = value.String
			}
		case integrationentity.FieldProviderType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_type", values[i])
			} else if value.Valid {
				ie.ProviderType = types.SecretProvider(value.String)
			}
		case integrationentity.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				ie.ProviderID = value.String
			}
		case integrationentity.FieldSyncStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sync_status", values[i])
			} else if value.Valid {
				ie.SyncStatus = types.SyncStatus(value.String)
			}
		case integrationentity.FieldLastSyncedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_synced_at", values[i])
			} else if value.Valid {
				ie.LastSyncedAt = value.Time
			}
		case integrationentity.FieldLastErrorMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_error_msg", values[i])
			} else if value.Valid {
				ie.LastErrorMsg = value.String
			}
		case integrationentity.FieldSyncHistory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sync_history", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ie.SyncHistory); err != nil {
					return fmt.Errorf("unmarshal field sync_history: %w", err)
				}
			}
		case integrationentity.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ie.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			ie.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IntegrationEntity.
// This includes values selected through modifiers, order, etc.
func (ie *IntegrationEntity) Value(name string) (ent.Value, error) {
	return ie.selectValues.Get(name)
}

// Update returns a builder for updating this IntegrationEntity.
// Note that you need to call IntegrationEntity.Unwrap() before calling this method if this IntegrationEntity
// was returned from a transaction, and the transaction was committed or rolled back.
func (ie *IntegrationEntity) Update() *IntegrationEntityUpdateOne {
	return NewIntegrationEntityClient(ie.config).UpdateOne(ie)
}

// Unwrap unwraps the IntegrationEntity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ie *IntegrationEntity) Unwrap() *IntegrationEntity {
	_tx, ok := ie.config.driver.(*txDriver)
	if !ok {
		panic("ent: IntegrationEntity is not a transactional entity")
	}
	ie.config.driver = _tx.drv
	return ie
}

// String implements the fmt.Stringer.
func (ie *IntegrationEntity) String() string {
	var builder strings.Builder
	builder.WriteString("IntegrationEntity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ie.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(ie.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ie.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ie.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ie.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ie.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ie.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(ie.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(fmt.Sprintf("%v", ie.EntityType))
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(ie.EntityID)
	builder.WriteString(", ")
	builder.WriteString("provider_type=")
	builder.WriteString(fmt.Sprintf("%v", ie.ProviderType))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(ie.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("sync_status=")
	builder.WriteString(fmt.Sprintf("%v", ie.SyncStatus))
	builder.WriteString(", ")
	builder.WriteString("last_synced_at=")
	builder.WriteString(ie.LastSyncedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_error_msg=")
	builder.WriteString(ie.LastErrorMsg)
	builder.WriteString(", ")
	builder.WriteString("sync_history=")
	builder.WriteString(fmt.Sprintf("%v", ie.SyncHistory))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", ie.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// IntegrationEntities is a parsable slice of IntegrationEntity.
type IntegrationEntities []*IntegrationEntity
