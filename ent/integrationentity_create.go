// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/integrationentity"
	"github.com/flexprice/flexprice/ent/schema"
	"github.com/flexprice/flexprice/internal/types"
)

// IntegrationEntityCreate is the builder for creating a IntegrationEntity entity.
type IntegrationEntityCreate struct {
	config
	mutation *IntegrationEntityMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (iec *IntegrationEntityCreate) SetTenantID(s string) *IntegrationEntityCreate {
	iec.mutation.SetTenantID(s)
	return iec
}

// SetStatus sets the "status" field.
func (iec *IntegrationEntityCreate) SetStatus(s string) *IntegrationEntityCreate {
	iec.mutation.SetStatus(s)
	return iec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iec *IntegrationEntityCreate) SetNillableStatus(s *string) *IntegrationEntityCreate {
	if s != nil {
		iec.SetStatus(*s)
	}
	return iec
}

// SetCreatedAt sets the "created_at" field.
func (iec *IntegrationEntityCreate) SetCreatedAt(t time.Time) *IntegrationEntityCreate {
	iec.mutation.SetCreatedAt(t)
	return iec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iec *IntegrationEntityCreate) SetNillableCreatedAt(t *time.Time) *IntegrationEntityCreate {
	if t != nil {
		iec.SetCreatedAt(*t)
	}
	return iec
}

// SetUpdatedAt sets the "updated_at" field.
func (iec *IntegrationEntityCreate) SetUpdatedAt(t time.Time) *IntegrationEntityCreate {
	iec.mutation.SetUpdatedAt(t)
	return iec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iec *IntegrationEntityCreate) SetNillableUpdatedAt(t *time.Time) *IntegrationEntityCreate {
	if t != nil {
		iec.SetUpdatedAt(*t)
	}
	return iec
}

// SetCreatedBy sets the "created_by" field.
func (iec *IntegrationEntityCreate) SetCreatedBy(s string) *IntegrationEntityCreate {
	iec.mutation.SetCreatedBy(s)
	return iec
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (iec *IntegrationEntityCreate) SetNillableCreatedBy(s *string) *IntegrationEntityCreate {
	if s != nil {
		iec.SetCreatedBy(*s)
	}
	return iec
}

// SetUpdatedBy sets the "updated_by" field.
func (iec *IntegrationEntityCreate) SetUpdatedBy(s string) *IntegrationEntityCreate {
	iec.mutation.SetUpdatedBy(s)
	return iec
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iec *IntegrationEntityCreate) SetNillableUpdatedBy(s *string) *IntegrationEntityCreate {
	if s != nil {
		iec.SetUpdatedBy(*s)
	}
	return iec
}

// SetEnvironmentID sets the "environment_id" field.
func (iec *IntegrationEntityCreate) SetEnvironmentID(s string) *IntegrationEntityCreate {
	iec.mutation.SetEnvironmentID(s)
	return iec
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (iec *IntegrationEntityCreate) SetNillableEnvironmentID(s *string) *IntegrationEntityCreate {
	if s != nil {
		iec.SetEnvironmentID(*s)
	}
	return iec
}

// SetEntityType sets the "entity_type" field.
func (iec *IntegrationEntityCreate) SetEntityType(tt types.EntityType) *IntegrationEntityCreate {
	iec.mutation.SetEntityType(tt)
	return iec
}

// SetEntityID sets the "entity_id" field.
func (iec *IntegrationEntityCreate) SetEntityID(s string) *IntegrationEntityCreate {
	iec.mutation.SetEntityID(s)
	return iec
}

// SetProviderType sets the "provider_type" field.
func (iec *IntegrationEntityCreate) SetProviderType(tp types.SecretProvider) *IntegrationEntityCreate {
	iec.mutation.SetProviderType(tp)
	return iec
}

// SetProviderID sets the "provider_id" field.
func (iec *IntegrationEntityCreate) SetProviderID(s string) *IntegrationEntityCreate {
	iec.mutation.SetProviderID(s)
	return iec
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (iec *IntegrationEntityCreate) SetNillableProviderID(s *string) *IntegrationEntityCreate {
	if s != nil {
		iec.SetProviderID(*s)
	}
	return iec
}

// SetSyncStatus sets the "sync_status" field.
func (iec *IntegrationEntityCreate) SetSyncStatus(ts types.SyncStatus) *IntegrationEntityCreate {
	iec.mutation.SetSyncStatus(ts)
	return iec
}

// SetNillableSyncStatus sets the "sync_status" field if the given value is not nil.
func (iec *IntegrationEntityCreate) SetNillableSyncStatus(ts *types.SyncStatus) *IntegrationEntityCreate {
	if ts != nil {
		iec.SetSyncStatus(*ts)
	}
	return iec
}

// SetLastSyncedAt sets the "last_synced_at" field.
func (iec *IntegrationEntityCreate) SetLastSyncedAt(t time.Time) *IntegrationEntityCreate {
	iec.mutation.SetLastSyncedAt(t)
	return iec
}

// SetNillableLastSyncedAt sets the "last_synced_at" field if the given value is not nil.
func (iec *IntegrationEntityCreate) SetNillableLastSyncedAt(t *time.Time) *IntegrationEntityCreate {
	if t != nil {
		iec.SetLastSyncedAt(*t)
	}
	return iec
}

// SetLastErrorMsg sets the "last_error_msg" field.
func (iec *IntegrationEntityCreate) SetLastErrorMsg(s string) *IntegrationEntityCreate {
	iec.mutation.SetLastErrorMsg(s)
	return iec
}

// SetNillableLastErrorMsg sets the "last_error_msg" field if the given value is not nil.
func (iec *IntegrationEntityCreate) SetNillableLastErrorMsg(s *string) *IntegrationEntityCreate {
	if s != nil {
		iec.SetLastErrorMsg(*s)
	}
	return iec
}

// SetSyncHistory sets the "sync_history" field.
func (iec *IntegrationEntityCreate) SetSyncHistory(se []schema.SyncEvent) *IntegrationEntityCreate {
	iec.mutation.SetSyncHistory(se)
	return iec
}

// SetMetadata sets the "metadata" field.
func (iec *IntegrationEntityCreate) SetMetadata(m map[string]string) *IntegrationEntityCreate {
	iec.mutation.SetMetadata(m)
	return iec
}

// SetID sets the "id" field.
func (iec *IntegrationEntityCreate) SetID(s string) *IntegrationEntityCreate {
	iec.mutation.SetID(s)
	return iec
}

// Mutation returns the IntegrationEntityMutation object of the builder.
func (iec *IntegrationEntityCreate) Mutation() *IntegrationEntityMutation {
	return iec.mutation
}

// Save creates the IntegrationEntity in the database.
func (iec *IntegrationEntityCreate) Save(ctx context.Context) (*IntegrationEntity, error) {
	iec.defaults()
	return withHooks(ctx, iec.sqlSave, iec.mutation, iec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iec *IntegrationEntityCreate) SaveX(ctx context.Context) *IntegrationEntity {
	v, err := iec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iec *IntegrationEntityCreate) Exec(ctx context.Context) error {
	_, err := iec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iec *IntegrationEntityCreate) ExecX(ctx context.Context) {
	if err := iec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iec *IntegrationEntityCreate) defaults() {
	if _, ok := iec.mutation.Status(); !ok {
		v := integrationentity.DefaultStatus
		iec.mutation.SetStatus(v)
	}
	if _, ok := iec.mutation.CreatedAt(); !ok {
		v := integrationentity.DefaultCreatedAt()
		iec.mutation.SetCreatedAt(v)
	}
	if _, ok := iec.mutation.UpdatedAt(); !ok {
		v := integrationentity.DefaultUpdatedAt()
		iec.mutation.SetUpdatedAt(v)
	}
	if _, ok := iec.mutation.EnvironmentID(); !ok {
		v := integrationentity.DefaultEnvironmentID
		iec.mutation.SetEnvironmentID(v)
	}
	if _, ok := iec.mutation.SyncStatus(); !ok {
		v := integrationentity.DefaultSyncStatus
		iec.mutation.SetSyncStatus(v)
	}
	if _, ok := iec.mutation.SyncHistory(); !ok {
		v := integrationentity.DefaultSyncHistory
		iec.mutation.SetSyncHistory(v)
	}
	if _, ok := iec.mutation.Metadata(); !ok {
		v := integrationentity.DefaultMetadata
		iec.mutation.SetMetadata(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iec *IntegrationEntityCreate) check() error {
	if _, ok := iec.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "IntegrationEntity.tenant_id"`)}
	}
	if v, ok := iec.mutation.TenantID(); ok {
		if err := integrationentity.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "IntegrationEntity.tenant_id": %w`, err)}
		}
	}
	if _, ok := iec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "IntegrationEntity.status"`)}
	}
	if _, ok := iec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IntegrationEntity.created_at"`)}
	}
	if _, ok := iec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IntegrationEntity.updated_at"`)}
	}
	if _, ok := iec.mutation.EntityType(); !ok {
		return &ValidationError{Name: "entity_type", err: errors.New(`ent: missing required field "IntegrationEntity.entity_type"`)}
	}
	if v, ok := iec.mutation.EntityType(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "IntegrationEntity.entity_type": %w`, err)}
		}
	}
	if _, ok := iec.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "IntegrationEntity.entity_id"`)}
	}
	if _, ok := iec.mutation.ProviderType(); !ok {
		return &ValidationError{Name: "provider_type", err: errors.New(`ent: missing required field "IntegrationEntity.provider_type"`)}
	}
	if v, ok := iec.mutation.ProviderType(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "IntegrationEntity.provider_type": %w`, err)}
		}
	}
	if _, ok := iec.mutation.SyncStatus(); !ok {
		return &ValidationError{Name: "sync_status", err: errors.New(`ent: missing required field "IntegrationEntity.sync_status"`)}
	}
	if _, ok := iec.mutation.SyncHistory(); !ok {
		return &ValidationError{Name: "sync_history", err: errors.New(`ent: missing required field "IntegrationEntity.sync_history"`)}
	}
	if _, ok := iec.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`ent: missing required field "IntegrationEntity.metadata"`)}
	}
	return nil
}

func (iec *IntegrationEntityCreate) sqlSave(ctx context.Context) (*IntegrationEntity, error) {
	if err := iec.check(); err != nil {
		return nil, err
	}
	_node, _spec := iec.createSpec()
	if err := sqlgraph.CreateNode(ctx, iec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected IntegrationEntity.ID type: %T", _spec.ID.Value)
		}
	}
	iec.mutation.id = &_node.ID
	iec.mutation.done = true
	return _node, nil
}

func (iec *IntegrationEntityCreate) createSpec() (*IntegrationEntity, *sqlgraph.CreateSpec) {
	var (
		_node = &IntegrationEntity{config: iec.config}
		_spec = sqlgraph.NewCreateSpec(integrationentity.Table, sqlgraph.NewFieldSpec(integrationentity.FieldID, field.TypeString))
	)
	if id, ok := iec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := iec.mutation.TenantID(); ok {
		_spec.SetField(integrationentity.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := iec.mutation.Status(); ok {
		_spec.SetField(integrationentity.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := iec.mutation.CreatedAt(); ok {
		_spec.SetField(integrationentity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := iec.mutation.UpdatedAt(); ok {
		_spec.SetField(integrationentity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := iec.mutation.CreatedBy(); ok {
		_spec.SetField(integrationentity.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := iec.mutation.UpdatedBy(); ok {
		_spec.SetField(integrationentity.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := iec.mutation.EnvironmentID(); ok {
		_spec.SetField(integrationentity.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := iec.mutation.EntityType(); ok {
		_spec.SetField(integrationentity.FieldEntityType, field.TypeString, value)
		_node.EntityType = value
	}
	if value, ok := iec.mutation.EntityID(); ok {
		_spec.SetField(integrationentity.FieldEntityID, field.TypeString, value)
		_node.EntityID = value
	}
	if value, ok := iec.mutation.ProviderType(); ok {
		_spec.SetField(integrationentity.FieldProviderType, field.TypeString, value)
		_node.ProviderType = value
	}
	if value, ok := iec.mutation.ProviderID(); ok {
		_spec.SetField(integrationentity.FieldProviderID, field.TypeString, value)
		_node.ProviderID = value
	}
	if value, ok := iec.mutation.SyncStatus(); ok {
		_spec.SetField(integrationentity.FieldSyncStatus, field.TypeString, value)
		_node.SyncStatus = value
	}
	if value, ok := iec.mutation.LastSyncedAt(); ok {
		_spec.SetField(integrationentity.FieldLastSyncedAt, field.TypeTime, value)
		_node.LastSyncedAt = value
	}
	if value, ok := iec.mutation.LastErrorMsg(); ok {
		_spec.SetField(integrationentity.FieldLastErrorMsg, field.TypeString, value)
		_node.LastErrorMsg = value
	}
	if value, ok := iec.mutation.SyncHistory(); ok {
		_spec.SetField(integrationentity.FieldSyncHistory, field.TypeJSON, value)
		_node.SyncHistory = value
	}
	if value, ok := iec.mutation.Metadata(); ok {
		_spec.SetField(integrationentity.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// IntegrationEntityCreateBulk is the builder for creating many IntegrationEntity entities in bulk.
type IntegrationEntityCreateBulk struct {
	config
	err      error
	builders []*IntegrationEntityCreate
}

// Save creates the IntegrationEntity entities in the database.
func (iecb *IntegrationEntityCreateBulk) Save(ctx context.Context) ([]*IntegrationEntity, error) {
	if iecb.err != nil {
		return nil, iecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iecb.builders))
	nodes := make([]*IntegrationEntity, len(iecb.builders))
	mutators := make([]Mutator, len(iecb.builders))
	for i := range iecb.builders {
		func(i int, root context.Context) {
			builder := iecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IntegrationEntityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iecb *IntegrationEntityCreateBulk) SaveX(ctx context.Context) []*IntegrationEntity {
	v, err := iecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iecb *IntegrationEntityCreateBulk) Exec(ctx context.Context) error {
	_, err := iecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iecb *IntegrationEntityCreateBulk) ExecX(ctx context.Context) {
	if err := iecb.Exec(ctx); err != nil {
		panic(err)
	}
}
