// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/invoicesequence"
)

// InvoiceSequence is the model entity for the InvoiceSequence schema.
type InvoiceSequence struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// YearMonth holds the value of the "year_month" field.
	YearMonth string `json:"year_month,omitempty"`
	// LastValue holds the value of the "last_value" field.
	LastValue int64 `json:"last_value,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InvoiceSequence) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invoicesequence.FieldID, invoicesequence.FieldLastValue:
			values[i] = new(sql.NullInt64)
		case invoicesequence.FieldTenantID, invoicesequence.FieldYearMonth:
			values[i] = new(sql.NullString)
		case invoicesequence.FieldCreatedAt, invoicesequence.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InvoiceSequence fields.
func (is *InvoiceSequence) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case invoicesequence.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			is.ID = int(value.Int64)
		case invoicesequence.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				is.TenantID = value.String
			}
		case invoicesequence.FieldYearMonth:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field year_month", values[i])
			} else if value.Valid {
				is.YearMonth = value.String
			}
		case invoicesequence.FieldLastValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_value", values[i])
			} else if value.Valid {
				is.LastValue = value.Int64
			}
		case invoicesequence.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				is.CreatedAt = value.Time
			}
		case invoicesequence.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				is.UpdatedAt = value.Time
			}
		default:
			is.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InvoiceSequence.
// This includes values selected through modifiers, order, etc.
func (is *InvoiceSequence) Value(name string) (ent.Value, error) {
	return is.selectValues.Get(name)
}

// Update returns a builder for updating this InvoiceSequence.
// Note that you need to call InvoiceSequence.Unwrap() before calling this method if this InvoiceSequence
// was returned from a transaction, and the transaction was committed or rolled back.
func (is *InvoiceSequence) Update() *InvoiceSequenceUpdateOne {
	return NewInvoiceSequenceClient(is.config).UpdateOne(is)
}

// Unwrap unwraps the InvoiceSequence entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (is *InvoiceSequence) Unwrap() *InvoiceSequence {
	_tx, ok := is.config.driver.(*txDriver)
	if !ok {
		panic("ent: InvoiceSequence is not a transactional entity")
	}
	is.config.driver = _tx.drv
	return is
}

// String implements the fmt.Stringer.
func (is *InvoiceSequence) String() string {
	var builder strings.Builder
	builder.WriteString("InvoiceSequence(")
	builder.WriteString(fmt.Sprintf("id=%v, ", is.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(is.TenantID)
	builder.WriteString(", ")
	builder.WriteString("year_month=")
	builder.WriteString(is.YearMonth)
	builder.WriteString(", ")
	builder.WriteString("last_value=")
	builder.WriteString(fmt.Sprintf("%v", is.LastValue))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(is.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(is.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// InvoiceSequences is a parsable slice of InvoiceSequence.
type InvoiceSequences []*InvoiceSequence
