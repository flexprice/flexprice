// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/meterprovidermapping"
)

// MeterProviderMapping is the model entity for the MeterProviderMapping schema.
type MeterProviderMapping struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// MeterID holds the value of the "meter_id" field.
	MeterID string `json:"meter_id,omitempty"`
	// ProviderType holds the value of the "provider_type" field.
	ProviderType string `json:"provider_type,omitempty"`
	// ProviderMeterID holds the value of the "provider_meter_id" field.
	ProviderMeterID string `json:"provider_meter_id,omitempty"`
	// SyncEnabled holds the value of the "sync_enabled" field.
	SyncEnabled bool `json:"sync_enabled,omitempty"`
	// Configuration holds the value of the "configuration" field.
	Configuration map[string]interface{} `json:"configuration,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MeterProviderMapping) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case meterprovidermapping.FieldConfiguration:
			values[i] = new([]byte)
		case meterprovidermapping.FieldSyncEnabled:
			values[i] = new(sql.NullBool)
		case meterprovidermapping.FieldID, meterprovidermapping.FieldTenantID, meterprovidermapping.FieldStatus, meterprovidermapping.FieldCreatedBy, meterprovidermapping.FieldUpdatedBy, meterprovidermapping.FieldEnvironmentID, meterprovidermapping.FieldMeterID, meterprovidermapping.FieldProviderType, meterprovidermapping.FieldProviderMeterID:
			values[i] = new(sql.NullString)
		case meterprovidermapping.FieldCreatedAt, meterprovidermapping.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MeterProviderMapping fields.
func (mpm *MeterProviderMapping) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case meterprovidermapping.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				mpm.ID = value.String
			}
		case meterprovidermapping.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				mpm.TenantID = value.String
			}
		case meterprovidermapping.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mpm.Status = value.String
			}
		case meterprovidermapping.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mpm.CreatedAt = value.Time
			}
		case meterprovidermapping.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mpm.UpdatedAt = value.Time
			}
		case meterprovidermapping.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				mpm.CreatedBy = value.String
			}
		case meterprovidermapping.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mpm.UpdatedBy = value.String
			}
		case meterprovidermapping.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				mpm.EnvironmentID = value.String
			}
		case meterprovidermapping.FieldMeterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meter_id", values[i])
			} else if value.Valid {
				mpm.MeterID = value.String
			}
		case meterprovidermapping.FieldProviderType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_type", values[i])
			} else if value.Valid {
				mpm.ProviderType = value.String
			}
		case meterprovidermapping.FieldProviderMeterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_meter_id", values[i])
			} else if value.Valid {
				mpm.ProviderMeterID = value.String
			}
		case meterprovidermapping.FieldSyncEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sync_enabled", values[i])
			} else if value.Valid {
				mpm.SyncEnabled = value.Bool
			}
		case meterprovidermapping.FieldConfiguration:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field configuration", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &mpm.Configuration); err != nil {
					return fmt.Errorf("unmarshal field configuration: %w", err)
				}
			}
		default:
			mpm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MeterProviderMapping.
// This includes values selected through modifiers, order, etc.
func (mpm *MeterProviderMapping) Value(name string) (ent.Value, error) {
	return mpm.selectValues.Get(name)
}

// Update returns a builder for updating this MeterProviderMapping.
// Note that you need to call MeterProviderMapping.Unwrap() before calling this method if this MeterProviderMapping
// was returned from a transaction, and the transaction was committed or rolled back.
func (mpm *MeterProviderMapping) Update() *MeterProviderMappingUpdateOne {
	return NewMeterProviderMappingClient(mpm.config).UpdateOne(mpm)
}

// Unwrap unwraps the MeterProviderMapping entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mpm *MeterProviderMapping) Unwrap() *MeterProviderMapping {
	_tx, ok := mpm.config.driver.(*txDriver)
	if !ok {
		panic("ent: MeterProviderMapping is not a transactional entity")
	}
	mpm.config.driver = _tx.drv
	return mpm
}

// String implements the fmt.Stringer.
func (mpm *MeterProviderMapping) String() string {
	var builder strings.Builder
	builder.WriteString("MeterProviderMapping(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mpm.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(mpm.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(mpm.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mpm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mpm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(mpm.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(mpm.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(mpm.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("meter_id=")
	builder.WriteString(mpm.MeterID)
	builder.WriteString(", ")
	builder.WriteString("provider_type=")
	builder.WriteString(mpm.ProviderType)
	builder.WriteString(", ")
	builder.WriteString("provider_meter_id=")
	builder.WriteString(mpm.ProviderMeterID)
	builder.WriteString(", ")
	builder.WriteString("sync_enabled=")
	builder.WriteString(fmt.Sprintf("%v", mpm.SyncEnabled))
	builder.WriteString(", ")
	builder.WriteString("configuration=")
	builder.WriteString(fmt.Sprintf("%v", mpm.Configuration))
	builder.WriteByte(')')
	return builder.String()
}

// MeterProviderMappings is a parsable slice of MeterProviderMapping.
type MeterProviderMappings []*MeterProviderMapping
