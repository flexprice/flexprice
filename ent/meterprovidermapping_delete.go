// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/meterprovidermapping"
	"github.com/flexprice/flexprice/ent/predicate"
)

// MeterProviderMappingDelete is the builder for deleting a MeterProviderMapping entity.
type MeterProviderMappingDelete struct {
	config
	hooks    []Hook
	mutation *MeterProviderMappingMutation
}

// Where appends a list predicates to the MeterProviderMappingDelete builder.
func (mpmd *MeterProviderMappingDelete) Where(ps ...predicate.MeterProviderMapping) *MeterProviderMappingDelete {
	mpmd.mutation.Where(ps...)
	return mpmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mpmd *MeterProviderMappingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mpmd.sqlExec, mpmd.mutation, mpmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mpmd *MeterProviderMappingDelete) ExecX(ctx context.Context) int {
	n, err := mpmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mpmd *MeterProviderMappingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(meterprovidermapping.Table, sqlgraph.NewFieldSpec(meterprovidermapping.FieldID, field.TypeString))
	if ps := mpmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mpmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mpmd.mutation.done = true
	return affected, err
}

// MeterProviderMappingDeleteOne is the builder for deleting a single MeterProviderMapping entity.
type MeterProviderMappingDeleteOne struct {
	mpmd *MeterProviderMappingDelete
}

// Where appends a list predicates to the MeterProviderMappingDelete builder.
func (mpmdo *MeterProviderMappingDeleteOne) Where(ps ...predicate.MeterProviderMapping) *MeterProviderMappingDeleteOne {
	mpmdo.mpmd.mutation.Where(ps...)
	return mpmdo
}

// Exec executes the deletion query.
func (mpmdo *MeterProviderMappingDeleteOne) Exec(ctx context.Context) error {
	n, err := mpmdo.mpmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{meterprovidermapping.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mpmdo *MeterProviderMappingDeleteOne) ExecX(ctx context.Context) {
	if err := mpmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
