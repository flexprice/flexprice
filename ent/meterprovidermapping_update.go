// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/meterprovidermapping"
	"github.com/flexprice/flexprice/ent/predicate"
)

// MeterProviderMappingUpdate is the builder for updating MeterProviderMapping entities.
type MeterProviderMappingUpdate struct {
	config
	hooks    []Hook
	mutation *MeterProviderMappingMutation
}

// Where appends a list predicates to the MeterProviderMappingUpdate builder.
func (mpmu *MeterProviderMappingUpdate) Where(ps ...predicate.MeterProviderMapping) *MeterProviderMappingUpdate {
	mpmu.mutation.Where(ps...)
	return mpmu
}

// SetStatus sets the "status" field.
func (mpmu *MeterProviderMappingUpdate) SetStatus(s string) *MeterProviderMappingUpdate {
	mpmu.mutation.SetStatus(s)
	return mpmu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpmu *MeterProviderMappingUpdate) SetNillableStatus(s *string) *MeterProviderMappingUpdate {
	if s != nil {
		mpmu.SetStatus(*s)
	}
	return mpmu
}

// SetUpdatedAt sets the "updated_at" field.
func (mpmu *MeterProviderMappingUpdate) SetUpdatedAt(t time.Time) *MeterProviderMappingUpdate {
	mpmu.mutation.SetUpdatedAt(t)
	return mpmu
}

// SetUpdatedBy sets the "updated_by" field.
func (mpmu *MeterProviderMappingUpdate) SetUpdatedBy(s string) *MeterProviderMappingUpdate {
	mpmu.mutation.SetUpdatedBy(s)
	return mpmu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mpmu *MeterProviderMappingUpdate) SetNillableUpdatedBy(s *string) *MeterProviderMappingUpdate {
	if s != nil {
		mpmu.SetUpdatedBy(*s)
	}
	return mpmu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mpmu *MeterProviderMappingUpdate) ClearUpdatedBy() *MeterProviderMappingUpdate {
	mpmu.mutation.ClearUpdatedBy()
	return mpmu
}

// SetSyncEnabled sets the "sync_enabled" field.
func (mpmu *MeterProviderMappingUpdate) SetSyncEnabled(b bool) *MeterProviderMappingUpdate {
	mpmu.mutation.SetSyncEnabled(b)
	return mpmu
}

// SetNillableSyncEnabled sets the "sync_enabled" field if the given value is not nil.
func (mpmu *MeterProviderMappingUpdate) SetNillableSyncEnabled(b *bool) *MeterProviderMappingUpdate {
	if b != nil {
		mpmu.SetSyncEnabled(*b)
	}
	return mpmu
}

// SetConfiguration sets the "configuration" field.
func (mpmu *MeterProviderMappingUpdate) SetConfiguration(m map[string]interface{}) *MeterProviderMappingUpdate {
	mpmu.mutation.SetConfiguration(m)
	return mpmu
}

// ClearConfiguration clears the value of the "configuration" field.
func (mpmu *MeterProviderMappingUpdate) ClearConfiguration() *MeterProviderMappingUpdate {
	mpmu.mutation.ClearConfiguration()
	return mpmu
}

// Mutation returns the MeterProviderMappingMutation object of the builder.
func (mpmu *MeterProviderMappingUpdate) Mutation() *MeterProviderMappingMutation {
	return mpmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpmu *MeterProviderMappingUpdate) Save(ctx context.Context) (int, error) {
	mpmu.defaults()
	return withHooks(ctx, mpmu.sqlSave, mpmu.mutation, mpmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpmu *MeterProviderMappingUpdate) SaveX(ctx context.Context) int {
	affected, err := mpmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpmu *MeterProviderMappingUpdate) Exec(ctx context.Context) error {
	_, err := mpmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpmu *MeterProviderMappingUpdate) ExecX(ctx context.Context) {
	if err := mpmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpmu *MeterProviderMappingUpdate) defaults() {
	if _, ok := mpmu.mutation.UpdatedAt(); !ok {
		v := meterprovidermapping.UpdateDefaultUpdatedAt()
		mpmu.mutation.SetUpdatedAt(v)
	}
}

func (mpmu *MeterProviderMappingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(meterprovidermapping.Table, meterprovidermapping.Columns, sqlgraph.NewFieldSpec(meterprovidermapping.FieldID, field.TypeString))
	if ps := mpmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpmu.mutation.Status(); ok {
		_spec.SetField(meterprovidermapping.FieldStatus, field.TypeString, value)
	}
	if value, ok := mpmu.mutation.UpdatedAt(); ok {
		_spec.SetField(meterprovidermapping.FieldUpdatedAt, field.TypeTime, value)
	}
	if mpmu.mutation.CreatedByCleared() {
		_spec.ClearField(meterprovidermapping.FieldCreatedBy, field.TypeString)
	}
	if value, ok := mpmu.mutation.UpdatedBy(); ok {
		_spec.SetField(meterprovidermapping.FieldUpdatedBy, field.TypeString, value)
	}
	if mpmu.mutation.UpdatedByCleared() {
		_spec.ClearField(meterprovidermapping.FieldUpdatedBy, field.TypeString)
	}
	if mpmu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(meterprovidermapping.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := mpmu.mutation.SyncEnabled(); ok {
		_spec.SetField(meterprovidermapping.FieldSyncEnabled, field.TypeBool, value)
	}
	if value, ok := mpmu.mutation.Configuration(); ok {
		_spec.SetField(meterprovidermapping.FieldConfiguration, field.TypeJSON, value)
	}
	if mpmu.mutation.ConfigurationCleared() {
		_spec.ClearField(meterprovidermapping.FieldConfiguration, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meterprovidermapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpmu.mutation.done = true
	return n, nil
}

// MeterProviderMappingUpdateOne is the builder for updating a single MeterProviderMapping entity.
type MeterProviderMappingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MeterProviderMappingMutation
}

// SetStatus sets the "status" field.
func (mpmuo *MeterProviderMappingUpdateOne) SetStatus(s string) *MeterProviderMappingUpdateOne {
	mpmuo.mutation.SetStatus(s)
	return mpmuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpmuo *MeterProviderMappingUpdateOne) SetNillableStatus(s *string) *MeterProviderMappingUpdateOne {
	if s != nil {
		mpmuo.SetStatus(*s)
	}
	return mpmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mpmuo *MeterProviderMappingUpdateOne) SetUpdatedAt(t time.Time) *MeterProviderMappingUpdateOne {
	mpmuo.mutation.SetUpdatedAt(t)
	return mpmuo
}

// SetUpdatedBy sets the "updated_by" field.
func (mpmuo *MeterProviderMappingUpdateOne) SetUpdatedBy(s string) *MeterProviderMappingUpdateOne {
	mpmuo.mutation.SetUpdatedBy(s)
	return mpmuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mpmuo *MeterProviderMappingUpdateOne) SetNillableUpdatedBy(s *string) *MeterProviderMappingUpdateOne {
	if s != nil {
		mpmuo.SetUpdatedBy(*s)
	}
	return mpmuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mpmuo *MeterProviderMappingUpdateOne) ClearUpdatedBy() *MeterProviderMappingUpdateOne {
	mpmuo.mutation.ClearUpdatedBy()
	return mpmuo
}

// SetSyncEnabled sets the "sync_enabled" field.
func (mpmuo *MeterProviderMappingUpdateOne) SetSyncEnabled(b bool) *MeterProviderMappingUpdateOne {
	mpmuo.mutation.SetSyncEnabled(b)
	return mpmuo
}

// SetNillableSyncEnabled sets the "sync_enabled" field if the given value is not nil.
func (mpmuo *MeterProviderMappingUpdateOne) SetNillableSyncEnabled(b *bool) *MeterProviderMappingUpdateOne {
	if b != nil {
		mpmuo.SetSyncEnabled(*b)
	}
	return mpmuo
}

// SetConfiguration sets the "configuration" field.
func (mpmuo *MeterProviderMappingUpdateOne) SetConfiguration(m map[string]interface{}) *MeterProviderMappingUpdateOne {
	mpmuo.mutation.SetConfiguration(m)
	return mpmuo
}

// ClearConfiguration clears the value of the "configuration" field.
func (mpmuo *MeterProviderMappingUpdateOne) ClearConfiguration() *MeterProviderMappingUpdateOne {
	mpmuo.mutation.ClearConfiguration()
	return mpmuo
}

// Mutation returns the MeterProviderMappingMutation object of the builder.
func (mpmuo *MeterProviderMappingUpdateOne) Mutation() *MeterProviderMappingMutation {
	return mpmuo.mutation
}

// Where appends a list predicates to the MeterProviderMappingUpdate builder.
func (mpmuo *MeterProviderMappingUpdateOne) Where(ps ...predicate.MeterProviderMapping) *MeterProviderMappingUpdateOne {
	mpmuo.mutation.Where(ps...)
	return mpmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpmuo *MeterProviderMappingUpdateOne) Select(field string, fields ...string) *MeterProviderMappingUpdateOne {
	mpmuo.fields = append([]string{field}, fields...)
	return mpmuo
}

// Save executes the query and returns the updated MeterProviderMapping entity.
func (mpmuo *MeterProviderMappingUpdateOne) Save(ctx context.Context) (*MeterProviderMapping, error) {
	mpmuo.defaults()
	return withHooks(ctx, mpmuo.sqlSave, mpmuo.mutation, mpmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpmuo *MeterProviderMappingUpdateOne) SaveX(ctx context.Context) *MeterProviderMapping {
	node, err := mpmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpmuo *MeterProviderMappingUpdateOne) Exec(ctx context.Context) error {
	_, err := mpmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpmuo *MeterProviderMappingUpdateOne) ExecX(ctx context.Context) {
	if err := mpmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpmuo *MeterProviderMappingUpdateOne) defaults() {
	if _, ok := mpmuo.mutation.UpdatedAt(); !ok {
		v := meterprovidermapping.UpdateDefaultUpdatedAt()
		mpmuo.mutation.SetUpdatedAt(v)
	}
}

func (mpmuo *MeterProviderMappingUpdateOne) sqlSave(ctx context.Context) (_node *MeterProviderMapping, err error) {
	_spec := sqlgraph.NewUpdateSpec(meterprovidermapping.Table, meterprovidermapping.Columns, sqlgraph.NewFieldSpec(meterprovidermapping.FieldID, field.TypeString))
	id, ok := mpmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MeterProviderMapping.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, meterprovidermapping.FieldID)
		for _, f := range fields {
			if !meterprovidermapping.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != meterprovidermapping.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpmuo.mutation.Status(); ok {
		_spec.SetField(meterprovidermapping.FieldStatus, field.TypeString, value)
	}
	if value, ok := mpmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(meterprovidermapping.FieldUpdatedAt, field.TypeTime, value)
	}
	if mpmuo.mutation.CreatedByCleared() {
		_spec.ClearField(meterprovidermapping.FieldCreatedBy, field.TypeString)
	}
	if value, ok := mpmuo.mutation.UpdatedBy(); ok {
		_spec.SetField(meterprovidermapping.FieldUpdatedBy, field.TypeString, value)
	}
	if mpmuo.mutation.UpdatedByCleared() {
		_spec.ClearField(meterprovidermapping.FieldUpdatedBy, field.TypeString)
	}
	if mpmuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(meterprovidermapping.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := mpmuo.mutation.SyncEnabled(); ok {
		_spec.SetField(meterprovidermapping.FieldSyncEnabled, field.TypeBool, value)
	}
	if value, ok := mpmuo.mutation.Configuration(); ok {
		_spec.SetField(meterprovidermapping.FieldConfiguration, field.TypeJSON, value)
	}
	if mpmuo.mutation.ConfigurationCleared() {
		_spec.ClearField(meterprovidermapping.FieldConfiguration, field.TypeJSON)
	}
	_node = &MeterProviderMapping{config: mpmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meterprovidermapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpmuo.mutation.done = true
	return _node, nil
}
