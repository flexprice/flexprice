// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/invoice"
	"github.com/flexprice/flexprice/ent/invoicelineitem"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/wallet"
	"github.com/flexprice/flexprice/ent/wallettransaction"
	"github.com/shopspring/decimal"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeInvoice           = "Invoice"
	TypeInvoiceLineItem   = "InvoiceLineItem"
	TypeSubscription      = "Subscription"
	TypeWallet            = "Wallet"
	TypeWalletTransaction = "WalletTransaction"
)

// InvoiceMutation represents an operation that mutates the Invoice nodes in the graph.
type InvoiceMutation struct {
	config
	op                Op
	typ               string
	id                *string
	tenant_id         *string
	status            *string
	created_at        *time.Time
	updated_at        *time.Time
	created_by        *string
	updated_by        *string
	customer_id       *string
	subscription_id   *string
	invoice_type      *string
	invoice_status    *string
	payment_status    *string
	currency          *string
	amount_due        *decimal.Decimal
	amount_paid       *decimal.Decimal
	amount_remaining  *decimal.Decimal
	description       *string
	due_date          *time.Time
	paid_at           *time.Time
	voided_at         *time.Time
	finalized_at      *time.Time
	period_start      *time.Time
	period_end        *time.Time
	invoice_pdf_url   *string
	billing_reason    *string
	metadata          *map[string]string
	version           *int
	addversion        *int
	clearedFields     map[string]struct{}
	line_items        map[string]struct{}
	removedline_items map[string]struct{}
	clearedline_items bool
	done              bool
	oldValue          func(context.Context) (*Invoice, error)
	predicates        []predicate.Invoice
}

var _ ent.Mutation = (*InvoiceMutation)(nil)

// invoiceOption allows management of the mutation configuration using functional options.
type invoiceOption func(*InvoiceMutation)

// newInvoiceMutation creates new mutation for the Invoice entity.
func newInvoiceMutation(c config, op Op, opts ...invoiceOption) *InvoiceMutation {
	m := &InvoiceMutation{
		config:        c,
		op:            op,
		typ:           TypeInvoice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInvoiceID sets the ID field of the mutation.
func withInvoiceID(id string) invoiceOption {
	return func(m *InvoiceMutation) {
		var (
			err   error
			once  sync.Once
			value *Invoice
		)
		m.oldValue = func(ctx context.Context) (*Invoice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Invoice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvoice sets the old Invoice of the mutation.
func withInvoice(node *Invoice) invoiceOption {
	return func(m *InvoiceMutation) {
		m.oldValue = func(context.Context) (*Invoice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InvoiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InvoiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Invoice entities.
func (m *InvoiceMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InvoiceMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InvoiceMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Invoice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *InvoiceMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *InvoiceMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *InvoiceMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *InvoiceMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *InvoiceMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *InvoiceMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *InvoiceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *InvoiceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *InvoiceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *InvoiceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *InvoiceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *InvoiceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *InvoiceMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *InvoiceMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *InvoiceMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[invoice.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *InvoiceMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[invoice.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *InvoiceMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, invoice.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *InvoiceMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *InvoiceMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *InvoiceMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[invoice.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *InvoiceMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[invoice.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *InvoiceMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, invoice.FieldUpdatedBy)
}

// SetCustomerID sets the "customer_id" field.
func (m *InvoiceMutation) SetCustomerID(s string) {
	m.customer_id = &s
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *InvoiceMutation) CustomerID() (r string, exists bool) {
	v := m.customer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldCustomerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *InvoiceMutation) ResetCustomerID() {
	m.customer_id = nil
}

// SetSubscriptionID sets the "subscription_id" field.
func (m *InvoiceMutation) SetSubscriptionID(s string) {
	m.subscription_id = &s
}

// SubscriptionID returns the value of the "subscription_id" field in the mutation.
func (m *InvoiceMutation) SubscriptionID() (r string, exists bool) {
	v := m.subscription_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionID returns the old "subscription_id" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldSubscriptionID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionID: %w", err)
	}
	return oldValue.SubscriptionID, nil
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (m *InvoiceMutation) ClearSubscriptionID() {
	m.subscription_id = nil
	m.clearedFields[invoice.FieldSubscriptionID] = struct{}{}
}

// SubscriptionIDCleared returns if the "subscription_id" field was cleared in this mutation.
func (m *InvoiceMutation) SubscriptionIDCleared() bool {
	_, ok := m.clearedFields[invoice.FieldSubscriptionID]
	return ok
}

// ResetSubscriptionID resets all changes to the "subscription_id" field.
func (m *InvoiceMutation) ResetSubscriptionID() {
	m.subscription_id = nil
	delete(m.clearedFields, invoice.FieldSubscriptionID)
}

// SetInvoiceType sets the "invoice_type" field.
func (m *InvoiceMutation) SetInvoiceType(s string) {
	m.invoice_type = &s
}

// InvoiceType returns the value of the "invoice_type" field in the mutation.
func (m *InvoiceMutation) InvoiceType() (r string, exists bool) {
	v := m.invoice_type
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceType returns the old "invoice_type" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldInvoiceType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceType: %w", err)
	}
	return oldValue.InvoiceType, nil
}

// ResetInvoiceType resets all changes to the "invoice_type" field.
func (m *InvoiceMutation) ResetInvoiceType() {
	m.invoice_type = nil
}

// SetInvoiceStatus sets the "invoice_status" field.
func (m *InvoiceMutation) SetInvoiceStatus(s string) {
	m.invoice_status = &s
}

// InvoiceStatus returns the value of the "invoice_status" field in the mutation.
func (m *InvoiceMutation) InvoiceStatus() (r string, exists bool) {
	v := m.invoice_status
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceStatus returns the old "invoice_status" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldInvoiceStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceStatus: %w", err)
	}
	return oldValue.InvoiceStatus, nil
}

// ResetInvoiceStatus resets all changes to the "invoice_status" field.
func (m *InvoiceMutation) ResetInvoiceStatus() {
	m.invoice_status = nil
}

// SetPaymentStatus sets the "payment_status" field.
func (m *InvoiceMutation) SetPaymentStatus(s string) {
	m.payment_status = &s
}

// PaymentStatus returns the value of the "payment_status" field in the mutation.
func (m *InvoiceMutation) PaymentStatus() (r string, exists bool) {
	v := m.payment_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentStatus returns the old "payment_status" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldPaymentStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentStatus: %w", err)
	}
	return oldValue.PaymentStatus, nil
}

// ResetPaymentStatus resets all changes to the "payment_status" field.
func (m *InvoiceMutation) ResetPaymentStatus() {
	m.payment_status = nil
}

// SetCurrency sets the "currency" field.
func (m *InvoiceMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *InvoiceMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *InvoiceMutation) ResetCurrency() {
	m.currency = nil
}

// SetAmountDue sets the "amount_due" field.
func (m *InvoiceMutation) SetAmountDue(d decimal.Decimal) {
	m.amount_due = &d
}

// AmountDue returns the value of the "amount_due" field in the mutation.
func (m *InvoiceMutation) AmountDue() (r decimal.Decimal, exists bool) {
	v := m.amount_due
	if v == nil {
		return
	}
	return *v, true
}

// OldAmountDue returns the old "amount_due" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldAmountDue(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmountDue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmountDue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmountDue: %w", err)
	}
	return oldValue.AmountDue, nil
}

// ResetAmountDue resets all changes to the "amount_due" field.
func (m *InvoiceMutation) ResetAmountDue() {
	m.amount_due = nil
}

// SetAmountPaid sets the "amount_paid" field.
func (m *InvoiceMutation) SetAmountPaid(d decimal.Decimal) {
	m.amount_paid = &d
}

// AmountPaid returns the value of the "amount_paid" field in the mutation.
func (m *InvoiceMutation) AmountPaid() (r decimal.Decimal, exists bool) {
	v := m.amount_paid
	if v == nil {
		return
	}
	return *v, true
}

// OldAmountPaid returns the old "amount_paid" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldAmountPaid(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmountPaid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmountPaid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmountPaid: %w", err)
	}
	return oldValue.AmountPaid, nil
}

// ResetAmountPaid resets all changes to the "amount_paid" field.
func (m *InvoiceMutation) ResetAmountPaid() {
	m.amount_paid = nil
}

// SetAmountRemaining sets the "amount_remaining" field.
func (m *InvoiceMutation) SetAmountRemaining(d decimal.Decimal) {
	m.amount_remaining = &d
}

// AmountRemaining returns the value of the "amount_remaining" field in the mutation.
func (m *InvoiceMutation) AmountRemaining() (r decimal.Decimal, exists bool) {
	v := m.amount_remaining
	if v == nil {
		return
	}
	return *v, true
}

// OldAmountRemaining returns the old "amount_remaining" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldAmountRemaining(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmountRemaining is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmountRemaining requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmountRemaining: %w", err)
	}
	return oldValue.AmountRemaining, nil
}

// ResetAmountRemaining resets all changes to the "amount_remaining" field.
func (m *InvoiceMutation) ResetAmountRemaining() {
	m.amount_remaining = nil
}

// SetDescription sets the "description" field.
func (m *InvoiceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *InvoiceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *InvoiceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[invoice.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *InvoiceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[invoice.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *InvoiceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, invoice.FieldDescription)
}

// SetDueDate sets the "due_date" field.
func (m *InvoiceMutation) SetDueDate(t time.Time) {
	m.due_date = &t
}

// DueDate returns the value of the "due_date" field in the mutation.
func (m *InvoiceMutation) DueDate() (r time.Time, exists bool) {
	v := m.due_date
	if v == nil {
		return
	}
	return *v, true
}

// OldDueDate returns the old "due_date" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldDueDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDueDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDueDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDueDate: %w", err)
	}
	return oldValue.DueDate, nil
}

// ClearDueDate clears the value of the "due_date" field.
func (m *InvoiceMutation) ClearDueDate() {
	m.due_date = nil
	m.clearedFields[invoice.FieldDueDate] = struct{}{}
}

// DueDateCleared returns if the "due_date" field was cleared in this mutation.
func (m *InvoiceMutation) DueDateCleared() bool {
	_, ok := m.clearedFields[invoice.FieldDueDate]
	return ok
}

// ResetDueDate resets all changes to the "due_date" field.
func (m *InvoiceMutation) ResetDueDate() {
	m.due_date = nil
	delete(m.clearedFields, invoice.FieldDueDate)
}

// SetPaidAt sets the "paid_at" field.
func (m *InvoiceMutation) SetPaidAt(t time.Time) {
	m.paid_at = &t
}

// PaidAt returns the value of the "paid_at" field in the mutation.
func (m *InvoiceMutation) PaidAt() (r time.Time, exists bool) {
	v := m.paid_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPaidAt returns the old "paid_at" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldPaidAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaidAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaidAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaidAt: %w", err)
	}
	return oldValue.PaidAt, nil
}

// ClearPaidAt clears the value of the "paid_at" field.
func (m *InvoiceMutation) ClearPaidAt() {
	m.paid_at = nil
	m.clearedFields[invoice.FieldPaidAt] = struct{}{}
}

// PaidAtCleared returns if the "paid_at" field was cleared in this mutation.
func (m *InvoiceMutation) PaidAtCleared() bool {
	_, ok := m.clearedFields[invoice.FieldPaidAt]
	return ok
}

// ResetPaidAt resets all changes to the "paid_at" field.
func (m *InvoiceMutation) ResetPaidAt() {
	m.paid_at = nil
	delete(m.clearedFields, invoice.FieldPaidAt)
}

// SetVoidedAt sets the "voided_at" field.
func (m *InvoiceMutation) SetVoidedAt(t time.Time) {
	m.voided_at = &t
}

// VoidedAt returns the value of the "voided_at" field in the mutation.
func (m *InvoiceMutation) VoidedAt() (r time.Time, exists bool) {
	v := m.voided_at
	if v == nil {
		return
	}
	return *v, true
}

// OldVoidedAt returns the old "voided_at" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldVoidedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVoidedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVoidedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVoidedAt: %w", err)
	}
	return oldValue.VoidedAt, nil
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (m *InvoiceMutation) ClearVoidedAt() {
	m.voided_at = nil
	m.clearedFields[invoice.FieldVoidedAt] = struct{}{}
}

// VoidedAtCleared returns if the "voided_at" field was cleared in this mutation.
func (m *InvoiceMutation) VoidedAtCleared() bool {
	_, ok := m.clearedFields[invoice.FieldVoidedAt]
	return ok
}

// ResetVoidedAt resets all changes to the "voided_at" field.
func (m *InvoiceMutation) ResetVoidedAt() {
	m.voided_at = nil
	delete(m.clearedFields, invoice.FieldVoidedAt)
}

// SetFinalizedAt sets the "finalized_at" field.
func (m *InvoiceMutation) SetFinalizedAt(t time.Time) {
	m.finalized_at = &t
}

// FinalizedAt returns the value of the "finalized_at" field in the mutation.
func (m *InvoiceMutation) FinalizedAt() (r time.Time, exists bool) {
	v := m.finalized_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalizedAt returns the old "finalized_at" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldFinalizedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinalizedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinalizedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalizedAt: %w", err)
	}
	return oldValue.FinalizedAt, nil
}

// ClearFinalizedAt clears the value of the "finalized_at" field.
func (m *InvoiceMutation) ClearFinalizedAt() {
	m.finalized_at = nil
	m.clearedFields[invoice.FieldFinalizedAt] = struct{}{}
}

// FinalizedAtCleared returns if the "finalized_at" field was cleared in this mutation.
func (m *InvoiceMutation) FinalizedAtCleared() bool {
	_, ok := m.clearedFields[invoice.FieldFinalizedAt]
	return ok
}

// ResetFinalizedAt resets all changes to the "finalized_at" field.
func (m *InvoiceMutation) ResetFinalizedAt() {
	m.finalized_at = nil
	delete(m.clearedFields, invoice.FieldFinalizedAt)
}

// SetPeriodStart sets the "period_start" field.
func (m *InvoiceMutation) SetPeriodStart(t time.Time) {
	m.period_start = &t
}

// PeriodStart returns the value of the "period_start" field in the mutation.
func (m *InvoiceMutation) PeriodStart() (r time.Time, exists bool) {
	v := m.period_start
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodStart returns the old "period_start" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldPeriodStart(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodStart: %w", err)
	}
	return oldValue.PeriodStart, nil
}

// ClearPeriodStart clears the value of the "period_start" field.
func (m *InvoiceMutation) ClearPeriodStart() {
	m.period_start = nil
	m.clearedFields[invoice.FieldPeriodStart] = struct{}{}
}

// PeriodStartCleared returns if the "period_start" field was cleared in this mutation.
func (m *InvoiceMutation) PeriodStartCleared() bool {
	_, ok := m.clearedFields[invoice.FieldPeriodStart]
	return ok
}

// ResetPeriodStart resets all changes to the "period_start" field.
func (m *InvoiceMutation) ResetPeriodStart() {
	m.period_start = nil
	delete(m.clearedFields, invoice.FieldPeriodStart)
}

// SetPeriodEnd sets the "period_end" field.
func (m *InvoiceMutation) SetPeriodEnd(t time.Time) {
	m.period_end = &t
}

// PeriodEnd returns the value of the "period_end" field in the mutation.
func (m *InvoiceMutation) PeriodEnd() (r time.Time, exists bool) {
	v := m.period_end
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodEnd returns the old "period_end" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldPeriodEnd(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodEnd: %w", err)
	}
	return oldValue.PeriodEnd, nil
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (m *InvoiceMutation) ClearPeriodEnd() {
	m.period_end = nil
	m.clearedFields[invoice.FieldPeriodEnd] = struct{}{}
}

// PeriodEndCleared returns if the "period_end" field was cleared in this mutation.
func (m *InvoiceMutation) PeriodEndCleared() bool {
	_, ok := m.clearedFields[invoice.FieldPeriodEnd]
	return ok
}

// ResetPeriodEnd resets all changes to the "period_end" field.
func (m *InvoiceMutation) ResetPeriodEnd() {
	m.period_end = nil
	delete(m.clearedFields, invoice.FieldPeriodEnd)
}

// SetInvoicePdfURL sets the "invoice_pdf_url" field.
func (m *InvoiceMutation) SetInvoicePdfURL(s string) {
	m.invoice_pdf_url = &s
}

// InvoicePdfURL returns the value of the "invoice_pdf_url" field in the mutation.
func (m *InvoiceMutation) InvoicePdfURL() (r string, exists bool) {
	v := m.invoice_pdf_url
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoicePdfURL returns the old "invoice_pdf_url" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldInvoicePdfURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoicePdfURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoicePdfURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoicePdfURL: %w", err)
	}
	return oldValue.InvoicePdfURL, nil
}

// ClearInvoicePdfURL clears the value of the "invoice_pdf_url" field.
func (m *InvoiceMutation) ClearInvoicePdfURL() {
	m.invoice_pdf_url = nil
	m.clearedFields[invoice.FieldInvoicePdfURL] = struct{}{}
}

// InvoicePdfURLCleared returns if the "invoice_pdf_url" field was cleared in this mutation.
func (m *InvoiceMutation) InvoicePdfURLCleared() bool {
	_, ok := m.clearedFields[invoice.FieldInvoicePdfURL]
	return ok
}

// ResetInvoicePdfURL resets all changes to the "invoice_pdf_url" field.
func (m *InvoiceMutation) ResetInvoicePdfURL() {
	m.invoice_pdf_url = nil
	delete(m.clearedFields, invoice.FieldInvoicePdfURL)
}

// SetBillingReason sets the "billing_reason" field.
func (m *InvoiceMutation) SetBillingReason(s string) {
	m.billing_reason = &s
}

// BillingReason returns the value of the "billing_reason" field in the mutation.
func (m *InvoiceMutation) BillingReason() (r string, exists bool) {
	v := m.billing_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingReason returns the old "billing_reason" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldBillingReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingReason: %w", err)
	}
	return oldValue.BillingReason, nil
}

// ClearBillingReason clears the value of the "billing_reason" field.
func (m *InvoiceMutation) ClearBillingReason() {
	m.billing_reason = nil
	m.clearedFields[invoice.FieldBillingReason] = struct{}{}
}

// BillingReasonCleared returns if the "billing_reason" field was cleared in this mutation.
func (m *InvoiceMutation) BillingReasonCleared() bool {
	_, ok := m.clearedFields[invoice.FieldBillingReason]
	return ok
}

// ResetBillingReason resets all changes to the "billing_reason" field.
func (m *InvoiceMutation) ResetBillingReason() {
	m.billing_reason = nil
	delete(m.clearedFields, invoice.FieldBillingReason)
}

// SetMetadata sets the "metadata" field.
func (m *InvoiceMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *InvoiceMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *InvoiceMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[invoice.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *InvoiceMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[invoice.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *InvoiceMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, invoice.FieldMetadata)
}

// SetVersion sets the "version" field.
func (m *InvoiceMutation) SetVersion(i int) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *InvoiceMutation) Version() (r int, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldVersion(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *InvoiceMutation) AddVersion(i int) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *InvoiceMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *InvoiceMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// AddLineItemIDs adds the "line_items" edge to the InvoiceLineItem entity by ids.
func (m *InvoiceMutation) AddLineItemIDs(ids ...string) {
	if m.line_items == nil {
		m.line_items = make(map[string]struct{})
	}
	for i := range ids {
		m.line_items[ids[i]] = struct{}{}
	}
}

// ClearLineItems clears the "line_items" edge to the InvoiceLineItem entity.
func (m *InvoiceMutation) ClearLineItems() {
	m.clearedline_items = true
}

// LineItemsCleared reports if the "line_items" edge to the InvoiceLineItem entity was cleared.
func (m *InvoiceMutation) LineItemsCleared() bool {
	return m.clearedline_items
}

// RemoveLineItemIDs removes the "line_items" edge to the InvoiceLineItem entity by IDs.
func (m *InvoiceMutation) RemoveLineItemIDs(ids ...string) {
	if m.removedline_items == nil {
		m.removedline_items = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.line_items, ids[i])
		m.removedline_items[ids[i]] = struct{}{}
	}
}

// RemovedLineItems returns the removed IDs of the "line_items" edge to the InvoiceLineItem entity.
func (m *InvoiceMutation) RemovedLineItemsIDs() (ids []string) {
	for id := range m.removedline_items {
		ids = append(ids, id)
	}
	return
}

// LineItemsIDs returns the "line_items" edge IDs in the mutation.
func (m *InvoiceMutation) LineItemsIDs() (ids []string) {
	for id := range m.line_items {
		ids = append(ids, id)
	}
	return
}

// ResetLineItems resets all changes to the "line_items" edge.
func (m *InvoiceMutation) ResetLineItems() {
	m.line_items = nil
	m.clearedline_items = false
	m.removedline_items = nil
}

// Where appends a list predicates to the InvoiceMutation builder.
func (m *InvoiceMutation) Where(ps ...predicate.Invoice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InvoiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InvoiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Invoice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InvoiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InvoiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Invoice).
func (m *InvoiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InvoiceMutation) Fields() []string {
	fields := make([]string, 0, 26)
	if m.tenant_id != nil {
		fields = append(fields, invoice.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, invoice.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, invoice.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, invoice.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, invoice.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, invoice.FieldUpdatedBy)
	}
	if m.customer_id != nil {
		fields = append(fields, invoice.FieldCustomerID)
	}
	if m.subscription_id != nil {
		fields = append(fields, invoice.FieldSubscriptionID)
	}
	if m.invoice_type != nil {
		fields = append(fields, invoice.FieldInvoiceType)
	}
	if m.invoice_status != nil {
		fields = append(fields, invoice.FieldInvoiceStatus)
	}
	if m.payment_status != nil {
		fields = append(fields, invoice.FieldPaymentStatus)
	}
	if m.currency != nil {
		fields = append(fields, invoice.FieldCurrency)
	}
	if m.amount_due != nil {
		fields = append(fields, invoice.FieldAmountDue)
	}
	if m.amount_paid != nil {
		fields = append(fields, invoice.FieldAmountPaid)
	}
	if m.amount_remaining != nil {
		fields = append(fields, invoice.FieldAmountRemaining)
	}
	if m.description != nil {
		fields = append(fields, invoice.FieldDescription)
	}
	if m.due_date != nil {
		fields = append(fields, invoice.FieldDueDate)
	}
	if m.paid_at != nil {
		fields = append(fields, invoice.FieldPaidAt)
	}
	if m.voided_at != nil {
		fields = append(fields, invoice.FieldVoidedAt)
	}
	if m.finalized_at != nil {
		fields = append(fields, invoice.FieldFinalizedAt)
	}
	if m.period_start != nil {
		fields = append(fields, invoice.FieldPeriodStart)
	}
	if m.period_end != nil {
		fields = append(fields, invoice.FieldPeriodEnd)
	}
	if m.invoice_pdf_url != nil {
		fields = append(fields, invoice.FieldInvoicePdfURL)
	}
	if m.billing_reason != nil {
		fields = append(fields, invoice.FieldBillingReason)
	}
	if m.metadata != nil {
		fields = append(fields, invoice.FieldMetadata)
	}
	if m.version != nil {
		fields = append(fields, invoice.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InvoiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invoice.FieldTenantID:
		return m.TenantID()
	case invoice.FieldStatus:
		return m.Status()
	case invoice.FieldCreatedAt:
		return m.CreatedAt()
	case invoice.FieldUpdatedAt:
		return m.UpdatedAt()
	case invoice.FieldCreatedBy:
		return m.CreatedBy()
	case invoice.FieldUpdatedBy:
		return m.UpdatedBy()
	case invoice.FieldCustomerID:
		return m.CustomerID()
	case invoice.FieldSubscriptionID:
		return m.SubscriptionID()
	case invoice.FieldInvoiceType:
		return m.InvoiceType()
	case invoice.FieldInvoiceStatus:
		return m.InvoiceStatus()
	case invoice.FieldPaymentStatus:
		return m.PaymentStatus()
	case invoice.FieldCurrency:
		return m.Currency()
	case invoice.FieldAmountDue:
		return m.AmountDue()
	case invoice.FieldAmountPaid:
		return m.AmountPaid()
	case invoice.FieldAmountRemaining:
		return m.AmountRemaining()
	case invoice.FieldDescription:
		return m.Description()
	case invoice.FieldDueDate:
		return m.DueDate()
	case invoice.FieldPaidAt:
		return m.PaidAt()
	case invoice.FieldVoidedAt:
		return m.VoidedAt()
	case invoice.FieldFinalizedAt:
		return m.FinalizedAt()
	case invoice.FieldPeriodStart:
		return m.PeriodStart()
	case invoice.FieldPeriodEnd:
		return m.PeriodEnd()
	case invoice.FieldInvoicePdfURL:
		return m.InvoicePdfURL()
	case invoice.FieldBillingReason:
		return m.BillingReason()
	case invoice.FieldMetadata:
		return m.Metadata()
	case invoice.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InvoiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invoice.FieldTenantID:
		return m.OldTenantID(ctx)
	case invoice.FieldStatus:
		return m.OldStatus(ctx)
	case invoice.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case invoice.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case invoice.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case invoice.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case invoice.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case invoice.FieldSubscriptionID:
		return m.OldSubscriptionID(ctx)
	case invoice.FieldInvoiceType:
		return m.OldInvoiceType(ctx)
	case invoice.FieldInvoiceStatus:
		return m.OldInvoiceStatus(ctx)
	case invoice.FieldPaymentStatus:
		return m.OldPaymentStatus(ctx)
	case invoice.FieldCurrency:
		return m.OldCurrency(ctx)
	case invoice.FieldAmountDue:
		return m.OldAmountDue(ctx)
	case invoice.FieldAmountPaid:
		return m.OldAmountPaid(ctx)
	case invoice.FieldAmountRemaining:
		return m.OldAmountRemaining(ctx)
	case invoice.FieldDescription:
		return m.OldDescription(ctx)
	case invoice.FieldDueDate:
		return m.OldDueDate(ctx)
	case invoice.FieldPaidAt:
		return m.OldPaidAt(ctx)
	case invoice.FieldVoidedAt:
		return m.OldVoidedAt(ctx)
	case invoice.FieldFinalizedAt:
		return m.OldFinalizedAt(ctx)
	case invoice.FieldPeriodStart:
		return m.OldPeriodStart(ctx)
	case invoice.FieldPeriodEnd:
		return m.OldPeriodEnd(ctx)
	case invoice.FieldInvoicePdfURL:
		return m.OldInvoicePdfURL(ctx)
	case invoice.FieldBillingReason:
		return m.OldBillingReason(ctx)
	case invoice.FieldMetadata:
		return m.OldMetadata(ctx)
	case invoice.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("unknown Invoice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invoice.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case invoice.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case invoice.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case invoice.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case invoice.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case invoice.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case invoice.FieldCustomerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case invoice.FieldSubscriptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionID(v)
		return nil
	case invoice.FieldInvoiceType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceType(v)
		return nil
	case invoice.FieldInvoiceStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceStatus(v)
		return nil
	case invoice.FieldPaymentStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentStatus(v)
		return nil
	case invoice.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case invoice.FieldAmountDue:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmountDue(v)
		return nil
	case invoice.FieldAmountPaid:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmountPaid(v)
		return nil
	case invoice.FieldAmountRemaining:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmountRemaining(v)
		return nil
	case invoice.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case invoice.FieldDueDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDueDate(v)
		return nil
	case invoice.FieldPaidAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaidAt(v)
		return nil
	case invoice.FieldVoidedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVoidedAt(v)
		return nil
	case invoice.FieldFinalizedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalizedAt(v)
		return nil
	case invoice.FieldPeriodStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodStart(v)
		return nil
	case invoice.FieldPeriodEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodEnd(v)
		return nil
	case invoice.FieldInvoicePdfURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoicePdfURL(v)
		return nil
	case invoice.FieldBillingReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingReason(v)
		return nil
	case invoice.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case invoice.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Invoice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InvoiceMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, invoice.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InvoiceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case invoice.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case invoice.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Invoice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InvoiceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(invoice.FieldCreatedBy) {
		fields = append(fields, invoice.FieldCreatedBy)
	}
	if m.FieldCleared(invoice.FieldUpdatedBy) {
		fields = append(fields, invoice.FieldUpdatedBy)
	}
	if m.FieldCleared(invoice.FieldSubscriptionID) {
		fields = append(fields, invoice.FieldSubscriptionID)
	}
	if m.FieldCleared(invoice.FieldDescription) {
		fields = append(fields, invoice.FieldDescription)
	}
	if m.FieldCleared(invoice.FieldDueDate) {
		fields = append(fields, invoice.FieldDueDate)
	}
	if m.FieldCleared(invoice.FieldPaidAt) {
		fields = append(fields, invoice.FieldPaidAt)
	}
	if m.FieldCleared(invoice.FieldVoidedAt) {
		fields = append(fields, invoice.FieldVoidedAt)
	}
	if m.FieldCleared(invoice.FieldFinalizedAt) {
		fields = append(fields, invoice.FieldFinalizedAt)
	}
	if m.FieldCleared(invoice.FieldPeriodStart) {
		fields = append(fields, invoice.FieldPeriodStart)
	}
	if m.FieldCleared(invoice.FieldPeriodEnd) {
		fields = append(fields, invoice.FieldPeriodEnd)
	}
	if m.FieldCleared(invoice.FieldInvoicePdfURL) {
		fields = append(fields, invoice.FieldInvoicePdfURL)
	}
	if m.FieldCleared(invoice.FieldBillingReason) {
		fields = append(fields, invoice.FieldBillingReason)
	}
	if m.FieldCleared(invoice.FieldMetadata) {
		fields = append(fields, invoice.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InvoiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InvoiceMutation) ClearField(name string) error {
	switch name {
	case invoice.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case invoice.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case invoice.FieldSubscriptionID:
		m.ClearSubscriptionID()
		return nil
	case invoice.FieldDescription:
		m.ClearDescription()
		return nil
	case invoice.FieldDueDate:
		m.ClearDueDate()
		return nil
	case invoice.FieldPaidAt:
		m.ClearPaidAt()
		return nil
	case invoice.FieldVoidedAt:
		m.ClearVoidedAt()
		return nil
	case invoice.FieldFinalizedAt:
		m.ClearFinalizedAt()
		return nil
	case invoice.FieldPeriodStart:
		m.ClearPeriodStart()
		return nil
	case invoice.FieldPeriodEnd:
		m.ClearPeriodEnd()
		return nil
	case invoice.FieldInvoicePdfURL:
		m.ClearInvoicePdfURL()
		return nil
	case invoice.FieldBillingReason:
		m.ClearBillingReason()
		return nil
	case invoice.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown Invoice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InvoiceMutation) ResetField(name string) error {
	switch name {
	case invoice.FieldTenantID:
		m.ResetTenantID()
		return nil
	case invoice.FieldStatus:
		m.ResetStatus()
		return nil
	case invoice.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case invoice.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case invoice.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case invoice.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case invoice.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case invoice.FieldSubscriptionID:
		m.ResetSubscriptionID()
		return nil
	case invoice.FieldInvoiceType:
		m.ResetInvoiceType()
		return nil
	case invoice.FieldInvoiceStatus:
		m.ResetInvoiceStatus()
		return nil
	case invoice.FieldPaymentStatus:
		m.ResetPaymentStatus()
		return nil
	case invoice.FieldCurrency:
		m.ResetCurrency()
		return nil
	case invoice.FieldAmountDue:
		m.ResetAmountDue()
		return nil
	case invoice.FieldAmountPaid:
		m.ResetAmountPaid()
		return nil
	case invoice.FieldAmountRemaining:
		m.ResetAmountRemaining()
		return nil
	case invoice.FieldDescription:
		m.ResetDescription()
		return nil
	case invoice.FieldDueDate:
		m.ResetDueDate()
		return nil
	case invoice.FieldPaidAt:
		m.ResetPaidAt()
		return nil
	case invoice.FieldVoidedAt:
		m.ResetVoidedAt()
		return nil
	case invoice.FieldFinalizedAt:
		m.ResetFinalizedAt()
		return nil
	case invoice.FieldPeriodStart:
		m.ResetPeriodStart()
		return nil
	case invoice.FieldPeriodEnd:
		m.ResetPeriodEnd()
		return nil
	case invoice.FieldInvoicePdfURL:
		m.ResetInvoicePdfURL()
		return nil
	case invoice.FieldBillingReason:
		m.ResetBillingReason()
		return nil
	case invoice.FieldMetadata:
		m.ResetMetadata()
		return nil
	case invoice.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("unknown Invoice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InvoiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.line_items != nil {
		edges = append(edges, invoice.EdgeLineItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InvoiceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case invoice.EdgeLineItems:
		ids := make([]ent.Value, 0, len(m.line_items))
		for id := range m.line_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InvoiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedline_items != nil {
		edges = append(edges, invoice.EdgeLineItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InvoiceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case invoice.EdgeLineItems:
		ids := make([]ent.Value, 0, len(m.removedline_items))
		for id := range m.removedline_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InvoiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedline_items {
		edges = append(edges, invoice.EdgeLineItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InvoiceMutation) EdgeCleared(name string) bool {
	switch name {
	case invoice.EdgeLineItems:
		return m.clearedline_items
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InvoiceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Invoice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InvoiceMutation) ResetEdge(name string) error {
	switch name {
	case invoice.EdgeLineItems:
		m.ResetLineItems()
		return nil
	}
	return fmt.Errorf("unknown Invoice edge %s", name)
}

// InvoiceLineItemMutation represents an operation that mutates the InvoiceLineItem nodes in the graph.
type InvoiceLineItemMutation struct {
	config
	op              Op
	typ             string
	id              *string
	tenant_id       *string
	status          *string
	created_at      *time.Time
	updated_at      *time.Time
	created_by      *string
	updated_by      *string
	customer_id     *string
	subscription_id *string
	price_id        *string
	meter_id        *string
	amount          *decimal.Decimal
	quantity        *decimal.Decimal
	currency        *string
	period_start    *time.Time
	period_end      *time.Time
	metadata        *map[string]string
	clearedFields   map[string]struct{}
	invoice         *string
	clearedinvoice  bool
	done            bool
	oldValue        func(context.Context) (*InvoiceLineItem, error)
	predicates      []predicate.InvoiceLineItem
}

var _ ent.Mutation = (*InvoiceLineItemMutation)(nil)

// invoicelineitemOption allows management of the mutation configuration using functional options.
type invoicelineitemOption func(*InvoiceLineItemMutation)

// newInvoiceLineItemMutation creates new mutation for the InvoiceLineItem entity.
func newInvoiceLineItemMutation(c config, op Op, opts ...invoicelineitemOption) *InvoiceLineItemMutation {
	m := &InvoiceLineItemMutation{
		config:        c,
		op:            op,
		typ:           TypeInvoiceLineItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInvoiceLineItemID sets the ID field of the mutation.
func withInvoiceLineItemID(id string) invoicelineitemOption {
	return func(m *InvoiceLineItemMutation) {
		var (
			err   error
			once  sync.Once
			value *InvoiceLineItem
		)
		m.oldValue = func(ctx context.Context) (*InvoiceLineItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InvoiceLineItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvoiceLineItem sets the old InvoiceLineItem of the mutation.
func withInvoiceLineItem(node *InvoiceLineItem) invoicelineitemOption {
	return func(m *InvoiceLineItemMutation) {
		m.oldValue = func(context.Context) (*InvoiceLineItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InvoiceLineItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InvoiceLineItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of InvoiceLineItem entities.
func (m *InvoiceLineItemMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InvoiceLineItemMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InvoiceLineItemMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().InvoiceLineItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *InvoiceLineItemMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *InvoiceLineItemMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *InvoiceLineItemMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *InvoiceLineItemMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *InvoiceLineItemMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *InvoiceLineItemMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *InvoiceLineItemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *InvoiceLineItemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *InvoiceLineItemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *InvoiceLineItemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *InvoiceLineItemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *InvoiceLineItemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *InvoiceLineItemMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *InvoiceLineItemMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *InvoiceLineItemMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[invoicelineitem.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *InvoiceLineItemMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, invoicelineitem.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *InvoiceLineItemMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *InvoiceLineItemMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *InvoiceLineItemMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[invoicelineitem.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *InvoiceLineItemMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, invoicelineitem.FieldUpdatedBy)
}

// SetInvoiceID sets the "invoice_id" field.
func (m *InvoiceLineItemMutation) SetInvoiceID(s string) {
	m.invoice = &s
}

// InvoiceID returns the value of the "invoice_id" field in the mutation.
func (m *InvoiceLineItemMutation) InvoiceID() (r string, exists bool) {
	v := m.invoice
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceID returns the old "invoice_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldInvoiceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceID: %w", err)
	}
	return oldValue.InvoiceID, nil
}

// ResetInvoiceID resets all changes to the "invoice_id" field.
func (m *InvoiceLineItemMutation) ResetInvoiceID() {
	m.invoice = nil
}

// SetCustomerID sets the "customer_id" field.
func (m *InvoiceLineItemMutation) SetCustomerID(s string) {
	m.customer_id = &s
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *InvoiceLineItemMutation) CustomerID() (r string, exists bool) {
	v := m.customer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldCustomerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *InvoiceLineItemMutation) ResetCustomerID() {
	m.customer_id = nil
}

// SetSubscriptionID sets the "subscription_id" field.
func (m *InvoiceLineItemMutation) SetSubscriptionID(s string) {
	m.subscription_id = &s
}

// SubscriptionID returns the value of the "subscription_id" field in the mutation.
func (m *InvoiceLineItemMutation) SubscriptionID() (r string, exists bool) {
	v := m.subscription_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionID returns the old "subscription_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldSubscriptionID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionID: %w", err)
	}
	return oldValue.SubscriptionID, nil
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (m *InvoiceLineItemMutation) ClearSubscriptionID() {
	m.subscription_id = nil
	m.clearedFields[invoicelineitem.FieldSubscriptionID] = struct{}{}
}

// SubscriptionIDCleared returns if the "subscription_id" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) SubscriptionIDCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldSubscriptionID]
	return ok
}

// ResetSubscriptionID resets all changes to the "subscription_id" field.
func (m *InvoiceLineItemMutation) ResetSubscriptionID() {
	m.subscription_id = nil
	delete(m.clearedFields, invoicelineitem.FieldSubscriptionID)
}

// SetPriceID sets the "price_id" field.
func (m *InvoiceLineItemMutation) SetPriceID(s string) {
	m.price_id = &s
}

// PriceID returns the value of the "price_id" field in the mutation.
func (m *InvoiceLineItemMutation) PriceID() (r string, exists bool) {
	v := m.price_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceID returns the old "price_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldPriceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceID: %w", err)
	}
	return oldValue.PriceID, nil
}

// ResetPriceID resets all changes to the "price_id" field.
func (m *InvoiceLineItemMutation) ResetPriceID() {
	m.price_id = nil
}

// SetMeterID sets the "meter_id" field.
func (m *InvoiceLineItemMutation) SetMeterID(s string) {
	m.meter_id = &s
}

// MeterID returns the value of the "meter_id" field in the mutation.
func (m *InvoiceLineItemMutation) MeterID() (r string, exists bool) {
	v := m.meter_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMeterID returns the old "meter_id" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldMeterID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeterID: %w", err)
	}
	return oldValue.MeterID, nil
}

// ClearMeterID clears the value of the "meter_id" field.
func (m *InvoiceLineItemMutation) ClearMeterID() {
	m.meter_id = nil
	m.clearedFields[invoicelineitem.FieldMeterID] = struct{}{}
}

// MeterIDCleared returns if the "meter_id" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) MeterIDCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldMeterID]
	return ok
}

// ResetMeterID resets all changes to the "meter_id" field.
func (m *InvoiceLineItemMutation) ResetMeterID() {
	m.meter_id = nil
	delete(m.clearedFields, invoicelineitem.FieldMeterID)
}

// SetAmount sets the "amount" field.
func (m *InvoiceLineItemMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *InvoiceLineItemMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *InvoiceLineItemMutation) ResetAmount() {
	m.amount = nil
}

// SetQuantity sets the "quantity" field.
func (m *InvoiceLineItemMutation) SetQuantity(d decimal.Decimal) {
	m.quantity = &d
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *InvoiceLineItemMutation) Quantity() (r decimal.Decimal, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldQuantity(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *InvoiceLineItemMutation) ResetQuantity() {
	m.quantity = nil
}

// SetCurrency sets the "currency" field.
func (m *InvoiceLineItemMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *InvoiceLineItemMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *InvoiceLineItemMutation) ResetCurrency() {
	m.currency = nil
}

// SetPeriodStart sets the "period_start" field.
func (m *InvoiceLineItemMutation) SetPeriodStart(t time.Time) {
	m.period_start = &t
}

// PeriodStart returns the value of the "period_start" field in the mutation.
func (m *InvoiceLineItemMutation) PeriodStart() (r time.Time, exists bool) {
	v := m.period_start
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodStart returns the old "period_start" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldPeriodStart(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodStart: %w", err)
	}
	return oldValue.PeriodStart, nil
}

// ClearPeriodStart clears the value of the "period_start" field.
func (m *InvoiceLineItemMutation) ClearPeriodStart() {
	m.period_start = nil
	m.clearedFields[invoicelineitem.FieldPeriodStart] = struct{}{}
}

// PeriodStartCleared returns if the "period_start" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) PeriodStartCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldPeriodStart]
	return ok
}

// ResetPeriodStart resets all changes to the "period_start" field.
func (m *InvoiceLineItemMutation) ResetPeriodStart() {
	m.period_start = nil
	delete(m.clearedFields, invoicelineitem.FieldPeriodStart)
}

// SetPeriodEnd sets the "period_end" field.
func (m *InvoiceLineItemMutation) SetPeriodEnd(t time.Time) {
	m.period_end = &t
}

// PeriodEnd returns the value of the "period_end" field in the mutation.
func (m *InvoiceLineItemMutation) PeriodEnd() (r time.Time, exists bool) {
	v := m.period_end
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodEnd returns the old "period_end" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldPeriodEnd(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodEnd: %w", err)
	}
	return oldValue.PeriodEnd, nil
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (m *InvoiceLineItemMutation) ClearPeriodEnd() {
	m.period_end = nil
	m.clearedFields[invoicelineitem.FieldPeriodEnd] = struct{}{}
}

// PeriodEndCleared returns if the "period_end" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) PeriodEndCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldPeriodEnd]
	return ok
}

// ResetPeriodEnd resets all changes to the "period_end" field.
func (m *InvoiceLineItemMutation) ResetPeriodEnd() {
	m.period_end = nil
	delete(m.clearedFields, invoicelineitem.FieldPeriodEnd)
}

// SetMetadata sets the "metadata" field.
func (m *InvoiceLineItemMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *InvoiceLineItemMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the InvoiceLineItem entity.
// If the InvoiceLineItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineItemMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *InvoiceLineItemMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[invoicelineitem.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *InvoiceLineItemMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[invoicelineitem.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *InvoiceLineItemMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, invoicelineitem.FieldMetadata)
}

// ClearInvoice clears the "invoice" edge to the Invoice entity.
func (m *InvoiceLineItemMutation) ClearInvoice() {
	m.clearedinvoice = true
	m.clearedFields[invoicelineitem.FieldInvoiceID] = struct{}{}
}

// InvoiceCleared reports if the "invoice" edge to the Invoice entity was cleared.
func (m *InvoiceLineItemMutation) InvoiceCleared() bool {
	return m.clearedinvoice
}

// InvoiceIDs returns the "invoice" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InvoiceID instead. It exists only for internal usage by the builders.
func (m *InvoiceLineItemMutation) InvoiceIDs() (ids []string) {
	if id := m.invoice; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInvoice resets all changes to the "invoice" edge.
func (m *InvoiceLineItemMutation) ResetInvoice() {
	m.invoice = nil
	m.clearedinvoice = false
}

// Where appends a list predicates to the InvoiceLineItemMutation builder.
func (m *InvoiceLineItemMutation) Where(ps ...predicate.InvoiceLineItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InvoiceLineItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InvoiceLineItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.InvoiceLineItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InvoiceLineItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InvoiceLineItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (InvoiceLineItem).
func (m *InvoiceLineItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InvoiceLineItemMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.tenant_id != nil {
		fields = append(fields, invoicelineitem.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, invoicelineitem.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, invoicelineitem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, invoicelineitem.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, invoicelineitem.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, invoicelineitem.FieldUpdatedBy)
	}
	if m.invoice != nil {
		fields = append(fields, invoicelineitem.FieldInvoiceID)
	}
	if m.customer_id != nil {
		fields = append(fields, invoicelineitem.FieldCustomerID)
	}
	if m.subscription_id != nil {
		fields = append(fields, invoicelineitem.FieldSubscriptionID)
	}
	if m.price_id != nil {
		fields = append(fields, invoicelineitem.FieldPriceID)
	}
	if m.meter_id != nil {
		fields = append(fields, invoicelineitem.FieldMeterID)
	}
	if m.amount != nil {
		fields = append(fields, invoicelineitem.FieldAmount)
	}
	if m.quantity != nil {
		fields = append(fields, invoicelineitem.FieldQuantity)
	}
	if m.currency != nil {
		fields = append(fields, invoicelineitem.FieldCurrency)
	}
	if m.period_start != nil {
		fields = append(fields, invoicelineitem.FieldPeriodStart)
	}
	if m.period_end != nil {
		fields = append(fields, invoicelineitem.FieldPeriodEnd)
	}
	if m.metadata != nil {
		fields = append(fields, invoicelineitem.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InvoiceLineItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invoicelineitem.FieldTenantID:
		return m.TenantID()
	case invoicelineitem.FieldStatus:
		return m.Status()
	case invoicelineitem.FieldCreatedAt:
		return m.CreatedAt()
	case invoicelineitem.FieldUpdatedAt:
		return m.UpdatedAt()
	case invoicelineitem.FieldCreatedBy:
		return m.CreatedBy()
	case invoicelineitem.FieldUpdatedBy:
		return m.UpdatedBy()
	case invoicelineitem.FieldInvoiceID:
		return m.InvoiceID()
	case invoicelineitem.FieldCustomerID:
		return m.CustomerID()
	case invoicelineitem.FieldSubscriptionID:
		return m.SubscriptionID()
	case invoicelineitem.FieldPriceID:
		return m.PriceID()
	case invoicelineitem.FieldMeterID:
		return m.MeterID()
	case invoicelineitem.FieldAmount:
		return m.Amount()
	case invoicelineitem.FieldQuantity:
		return m.Quantity()
	case invoicelineitem.FieldCurrency:
		return m.Currency()
	case invoicelineitem.FieldPeriodStart:
		return m.PeriodStart()
	case invoicelineitem.FieldPeriodEnd:
		return m.PeriodEnd()
	case invoicelineitem.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InvoiceLineItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invoicelineitem.FieldTenantID:
		return m.OldTenantID(ctx)
	case invoicelineitem.FieldStatus:
		return m.OldStatus(ctx)
	case invoicelineitem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case invoicelineitem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case invoicelineitem.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case invoicelineitem.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case invoicelineitem.FieldInvoiceID:
		return m.OldInvoiceID(ctx)
	case invoicelineitem.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case invoicelineitem.FieldSubscriptionID:
		return m.OldSubscriptionID(ctx)
	case invoicelineitem.FieldPriceID:
		return m.OldPriceID(ctx)
	case invoicelineitem.FieldMeterID:
		return m.OldMeterID(ctx)
	case invoicelineitem.FieldAmount:
		return m.OldAmount(ctx)
	case invoicelineitem.FieldQuantity:
		return m.OldQuantity(ctx)
	case invoicelineitem.FieldCurrency:
		return m.OldCurrency(ctx)
	case invoicelineitem.FieldPeriodStart:
		return m.OldPeriodStart(ctx)
	case invoicelineitem.FieldPeriodEnd:
		return m.OldPeriodEnd(ctx)
	case invoicelineitem.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown InvoiceLineItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceLineItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invoicelineitem.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case invoicelineitem.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case invoicelineitem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case invoicelineitem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case invoicelineitem.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case invoicelineitem.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case invoicelineitem.FieldInvoiceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceID(v)
		return nil
	case invoicelineitem.FieldCustomerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case invoicelineitem.FieldSubscriptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionID(v)
		return nil
	case invoicelineitem.FieldPriceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceID(v)
		return nil
	case invoicelineitem.FieldMeterID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeterID(v)
		return nil
	case invoicelineitem.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case invoicelineitem.FieldQuantity:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case invoicelineitem.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case invoicelineitem.FieldPeriodStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodStart(v)
		return nil
	case invoicelineitem.FieldPeriodEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodEnd(v)
		return nil
	case invoicelineitem.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown InvoiceLineItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InvoiceLineItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InvoiceLineItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceLineItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown InvoiceLineItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InvoiceLineItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(invoicelineitem.FieldCreatedBy) {
		fields = append(fields, invoicelineitem.FieldCreatedBy)
	}
	if m.FieldCleared(invoicelineitem.FieldUpdatedBy) {
		fields = append(fields, invoicelineitem.FieldUpdatedBy)
	}
	if m.FieldCleared(invoicelineitem.FieldSubscriptionID) {
		fields = append(fields, invoicelineitem.FieldSubscriptionID)
	}
	if m.FieldCleared(invoicelineitem.FieldMeterID) {
		fields = append(fields, invoicelineitem.FieldMeterID)
	}
	if m.FieldCleared(invoicelineitem.FieldPeriodStart) {
		fields = append(fields, invoicelineitem.FieldPeriodStart)
	}
	if m.FieldCleared(invoicelineitem.FieldPeriodEnd) {
		fields = append(fields, invoicelineitem.FieldPeriodEnd)
	}
	if m.FieldCleared(invoicelineitem.FieldMetadata) {
		fields = append(fields, invoicelineitem.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InvoiceLineItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InvoiceLineItemMutation) ClearField(name string) error {
	switch name {
	case invoicelineitem.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case invoicelineitem.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case invoicelineitem.FieldSubscriptionID:
		m.ClearSubscriptionID()
		return nil
	case invoicelineitem.FieldMeterID:
		m.ClearMeterID()
		return nil
	case invoicelineitem.FieldPeriodStart:
		m.ClearPeriodStart()
		return nil
	case invoicelineitem.FieldPeriodEnd:
		m.ClearPeriodEnd()
		return nil
	case invoicelineitem.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown InvoiceLineItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InvoiceLineItemMutation) ResetField(name string) error {
	switch name {
	case invoicelineitem.FieldTenantID:
		m.ResetTenantID()
		return nil
	case invoicelineitem.FieldStatus:
		m.ResetStatus()
		return nil
	case invoicelineitem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case invoicelineitem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case invoicelineitem.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case invoicelineitem.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case invoicelineitem.FieldInvoiceID:
		m.ResetInvoiceID()
		return nil
	case invoicelineitem.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case invoicelineitem.FieldSubscriptionID:
		m.ResetSubscriptionID()
		return nil
	case invoicelineitem.FieldPriceID:
		m.ResetPriceID()
		return nil
	case invoicelineitem.FieldMeterID:
		m.ResetMeterID()
		return nil
	case invoicelineitem.FieldAmount:
		m.ResetAmount()
		return nil
	case invoicelineitem.FieldQuantity:
		m.ResetQuantity()
		return nil
	case invoicelineitem.FieldCurrency:
		m.ResetCurrency()
		return nil
	case invoicelineitem.FieldPeriodStart:
		m.ResetPeriodStart()
		return nil
	case invoicelineitem.FieldPeriodEnd:
		m.ResetPeriodEnd()
		return nil
	case invoicelineitem.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown InvoiceLineItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InvoiceLineItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.invoice != nil {
		edges = append(edges, invoicelineitem.EdgeInvoice)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InvoiceLineItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case invoicelineitem.EdgeInvoice:
		if id := m.invoice; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InvoiceLineItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InvoiceLineItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InvoiceLineItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedinvoice {
		edges = append(edges, invoicelineitem.EdgeInvoice)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InvoiceLineItemMutation) EdgeCleared(name string) bool {
	switch name {
	case invoicelineitem.EdgeInvoice:
		return m.clearedinvoice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InvoiceLineItemMutation) ClearEdge(name string) error {
	switch name {
	case invoicelineitem.EdgeInvoice:
		m.ClearInvoice()
		return nil
	}
	return fmt.Errorf("unknown InvoiceLineItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InvoiceLineItemMutation) ResetEdge(name string) error {
	switch name {
	case invoicelineitem.EdgeInvoice:
		m.ResetInvoice()
		return nil
	}
	return fmt.Errorf("unknown InvoiceLineItem edge %s", name)
}

// SubscriptionMutation represents an operation that mutates the Subscription nodes in the graph.
type SubscriptionMutation struct {
	config
	op                      Op
	typ                     string
	id                      *string
	tenant_id               *string
	status                  *string
	created_at              *time.Time
	updated_at              *time.Time
	created_by              *string
	updated_by              *string
	lookup_key              *string
	customer_id             *string
	plan_id                 *string
	subscription_status     *string
	currency                *string
	billing_anchor          *time.Time
	start_date              *time.Time
	end_date                *time.Time
	current_period_start    *time.Time
	current_period_end      *time.Time
	cancelled_at            *time.Time
	cancel_at               *time.Time
	cancel_at_period_end    *bool
	trial_start             *time.Time
	trial_end               *time.Time
	invoice_cadence         *string
	billing_cadence         *string
	billing_period          *string
	billing_period_count    *int
	addbilling_period_count *int
	version                 *int
	addversion              *int
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*Subscription, error)
	predicates              []predicate.Subscription
}

var _ ent.Mutation = (*SubscriptionMutation)(nil)

// subscriptionOption allows management of the mutation configuration using functional options.
type subscriptionOption func(*SubscriptionMutation)

// newSubscriptionMutation creates new mutation for the Subscription entity.
func newSubscriptionMutation(c config, op Op, opts ...subscriptionOption) *SubscriptionMutation {
	m := &SubscriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscriptionID sets the ID field of the mutation.
func withSubscriptionID(id string) subscriptionOption {
	return func(m *SubscriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Subscription
		)
		m.oldValue = func(ctx context.Context) (*Subscription, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Subscription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscription sets the old Subscription of the mutation.
func withSubscription(node *Subscription) subscriptionOption {
	return func(m *SubscriptionMutation) {
		m.oldValue = func(context.Context) (*Subscription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Subscription entities.
func (m *SubscriptionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscriptionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscriptionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Subscription.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *SubscriptionMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *SubscriptionMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *SubscriptionMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetStatus sets the "status" field.
func (m *SubscriptionMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SubscriptionMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SubscriptionMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscriptionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscriptionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscriptionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubscriptionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubscriptionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubscriptionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *SubscriptionMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *SubscriptionMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *SubscriptionMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[subscription.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *SubscriptionMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[subscription.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *SubscriptionMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, subscription.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *SubscriptionMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *SubscriptionMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *SubscriptionMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[subscription.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *SubscriptionMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[subscription.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *SubscriptionMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, subscription.FieldUpdatedBy)
}

// SetLookupKey sets the "lookup_key" field.
func (m *SubscriptionMutation) SetLookupKey(s string) {
	m.lookup_key = &s
}

// LookupKey returns the value of the "lookup_key" field in the mutation.
func (m *SubscriptionMutation) LookupKey() (r string, exists bool) {
	v := m.lookup_key
	if v == nil {
		return
	}
	return *v, true
}

// OldLookupKey returns the old "lookup_key" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldLookupKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLookupKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLookupKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLookupKey: %w", err)
	}
	return oldValue.LookupKey, nil
}

// ClearLookupKey clears the value of the "lookup_key" field.
func (m *SubscriptionMutation) ClearLookupKey() {
	m.lookup_key = nil
	m.clearedFields[subscription.FieldLookupKey] = struct{}{}
}

// LookupKeyCleared returns if the "lookup_key" field was cleared in this mutation.
func (m *SubscriptionMutation) LookupKeyCleared() bool {
	_, ok := m.clearedFields[subscription.FieldLookupKey]
	return ok
}

// ResetLookupKey resets all changes to the "lookup_key" field.
func (m *SubscriptionMutation) ResetLookupKey() {
	m.lookup_key = nil
	delete(m.clearedFields, subscription.FieldLookupKey)
}

// SetCustomerID sets the "customer_id" field.
func (m *SubscriptionMutation) SetCustomerID(s string) {
	m.customer_id = &s
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *SubscriptionMutation) CustomerID() (r string, exists bool) {
	v := m.customer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCustomerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *SubscriptionMutation) ResetCustomerID() {
	m.customer_id = nil
}

// SetPlanID sets the "plan_id" field.
func (m *SubscriptionMutation) SetPlanID(s string) {
	m.plan_id = &s
}

// PlanID returns the value of the "plan_id" field in the mutation.
func (m *SubscriptionMutation) PlanID() (r string, exists bool) {
	v := m.plan_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanID returns the old "plan_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldPlanID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanID: %w", err)
	}
	return oldValue.PlanID, nil
}

// ResetPlanID resets all changes to the "plan_id" field.
func (m *SubscriptionMutation) ResetPlanID() {
	m.plan_id = nil
}

// SetSubscriptionStatus sets the "subscription_status" field.
func (m *SubscriptionMutation) SetSubscriptionStatus(s string) {
	m.subscription_status = &s
}

// SubscriptionStatus returns the value of the "subscription_status" field in the mutation.
func (m *SubscriptionMutation) SubscriptionStatus() (r string, exists bool) {
	v := m.subscription_status
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionStatus returns the old "subscription_status" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldSubscriptionStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionStatus: %w", err)
	}
	return oldValue.SubscriptionStatus, nil
}

// ResetSubscriptionStatus resets all changes to the "subscription_status" field.
func (m *SubscriptionMutation) ResetSubscriptionStatus() {
	m.subscription_status = nil
}

// SetCurrency sets the "currency" field.
func (m *SubscriptionMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *SubscriptionMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *SubscriptionMutation) ResetCurrency() {
	m.currency = nil
}

// SetBillingAnchor sets the "billing_anchor" field.
func (m *SubscriptionMutation) SetBillingAnchor(t time.Time) {
	m.billing_anchor = &t
}

// BillingAnchor returns the value of the "billing_anchor" field in the mutation.
func (m *SubscriptionMutation) BillingAnchor() (r time.Time, exists bool) {
	v := m.billing_anchor
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingAnchor returns the old "billing_anchor" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldBillingAnchor(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingAnchor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingAnchor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingAnchor: %w", err)
	}
	return oldValue.BillingAnchor, nil
}

// ResetBillingAnchor resets all changes to the "billing_anchor" field.
func (m *SubscriptionMutation) ResetBillingAnchor() {
	m.billing_anchor = nil
}

// SetStartDate sets the "start_date" field.
func (m *SubscriptionMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *SubscriptionMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *SubscriptionMutation) ResetStartDate() {
	m.start_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *SubscriptionMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *SubscriptionMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldEndDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ClearEndDate clears the value of the "end_date" field.
func (m *SubscriptionMutation) ClearEndDate() {
	m.end_date = nil
	m.clearedFields[subscription.FieldEndDate] = struct{}{}
}

// EndDateCleared returns if the "end_date" field was cleared in this mutation.
func (m *SubscriptionMutation) EndDateCleared() bool {
	_, ok := m.clearedFields[subscription.FieldEndDate]
	return ok
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *SubscriptionMutation) ResetEndDate() {
	m.end_date = nil
	delete(m.clearedFields, subscription.FieldEndDate)
}

// SetCurrentPeriodStart sets the "current_period_start" field.
func (m *SubscriptionMutation) SetCurrentPeriodStart(t time.Time) {
	m.current_period_start = &t
}

// CurrentPeriodStart returns the value of the "current_period_start" field in the mutation.
func (m *SubscriptionMutation) CurrentPeriodStart() (r time.Time, exists bool) {
	v := m.current_period_start
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentPeriodStart returns the old "current_period_start" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCurrentPeriodStart(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentPeriodStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentPeriodStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentPeriodStart: %w", err)
	}
	return oldValue.CurrentPeriodStart, nil
}

// ResetCurrentPeriodStart resets all changes to the "current_period_start" field.
func (m *SubscriptionMutation) ResetCurrentPeriodStart() {
	m.current_period_start = nil
}

// SetCurrentPeriodEnd sets the "current_period_end" field.
func (m *SubscriptionMutation) SetCurrentPeriodEnd(t time.Time) {
	m.current_period_end = &t
}

// CurrentPeriodEnd returns the value of the "current_period_end" field in the mutation.
func (m *SubscriptionMutation) CurrentPeriodEnd() (r time.Time, exists bool) {
	v := m.current_period_end
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentPeriodEnd returns the old "current_period_end" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCurrentPeriodEnd(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentPeriodEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentPeriodEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentPeriodEnd: %w", err)
	}
	return oldValue.CurrentPeriodEnd, nil
}

// ResetCurrentPeriodEnd resets all changes to the "current_period_end" field.
func (m *SubscriptionMutation) ResetCurrentPeriodEnd() {
	m.current_period_end = nil
}

// SetCancelledAt sets the "cancelled_at" field.
func (m *SubscriptionMutation) SetCancelledAt(t time.Time) {
	m.cancelled_at = &t
}

// CancelledAt returns the value of the "cancelled_at" field in the mutation.
func (m *SubscriptionMutation) CancelledAt() (r time.Time, exists bool) {
	v := m.cancelled_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelledAt returns the old "cancelled_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCancelledAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancelledAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancelledAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelledAt: %w", err)
	}
	return oldValue.CancelledAt, nil
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (m *SubscriptionMutation) ClearCancelledAt() {
	m.cancelled_at = nil
	m.clearedFields[subscription.FieldCancelledAt] = struct{}{}
}

// CancelledAtCleared returns if the "cancelled_at" field was cleared in this mutation.
func (m *SubscriptionMutation) CancelledAtCleared() bool {
	_, ok := m.clearedFields[subscription.FieldCancelledAt]
	return ok
}

// ResetCancelledAt resets all changes to the "cancelled_at" field.
func (m *SubscriptionMutation) ResetCancelledAt() {
	m.cancelled_at = nil
	delete(m.clearedFields, subscription.FieldCancelledAt)
}

// SetCancelAt sets the "cancel_at" field.
func (m *SubscriptionMutation) SetCancelAt(t time.Time) {
	m.cancel_at = &t
}

// CancelAt returns the value of the "cancel_at" field in the mutation.
func (m *SubscriptionMutation) CancelAt() (r time.Time, exists bool) {
	v := m.cancel_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelAt returns the old "cancel_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCancelAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancelAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancelAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelAt: %w", err)
	}
	return oldValue.CancelAt, nil
}

// ClearCancelAt clears the value of the "cancel_at" field.
func (m *SubscriptionMutation) ClearCancelAt() {
	m.cancel_at = nil
	m.clearedFields[subscription.FieldCancelAt] = struct{}{}
}

// CancelAtCleared returns if the "cancel_at" field was cleared in this mutation.
func (m *SubscriptionMutation) CancelAtCleared() bool {
	_, ok := m.clearedFields[subscription.FieldCancelAt]
	return ok
}

// ResetCancelAt resets all changes to the "cancel_at" field.
func (m *SubscriptionMutation) ResetCancelAt() {
	m.cancel_at = nil
	delete(m.clearedFields, subscription.FieldCancelAt)
}

// SetCancelAtPeriodEnd sets the "cancel_at_period_end" field.
func (m *SubscriptionMutation) SetCancelAtPeriodEnd(b bool) {
	m.cancel_at_period_end = &b
}

// CancelAtPeriodEnd returns the value of the "cancel_at_period_end" field in the mutation.
func (m *SubscriptionMutation) CancelAtPeriodEnd() (r bool, exists bool) {
	v := m.cancel_at_period_end
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelAtPeriodEnd returns the old "cancel_at_period_end" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCancelAtPeriodEnd(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancelAtPeriodEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancelAtPeriodEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelAtPeriodEnd: %w", err)
	}
	return oldValue.CancelAtPeriodEnd, nil
}

// ResetCancelAtPeriodEnd resets all changes to the "cancel_at_period_end" field.
func (m *SubscriptionMutation) ResetCancelAtPeriodEnd() {
	m.cancel_at_period_end = nil
}

// SetTrialStart sets the "trial_start" field.
func (m *SubscriptionMutation) SetTrialStart(t time.Time) {
	m.trial_start = &t
}

// TrialStart returns the value of the "trial_start" field in the mutation.
func (m *SubscriptionMutation) TrialStart() (r time.Time, exists bool) {
	v := m.trial_start
	if v == nil {
		return
	}
	return *v, true
}

// OldTrialStart returns the old "trial_start" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldTrialStart(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrialStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrialStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrialStart: %w", err)
	}
	return oldValue.TrialStart, nil
}

// ClearTrialStart clears the value of the "trial_start" field.
func (m *SubscriptionMutation) ClearTrialStart() {
	m.trial_start = nil
	m.clearedFields[subscription.FieldTrialStart] = struct{}{}
}

// TrialStartCleared returns if the "trial_start" field was cleared in this mutation.
func (m *SubscriptionMutation) TrialStartCleared() bool {
	_, ok := m.clearedFields[subscription.FieldTrialStart]
	return ok
}

// ResetTrialStart resets all changes to the "trial_start" field.
func (m *SubscriptionMutation) ResetTrialStart() {
	m.trial_start = nil
	delete(m.clearedFields, subscription.FieldTrialStart)
}

// SetTrialEnd sets the "trial_end" field.
func (m *SubscriptionMutation) SetTrialEnd(t time.Time) {
	m.trial_end = &t
}

// TrialEnd returns the value of the "trial_end" field in the mutation.
func (m *SubscriptionMutation) TrialEnd() (r time.Time, exists bool) {
	v := m.trial_end
	if v == nil {
		return
	}
	return *v, true
}

// OldTrialEnd returns the old "trial_end" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldTrialEnd(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrialEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrialEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrialEnd: %w", err)
	}
	return oldValue.TrialEnd, nil
}

// ClearTrialEnd clears the value of the "trial_end" field.
func (m *SubscriptionMutation) ClearTrialEnd() {
	m.trial_end = nil
	m.clearedFields[subscription.FieldTrialEnd] = struct{}{}
}

// TrialEndCleared returns if the "trial_end" field was cleared in this mutation.
func (m *SubscriptionMutation) TrialEndCleared() bool {
	_, ok := m.clearedFields[subscription.FieldTrialEnd]
	return ok
}

// ResetTrialEnd resets all changes to the "trial_end" field.
func (m *SubscriptionMutation) ResetTrialEnd() {
	m.trial_end = nil
	delete(m.clearedFields, subscription.FieldTrialEnd)
}

// SetInvoiceCadence sets the "invoice_cadence" field.
func (m *SubscriptionMutation) SetInvoiceCadence(s string) {
	m.invoice_cadence = &s
}

// InvoiceCadence returns the value of the "invoice_cadence" field in the mutation.
func (m *SubscriptionMutation) InvoiceCadence() (r string, exists bool) {
	v := m.invoice_cadence
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceCadence returns the old "invoice_cadence" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldInvoiceCadence(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceCadence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceCadence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceCadence: %w", err)
	}
	return oldValue.InvoiceCadence, nil
}

// ResetInvoiceCadence resets all changes to the "invoice_cadence" field.
func (m *SubscriptionMutation) ResetInvoiceCadence() {
	m.invoice_cadence = nil
}

// SetBillingCadence sets the "billing_cadence" field.
func (m *SubscriptionMutation) SetBillingCadence(s string) {
	m.billing_cadence = &s
}

// BillingCadence returns the value of the "billing_cadence" field in the mutation.
func (m *SubscriptionMutation) BillingCadence() (r string, exists bool) {
	v := m.billing_cadence
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingCadence returns the old "billing_cadence" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldBillingCadence(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingCadence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingCadence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingCadence: %w", err)
	}
	return oldValue.BillingCadence, nil
}

// ResetBillingCadence resets all changes to the "billing_cadence" field.
func (m *SubscriptionMutation) ResetBillingCadence() {
	m.billing_cadence = nil
}

// SetBillingPeriod sets the "billing_period" field.
func (m *SubscriptionMutation) SetBillingPeriod(s string) {
	m.billing_period = &s
}

// BillingPeriod returns the value of the "billing_period" field in the mutation.
func (m *SubscriptionMutation) BillingPeriod() (r string, exists bool) {
	v := m.billing_period
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingPeriod returns the old "billing_period" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldBillingPeriod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingPeriod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingPeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingPeriod: %w", err)
	}
	return oldValue.BillingPeriod, nil
}

// ResetBillingPeriod resets all changes to the "billing_period" field.
func (m *SubscriptionMutation) ResetBillingPeriod() {
	m.billing_period = nil
}

// SetBillingPeriodCount sets the "billing_period_count" field.
func (m *SubscriptionMutation) SetBillingPeriodCount(i int) {
	m.billing_period_count = &i
	m.addbilling_period_count = nil
}

// BillingPeriodCount returns the value of the "billing_period_count" field in the mutation.
func (m *SubscriptionMutation) BillingPeriodCount() (r int, exists bool) {
	v := m.billing_period_count
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingPeriodCount returns the old "billing_period_count" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldBillingPeriodCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingPeriodCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingPeriodCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingPeriodCount: %w", err)
	}
	return oldValue.BillingPeriodCount, nil
}

// AddBillingPeriodCount adds i to the "billing_period_count" field.
func (m *SubscriptionMutation) AddBillingPeriodCount(i int) {
	if m.addbilling_period_count != nil {
		*m.addbilling_period_count += i
	} else {
		m.addbilling_period_count = &i
	}
}

// AddedBillingPeriodCount returns the value that was added to the "billing_period_count" field in this mutation.
func (m *SubscriptionMutation) AddedBillingPeriodCount() (r int, exists bool) {
	v := m.addbilling_period_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetBillingPeriodCount resets all changes to the "billing_period_count" field.
func (m *SubscriptionMutation) ResetBillingPeriodCount() {
	m.billing_period_count = nil
	m.addbilling_period_count = nil
}

// SetVersion sets the "version" field.
func (m *SubscriptionMutation) SetVersion(i int) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *SubscriptionMutation) Version() (r int, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldVersion(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *SubscriptionMutation) AddVersion(i int) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *SubscriptionMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *SubscriptionMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// Where appends a list predicates to the SubscriptionMutation builder.
func (m *SubscriptionMutation) Where(ps ...predicate.Subscription) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubscriptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubscriptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Subscription, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubscriptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubscriptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Subscription).
func (m *SubscriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscriptionMutation) Fields() []string {
	fields := make([]string, 0, 26)
	if m.tenant_id != nil {
		fields = append(fields, subscription.FieldTenantID)
	}
	if m.status != nil {
		fields = append(fields, subscription.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, subscription.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, subscription.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, subscription.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, subscription.FieldUpdatedBy)
	}
	if m.lookup_key != nil {
		fields = append(fields, subscription.FieldLookupKey)
	}
	if m.customer_id != nil {
		fields = append(fields, subscription.FieldCustomerID)
	}
	if m.plan_id != nil {
		fields = append(fields, subscription.FieldPlanID)
	}
	if m.subscription_status != nil {
		fields = append(fields, subscription.FieldSubscriptionStatus)
	}
	if m.currency != nil {
		fields = append(fields, subscription.FieldCurrency)
	}
	if m.billing_anchor != nil {
		fields = append(fields, subscription.FieldBillingAnchor)
	}
	if m.start_date != nil {
		fields = append(fields, subscription.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, subscription.FieldEndDate)
	}
	if m.current_period_start != nil {
		fields = append(fields, subscription.FieldCurrentPeriodStart)
	}
	if m.current_period_end != nil {
		fields = append(fields, subscription.FieldCurrentPeriodEnd)
	}
	if m.cancelled_at != nil {
		fields = append(fields, subscription.FieldCancelledAt)
	}
	if m.cancel_at != nil {
		fields = append(fields, subscription.FieldCancelAt)
	}
	if m.cancel_at_period_end != nil {
		fields = append(fields, subscription.FieldCancelAtPeriodEnd)
	}
	if m.trial_start != nil {
		fields = append(fields, subscription.FieldTrialStart)
	}
	if m.trial_end != nil {
		fields = append(fields, subscription.FieldTrialEnd)
	}
	if m.invoice_cadence != nil {
		fields = append(fields, subscription.FieldInvoiceCadence)
	}
	if m.billing_cadence != nil {
		fields = append(fields, subscription.FieldBillingCadence)
	}
	if m.billing_period != nil {
		fields = append(fields, subscription.FieldBillingPeriod)
	}
	if m.billing_period_count != nil {
		fields = append(fields, subscription.FieldBillingPeriodCount)
	}
	if m.version != nil {
		fields = append(fields, subscription.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscription.FieldTenantID:
		return m.TenantID()
	case subscription.FieldStatus:
		return m.Status()
	case subscription.FieldCreatedAt:
		return m.CreatedAt()
	case subscription.FieldUpdatedAt:
		return m.UpdatedAt()
	case subscription.FieldCreatedBy:
		return m.CreatedBy()
	case subscription.FieldUpdatedBy:
		return m.UpdatedBy()
	case subscription.FieldLookupKey:
		return m.LookupKey()
	case subscription.FieldCustomerID:
		return m.CustomerID()
	case subscription.FieldPlanID:
		return m.PlanID()
	case subscription.FieldSubscriptionStatus:
		return m.SubscriptionStatus()
	case subscription.FieldCurrency:
		return m.Currency()
	case subscription.FieldBillingAnchor:
		return m.BillingAnchor()
	case subscription.FieldStartDate:
		return m.StartDate()
	case subscription.FieldEndDate:
		return m.EndDate()
	case subscription.FieldCurrentPeriodStart:
		return m.CurrentPeriodStart()
	case subscription.FieldCurrentPeriodEnd:
		return m.CurrentPeriodEnd()
	case subscription.FieldCancelledAt:
		return m.CancelledAt()
	case subscription.FieldCancelAt:
		return m.CancelAt()
	case subscription.FieldCancelAtPeriodEnd:
		return m.CancelAtPeriodEnd()
	case subscription.FieldTrialStart:
		return m.TrialStart()
	case subscription.FieldTrialEnd:
		return m.TrialEnd()
	case subscription.FieldInvoiceCadence:
		return m.InvoiceCadence()
	case subscription.FieldBillingCadence:
		return m.BillingCadence()
	case subscription.FieldBillingPeriod:
		return m.BillingPeriod()
	case subscription.FieldBillingPeriodCount:
		return m.BillingPeriodCount()
	case subscription.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscription.FieldTenantID:
		return m.OldTenantID(ctx)
	case subscription.FieldStatus:
		return m.OldStatus(ctx)
	case subscription.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case subscription.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case subscription.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case subscription.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case subscription.FieldLookupKey:
		return m.OldLookupKey(ctx)
	case subscription.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case subscription.FieldPlanID:
		return m.OldPlanID(ctx)
	case subscription.FieldSubscriptionStatus:
		return m.OldSubscriptionStatus(ctx)
	case subscription.FieldCurrency:
		return m.OldCurrency(ctx)
	case subscription.FieldBillingAnchor:
		return m.OldBillingAnchor(ctx)
	case subscription.FieldStartDate:
		return m.OldStartDate(ctx)
	case subscription.FieldEndDate:
		return m.OldEndDate(ctx)
	case subscription.FieldCurrentPeriodStart:
		return m.OldCurrentPeriodStart(ctx)
	case subscription.FieldCurrentPeriodEnd:
		return m.OldCurrentPeriodEnd(ctx)
	case subscription.FieldCancelledAt:
		return m.OldCancelledAt(ctx)
	case subscription.FieldCancelAt:
		return m.OldCancelAt(ctx)
	case subscription.FieldCancelAtPeriodEnd:
		return m.OldCancelAtPeriodEnd(ctx)
	case subscription.FieldTrialStart:
		return m.OldTrialStart(ctx)
	case subscription.FieldTrialEnd:
		return m.OldTrialEnd(ctx)
	case subscription.FieldInvoiceCadence:
		return m.OldInvoiceCadence(ctx)
	case subscription.FieldBillingCadence:
		return m.OldBillingCadence(ctx)
	case subscription.FieldBillingPeriod:
		return m.OldBillingPeriod(ctx)
	case subscription.FieldBillingPeriodCount:
		return m.OldBillingPeriodCount(ctx)
	case subscription.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("unknown Subscription field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscription.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case subscription.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case subscription.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case subscription.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case subscription.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case subscription.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case subscription.FieldLookupKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLookupKey(v)
		return nil
	case subscription.FieldCustomerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case subscription.FieldPlanID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanID(v)
		return nil
	case subscription.FieldSubscriptionStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionStatus(v)
		return nil
	case subscription.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case subscription.FieldBillingAnchor:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingAnchor(v)
		return nil
	case subscription.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case subscription.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case subscription.FieldCurrentPeriodStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentPeriodStart(v)
		return nil
	case subscription.FieldCurrentPeriodEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentPeriodEnd(v)
		return nil
	case subscription.FieldCancelledAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelledAt(v)
		return nil
	case subscription.FieldCancelAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelAt(v)
		return nil
	case subscription.FieldCancelAtPeriodEnd:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelAtPeriodEnd(v)
		return nil
	case subscription.FieldTrialStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrialStart(v)
		return nil
	case subscription.FieldTrialEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrialEnd(v)
		return nil
	case subscription.FieldInvoiceCadence:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceCadence(v)
		return nil
	case subscription.FieldBillingCadence:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingCadence(v)
		return nil
	case subscription.FieldBillingPeriod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingPeriod(v)
		return nil
	case subscription.FieldBillingPeriodCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingPeriodCount(v)
		return nil
	case subscription.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Subscription field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscriptionMutation) AddedFields() []string {
	var fields []string
	if m.addbilling_period_count != nil {
		fields = append(fields, subscription.FieldBillingPeriodCount)
	}
	if m.addversion != nil {
		fields = append(fields, subscription.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscriptionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subscription.FieldBillingPeriodCount:
		return m.AddedBillingPeriodCount()
	case subscription.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subscription.FieldBillingPeriodCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBillingPeriodCount(v)
		return nil
	case subscription.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Subscription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscriptionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subscription.FieldCreatedBy) {
		fields = append(fields, subscription.FieldCreatedBy)
	}
	if m.FieldCleared(subscription.FieldUpdatedBy) {
		fields = append(fields, subscription.FieldUpdatedBy)
	}
	if m.FieldCleared(subscription.FieldLookupKey) {
		fields = append(fields, subscription.FieldLookupKey)
	}
	if m.FieldCleared(subscription.FieldEndDate) {
		fields = append(fields, subscription.FieldEndDate)
	}
	if m.FieldCleared(subscription.FieldCancelledAt) {
		fields = append(fields, subscription.FieldCancelledAt)
	}
	if m.FieldCleared(subscription.FieldCancelAt) {
		fields = append(fields, subscription.FieldCancelAt)
	}
	if m.FieldCleared(subscription.FieldTrialStart) {
		fields = append(fields, subscription.FieldTrialStart)
	}
	if m.FieldCleared(subscription.FieldTrialEnd) {
		fields = append(fields, subscription.FieldTrialEnd)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscriptionMutation) ClearField(name string) error {
	switch name {
	case subscription.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case subscription.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case subscription.FieldLookupKey:
		m.ClearLookupKey()
		return nil
	case subscription.FieldEndDate:
		m.ClearEndDate()
		return nil
	case subscription.FieldCancelledAt:
		m.ClearCancelledAt()
		return nil
	case subscription.FieldCancelAt:
		m.ClearCancelAt()
		return nil
	case subscription.FieldTrialStart:
		m.ClearTrialStart()
		return nil
	case subscription.FieldTrialEnd:
		m.ClearTrialEnd()
		return nil
	}
	return fmt.Errorf("unknown Subscription nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscriptionMutation) ResetField(name string) error {
	switch name {
	case subscription.FieldTenantID:
		m.ResetTenantID()
		return nil
	case subscription.FieldStatus:
		m.ResetStatus()
		return nil
	case subscription.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case subscription.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case subscription.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case subscription.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case subscription.FieldLookupKey:
		m.ResetLookupKey()
		return nil
	case subscription.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case subscription.FieldPlanID:
		m.ResetPlanID()
		return nil
	case subscription.FieldSubscriptionStatus:
		m.ResetSubscriptionStatus()
		return nil
	case subscription.FieldCurrency:
		m.ResetCurrency()
		return nil
	case subscription.FieldBillingAnchor:
		m.ResetBillingAnchor()
		return nil
	case subscription.FieldStartDate:
		m.ResetStartDate()
		return nil
	case subscription.FieldEndDate:
		m.ResetEndDate()
		return nil
	case subscription.FieldCurrentPeriodStart:
		m.ResetCurrentPeriodStart()
		return nil
	case subscription.FieldCurrentPeriodEnd:
		m.ResetCurrentPeriodEnd()
		return nil
	case subscription.FieldCancelledAt:
		m.ResetCancelledAt()
		return nil
	case subscription.FieldCancelAt:
		m.ResetCancelAt()
		return nil
	case subscription.FieldCancelAtPeriodEnd:
		m.ResetCancelAtPeriodEnd()
		return nil
	case subscription.FieldTrialStart:
		m.ResetTrialStart()
		return nil
	case subscription.FieldTrialEnd:
		m.ResetTrialEnd()
		return nil
	case subscription.FieldInvoiceCadence:
		m.ResetInvoiceCadence()
		return nil
	case subscription.FieldBillingCadence:
		m.ResetBillingCadence()
		return nil
	case subscription.FieldBillingPeriod:
		m.ResetBillingPeriod()
		return nil
	case subscription.FieldBillingPeriodCount:
		m.ResetBillingPeriodCount()
		return nil
	case subscription.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("unknown Subscription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscriptionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscriptionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscriptionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscriptionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Subscription unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscriptionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Subscription edge %s", name)
}

// WalletMutation represents an operation that mutates the Wallet nodes in the graph.
type WalletMutation struct {
	config
	op            Op
	typ           string
	id            *string
	tenant_id     *string
	customer_id   *string
	currency      *string
	description   *string
	metadata      *map[string]string
	balance       *decimal.Decimal
	wallet_status *string
	status        *string
	created_at    *time.Time
	created_by    *string
	updated_at    *time.Time
	updated_by    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Wallet, error)
	predicates    []predicate.Wallet
}

var _ ent.Mutation = (*WalletMutation)(nil)

// walletOption allows management of the mutation configuration using functional options.
type walletOption func(*WalletMutation)

// newWalletMutation creates new mutation for the Wallet entity.
func newWalletMutation(c config, op Op, opts ...walletOption) *WalletMutation {
	m := &WalletMutation{
		config:        c,
		op:            op,
		typ:           TypeWallet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWalletID sets the ID field of the mutation.
func withWalletID(id string) walletOption {
	return func(m *WalletMutation) {
		var (
			err   error
			once  sync.Once
			value *Wallet
		)
		m.oldValue = func(ctx context.Context) (*Wallet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Wallet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWallet sets the old Wallet of the mutation.
func withWallet(node *Wallet) walletOption {
	return func(m *WalletMutation) {
		m.oldValue = func(context.Context) (*Wallet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WalletMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WalletMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Wallet entities.
func (m *WalletMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WalletMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WalletMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Wallet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *WalletMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *WalletMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *WalletMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetCustomerID sets the "customer_id" field.
func (m *WalletMutation) SetCustomerID(s string) {
	m.customer_id = &s
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *WalletMutation) CustomerID() (r string, exists bool) {
	v := m.customer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldCustomerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *WalletMutation) ResetCustomerID() {
	m.customer_id = nil
}

// SetCurrency sets the "currency" field.
func (m *WalletMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *WalletMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *WalletMutation) ResetCurrency() {
	m.currency = nil
}

// SetDescription sets the "description" field.
func (m *WalletMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *WalletMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *WalletMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[wallet.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *WalletMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[wallet.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *WalletMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, wallet.FieldDescription)
}

// SetMetadata sets the "metadata" field.
func (m *WalletMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *WalletMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *WalletMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[wallet.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *WalletMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[wallet.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *WalletMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, wallet.FieldMetadata)
}

// SetBalance sets the "balance" field.
func (m *WalletMutation) SetBalance(d decimal.Decimal) {
	m.balance = &d
}

// Balance returns the value of the "balance" field in the mutation.
func (m *WalletMutation) Balance() (r decimal.Decimal, exists bool) {
	v := m.balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBalance returns the old "balance" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldBalance(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalance: %w", err)
	}
	return oldValue.Balance, nil
}

// ResetBalance resets all changes to the "balance" field.
func (m *WalletMutation) ResetBalance() {
	m.balance = nil
}

// SetWalletStatus sets the "wallet_status" field.
func (m *WalletMutation) SetWalletStatus(s string) {
	m.wallet_status = &s
}

// WalletStatus returns the value of the "wallet_status" field in the mutation.
func (m *WalletMutation) WalletStatus() (r string, exists bool) {
	v := m.wallet_status
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletStatus returns the old "wallet_status" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldWalletStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletStatus: %w", err)
	}
	return oldValue.WalletStatus, nil
}

// ResetWalletStatus resets all changes to the "wallet_status" field.
func (m *WalletMutation) ResetWalletStatus() {
	m.wallet_status = nil
}

// SetStatus sets the "status" field.
func (m *WalletMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *WalletMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *WalletMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *WalletMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WalletMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WalletMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *WalletMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *WalletMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *WalletMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[wallet.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *WalletMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[wallet.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *WalletMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, wallet.FieldCreatedBy)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WalletMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WalletMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WalletMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUpdatedBy sets the "updated_by" field.
func (m *WalletMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *WalletMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *WalletMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[wallet.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *WalletMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[wallet.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *WalletMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, wallet.FieldUpdatedBy)
}

// Where appends a list predicates to the WalletMutation builder.
func (m *WalletMutation) Where(ps ...predicate.Wallet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WalletMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WalletMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Wallet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WalletMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WalletMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Wallet).
func (m *WalletMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WalletMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.tenant_id != nil {
		fields = append(fields, wallet.FieldTenantID)
	}
	if m.customer_id != nil {
		fields = append(fields, wallet.FieldCustomerID)
	}
	if m.currency != nil {
		fields = append(fields, wallet.FieldCurrency)
	}
	if m.description != nil {
		fields = append(fields, wallet.FieldDescription)
	}
	if m.metadata != nil {
		fields = append(fields, wallet.FieldMetadata)
	}
	if m.balance != nil {
		fields = append(fields, wallet.FieldBalance)
	}
	if m.wallet_status != nil {
		fields = append(fields, wallet.FieldWalletStatus)
	}
	if m.status != nil {
		fields = append(fields, wallet.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, wallet.FieldCreatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, wallet.FieldCreatedBy)
	}
	if m.updated_at != nil {
		fields = append(fields, wallet.FieldUpdatedAt)
	}
	if m.updated_by != nil {
		fields = append(fields, wallet.FieldUpdatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WalletMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case wallet.FieldTenantID:
		return m.TenantID()
	case wallet.FieldCustomerID:
		return m.CustomerID()
	case wallet.FieldCurrency:
		return m.Currency()
	case wallet.FieldDescription:
		return m.Description()
	case wallet.FieldMetadata:
		return m.Metadata()
	case wallet.FieldBalance:
		return m.Balance()
	case wallet.FieldWalletStatus:
		return m.WalletStatus()
	case wallet.FieldStatus:
		return m.Status()
	case wallet.FieldCreatedAt:
		return m.CreatedAt()
	case wallet.FieldCreatedBy:
		return m.CreatedBy()
	case wallet.FieldUpdatedAt:
		return m.UpdatedAt()
	case wallet.FieldUpdatedBy:
		return m.UpdatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WalletMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case wallet.FieldTenantID:
		return m.OldTenantID(ctx)
	case wallet.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case wallet.FieldCurrency:
		return m.OldCurrency(ctx)
	case wallet.FieldDescription:
		return m.OldDescription(ctx)
	case wallet.FieldMetadata:
		return m.OldMetadata(ctx)
	case wallet.FieldBalance:
		return m.OldBalance(ctx)
	case wallet.FieldWalletStatus:
		return m.OldWalletStatus(ctx)
	case wallet.FieldStatus:
		return m.OldStatus(ctx)
	case wallet.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case wallet.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case wallet.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case wallet.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown Wallet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletMutation) SetField(name string, value ent.Value) error {
	switch name {
	case wallet.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case wallet.FieldCustomerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case wallet.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case wallet.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case wallet.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case wallet.FieldBalance:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalance(v)
		return nil
	case wallet.FieldWalletStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletStatus(v)
		return nil
	case wallet.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case wallet.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case wallet.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case wallet.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case wallet.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown Wallet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WalletMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WalletMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Wallet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WalletMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(wallet.FieldDescription) {
		fields = append(fields, wallet.FieldDescription)
	}
	if m.FieldCleared(wallet.FieldMetadata) {
		fields = append(fields, wallet.FieldMetadata)
	}
	if m.FieldCleared(wallet.FieldCreatedBy) {
		fields = append(fields, wallet.FieldCreatedBy)
	}
	if m.FieldCleared(wallet.FieldUpdatedBy) {
		fields = append(fields, wallet.FieldUpdatedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WalletMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WalletMutation) ClearField(name string) error {
	switch name {
	case wallet.FieldDescription:
		m.ClearDescription()
		return nil
	case wallet.FieldMetadata:
		m.ClearMetadata()
		return nil
	case wallet.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case wallet.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown Wallet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WalletMutation) ResetField(name string) error {
	switch name {
	case wallet.FieldTenantID:
		m.ResetTenantID()
		return nil
	case wallet.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case wallet.FieldCurrency:
		m.ResetCurrency()
		return nil
	case wallet.FieldDescription:
		m.ResetDescription()
		return nil
	case wallet.FieldMetadata:
		m.ResetMetadata()
		return nil
	case wallet.FieldBalance:
		m.ResetBalance()
		return nil
	case wallet.FieldWalletStatus:
		m.ResetWalletStatus()
		return nil
	case wallet.FieldStatus:
		m.ResetStatus()
		return nil
	case wallet.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case wallet.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case wallet.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case wallet.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown Wallet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WalletMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WalletMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WalletMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WalletMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WalletMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WalletMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WalletMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Wallet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WalletMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Wallet edge %s", name)
}

// WalletTransactionMutation represents an operation that mutates the WalletTransaction nodes in the graph.
type WalletTransactionMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	tenant_id          *string
	wallet_id          *string
	_type              *string
	amount             *decimal.Decimal
	balance_before     *decimal.Decimal
	balance_after      *decimal.Decimal
	reference_type     *string
	reference_id       *string
	description        *string
	metadata           *map[string]string
	transaction_status *string
	status             *string
	created_at         *time.Time
	created_by         *string
	updated_at         *time.Time
	updated_by         *string
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*WalletTransaction, error)
	predicates         []predicate.WalletTransaction
}

var _ ent.Mutation = (*WalletTransactionMutation)(nil)

// wallettransactionOption allows management of the mutation configuration using functional options.
type wallettransactionOption func(*WalletTransactionMutation)

// newWalletTransactionMutation creates new mutation for the WalletTransaction entity.
func newWalletTransactionMutation(c config, op Op, opts ...wallettransactionOption) *WalletTransactionMutation {
	m := &WalletTransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeWalletTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWalletTransactionID sets the ID field of the mutation.
func withWalletTransactionID(id string) wallettransactionOption {
	return func(m *WalletTransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *WalletTransaction
		)
		m.oldValue = func(ctx context.Context) (*WalletTransaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WalletTransaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWalletTransaction sets the old WalletTransaction of the mutation.
func withWalletTransaction(node *WalletTransaction) wallettransactionOption {
	return func(m *WalletTransactionMutation) {
		m.oldValue = func(context.Context) (*WalletTransaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WalletTransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WalletTransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WalletTransaction entities.
func (m *WalletTransactionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WalletTransactionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WalletTransactionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WalletTransaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTenantID sets the "tenant_id" field.
func (m *WalletTransactionMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *WalletTransactionMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *WalletTransactionMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetWalletID sets the "wallet_id" field.
func (m *WalletTransactionMutation) SetWalletID(s string) {
	m.wallet_id = &s
}

// WalletID returns the value of the "wallet_id" field in the mutation.
func (m *WalletTransactionMutation) WalletID() (r string, exists bool) {
	v := m.wallet_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletID returns the old "wallet_id" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldWalletID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletID: %w", err)
	}
	return oldValue.WalletID, nil
}

// ResetWalletID resets all changes to the "wallet_id" field.
func (m *WalletTransactionMutation) ResetWalletID() {
	m.wallet_id = nil
}

// SetType sets the "type" field.
func (m *WalletTransactionMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *WalletTransactionMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *WalletTransactionMutation) ResetType() {
	m._type = nil
}

// SetAmount sets the "amount" field.
func (m *WalletTransactionMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *WalletTransactionMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *WalletTransactionMutation) ResetAmount() {
	m.amount = nil
}

// SetBalanceBefore sets the "balance_before" field.
func (m *WalletTransactionMutation) SetBalanceBefore(d decimal.Decimal) {
	m.balance_before = &d
}

// BalanceBefore returns the value of the "balance_before" field in the mutation.
func (m *WalletTransactionMutation) BalanceBefore() (r decimal.Decimal, exists bool) {
	v := m.balance_before
	if v == nil {
		return
	}
	return *v, true
}

// OldBalanceBefore returns the old "balance_before" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldBalanceBefore(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalanceBefore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalanceBefore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalanceBefore: %w", err)
	}
	return oldValue.BalanceBefore, nil
}

// ResetBalanceBefore resets all changes to the "balance_before" field.
func (m *WalletTransactionMutation) ResetBalanceBefore() {
	m.balance_before = nil
}

// SetBalanceAfter sets the "balance_after" field.
func (m *WalletTransactionMutation) SetBalanceAfter(d decimal.Decimal) {
	m.balance_after = &d
}

// BalanceAfter returns the value of the "balance_after" field in the mutation.
func (m *WalletTransactionMutation) BalanceAfter() (r decimal.Decimal, exists bool) {
	v := m.balance_after
	if v == nil {
		return
	}
	return *v, true
}

// OldBalanceAfter returns the old "balance_after" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldBalanceAfter(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalanceAfter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalanceAfter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalanceAfter: %w", err)
	}
	return oldValue.BalanceAfter, nil
}

// ResetBalanceAfter resets all changes to the "balance_after" field.
func (m *WalletTransactionMutation) ResetBalanceAfter() {
	m.balance_after = nil
}

// SetReferenceType sets the "reference_type" field.
func (m *WalletTransactionMutation) SetReferenceType(s string) {
	m.reference_type = &s
}

// ReferenceType returns the value of the "reference_type" field in the mutation.
func (m *WalletTransactionMutation) ReferenceType() (r string, exists bool) {
	v := m.reference_type
	if v == nil {
		return
	}
	return *v, true
}

// OldReferenceType returns the old "reference_type" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldReferenceType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferenceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferenceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferenceType: %w", err)
	}
	return oldValue.ReferenceType, nil
}

// ClearReferenceType clears the value of the "reference_type" field.
func (m *WalletTransactionMutation) ClearReferenceType() {
	m.reference_type = nil
	m.clearedFields[wallettransaction.FieldReferenceType] = struct{}{}
}

// ReferenceTypeCleared returns if the "reference_type" field was cleared in this mutation.
func (m *WalletTransactionMutation) ReferenceTypeCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldReferenceType]
	return ok
}

// ResetReferenceType resets all changes to the "reference_type" field.
func (m *WalletTransactionMutation) ResetReferenceType() {
	m.reference_type = nil
	delete(m.clearedFields, wallettransaction.FieldReferenceType)
}

// SetReferenceID sets the "reference_id" field.
func (m *WalletTransactionMutation) SetReferenceID(s string) {
	m.reference_id = &s
}

// ReferenceID returns the value of the "reference_id" field in the mutation.
func (m *WalletTransactionMutation) ReferenceID() (r string, exists bool) {
	v := m.reference_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReferenceID returns the old "reference_id" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldReferenceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferenceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferenceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferenceID: %w", err)
	}
	return oldValue.ReferenceID, nil
}

// ClearReferenceID clears the value of the "reference_id" field.
func (m *WalletTransactionMutation) ClearReferenceID() {
	m.reference_id = nil
	m.clearedFields[wallettransaction.FieldReferenceID] = struct{}{}
}

// ReferenceIDCleared returns if the "reference_id" field was cleared in this mutation.
func (m *WalletTransactionMutation) ReferenceIDCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldReferenceID]
	return ok
}

// ResetReferenceID resets all changes to the "reference_id" field.
func (m *WalletTransactionMutation) ResetReferenceID() {
	m.reference_id = nil
	delete(m.clearedFields, wallettransaction.FieldReferenceID)
}

// SetDescription sets the "description" field.
func (m *WalletTransactionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *WalletTransactionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *WalletTransactionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[wallettransaction.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *WalletTransactionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *WalletTransactionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, wallettransaction.FieldDescription)
}

// SetMetadata sets the "metadata" field.
func (m *WalletTransactionMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *WalletTransactionMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *WalletTransactionMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[wallettransaction.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *WalletTransactionMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *WalletTransactionMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, wallettransaction.FieldMetadata)
}

// SetTransactionStatus sets the "transaction_status" field.
func (m *WalletTransactionMutation) SetTransactionStatus(s string) {
	m.transaction_status = &s
}

// TransactionStatus returns the value of the "transaction_status" field in the mutation.
func (m *WalletTransactionMutation) TransactionStatus() (r string, exists bool) {
	v := m.transaction_status
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionStatus returns the old "transaction_status" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldTransactionStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionStatus: %w", err)
	}
	return oldValue.TransactionStatus, nil
}

// ResetTransactionStatus resets all changes to the "transaction_status" field.
func (m *WalletTransactionMutation) ResetTransactionStatus() {
	m.transaction_status = nil
}

// SetStatus sets the "status" field.
func (m *WalletTransactionMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *WalletTransactionMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *WalletTransactionMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *WalletTransactionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WalletTransactionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WalletTransactionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *WalletTransactionMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *WalletTransactionMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *WalletTransactionMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[wallettransaction.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *WalletTransactionMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *WalletTransactionMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, wallettransaction.FieldCreatedBy)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WalletTransactionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WalletTransactionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WalletTransactionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUpdatedBy sets the "updated_by" field.
func (m *WalletTransactionMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *WalletTransactionMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the WalletTransaction entity.
// If the WalletTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletTransactionMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *WalletTransactionMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[wallettransaction.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *WalletTransactionMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[wallettransaction.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *WalletTransactionMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, wallettransaction.FieldUpdatedBy)
}

// Where appends a list predicates to the WalletTransactionMutation builder.
func (m *WalletTransactionMutation) Where(ps ...predicate.WalletTransaction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WalletTransactionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WalletTransactionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WalletTransaction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WalletTransactionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WalletTransactionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WalletTransaction).
func (m *WalletTransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WalletTransactionMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.tenant_id != nil {
		fields = append(fields, wallettransaction.FieldTenantID)
	}
	if m.wallet_id != nil {
		fields = append(fields, wallettransaction.FieldWalletID)
	}
	if m._type != nil {
		fields = append(fields, wallettransaction.FieldType)
	}
	if m.amount != nil {
		fields = append(fields, wallettransaction.FieldAmount)
	}
	if m.balance_before != nil {
		fields = append(fields, wallettransaction.FieldBalanceBefore)
	}
	if m.balance_after != nil {
		fields = append(fields, wallettransaction.FieldBalanceAfter)
	}
	if m.reference_type != nil {
		fields = append(fields, wallettransaction.FieldReferenceType)
	}
	if m.reference_id != nil {
		fields = append(fields, wallettransaction.FieldReferenceID)
	}
	if m.description != nil {
		fields = append(fields, wallettransaction.FieldDescription)
	}
	if m.metadata != nil {
		fields = append(fields, wallettransaction.FieldMetadata)
	}
	if m.transaction_status != nil {
		fields = append(fields, wallettransaction.FieldTransactionStatus)
	}
	if m.status != nil {
		fields = append(fields, wallettransaction.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, wallettransaction.FieldCreatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, wallettransaction.FieldCreatedBy)
	}
	if m.updated_at != nil {
		fields = append(fields, wallettransaction.FieldUpdatedAt)
	}
	if m.updated_by != nil {
		fields = append(fields, wallettransaction.FieldUpdatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WalletTransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case wallettransaction.FieldTenantID:
		return m.TenantID()
	case wallettransaction.FieldWalletID:
		return m.WalletID()
	case wallettransaction.FieldType:
		return m.GetType()
	case wallettransaction.FieldAmount:
		return m.Amount()
	case wallettransaction.FieldBalanceBefore:
		return m.BalanceBefore()
	case wallettransaction.FieldBalanceAfter:
		return m.BalanceAfter()
	case wallettransaction.FieldReferenceType:
		return m.ReferenceType()
	case wallettransaction.FieldReferenceID:
		return m.ReferenceID()
	case wallettransaction.FieldDescription:
		return m.Description()
	case wallettransaction.FieldMetadata:
		return m.Metadata()
	case wallettransaction.FieldTransactionStatus:
		return m.TransactionStatus()
	case wallettransaction.FieldStatus:
		return m.Status()
	case wallettransaction.FieldCreatedAt:
		return m.CreatedAt()
	case wallettransaction.FieldCreatedBy:
		return m.CreatedBy()
	case wallettransaction.FieldUpdatedAt:
		return m.UpdatedAt()
	case wallettransaction.FieldUpdatedBy:
		return m.UpdatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WalletTransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case wallettransaction.FieldTenantID:
		return m.OldTenantID(ctx)
	case wallettransaction.FieldWalletID:
		return m.OldWalletID(ctx)
	case wallettransaction.FieldType:
		return m.OldType(ctx)
	case wallettransaction.FieldAmount:
		return m.OldAmount(ctx)
	case wallettransaction.FieldBalanceBefore:
		return m.OldBalanceBefore(ctx)
	case wallettransaction.FieldBalanceAfter:
		return m.OldBalanceAfter(ctx)
	case wallettransaction.FieldReferenceType:
		return m.OldReferenceType(ctx)
	case wallettransaction.FieldReferenceID:
		return m.OldReferenceID(ctx)
	case wallettransaction.FieldDescription:
		return m.OldDescription(ctx)
	case wallettransaction.FieldMetadata:
		return m.OldMetadata(ctx)
	case wallettransaction.FieldTransactionStatus:
		return m.OldTransactionStatus(ctx)
	case wallettransaction.FieldStatus:
		return m.OldStatus(ctx)
	case wallettransaction.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case wallettransaction.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case wallettransaction.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case wallettransaction.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown WalletTransaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletTransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case wallettransaction.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case wallettransaction.FieldWalletID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletID(v)
		return nil
	case wallettransaction.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case wallettransaction.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case wallettransaction.FieldBalanceBefore:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalanceBefore(v)
		return nil
	case wallettransaction.FieldBalanceAfter:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalanceAfter(v)
		return nil
	case wallettransaction.FieldReferenceType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferenceType(v)
		return nil
	case wallettransaction.FieldReferenceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferenceID(v)
		return nil
	case wallettransaction.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case wallettransaction.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case wallettransaction.FieldTransactionStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionStatus(v)
		return nil
	case wallettransaction.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case wallettransaction.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case wallettransaction.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case wallettransaction.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case wallettransaction.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown WalletTransaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WalletTransactionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WalletTransactionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletTransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WalletTransaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WalletTransactionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(wallettransaction.FieldReferenceType) {
		fields = append(fields, wallettransaction.FieldReferenceType)
	}
	if m.FieldCleared(wallettransaction.FieldReferenceID) {
		fields = append(fields, wallettransaction.FieldReferenceID)
	}
	if m.FieldCleared(wallettransaction.FieldDescription) {
		fields = append(fields, wallettransaction.FieldDescription)
	}
	if m.FieldCleared(wallettransaction.FieldMetadata) {
		fields = append(fields, wallettransaction.FieldMetadata)
	}
	if m.FieldCleared(wallettransaction.FieldCreatedBy) {
		fields = append(fields, wallettransaction.FieldCreatedBy)
	}
	if m.FieldCleared(wallettransaction.FieldUpdatedBy) {
		fields = append(fields, wallettransaction.FieldUpdatedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WalletTransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WalletTransactionMutation) ClearField(name string) error {
	switch name {
	case wallettransaction.FieldReferenceType:
		m.ClearReferenceType()
		return nil
	case wallettransaction.FieldReferenceID:
		m.ClearReferenceID()
		return nil
	case wallettransaction.FieldDescription:
		m.ClearDescription()
		return nil
	case wallettransaction.FieldMetadata:
		m.ClearMetadata()
		return nil
	case wallettransaction.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case wallettransaction.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown WalletTransaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WalletTransactionMutation) ResetField(name string) error {
	switch name {
	case wallettransaction.FieldTenantID:
		m.ResetTenantID()
		return nil
	case wallettransaction.FieldWalletID:
		m.ResetWalletID()
		return nil
	case wallettransaction.FieldType:
		m.ResetType()
		return nil
	case wallettransaction.FieldAmount:
		m.ResetAmount()
		return nil
	case wallettransaction.FieldBalanceBefore:
		m.ResetBalanceBefore()
		return nil
	case wallettransaction.FieldBalanceAfter:
		m.ResetBalanceAfter()
		return nil
	case wallettransaction.FieldReferenceType:
		m.ResetReferenceType()
		return nil
	case wallettransaction.FieldReferenceID:
		m.ResetReferenceID()
		return nil
	case wallettransaction.FieldDescription:
		m.ResetDescription()
		return nil
	case wallettransaction.FieldMetadata:
		m.ResetMetadata()
		return nil
	case wallettransaction.FieldTransactionStatus:
		m.ResetTransactionStatus()
		return nil
	case wallettransaction.FieldStatus:
		m.ResetStatus()
		return nil
	case wallettransaction.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case wallettransaction.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case wallettransaction.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case wallettransaction.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown WalletTransaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WalletTransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WalletTransactionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WalletTransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WalletTransactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WalletTransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WalletTransactionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WalletTransactionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown WalletTransaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WalletTransactionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown WalletTransaction edge %s", name)
}
