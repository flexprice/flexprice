// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/payment"
	"github.com/shopspring/decimal"
)

// Payment is the model entity for the Payment schema.
type Payment struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// IdempotencyKey holds the value of the "idempotency_key" field.
	IdempotencyKey string `json:"idempotency_key,omitempty"`
	// DestinationType holds the value of the "destination_type" field.
	DestinationType string `json:"destination_type,omitempty"`
	// DestinationID holds the value of the "destination_id" field.
	DestinationID string `json:"destination_id,omitempty"`
	// PaymentMethodType holds the value of the "payment_method_type" field.
	PaymentMethodType string `json:"payment_method_type,omitempty"`
	// PaymentMethodID holds the value of the "payment_method_id" field.
	PaymentMethodID string `json:"payment_method_id,omitempty"`
	// PaymentGateway holds the value of the "payment_gateway" field.
	PaymentGateway *string `json:"payment_gateway,omitempty"`
	// GatewayPaymentID holds the value of the "gateway_payment_id" field.
	GatewayPaymentID *string `json:"gateway_payment_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// PaymentStatus holds the value of the "payment_status" field.
	PaymentStatus string `json:"payment_status,omitempty"`
	// TrackAttempts holds the value of the "track_attempts" field.
	TrackAttempts bool `json:"track_attempts,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// SucceededAt holds the value of the "succeeded_at" field.
	SucceededAt *time.Time `json:"succeeded_at,omitempty"`
	// FailedAt holds the value of the "failed_at" field.
	FailedAt *time.Time `json:"failed_at,omitempty"`
	// RefundedAt holds the value of the "refunded_at" field.
	RefundedAt *time.Time `json:"refunded_at,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage *string `json:"error_message,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentQuery when eager-loading is set.
	Edges        PaymentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaymentEdges holds the relations/edges for other nodes in the graph.
type PaymentEdges struct {
	// Attempts holds the value of the attempts edge.
	Attempts []*PaymentAttempt `json:"attempts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AttemptsOrErr returns the Attempts value or an error if the edge
// was not loaded in eager-loading.
func (e PaymentEdges) AttemptsOrErr() ([]*PaymentAttempt, error) {
	if e.loadedTypes[0] {
		return e.Attempts, nil
	}
	return nil, &NotLoadedError{edge: "attempts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Payment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case payment.FieldMetadata:
			values[i] = new([]byte)
		case payment.FieldAmount:
			values[i] = new(decimal.Decimal)
		case payment.FieldTrackAttempts:
			values[i] = new(sql.NullBool)
		case payment.FieldID, payment.FieldTenantID, payment.FieldStatus, payment.FieldCreatedBy, payment.FieldUpdatedBy, payment.FieldIdempotencyKey, payment.FieldDestinationType, payment.FieldDestinationID, payment.FieldPaymentMethodType, payment.FieldPaymentMethodID, payment.FieldPaymentGateway, payment.FieldGatewayPaymentID, payment.FieldCurrency, payment.FieldPaymentStatus, payment.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case payment.FieldCreatedAt, payment.FieldUpdatedAt, payment.FieldSucceededAt, payment.FieldFailedAt, payment.FieldRefundedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Payment fields.
func (pa *Payment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case payment.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pa.ID = value.String
			}
		case payment.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				pa.TenantID = value.String
			}
		case payment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pa.Status = value.String
			}
		case payment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case payment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case payment.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pa.CreatedBy = value.String
			}
		case payment.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pa.UpdatedBy = value.String
			}
		case payment.FieldIdempotencyKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idempotency_key", values[i])
			} else if value.Valid {
				pa.IdempotencyKey = value.String
			}
		case payment.FieldDestinationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field destination_type", values[i])
			} else if value.Valid {
				pa.DestinationType = value.String
			}
		case payment.FieldDestinationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field destination_id", values[i])
			} else if value.Valid {
				pa.DestinationID = value.String
			}
		case payment.FieldPaymentMethodType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method_type", values[i])
			} else if value.Valid {
				pa.PaymentMethodType = value.String
			}
		case payment.FieldPaymentMethodID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method_id", values[i])
			} else if value.Valid {
				pa.PaymentMethodID = value.String
			}
		case payment.FieldPaymentGateway:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_gateway", values[i])
			} else if value.Valid {
				pa.PaymentGateway = new(string)
				*pa.PaymentGateway = value.String
			}
		case payment.FieldGatewayPaymentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gateway_payment_id", values[i])
			} else if value.Valid {
				pa.GatewayPaymentID = new(string)
				*pa.GatewayPaymentID = value.String
			}
		case payment.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				pa.Amount = *value
			}
		case payment.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				pa.Currency = value.String
			}
		case payment.FieldPaymentStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_status", values[i])
			} else if value.Valid {
				pa.PaymentStatus = value.String
			}
		case payment.FieldTrackAttempts:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field track_attempts", values[i])
			} else if value.Valid {
				pa.TrackAttempts = value.Bool
			}
		case payment.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pa.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case payment.FieldSucceededAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field succeeded_at", values[i])
			} else if value.Valid {
				pa.SucceededAt = new(time.Time)
				*pa.SucceededAt = value.Time
			}
		case payment.FieldFailedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field failed_at", values[i])
			} else if value.Valid {
				pa.FailedAt = new(time.Time)
				*pa.FailedAt = value.Time
			}
		case payment.FieldRefundedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field refunded_at", values[i])
			} else if value.Valid {
				pa.RefundedAt = new(time.Time)
				*pa.RefundedAt = value.Time
			}
		case payment.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				pa.ErrorMessage = new(string)
				*pa.ErrorMessage = value.String
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Payment.
// This includes values selected through modifiers, order, etc.
func (pa *Payment) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryAttempts queries the "attempts" edge of the Payment entity.
func (pa *Payment) QueryAttempts() *PaymentAttemptQuery {
	return NewPaymentClient(pa.config).QueryAttempts(pa)
}

// Update returns a builder for updating this Payment.
// Note that you need to call Payment.Unwrap() before calling this method if this Payment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Payment) Update() *PaymentUpdateOne {
	return NewPaymentClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Payment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Payment) Unwrap() *Payment {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Payment is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Payment) String() string {
	var builder strings.Builder
	builder.WriteString("Payment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(pa.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(pa.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pa.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pa.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("idempotency_key=")
	builder.WriteString(pa.IdempotencyKey)
	builder.WriteString(", ")
	builder.WriteString("destination_type=")
	builder.WriteString(pa.DestinationType)
	builder.WriteString(", ")
	builder.WriteString("destination_id=")
	builder.WriteString(pa.DestinationID)
	builder.WriteString(", ")
	builder.WriteString("payment_method_type=")
	builder.WriteString(pa.PaymentMethodType)
	builder.WriteString(", ")
	builder.WriteString("payment_method_id=")
	builder.WriteString(pa.PaymentMethodID)
	builder.WriteString(", ")
	if v := pa.PaymentGateway; v != nil {
		builder.WriteString("payment_gateway=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pa.GatewayPaymentID; v != nil {
		builder.WriteString("gateway_payment_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.Amount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(pa.Currency)
	builder.WriteString(", ")
	builder.WriteString("payment_status=")
	builder.WriteString(pa.PaymentStatus)
	builder.WriteString(", ")
	builder.WriteString("track_attempts=")
	builder.WriteString(fmt.Sprintf("%v", pa.TrackAttempts))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", pa.Metadata))
	builder.WriteString(", ")
	if v := pa.SucceededAt; v != nil {
		builder.WriteString("succeeded_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pa.FailedAt; v != nil {
		builder.WriteString("failed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pa.RefundedAt; v != nil {
		builder.WriteString("refunded_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pa.ErrorMessage; v != nil {
		builder.WriteString("error_message=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Payments is a parsable slice of Payment.
type Payments []*Payment
