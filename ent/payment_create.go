// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/payment"
	"github.com/flexprice/flexprice/ent/paymentattempt"
	"github.com/shopspring/decimal"
)

// PaymentCreate is the builder for creating a Payment entity.
type PaymentCreate struct {
	config
	mutation *PaymentMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (pc *PaymentCreate) SetTenantID(s string) *PaymentCreate {
	pc.mutation.SetTenantID(s)
	return pc
}

// SetStatus sets the "status" field.
func (pc *PaymentCreate) SetStatus(s string) *PaymentCreate {
	pc.mutation.SetStatus(s)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableStatus(s *string) *PaymentCreate {
	if s != nil {
		pc.SetStatus(*s)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PaymentCreate) SetCreatedAt(t time.Time) *PaymentCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableCreatedAt(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PaymentCreate) SetUpdatedAt(t time.Time) *PaymentCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableUpdatedAt(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *PaymentCreate) SetCreatedBy(s string) *PaymentCreate {
	pc.mutation.SetCreatedBy(s)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableCreatedBy(s *string) *PaymentCreate {
	if s != nil {
		pc.SetCreatedBy(*s)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *PaymentCreate) SetUpdatedBy(s string) *PaymentCreate {
	pc.mutation.SetUpdatedBy(s)
	return pc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableUpdatedBy(s *string) *PaymentCreate {
	if s != nil {
		pc.SetUpdatedBy(*s)
	}
	return pc
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (pc *PaymentCreate) SetIdempotencyKey(s string) *PaymentCreate {
	pc.mutation.SetIdempotencyKey(s)
	return pc
}

// SetDestinationType sets the "destination_type" field.
func (pc *PaymentCreate) SetDestinationType(s string) *PaymentCreate {
	pc.mutation.SetDestinationType(s)
	return pc
}

// SetDestinationID sets the "destination_id" field.
func (pc *PaymentCreate) SetDestinationID(s string) *PaymentCreate {
	pc.mutation.SetDestinationID(s)
	return pc
}

// SetPaymentMethodType sets the "payment_method_type" field.
func (pc *PaymentCreate) SetPaymentMethodType(s string) *PaymentCreate {
	pc.mutation.SetPaymentMethodType(s)
	return pc
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (pc *PaymentCreate) SetPaymentMethodID(s string) *PaymentCreate {
	pc.mutation.SetPaymentMethodID(s)
	return pc
}

// SetNillablePaymentMethodID sets the "payment_method_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillablePaymentMethodID(s *string) *PaymentCreate {
	if s != nil {
		pc.SetPaymentMethodID(*s)
	}
	return pc
}

// SetPaymentGateway sets the "payment_gateway" field.
func (pc *PaymentCreate) SetPaymentGateway(s string) *PaymentCreate {
	pc.mutation.SetPaymentGateway(s)
	return pc
}

// SetNillablePaymentGateway sets the "payment_gateway" field if the given value is not nil.
func (pc *PaymentCreate) SetNillablePaymentGateway(s *string) *PaymentCreate {
	if s != nil {
		pc.SetPaymentGateway(*s)
	}
	return pc
}

// SetGatewayPaymentID sets the "gateway_payment_id" field.
func (pc *PaymentCreate) SetGatewayPaymentID(s string) *PaymentCreate {
	pc.mutation.SetGatewayPaymentID(s)
	return pc
}

// SetNillableGatewayPaymentID sets the "gateway_payment_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableGatewayPaymentID(s *string) *PaymentCreate {
	if s != nil {
		pc.SetGatewayPaymentID(*s)
	}
	return pc
}

// SetAmount sets the "amount" field.
func (pc *PaymentCreate) SetAmount(d decimal.Decimal) *PaymentCreate {
	pc.mutation.SetAmount(d)
	return pc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableAmount(d *decimal.Decimal) *PaymentCreate {
	if d != nil {
		pc.SetAmount(*d)
	}
	return pc
}

// SetCurrency sets the "currency" field.
func (pc *PaymentCreate) SetCurrency(s string) *PaymentCreate {
	pc.mutation.SetCurrency(s)
	return pc
}

// SetPaymentStatus sets the "payment_status" field.
func (pc *PaymentCreate) SetPaymentStatus(s string) *PaymentCreate {
	pc.mutation.SetPaymentStatus(s)
	return pc
}

// SetTrackAttempts sets the "track_attempts" field.
func (pc *PaymentCreate) SetTrackAttempts(b bool) *PaymentCreate {
	pc.mutation.SetTrackAttempts(b)
	return pc
}

// SetNillableTrackAttempts sets the "track_attempts" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableTrackAttempts(b *bool) *PaymentCreate {
	if b != nil {
		pc.SetTrackAttempts(*b)
	}
	return pc
}

// SetMetadata sets the "metadata" field.
func (pc *PaymentCreate) SetMetadata(m map[string]string) *PaymentCreate {
	pc.mutation.SetMetadata(m)
	return pc
}

// SetSucceededAt sets the "succeeded_at" field.
func (pc *PaymentCreate) SetSucceededAt(t time.Time) *PaymentCreate {
	pc.mutation.SetSucceededAt(t)
	return pc
}

// SetNillableSucceededAt sets the "succeeded_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableSucceededAt(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetSucceededAt(*t)
	}
	return pc
}

// SetFailedAt sets the "failed_at" field.
func (pc *PaymentCreate) SetFailedAt(t time.Time) *PaymentCreate {
	pc.mutation.SetFailedAt(t)
	return pc
}

// SetNillableFailedAt sets the "failed_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableFailedAt(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetFailedAt(*t)
	}
	return pc
}

// SetRefundedAt sets the "refunded_at" field.
func (pc *PaymentCreate) SetRefundedAt(t time.Time) *PaymentCreate {
	pc.mutation.SetRefundedAt(t)
	return pc
}

// SetNillableRefundedAt sets the "refunded_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableRefundedAt(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetRefundedAt(*t)
	}
	return pc
}

// SetErrorMessage sets the "error_message" field.
func (pc *PaymentCreate) SetErrorMessage(s string) *PaymentCreate {
	pc.mutation.SetErrorMessage(s)
	return pc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableErrorMessage(s *string) *PaymentCreate {
	if s != nil {
		pc.SetErrorMessage(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PaymentCreate) SetID(s string) *PaymentCreate {
	pc.mutation.SetID(s)
	return pc
}

// AddAttemptIDs adds the "attempts" edge to the PaymentAttempt entity by IDs.
func (pc *PaymentCreate) AddAttemptIDs(ids ...string) *PaymentCreate {
	pc.mutation.AddAttemptIDs(ids...)
	return pc
}

// AddAttempts adds the "attempts" edges to the PaymentAttempt entity.
func (pc *PaymentCreate) AddAttempts(p ...*PaymentAttempt) *PaymentCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddAttemptIDs(ids...)
}

// Mutation returns the PaymentMutation object of the builder.
func (pc *PaymentCreate) Mutation() *PaymentMutation {
	return pc.mutation
}

// Save creates the Payment in the database.
func (pc *PaymentCreate) Save(ctx context.Context) (*Payment, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PaymentCreate) SaveX(ctx context.Context) *Payment {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PaymentCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PaymentCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PaymentCreate) defaults() {
	if _, ok := pc.mutation.Status(); !ok {
		v := payment.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := payment.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := payment.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Amount(); !ok {
		v := payment.DefaultAmount
		pc.mutation.SetAmount(v)
	}
	if _, ok := pc.mutation.TrackAttempts(); !ok {
		v := payment.DefaultTrackAttempts
		pc.mutation.SetTrackAttempts(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PaymentCreate) check() error {
	if _, ok := pc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Payment.tenant_id"`)}
	}
	if v, ok := pc.mutation.TenantID(); ok {
		if err := payment.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Payment.tenant_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Payment.status"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Payment.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Payment.updated_at"`)}
	}
	if _, ok := pc.mutation.IdempotencyKey(); !ok {
		return &ValidationError{Name: "idempotency_key", err: errors.New(`ent: missing required field "Payment.idempotency_key"`)}
	}
	if _, ok := pc.mutation.DestinationType(); !ok {
		return &ValidationError{Name: "destination_type", err: errors.New(`ent: missing required field "Payment.destination_type"`)}
	}
	if v, ok := pc.mutation.DestinationType(); ok {
		if err := payment.DestinationTypeValidator(v); err != nil {
			return &ValidationError{Name: "destination_type", err: fmt.Errorf(`ent: validator failed for field "Payment.destination_type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.DestinationID(); !ok {
		return &ValidationError{Name: "destination_id", err: errors.New(`ent: missing required field "Payment.destination_id"`)}
	}
	if v, ok := pc.mutation.DestinationID(); ok {
		if err := payment.DestinationIDValidator(v); err != nil {
			return &ValidationError{Name: "destination_id", err: fmt.Errorf(`ent: validator failed for field "Payment.destination_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.PaymentMethodType(); !ok {
		return &ValidationError{Name: "payment_method_type", err: errors.New(`ent: missing required field "Payment.payment_method_type"`)}
	}
	if v, ok := pc.mutation.PaymentMethodType(); ok {
		if err := payment.PaymentMethodTypeValidator(v); err != nil {
			return &ValidationError{Name: "payment_method_type", err: fmt.Errorf(`ent: validator failed for field "Payment.payment_method_type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Payment.amount"`)}
	}
	if _, ok := pc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Payment.currency"`)}
	}
	if v, ok := pc.mutation.Currency(); ok {
		if err := payment.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Payment.currency": %w`, err)}
		}
	}
	if _, ok := pc.mutation.PaymentStatus(); !ok {
		return &ValidationError{Name: "payment_status", err: errors.New(`ent: missing required field "Payment.payment_status"`)}
	}
	if v, ok := pc.mutation.PaymentStatus(); ok {
		if err := payment.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Payment.payment_status": %w`, err)}
		}
	}
	if _, ok := pc.mutation.TrackAttempts(); !ok {
		return &ValidationError{Name: "track_attempts", err: errors.New(`ent: missing required field "Payment.track_attempts"`)}
	}
	return nil
}

func (pc *PaymentCreate) sqlSave(ctx context.Context) (*Payment, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Payment.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PaymentCreate) createSpec() (*Payment, *sqlgraph.CreateSpec) {
	var (
		_node = &Payment{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(payment.Table, sqlgraph.NewFieldSpec(payment.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.TenantID(); ok {
		_spec.SetField(payment.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(payment.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(payment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(payment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(payment.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.SetField(payment.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.IdempotencyKey(); ok {
		_spec.SetField(payment.FieldIdempotencyKey, field.TypeString, value)
		_node.IdempotencyKey = value
	}
	if value, ok := pc.mutation.DestinationType(); ok {
		_spec.SetField(payment.FieldDestinationType, field.TypeString, value)
		_node.DestinationType = value
	}
	if value, ok := pc.mutation.DestinationID(); ok {
		_spec.SetField(payment.FieldDestinationID, field.TypeString, value)
		_node.DestinationID = value
	}
	if value, ok := pc.mutation.PaymentMethodType(); ok {
		_spec.SetField(payment.FieldPaymentMethodType, field.TypeString, value)
		_node.PaymentMethodType = value
	}
	if value, ok := pc.mutation.PaymentMethodID(); ok {
		_spec.SetField(payment.FieldPaymentMethodID, field.TypeString, value)
		_node.PaymentMethodID = value
	}
	if value, ok := pc.mutation.PaymentGateway(); ok {
		_spec.SetField(payment.FieldPaymentGateway, field.TypeString, value)
		_node.PaymentGateway = &value
	}
	if value, ok := pc.mutation.GatewayPaymentID(); ok {
		_spec.SetField(payment.FieldGatewayPaymentID, field.TypeString, value)
		_node.GatewayPaymentID = &value
	}
	if value, ok := pc.mutation.Amount(); ok {
		_spec.SetField(payment.FieldAmount, field.TypeOther, value)
		_node.Amount = value
	}
	if value, ok := pc.mutation.Currency(); ok {
		_spec.SetField(payment.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := pc.mutation.PaymentStatus(); ok {
		_spec.SetField(payment.FieldPaymentStatus, field.TypeString, value)
		_node.PaymentStatus = value
	}
	if value, ok := pc.mutation.TrackAttempts(); ok {
		_spec.SetField(payment.FieldTrackAttempts, field.TypeBool, value)
		_node.TrackAttempts = value
	}
	if value, ok := pc.mutation.Metadata(); ok {
		_spec.SetField(payment.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := pc.mutation.SucceededAt(); ok {
		_spec.SetField(payment.FieldSucceededAt, field.TypeTime, value)
		_node.SucceededAt = &value
	}
	if value, ok := pc.mutation.FailedAt(); ok {
		_spec.SetField(payment.FieldFailedAt, field.TypeTime, value)
		_node.FailedAt = &value
	}
	if value, ok := pc.mutation.RefundedAt(); ok {
		_spec.SetField(payment.FieldRefundedAt, field.TypeTime, value)
		_node.RefundedAt = &value
	}
	if value, ok := pc.mutation.ErrorMessage(); ok {
		_spec.SetField(payment.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = &value
	}
	if nodes := pc.mutation.AttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.AttemptsTable,
			Columns: []string{payment.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentCreateBulk is the builder for creating many Payment entities in bulk.
type PaymentCreateBulk struct {
	config
	err      error
	builders []*PaymentCreate
}

// Save creates the Payment entities in the database.
func (pcb *PaymentCreateBulk) Save(ctx context.Context) ([]*Payment, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Payment, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PaymentCreateBulk) SaveX(ctx context.Context) []*Payment {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PaymentCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PaymentCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
