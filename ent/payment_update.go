// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/payment"
	"github.com/flexprice/flexprice/ent/paymentattempt"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/shopspring/decimal"
)

// PaymentUpdate is the builder for updating Payment entities.
type PaymentUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentMutation
}

// Where appends a list predicates to the PaymentUpdate builder.
func (pu *PaymentUpdate) Where(ps ...predicate.Payment) *PaymentUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetStatus sets the "status" field.
func (pu *PaymentUpdate) SetStatus(s string) *PaymentUpdate {
	pu.mutation.SetStatus(s)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableStatus(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetStatus(*s)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PaymentUpdate) SetUpdatedAt(t time.Time) *PaymentUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *PaymentUpdate) SetUpdatedBy(s string) *PaymentUpdate {
	pu.mutation.SetUpdatedBy(s)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableUpdatedBy(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetUpdatedBy(*s)
	}
	return pu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pu *PaymentUpdate) ClearUpdatedBy() *PaymentUpdate {
	pu.mutation.ClearUpdatedBy()
	return pu
}

// SetDestinationType sets the "destination_type" field.
func (pu *PaymentUpdate) SetDestinationType(s string) *PaymentUpdate {
	pu.mutation.SetDestinationType(s)
	return pu
}

// SetNillableDestinationType sets the "destination_type" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableDestinationType(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetDestinationType(*s)
	}
	return pu
}

// SetDestinationID sets the "destination_id" field.
func (pu *PaymentUpdate) SetDestinationID(s string) *PaymentUpdate {
	pu.mutation.SetDestinationID(s)
	return pu
}

// SetNillableDestinationID sets the "destination_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableDestinationID(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetDestinationID(*s)
	}
	return pu
}

// SetPaymentMethodType sets the "payment_method_type" field.
func (pu *PaymentUpdate) SetPaymentMethodType(s string) *PaymentUpdate {
	pu.mutation.SetPaymentMethodType(s)
	return pu
}

// SetNillablePaymentMethodType sets the "payment_method_type" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePaymentMethodType(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetPaymentMethodType(*s)
	}
	return pu
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (pu *PaymentUpdate) SetPaymentMethodID(s string) *PaymentUpdate {
	pu.mutation.SetPaymentMethodID(s)
	return pu
}

// SetNillablePaymentMethodID sets the "payment_method_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePaymentMethodID(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetPaymentMethodID(*s)
	}
	return pu
}

// ClearPaymentMethodID clears the value of the "payment_method_id" field.
func (pu *PaymentUpdate) ClearPaymentMethodID() *PaymentUpdate {
	pu.mutation.ClearPaymentMethodID()
	return pu
}

// SetPaymentGateway sets the "payment_gateway" field.
func (pu *PaymentUpdate) SetPaymentGateway(s string) *PaymentUpdate {
	pu.mutation.SetPaymentGateway(s)
	return pu
}

// SetNillablePaymentGateway sets the "payment_gateway" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePaymentGateway(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetPaymentGateway(*s)
	}
	return pu
}

// ClearPaymentGateway clears the value of the "payment_gateway" field.
func (pu *PaymentUpdate) ClearPaymentGateway() *PaymentUpdate {
	pu.mutation.ClearPaymentGateway()
	return pu
}

// SetGatewayPaymentID sets the "gateway_payment_id" field.
func (pu *PaymentUpdate) SetGatewayPaymentID(s string) *PaymentUpdate {
	pu.mutation.SetGatewayPaymentID(s)
	return pu
}

// SetNillableGatewayPaymentID sets the "gateway_payment_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableGatewayPaymentID(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetGatewayPaymentID(*s)
	}
	return pu
}

// ClearGatewayPaymentID clears the value of the "gateway_payment_id" field.
func (pu *PaymentUpdate) ClearGatewayPaymentID() *PaymentUpdate {
	pu.mutation.ClearGatewayPaymentID()
	return pu
}

// SetAmount sets the "amount" field.
func (pu *PaymentUpdate) SetAmount(d decimal.Decimal) *PaymentUpdate {
	pu.mutation.SetAmount(d)
	return pu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableAmount(d *decimal.Decimal) *PaymentUpdate {
	if d != nil {
		pu.SetAmount(*d)
	}
	return pu
}

// SetPaymentStatus sets the "payment_status" field.
func (pu *PaymentUpdate) SetPaymentStatus(s string) *PaymentUpdate {
	pu.mutation.SetPaymentStatus(s)
	return pu
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePaymentStatus(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetPaymentStatus(*s)
	}
	return pu
}

// SetTrackAttempts sets the "track_attempts" field.
func (pu *PaymentUpdate) SetTrackAttempts(b bool) *PaymentUpdate {
	pu.mutation.SetTrackAttempts(b)
	return pu
}

// SetNillableTrackAttempts sets the "track_attempts" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableTrackAttempts(b *bool) *PaymentUpdate {
	if b != nil {
		pu.SetTrackAttempts(*b)
	}
	return pu
}

// SetMetadata sets the "metadata" field.
func (pu *PaymentUpdate) SetMetadata(m map[string]string) *PaymentUpdate {
	pu.mutation.SetMetadata(m)
	return pu
}

// ClearMetadata clears the value of the "metadata" field.
func (pu *PaymentUpdate) ClearMetadata() *PaymentUpdate {
	pu.mutation.ClearMetadata()
	return pu
}

// SetSucceededAt sets the "succeeded_at" field.
func (pu *PaymentUpdate) SetSucceededAt(t time.Time) *PaymentUpdate {
	pu.mutation.SetSucceededAt(t)
	return pu
}

// SetNillableSucceededAt sets the "succeeded_at" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableSucceededAt(t *time.Time) *PaymentUpdate {
	if t != nil {
		pu.SetSucceededAt(*t)
	}
	return pu
}

// ClearSucceededAt clears the value of the "succeeded_at" field.
func (pu *PaymentUpdate) ClearSucceededAt() *PaymentUpdate {
	pu.mutation.ClearSucceededAt()
	return pu
}

// SetFailedAt sets the "failed_at" field.
func (pu *PaymentUpdate) SetFailedAt(t time.Time) *PaymentUpdate {
	pu.mutation.SetFailedAt(t)
	return pu
}

// SetNillableFailedAt sets the "failed_at" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableFailedAt(t *time.Time) *PaymentUpdate {
	if t != nil {
		pu.SetFailedAt(*t)
	}
	return pu
}

// ClearFailedAt clears the value of the "failed_at" field.
func (pu *PaymentUpdate) ClearFailedAt() *PaymentUpdate {
	pu.mutation.ClearFailedAt()
	return pu
}

// SetRefundedAt sets the "refunded_at" field.
func (pu *PaymentUpdate) SetRefundedAt(t time.Time) *PaymentUpdate {
	pu.mutation.SetRefundedAt(t)
	return pu
}

// SetNillableRefundedAt sets the "refunded_at" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableRefundedAt(t *time.Time) *PaymentUpdate {
	if t != nil {
		pu.SetRefundedAt(*t)
	}
	return pu
}

// ClearRefundedAt clears the value of the "refunded_at" field.
func (pu *PaymentUpdate) ClearRefundedAt() *PaymentUpdate {
	pu.mutation.ClearRefundedAt()
	return pu
}

// SetErrorMessage sets the "error_message" field.
func (pu *PaymentUpdate) SetErrorMessage(s string) *PaymentUpdate {
	pu.mutation.SetErrorMessage(s)
	return pu
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableErrorMessage(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetErrorMessage(*s)
	}
	return pu
}

// ClearErrorMessage clears the value of the "error_message" field.
func (pu *PaymentUpdate) ClearErrorMessage() *PaymentUpdate {
	pu.mutation.ClearErrorMessage()
	return pu
}

// AddAttemptIDs adds the "attempts" edge to the PaymentAttempt entity by IDs.
func (pu *PaymentUpdate) AddAttemptIDs(ids ...string) *PaymentUpdate {
	pu.mutation.AddAttemptIDs(ids...)
	return pu
}

// AddAttempts adds the "attempts" edges to the PaymentAttempt entity.
func (pu *PaymentUpdate) AddAttempts(p ...*PaymentAttempt) *PaymentUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddAttemptIDs(ids...)
}

// Mutation returns the PaymentMutation object of the builder.
func (pu *PaymentUpdate) Mutation() *PaymentMutation {
	return pu.mutation
}

// ClearAttempts clears all "attempts" edges to the PaymentAttempt entity.
func (pu *PaymentUpdate) ClearAttempts() *PaymentUpdate {
	pu.mutation.ClearAttempts()
	return pu
}

// RemoveAttemptIDs removes the "attempts" edge to PaymentAttempt entities by IDs.
func (pu *PaymentUpdate) RemoveAttemptIDs(ids ...string) *PaymentUpdate {
	pu.mutation.RemoveAttemptIDs(ids...)
	return pu
}

// RemoveAttempts removes "attempts" edges to PaymentAttempt entities.
func (pu *PaymentUpdate) RemoveAttempts(p ...*PaymentAttempt) *PaymentUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveAttemptIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PaymentUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PaymentUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PaymentUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PaymentUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := payment.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PaymentUpdate) check() error {
	if v, ok := pu.mutation.DestinationType(); ok {
		if err := payment.DestinationTypeValidator(v); err != nil {
			return &ValidationError{Name: "destination_type", err: fmt.Errorf(`ent: validator failed for field "Payment.destination_type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.DestinationID(); ok {
		if err := payment.DestinationIDValidator(v); err != nil {
			return &ValidationError{Name: "destination_id", err: fmt.Errorf(`ent: validator failed for field "Payment.destination_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.PaymentMethodType(); ok {
		if err := payment.PaymentMethodTypeValidator(v); err != nil {
			return &ValidationError{Name: "payment_method_type", err: fmt.Errorf(`ent: validator failed for field "Payment.payment_method_type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.PaymentStatus(); ok {
		if err := payment.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Payment.payment_status": %w`, err)}
		}
	}
	return nil
}

func (pu *PaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(payment.Table, payment.Columns, sqlgraph.NewFieldSpec(payment.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(payment.FieldStatus, field.TypeString, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(payment.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.CreatedByCleared() {
		_spec.ClearField(payment.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(payment.FieldUpdatedBy, field.TypeString, value)
	}
	if pu.mutation.UpdatedByCleared() {
		_spec.ClearField(payment.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.DestinationType(); ok {
		_spec.SetField(payment.FieldDestinationType, field.TypeString, value)
	}
	if value, ok := pu.mutation.DestinationID(); ok {
		_spec.SetField(payment.FieldDestinationID, field.TypeString, value)
	}
	if value, ok := pu.mutation.PaymentMethodType(); ok {
		_spec.SetField(payment.FieldPaymentMethodType, field.TypeString, value)
	}
	if value, ok := pu.mutation.PaymentMethodID(); ok {
		_spec.SetField(payment.FieldPaymentMethodID, field.TypeString, value)
	}
	if pu.mutation.PaymentMethodIDCleared() {
		_spec.ClearField(payment.FieldPaymentMethodID, field.TypeString)
	}
	if value, ok := pu.mutation.PaymentGateway(); ok {
		_spec.SetField(payment.FieldPaymentGateway, field.TypeString, value)
	}
	if pu.mutation.PaymentGatewayCleared() {
		_spec.ClearField(payment.FieldPaymentGateway, field.TypeString)
	}
	if value, ok := pu.mutation.GatewayPaymentID(); ok {
		_spec.SetField(payment.FieldGatewayPaymentID, field.TypeString, value)
	}
	if pu.mutation.GatewayPaymentIDCleared() {
		_spec.ClearField(payment.FieldGatewayPaymentID, field.TypeString)
	}
	if value, ok := pu.mutation.Amount(); ok {
		_spec.SetField(payment.FieldAmount, field.TypeOther, value)
	}
	if value, ok := pu.mutation.PaymentStatus(); ok {
		_spec.SetField(payment.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := pu.mutation.TrackAttempts(); ok {
		_spec.SetField(payment.FieldTrackAttempts, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Metadata(); ok {
		_spec.SetField(payment.FieldMetadata, field.TypeJSON, value)
	}
	if pu.mutation.MetadataCleared() {
		_spec.ClearField(payment.FieldMetadata, field.TypeJSON)
	}
	if value, ok := pu.mutation.SucceededAt(); ok {
		_spec.SetField(payment.FieldSucceededAt, field.TypeTime, value)
	}
	if pu.mutation.SucceededAtCleared() {
		_spec.ClearField(payment.FieldSucceededAt, field.TypeTime)
	}
	if value, ok := pu.mutation.FailedAt(); ok {
		_spec.SetField(payment.FieldFailedAt, field.TypeTime, value)
	}
	if pu.mutation.FailedAtCleared() {
		_spec.ClearField(payment.FieldFailedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.RefundedAt(); ok {
		_spec.SetField(payment.FieldRefundedAt, field.TypeTime, value)
	}
	if pu.mutation.RefundedAtCleared() {
		_spec.ClearField(payment.FieldRefundedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.ErrorMessage(); ok {
		_spec.SetField(payment.FieldErrorMessage, field.TypeString, value)
	}
	if pu.mutation.ErrorMessageCleared() {
		_spec.ClearField(payment.FieldErrorMessage, field.TypeString)
	}
	if pu.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.AttemptsTable,
			Columns: []string{payment.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAttemptsIDs(); len(nodes) > 0 && !pu.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.AttemptsTable,
			Columns: []string{payment.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.AttemptsTable,
			Columns: []string{payment.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PaymentUpdateOne is the builder for updating a single Payment entity.
type PaymentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentMutation
}

// SetStatus sets the "status" field.
func (puo *PaymentUpdateOne) SetStatus(s string) *PaymentUpdateOne {
	puo.mutation.SetStatus(s)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableStatus(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetStatus(*s)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PaymentUpdateOne) SetUpdatedAt(t time.Time) *PaymentUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *PaymentUpdateOne) SetUpdatedBy(s string) *PaymentUpdateOne {
	puo.mutation.SetUpdatedBy(s)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableUpdatedBy(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetUpdatedBy(*s)
	}
	return puo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (puo *PaymentUpdateOne) ClearUpdatedBy() *PaymentUpdateOne {
	puo.mutation.ClearUpdatedBy()
	return puo
}

// SetDestinationType sets the "destination_type" field.
func (puo *PaymentUpdateOne) SetDestinationType(s string) *PaymentUpdateOne {
	puo.mutation.SetDestinationType(s)
	return puo
}

// SetNillableDestinationType sets the "destination_type" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableDestinationType(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetDestinationType(*s)
	}
	return puo
}

// SetDestinationID sets the "destination_id" field.
func (puo *PaymentUpdateOne) SetDestinationID(s string) *PaymentUpdateOne {
	puo.mutation.SetDestinationID(s)
	return puo
}

// SetNillableDestinationID sets the "destination_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableDestinationID(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetDestinationID(*s)
	}
	return puo
}

// SetPaymentMethodType sets the "payment_method_type" field.
func (puo *PaymentUpdateOne) SetPaymentMethodType(s string) *PaymentUpdateOne {
	puo.mutation.SetPaymentMethodType(s)
	return puo
}

// SetNillablePaymentMethodType sets the "payment_method_type" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePaymentMethodType(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetPaymentMethodType(*s)
	}
	return puo
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (puo *PaymentUpdateOne) SetPaymentMethodID(s string) *PaymentUpdateOne {
	puo.mutation.SetPaymentMethodID(s)
	return puo
}

// SetNillablePaymentMethodID sets the "payment_method_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePaymentMethodID(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetPaymentMethodID(*s)
	}
	return puo
}

// ClearPaymentMethodID clears the value of the "payment_method_id" field.
func (puo *PaymentUpdateOne) ClearPaymentMethodID() *PaymentUpdateOne {
	puo.mutation.ClearPaymentMethodID()
	return puo
}

// SetPaymentGateway sets the "payment_gateway" field.
func (puo *PaymentUpdateOne) SetPaymentGateway(s string) *PaymentUpdateOne {
	puo.mutation.SetPaymentGateway(s)
	return puo
}

// SetNillablePaymentGateway sets the "payment_gateway" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePaymentGateway(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetPaymentGateway(*s)
	}
	return puo
}

// ClearPaymentGateway clears the value of the "payment_gateway" field.
func (puo *PaymentUpdateOne) ClearPaymentGateway() *PaymentUpdateOne {
	puo.mutation.ClearPaymentGateway()
	return puo
}

// SetGatewayPaymentID sets the "gateway_payment_id" field.
func (puo *PaymentUpdateOne) SetGatewayPaymentID(s string) *PaymentUpdateOne {
	puo.mutation.SetGatewayPaymentID(s)
	return puo
}

// SetNillableGatewayPaymentID sets the "gateway_payment_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableGatewayPaymentID(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetGatewayPaymentID(*s)
	}
	return puo
}

// ClearGatewayPaymentID clears the value of the "gateway_payment_id" field.
func (puo *PaymentUpdateOne) ClearGatewayPaymentID() *PaymentUpdateOne {
	puo.mutation.ClearGatewayPaymentID()
	return puo
}

// SetAmount sets the "amount" field.
func (puo *PaymentUpdateOne) SetAmount(d decimal.Decimal) *PaymentUpdateOne {
	puo.mutation.SetAmount(d)
	return puo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableAmount(d *decimal.Decimal) *PaymentUpdateOne {
	if d != nil {
		puo.SetAmount(*d)
	}
	return puo
}

// SetPaymentStatus sets the "payment_status" field.
func (puo *PaymentUpdateOne) SetPaymentStatus(s string) *PaymentUpdateOne {
	puo.mutation.SetPaymentStatus(s)
	return puo
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePaymentStatus(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetPaymentStatus(*s)
	}
	return puo
}

// SetTrackAttempts sets the "track_attempts" field.
func (puo *PaymentUpdateOne) SetTrackAttempts(b bool) *PaymentUpdateOne {
	puo.mutation.SetTrackAttempts(b)
	return puo
}

// SetNillableTrackAttempts sets the "track_attempts" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableTrackAttempts(b *bool) *PaymentUpdateOne {
	if b != nil {
		puo.SetTrackAttempts(*b)
	}
	return puo
}

// SetMetadata sets the "metadata" field.
func (puo *PaymentUpdateOne) SetMetadata(m map[string]string) *PaymentUpdateOne {
	puo.mutation.SetMetadata(m)
	return puo
}

// ClearMetadata clears the value of the "metadata" field.
func (puo *PaymentUpdateOne) ClearMetadata() *PaymentUpdateOne {
	puo.mutation.ClearMetadata()
	return puo
}

// SetSucceededAt sets the "succeeded_at" field.
func (puo *PaymentUpdateOne) SetSucceededAt(t time.Time) *PaymentUpdateOne {
	puo.mutation.SetSucceededAt(t)
	return puo
}

// SetNillableSucceededAt sets the "succeeded_at" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableSucceededAt(t *time.Time) *PaymentUpdateOne {
	if t != nil {
		puo.SetSucceededAt(*t)
	}
	return puo
}

// ClearSucceededAt clears the value of the "succeeded_at" field.
func (puo *PaymentUpdateOne) ClearSucceededAt() *PaymentUpdateOne {
	puo.mutation.ClearSucceededAt()
	return puo
}

// SetFailedAt sets the "failed_at" field.
func (puo *PaymentUpdateOne) SetFailedAt(t time.Time) *PaymentUpdateOne {
	puo.mutation.SetFailedAt(t)
	return puo
}

// SetNillableFailedAt sets the "failed_at" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableFailedAt(t *time.Time) *PaymentUpdateOne {
	if t != nil {
		puo.SetFailedAt(*t)
	}
	return puo
}

// ClearFailedAt clears the value of the "failed_at" field.
func (puo *PaymentUpdateOne) ClearFailedAt() *PaymentUpdateOne {
	puo.mutation.ClearFailedAt()
	return puo
}

// SetRefundedAt sets the "refunded_at" field.
func (puo *PaymentUpdateOne) SetRefundedAt(t time.Time) *PaymentUpdateOne {
	puo.mutation.SetRefundedAt(t)
	return puo
}

// SetNillableRefundedAt sets the "refunded_at" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableRefundedAt(t *time.Time) *PaymentUpdateOne {
	if t != nil {
		puo.SetRefundedAt(*t)
	}
	return puo
}

// ClearRefundedAt clears the value of the "refunded_at" field.
func (puo *PaymentUpdateOne) ClearRefundedAt() *PaymentUpdateOne {
	puo.mutation.ClearRefundedAt()
	return puo
}

// SetErrorMessage sets the "error_message" field.
func (puo *PaymentUpdateOne) SetErrorMessage(s string) *PaymentUpdateOne {
	puo.mutation.SetErrorMessage(s)
	return puo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableErrorMessage(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetErrorMessage(*s)
	}
	return puo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (puo *PaymentUpdateOne) ClearErrorMessage() *PaymentUpdateOne {
	puo.mutation.ClearErrorMessage()
	return puo
}

// AddAttemptIDs adds the "attempts" edge to the PaymentAttempt entity by IDs.
func (puo *PaymentUpdateOne) AddAttemptIDs(ids ...string) *PaymentUpdateOne {
	puo.mutation.AddAttemptIDs(ids...)
	return puo
}

// AddAttempts adds the "attempts" edges to the PaymentAttempt entity.
func (puo *PaymentUpdateOne) AddAttempts(p ...*PaymentAttempt) *PaymentUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddAttemptIDs(ids...)
}

// Mutation returns the PaymentMutation object of the builder.
func (puo *PaymentUpdateOne) Mutation() *PaymentMutation {
	return puo.mutation
}

// ClearAttempts clears all "attempts" edges to the PaymentAttempt entity.
func (puo *PaymentUpdateOne) ClearAttempts() *PaymentUpdateOne {
	puo.mutation.ClearAttempts()
	return puo
}

// RemoveAttemptIDs removes the "attempts" edge to PaymentAttempt entities by IDs.
func (puo *PaymentUpdateOne) RemoveAttemptIDs(ids ...string) *PaymentUpdateOne {
	puo.mutation.RemoveAttemptIDs(ids...)
	return puo
}

// RemoveAttempts removes "attempts" edges to PaymentAttempt entities.
func (puo *PaymentUpdateOne) RemoveAttempts(p ...*PaymentAttempt) *PaymentUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveAttemptIDs(ids...)
}

// Where appends a list predicates to the PaymentUpdate builder.
func (puo *PaymentUpdateOne) Where(ps ...predicate.Payment) *PaymentUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PaymentUpdateOne) Select(field string, fields ...string) *PaymentUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Payment entity.
func (puo *PaymentUpdateOne) Save(ctx context.Context) (*Payment, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PaymentUpdateOne) SaveX(ctx context.Context) *Payment {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PaymentUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PaymentUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := payment.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PaymentUpdateOne) check() error {
	if v, ok := puo.mutation.DestinationType(); ok {
		if err := payment.DestinationTypeValidator(v); err != nil {
			return &ValidationError{Name: "destination_type", err: fmt.Errorf(`ent: validator failed for field "Payment.destination_type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.DestinationID(); ok {
		if err := payment.DestinationIDValidator(v); err != nil {
			return &ValidationError{Name: "destination_id", err: fmt.Errorf(`ent: validator failed for field "Payment.destination_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.PaymentMethodType(); ok {
		if err := payment.PaymentMethodTypeValidator(v); err != nil {
			return &ValidationError{Name: "payment_method_type", err: fmt.Errorf(`ent: validator failed for field "Payment.payment_method_type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.PaymentStatus(); ok {
		if err := payment.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Payment.payment_status": %w`, err)}
		}
	}
	return nil
}

func (puo *PaymentUpdateOne) sqlSave(ctx context.Context) (_node *Payment, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(payment.Table, payment.Columns, sqlgraph.NewFieldSpec(payment.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Payment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payment.FieldID)
		for _, f := range fields {
			if !payment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != payment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(payment.FieldStatus, field.TypeString, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(payment.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.CreatedByCleared() {
		_spec.ClearField(payment.FieldCreatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(payment.FieldUpdatedBy, field.TypeString, value)
	}
	if puo.mutation.UpdatedByCleared() {
		_spec.ClearField(payment.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.DestinationType(); ok {
		_spec.SetField(payment.FieldDestinationType, field.TypeString, value)
	}
	if value, ok := puo.mutation.DestinationID(); ok {
		_spec.SetField(payment.FieldDestinationID, field.TypeString, value)
	}
	if value, ok := puo.mutation.PaymentMethodType(); ok {
		_spec.SetField(payment.FieldPaymentMethodType, field.TypeString, value)
	}
	if value, ok := puo.mutation.PaymentMethodID(); ok {
		_spec.SetField(payment.FieldPaymentMethodID, field.TypeString, value)
	}
	if puo.mutation.PaymentMethodIDCleared() {
		_spec.ClearField(payment.FieldPaymentMethodID, field.TypeString)
	}
	if value, ok := puo.mutation.PaymentGateway(); ok {
		_spec.SetField(payment.FieldPaymentGateway, field.TypeString, value)
	}
	if puo.mutation.PaymentGatewayCleared() {
		_spec.ClearField(payment.FieldPaymentGateway, field.TypeString)
	}
	if value, ok := puo.mutation.GatewayPaymentID(); ok {
		_spec.SetField(payment.FieldGatewayPaymentID, field.TypeString, value)
	}
	if puo.mutation.GatewayPaymentIDCleared() {
		_spec.ClearField(payment.FieldGatewayPaymentID, field.TypeString)
	}
	if value, ok := puo.mutation.Amount(); ok {
		_spec.SetField(payment.FieldAmount, field.TypeOther, value)
	}
	if value, ok := puo.mutation.PaymentStatus(); ok {
		_spec.SetField(payment.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := puo.mutation.TrackAttempts(); ok {
		_spec.SetField(payment.FieldTrackAttempts, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Metadata(); ok {
		_spec.SetField(payment.FieldMetadata, field.TypeJSON, value)
	}
	if puo.mutation.MetadataCleared() {
		_spec.ClearField(payment.FieldMetadata, field.TypeJSON)
	}
	if value, ok := puo.mutation.SucceededAt(); ok {
		_spec.SetField(payment.FieldSucceededAt, field.TypeTime, value)
	}
	if puo.mutation.SucceededAtCleared() {
		_spec.ClearField(payment.FieldSucceededAt, field.TypeTime)
	}
	if value, ok := puo.mutation.FailedAt(); ok {
		_spec.SetField(payment.FieldFailedAt, field.TypeTime, value)
	}
	if puo.mutation.FailedAtCleared() {
		_spec.ClearField(payment.FieldFailedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.RefundedAt(); ok {
		_spec.SetField(payment.FieldRefundedAt, field.TypeTime, value)
	}
	if puo.mutation.RefundedAtCleared() {
		_spec.ClearField(payment.FieldRefundedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.ErrorMessage(); ok {
		_spec.SetField(payment.FieldErrorMessage, field.TypeString, value)
	}
	if puo.mutation.ErrorMessageCleared() {
		_spec.ClearField(payment.FieldErrorMessage, field.TypeString)
	}
	if puo.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.AttemptsTable,
			Columns: []string{payment.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAttemptsIDs(); len(nodes) > 0 && !puo.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.AttemptsTable,
			Columns: []string{payment.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.AttemptsTable,
			Columns: []string{payment.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Payment{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
