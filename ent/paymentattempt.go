// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/payment"
	"github.com/flexprice/flexprice/ent/paymentattempt"
)

// PaymentAttempt is the model entity for the PaymentAttempt schema.
type PaymentAttempt struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// PaymentID holds the value of the "payment_id" field.
	PaymentID string `json:"payment_id,omitempty"`
	// PaymentStatus holds the value of the "payment_status" field.
	PaymentStatus string `json:"payment_status,omitempty"`
	// AttemptNumber holds the value of the "attempt_number" field.
	AttemptNumber int `json:"attempt_number,omitempty"`
	// GatewayAttemptID holds the value of the "gateway_attempt_id" field.
	GatewayAttemptID *string `json:"gateway_attempt_id,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage *string `json:"error_message,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentAttemptQuery when eager-loading is set.
	Edges        PaymentAttemptEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaymentAttemptEdges holds the relations/edges for other nodes in the graph.
type PaymentAttemptEdges struct {
	// Payment holds the value of the payment edge.
	Payment *Payment `json:"payment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PaymentOrErr returns the Payment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentAttemptEdges) PaymentOrErr() (*Payment, error) {
	if e.Payment != nil {
		return e.Payment, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: payment.Label}
	}
	return nil, &NotLoadedError{edge: "payment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentAttempt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentattempt.FieldMetadata:
			values[i] = new([]byte)
		case paymentattempt.FieldAttemptNumber:
			values[i] = new(sql.NullInt64)
		case paymentattempt.FieldID, paymentattempt.FieldTenantID, paymentattempt.FieldStatus, paymentattempt.FieldCreatedBy, paymentattempt.FieldUpdatedBy, paymentattempt.FieldPaymentID, paymentattempt.FieldPaymentStatus, paymentattempt.FieldGatewayAttemptID, paymentattempt.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case paymentattempt.FieldCreatedAt, paymentattempt.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentAttempt fields.
func (pa *PaymentAttempt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentattempt.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pa.ID = value.String
			}
		case paymentattempt.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				pa.TenantID = value.String
			}
		case paymentattempt.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pa.Status = value.String
			}
		case paymentattempt.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case paymentattempt.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case paymentattempt.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pa.CreatedBy = value.String
			}
		case paymentattempt.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pa.UpdatedBy = value.String
			}
		case paymentattempt.FieldPaymentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_id", values[i])
			} else if value.Valid {
				pa.PaymentID = value.String
			}
		case paymentattempt.FieldPaymentStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_status", values[i])
			} else if value.Valid {
				pa.PaymentStatus = value.String
			}
		case paymentattempt.FieldAttemptNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempt_number", values[i])
			} else if value.Valid {
				pa.AttemptNumber = int(value.Int64)
			}
		case paymentattempt.FieldGatewayAttemptID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gateway_attempt_id", values[i])
			} else if value.Valid {
				pa.GatewayAttemptID = new(string)
				*pa.GatewayAttemptID = value.String
			}
		case paymentattempt.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				pa.ErrorMessage = new(string)
				*pa.ErrorMessage = value.String
			}
		case paymentattempt.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pa.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentAttempt.
// This includes values selected through modifiers, order, etc.
func (pa *PaymentAttempt) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryPayment queries the "payment" edge of the PaymentAttempt entity.
func (pa *PaymentAttempt) QueryPayment() *PaymentQuery {
	return NewPaymentAttemptClient(pa.config).QueryPayment(pa)
}

// Update returns a builder for updating this PaymentAttempt.
// Note that you need to call PaymentAttempt.Unwrap() before calling this method if this PaymentAttempt
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *PaymentAttempt) Update() *PaymentAttemptUpdateOne {
	return NewPaymentAttemptClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the PaymentAttempt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *PaymentAttempt) Unwrap() *PaymentAttempt {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentAttempt is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *PaymentAttempt) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentAttempt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(pa.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(pa.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pa.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pa.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("payment_id=")
	builder.WriteString(pa.PaymentID)
	builder.WriteString(", ")
	builder.WriteString("payment_status=")
	builder.WriteString(pa.PaymentStatus)
	builder.WriteString(", ")
	builder.WriteString("attempt_number=")
	builder.WriteString(fmt.Sprintf("%v", pa.AttemptNumber))
	builder.WriteString(", ")
	if v := pa.GatewayAttemptID; v != nil {
		builder.WriteString("gateway_attempt_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pa.ErrorMessage; v != nil {
		builder.WriteString("error_message=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", pa.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentAttempts is a parsable slice of PaymentAttempt.
type PaymentAttempts []*PaymentAttempt
