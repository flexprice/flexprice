// Code generated by ent, DO NOT EDIT.

package paymentattempt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldUpdatedBy, v))
}

// PaymentID applies equality check predicate on the "payment_id" field. It's identical to PaymentIDEQ.
func PaymentID(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldPaymentID, v))
}

// PaymentStatus applies equality check predicate on the "payment_status" field. It's identical to PaymentStatusEQ.
func PaymentStatus(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldPaymentStatus, v))
}

// AttemptNumber applies equality check predicate on the "attempt_number" field. It's identical to AttemptNumberEQ.
func AttemptNumber(v int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldAttemptNumber, v))
}

// GatewayAttemptID applies equality check predicate on the "gateway_attempt_id" field. It's identical to GatewayAttemptIDEQ.
func GatewayAttemptID(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldGatewayAttemptID, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldErrorMessage, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// PaymentIDEQ applies the EQ predicate on the "payment_id" field.
func PaymentIDEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldPaymentID, v))
}

// PaymentIDNEQ applies the NEQ predicate on the "payment_id" field.
func PaymentIDNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldPaymentID, v))
}

// PaymentIDIn applies the In predicate on the "payment_id" field.
func PaymentIDIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldPaymentID, vs...))
}

// PaymentIDNotIn applies the NotIn predicate on the "payment_id" field.
func PaymentIDNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldPaymentID, vs...))
}

// PaymentIDGT applies the GT predicate on the "payment_id" field.
func PaymentIDGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldPaymentID, v))
}

// PaymentIDGTE applies the GTE predicate on the "payment_id" field.
func PaymentIDGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldPaymentID, v))
}

// PaymentIDLT applies the LT predicate on the "payment_id" field.
func PaymentIDLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldPaymentID, v))
}

// PaymentIDLTE applies the LTE predicate on the "payment_id" field.
func PaymentIDLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldPaymentID, v))
}

// PaymentIDContains applies the Contains predicate on the "payment_id" field.
func PaymentIDContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldPaymentID, v))
}

// PaymentIDHasPrefix applies the HasPrefix predicate on the "payment_id" field.
func PaymentIDHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldPaymentID, v))
}

// PaymentIDHasSuffix applies the HasSuffix predicate on the "payment_id" field.
func PaymentIDHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldPaymentID, v))
}

// PaymentIDEqualFold applies the EqualFold predicate on the "payment_id" field.
func PaymentIDEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldPaymentID, v))
}

// PaymentIDContainsFold applies the ContainsFold predicate on the "payment_id" field.
func PaymentIDContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldPaymentID, v))
}

// PaymentStatusEQ applies the EQ predicate on the "payment_status" field.
func PaymentStatusEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldPaymentStatus, v))
}

// PaymentStatusNEQ applies the NEQ predicate on the "payment_status" field.
func PaymentStatusNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldPaymentStatus, v))
}

// PaymentStatusIn applies the In predicate on the "payment_status" field.
func PaymentStatusIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldPaymentStatus, vs...))
}

// PaymentStatusNotIn applies the NotIn predicate on the "payment_status" field.
func PaymentStatusNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldPaymentStatus, vs...))
}

// PaymentStatusGT applies the GT predicate on the "payment_status" field.
func PaymentStatusGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldPaymentStatus, v))
}

// PaymentStatusGTE applies the GTE predicate on the "payment_status" field.
func PaymentStatusGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldPaymentStatus, v))
}

// PaymentStatusLT applies the LT predicate on the "payment_status" field.
func PaymentStatusLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldPaymentStatus, v))
}

// PaymentStatusLTE applies the LTE predicate on the "payment_status" field.
func PaymentStatusLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldPaymentStatus, v))
}

// PaymentStatusContains applies the Contains predicate on the "payment_status" field.
func PaymentStatusContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldPaymentStatus, v))
}

// PaymentStatusHasPrefix applies the HasPrefix predicate on the "payment_status" field.
func PaymentStatusHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldPaymentStatus, v))
}

// PaymentStatusHasSuffix applies the HasSuffix predicate on the "payment_status" field.
func PaymentStatusHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldPaymentStatus, v))
}

// PaymentStatusEqualFold applies the EqualFold predicate on the "payment_status" field.
func PaymentStatusEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldPaymentStatus, v))
}

// PaymentStatusContainsFold applies the ContainsFold predicate on the "payment_status" field.
func PaymentStatusContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldPaymentStatus, v))
}

// AttemptNumberEQ applies the EQ predicate on the "attempt_number" field.
func AttemptNumberEQ(v int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldAttemptNumber, v))
}

// AttemptNumberNEQ applies the NEQ predicate on the "attempt_number" field.
func AttemptNumberNEQ(v int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldAttemptNumber, v))
}

// AttemptNumberIn applies the In predicate on the "attempt_number" field.
func AttemptNumberIn(vs ...int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldAttemptNumber, vs...))
}

// AttemptNumberNotIn applies the NotIn predicate on the "attempt_number" field.
func AttemptNumberNotIn(vs ...int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldAttemptNumber, vs...))
}

// AttemptNumberGT applies the GT predicate on the "attempt_number" field.
func AttemptNumberGT(v int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldAttemptNumber, v))
}

// AttemptNumberGTE applies the GTE predicate on the "attempt_number" field.
func AttemptNumberGTE(v int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldAttemptNumber, v))
}

// AttemptNumberLT applies the LT predicate on the "attempt_number" field.
func AttemptNumberLT(v int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldAttemptNumber, v))
}

// AttemptNumberLTE applies the LTE predicate on the "attempt_number" field.
func AttemptNumberLTE(v int) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldAttemptNumber, v))
}

// GatewayAttemptIDEQ applies the EQ predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldGatewayAttemptID, v))
}

// GatewayAttemptIDNEQ applies the NEQ predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldGatewayAttemptID, v))
}

// GatewayAttemptIDIn applies the In predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldGatewayAttemptID, vs...))
}

// GatewayAttemptIDNotIn applies the NotIn predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldGatewayAttemptID, vs...))
}

// GatewayAttemptIDGT applies the GT predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldGatewayAttemptID, v))
}

// GatewayAttemptIDGTE applies the GTE predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldGatewayAttemptID, v))
}

// GatewayAttemptIDLT applies the LT predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldGatewayAttemptID, v))
}

// GatewayAttemptIDLTE applies the LTE predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldGatewayAttemptID, v))
}

// GatewayAttemptIDContains applies the Contains predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldGatewayAttemptID, v))
}

// GatewayAttemptIDHasPrefix applies the HasPrefix predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldGatewayAttemptID, v))
}

// GatewayAttemptIDHasSuffix applies the HasSuffix predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldGatewayAttemptID, v))
}

// GatewayAttemptIDIsNil applies the IsNil predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDIsNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIsNull(FieldGatewayAttemptID))
}

// GatewayAttemptIDNotNil applies the NotNil predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDNotNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotNull(FieldGatewayAttemptID))
}

// GatewayAttemptIDEqualFold applies the EqualFold predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldGatewayAttemptID, v))
}

// GatewayAttemptIDContainsFold applies the ContainsFold predicate on the "gateway_attempt_id" field.
func GatewayAttemptIDContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldGatewayAttemptID, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldContainsFold(FieldErrorMessage, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.FieldNotNull(FieldMetadata))
}

// HasPayment applies the HasEdge predicate on the "payment" edge.
func HasPayment() predicate.PaymentAttempt {
	return predicate.PaymentAttempt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentTable, PaymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentWith applies the HasEdge predicate on the "payment" edge with a given conditions (other predicates).
func HasPaymentWith(preds ...predicate.Payment) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(func(s *sql.Selector) {
		step := newPaymentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentAttempt) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentAttempt) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentAttempt) predicate.PaymentAttempt {
	return predicate.PaymentAttempt(sql.NotPredicates(p))
}
