// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/payment"
	"github.com/flexprice/flexprice/ent/paymentattempt"
)

// PaymentAttemptCreate is the builder for creating a PaymentAttempt entity.
type PaymentAttemptCreate struct {
	config
	mutation *PaymentAttemptMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (pac *PaymentAttemptCreate) SetTenantID(s string) *PaymentAttemptCreate {
	pac.mutation.SetTenantID(s)
	return pac
}

// SetStatus sets the "status" field.
func (pac *PaymentAttemptCreate) SetStatus(s string) *PaymentAttemptCreate {
	pac.mutation.SetStatus(s)
	return pac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillableStatus(s *string) *PaymentAttemptCreate {
	if s != nil {
		pac.SetStatus(*s)
	}
	return pac
}

// SetCreatedAt sets the "created_at" field.
func (pac *PaymentAttemptCreate) SetCreatedAt(t time.Time) *PaymentAttemptCreate {
	pac.mutation.SetCreatedAt(t)
	return pac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillableCreatedAt(t *time.Time) *PaymentAttemptCreate {
	if t != nil {
		pac.SetCreatedAt(*t)
	}
	return pac
}

// SetUpdatedAt sets the "updated_at" field.
func (pac *PaymentAttemptCreate) SetUpdatedAt(t time.Time) *PaymentAttemptCreate {
	pac.mutation.SetUpdatedAt(t)
	return pac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillableUpdatedAt(t *time.Time) *PaymentAttemptCreate {
	if t != nil {
		pac.SetUpdatedAt(*t)
	}
	return pac
}

// SetCreatedBy sets the "created_by" field.
func (pac *PaymentAttemptCreate) SetCreatedBy(s string) *PaymentAttemptCreate {
	pac.mutation.SetCreatedBy(s)
	return pac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillableCreatedBy(s *string) *PaymentAttemptCreate {
	if s != nil {
		pac.SetCreatedBy(*s)
	}
	return pac
}

// SetUpdatedBy sets the "updated_by" field.
func (pac *PaymentAttemptCreate) SetUpdatedBy(s string) *PaymentAttemptCreate {
	pac.mutation.SetUpdatedBy(s)
	return pac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillableUpdatedBy(s *string) *PaymentAttemptCreate {
	if s != nil {
		pac.SetUpdatedBy(*s)
	}
	return pac
}

// SetPaymentID sets the "payment_id" field.
func (pac *PaymentAttemptCreate) SetPaymentID(s string) *PaymentAttemptCreate {
	pac.mutation.SetPaymentID(s)
	return pac
}

// SetPaymentStatus sets the "payment_status" field.
func (pac *PaymentAttemptCreate) SetPaymentStatus(s string) *PaymentAttemptCreate {
	pac.mutation.SetPaymentStatus(s)
	return pac
}

// SetAttemptNumber sets the "attempt_number" field.
func (pac *PaymentAttemptCreate) SetAttemptNumber(i int) *PaymentAttemptCreate {
	pac.mutation.SetAttemptNumber(i)
	return pac
}

// SetNillableAttemptNumber sets the "attempt_number" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillableAttemptNumber(i *int) *PaymentAttemptCreate {
	if i != nil {
		pac.SetAttemptNumber(*i)
	}
	return pac
}

// SetGatewayAttemptID sets the "gateway_attempt_id" field.
func (pac *PaymentAttemptCreate) SetGatewayAttemptID(s string) *PaymentAttemptCreate {
	pac.mutation.SetGatewayAttemptID(s)
	return pac
}

// SetNillableGatewayAttemptID sets the "gateway_attempt_id" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillableGatewayAttemptID(s *string) *PaymentAttemptCreate {
	if s != nil {
		pac.SetGatewayAttemptID(*s)
	}
	return pac
}

// SetErrorMessage sets the "error_message" field.
func (pac *PaymentAttemptCreate) SetErrorMessage(s string) *PaymentAttemptCreate {
	pac.mutation.SetErrorMessage(s)
	return pac
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (pac *PaymentAttemptCreate) SetNillableErrorMessage(s *string) *PaymentAttemptCreate {
	if s != nil {
		pac.SetErrorMessage(*s)
	}
	return pac
}

// SetMetadata sets the "metadata" field.
func (pac *PaymentAttemptCreate) SetMetadata(m map[string]string) *PaymentAttemptCreate {
	pac.mutation.SetMetadata(m)
	return pac
}

// SetID sets the "id" field.
func (pac *PaymentAttemptCreate) SetID(s string) *PaymentAttemptCreate {
	pac.mutation.SetID(s)
	return pac
}

// SetPayment sets the "payment" edge to the Payment entity.
func (pac *PaymentAttemptCreate) SetPayment(p *Payment) *PaymentAttemptCreate {
	return pac.SetPaymentID(p.ID)
}

// Mutation returns the PaymentAttemptMutation object of the builder.
func (pac *PaymentAttemptCreate) Mutation() *PaymentAttemptMutation {
	return pac.mutation
}

// Save creates the PaymentAttempt in the database.
func (pac *PaymentAttemptCreate) Save(ctx context.Context) (*PaymentAttempt, error) {
	pac.defaults()
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PaymentAttemptCreate) SaveX(ctx context.Context) *PaymentAttempt {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *PaymentAttemptCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *PaymentAttemptCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pac *PaymentAttemptCreate) defaults() {
	if _, ok := pac.mutation.Status(); !ok {
		v := paymentattempt.DefaultStatus
		pac.mutation.SetStatus(v)
	}
	if _, ok := pac.mutation.CreatedAt(); !ok {
		v := paymentattempt.DefaultCreatedAt()
		pac.mutation.SetCreatedAt(v)
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		v := paymentattempt.DefaultUpdatedAt()
		pac.mutation.SetUpdatedAt(v)
	}
	if _, ok := pac.mutation.AttemptNumber(); !ok {
		v := paymentattempt.DefaultAttemptNumber
		pac.mutation.SetAttemptNumber(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *PaymentAttemptCreate) check() error {
	if _, ok := pac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "PaymentAttempt.tenant_id"`)}
	}
	if v, ok := pac.mutation.TenantID(); ok {
		if err := paymentattempt.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "PaymentAttempt.tenant_id": %w`, err)}
		}
	}
	if _, ok := pac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PaymentAttempt.status"`)}
	}
	if _, ok := pac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PaymentAttempt.created_at"`)}
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PaymentAttempt.updated_at"`)}
	}
	if _, ok := pac.mutation.PaymentID(); !ok {
		return &ValidationError{Name: "payment_id", err: errors.New(`ent: missing required field "PaymentAttempt.payment_id"`)}
	}
	if v, ok := pac.mutation.PaymentID(); ok {
		if err := paymentattempt.PaymentIDValidator(v); err != nil {
			return &ValidationError{Name: "payment_id", err: fmt.Errorf(`ent: validator failed for field "PaymentAttempt.payment_id": %w`, err)}
		}
	}
	if _, ok := pac.mutation.PaymentStatus(); !ok {
		return &ValidationError{Name: "payment_status", err: errors.New(`ent: missing required field "PaymentAttempt.payment_status"`)}
	}
	if v, ok := pac.mutation.PaymentStatus(); ok {
		if err := paymentattempt.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "PaymentAttempt.payment_status": %w`, err)}
		}
	}
	if _, ok := pac.mutation.AttemptNumber(); !ok {
		return &ValidationError{Name: "attempt_number", err: errors.New(`ent: missing required field "PaymentAttempt.attempt_number"`)}
	}
	if v, ok := pac.mutation.AttemptNumber(); ok {
		if err := paymentattempt.AttemptNumberValidator(v); err != nil {
			return &ValidationError{Name: "attempt_number", err: fmt.Errorf(`ent: validator failed for field "PaymentAttempt.attempt_number": %w`, err)}
		}
	}
	if len(pac.mutation.PaymentIDs()) == 0 {
		return &ValidationError{Name: "payment", err: errors.New(`ent: missing required edge "PaymentAttempt.payment"`)}
	}
	return nil
}

func (pac *PaymentAttemptCreate) sqlSave(ctx context.Context) (*PaymentAttempt, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PaymentAttempt.ID type: %T", _spec.ID.Value)
		}
	}
	pac.mutation.id = &_node.ID
	pac.mutation.done = true
	return _node, nil
}

func (pac *PaymentAttemptCreate) createSpec() (*PaymentAttempt, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentAttempt{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(paymentattempt.Table, sqlgraph.NewFieldSpec(paymentattempt.FieldID, field.TypeString))
	)
	if id, ok := pac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pac.mutation.TenantID(); ok {
		_spec.SetField(paymentattempt.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := pac.mutation.Status(); ok {
		_spec.SetField(paymentattempt.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pac.mutation.CreatedAt(); ok {
		_spec.SetField(paymentattempt.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pac.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentattempt.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pac.mutation.CreatedBy(); ok {
		_spec.SetField(paymentattempt.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pac.mutation.UpdatedBy(); ok {
		_spec.SetField(paymentattempt.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pac.mutation.PaymentStatus(); ok {
		_spec.SetField(paymentattempt.FieldPaymentStatus, field.TypeString, value)
		_node.PaymentStatus = value
	}
	if value, ok := pac.mutation.AttemptNumber(); ok {
		_spec.SetField(paymentattempt.FieldAttemptNumber, field.TypeInt, value)
		_node.AttemptNumber = value
	}
	if value, ok := pac.mutation.GatewayAttemptID(); ok {
		_spec.SetField(paymentattempt.FieldGatewayAttemptID, field.TypeString, value)
		_node.GatewayAttemptID = &value
	}
	if value, ok := pac.mutation.ErrorMessage(); ok {
		_spec.SetField(paymentattempt.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = &value
	}
	if value, ok := pac.mutation.Metadata(); ok {
		_spec.SetField(paymentattempt.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := pac.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentattempt.PaymentTable,
			Columns: []string{paymentattempt.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PaymentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentAttemptCreateBulk is the builder for creating many PaymentAttempt entities in bulk.
type PaymentAttemptCreateBulk struct {
	config
	err      error
	builders []*PaymentAttemptCreate
}

// Save creates the PaymentAttempt entities in the database.
func (pacb *PaymentAttemptCreateBulk) Save(ctx context.Context) ([]*PaymentAttempt, error) {
	if pacb.err != nil {
		return nil, pacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PaymentAttempt, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentAttemptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PaymentAttemptCreateBulk) SaveX(ctx context.Context) []*PaymentAttempt {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *PaymentAttemptCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *PaymentAttemptCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}
