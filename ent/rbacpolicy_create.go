// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/rbacpolicy"
)

// RBACPolicyCreate is the builder for creating a RBACPolicy entity.
type RBACPolicyCreate struct {
	config
	mutation *RBACPolicyMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (rpc *RBACPolicyCreate) SetTenantID(s string) *RBACPolicyCreate {
	rpc.mutation.SetTenantID(s)
	return rpc
}

// SetStatus sets the "status" field.
func (rpc *RBACPolicyCreate) SetStatus(s string) *RBACPolicyCreate {
	rpc.mutation.SetStatus(s)
	return rpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rpc *RBACPolicyCreate) SetNillableStatus(s *string) *RBACPolicyCreate {
	if s != nil {
		rpc.SetStatus(*s)
	}
	return rpc
}

// SetCreatedAt sets the "created_at" field.
func (rpc *RBACPolicyCreate) SetCreatedAt(t time.Time) *RBACPolicyCreate {
	rpc.mutation.SetCreatedAt(t)
	return rpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rpc *RBACPolicyCreate) SetNillableCreatedAt(t *time.Time) *RBACPolicyCreate {
	if t != nil {
		rpc.SetCreatedAt(*t)
	}
	return rpc
}

// SetUpdatedAt sets the "updated_at" field.
func (rpc *RBACPolicyCreate) SetUpdatedAt(t time.Time) *RBACPolicyCreate {
	rpc.mutation.SetUpdatedAt(t)
	return rpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rpc *RBACPolicyCreate) SetNillableUpdatedAt(t *time.Time) *RBACPolicyCreate {
	if t != nil {
		rpc.SetUpdatedAt(*t)
	}
	return rpc
}

// SetCreatedBy sets the "created_by" field.
func (rpc *RBACPolicyCreate) SetCreatedBy(s string) *RBACPolicyCreate {
	rpc.mutation.SetCreatedBy(s)
	return rpc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rpc *RBACPolicyCreate) SetNillableCreatedBy(s *string) *RBACPolicyCreate {
	if s != nil {
		rpc.SetCreatedBy(*s)
	}
	return rpc
}

// SetUpdatedBy sets the "updated_by" field.
func (rpc *RBACPolicyCreate) SetUpdatedBy(s string) *RBACPolicyCreate {
	rpc.mutation.SetUpdatedBy(s)
	return rpc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rpc *RBACPolicyCreate) SetNillableUpdatedBy(s *string) *RBACPolicyCreate {
	if s != nil {
		rpc.SetUpdatedBy(*s)
	}
	return rpc
}

// SetRole sets the "role" field.
func (rpc *RBACPolicyCreate) SetRole(s string) *RBACPolicyCreate {
	rpc.mutation.SetRole(s)
	return rpc
}

// SetResource sets the "resource" field.
func (rpc *RBACPolicyCreate) SetResource(s string) *RBACPolicyCreate {
	rpc.mutation.SetResource(s)
	return rpc
}

// SetAction sets the "action" field.
func (rpc *RBACPolicyCreate) SetAction(s string) *RBACPolicyCreate {
	rpc.mutation.SetAction(s)
	return rpc
}

// SetEffect sets the "effect" field.
func (rpc *RBACPolicyCreate) SetEffect(s string) *RBACPolicyCreate {
	rpc.mutation.SetEffect(s)
	return rpc
}

// SetNillableEffect sets the "effect" field if the given value is not nil.
func (rpc *RBACPolicyCreate) SetNillableEffect(s *string) *RBACPolicyCreate {
	if s != nil {
		rpc.SetEffect(*s)
	}
	return rpc
}

// SetID sets the "id" field.
func (rpc *RBACPolicyCreate) SetID(s string) *RBACPolicyCreate {
	rpc.mutation.SetID(s)
	return rpc
}

// Mutation returns the RBACPolicyMutation object of the builder.
func (rpc *RBACPolicyCreate) Mutation() *RBACPolicyMutation {
	return rpc.mutation
}

// Save creates the RBACPolicy in the database.
func (rpc *RBACPolicyCreate) Save(ctx context.Context) (*RBACPolicy, error) {
	rpc.defaults()
	return withHooks(ctx, rpc.sqlSave, rpc.mutation, rpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpc *RBACPolicyCreate) SaveX(ctx context.Context) *RBACPolicy {
	v, err := rpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpc *RBACPolicyCreate) Exec(ctx context.Context) error {
	_, err := rpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpc *RBACPolicyCreate) ExecX(ctx context.Context) {
	if err := rpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpc *RBACPolicyCreate) defaults() {
	if _, ok := rpc.mutation.Status(); !ok {
		v := rbacpolicy.DefaultStatus
		rpc.mutation.SetStatus(v)
	}
	if _, ok := rpc.mutation.CreatedAt(); !ok {
		v := rbacpolicy.DefaultCreatedAt()
		rpc.mutation.SetCreatedAt(v)
	}
	if _, ok := rpc.mutation.UpdatedAt(); !ok {
		v := rbacpolicy.DefaultUpdatedAt()
		rpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rpc.mutation.Effect(); !ok {
		v := rbacpolicy.DefaultEffect
		rpc.mutation.SetEffect(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpc *RBACPolicyCreate) check() error {
	if _, ok := rpc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "RBACPolicy.tenant_id"`)}
	}
	if v, ok := rpc.mutation.TenantID(); ok {
		if err := rbacpolicy.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "RBACPolicy.tenant_id": %w`, err)}
		}
	}
	if _, ok := rpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "RBACPolicy.status"`)}
	}
	if _, ok := rpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RBACPolicy.created_at"`)}
	}
	if _, ok := rpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RBACPolicy.updated_at"`)}
	}
	if _, ok := rpc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "RBACPolicy.role"`)}
	}
	if v, ok := rpc.mutation.Role(); ok {
		if err := rbacpolicy.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "RBACPolicy.role": %w`, err)}
		}
	}
	if _, ok := rpc.mutation.Resource(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`ent: missing required field "RBACPolicy.resource"`)}
	}
	if v, ok := rpc.mutation.Resource(); ok {
		if err := rbacpolicy.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: validator failed for field "RBACPolicy.resource": %w`, err)}
		}
	}
	if _, ok := rpc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "RBACPolicy.action"`)}
	}
	if v, ok := rpc.mutation.Action(); ok {
		if err := rbacpolicy.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "RBACPolicy.action": %w`, err)}
		}
	}
	if _, ok := rpc.mutation.Effect(); !ok {
		return &ValidationError{Name: "effect", err: errors.New(`ent: missing required field "RBACPolicy.effect"`)}
	}
	return nil
}

func (rpc *RBACPolicyCreate) sqlSave(ctx context.Context) (*RBACPolicy, error) {
	if err := rpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RBACPolicy.ID type: %T", _spec.ID.Value)
		}
	}
	rpc.mutation.id = &_node.ID
	rpc.mutation.done = true
	return _node, nil
}

func (rpc *RBACPolicyCreate) createSpec() (*RBACPolicy, *sqlgraph.CreateSpec) {
	var (
		_node = &RBACPolicy{config: rpc.config}
		_spec = sqlgraph.NewCreateSpec(rbacpolicy.Table, sqlgraph.NewFieldSpec(rbacpolicy.FieldID, field.TypeString))
	)
	if id, ok := rpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rpc.mutation.TenantID(); ok {
		_spec.SetField(rbacpolicy.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := rpc.mutation.Status(); ok {
		_spec.SetField(rbacpolicy.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := rpc.mutation.CreatedAt(); ok {
		_spec.SetField(rbacpolicy.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rpc.mutation.UpdatedAt(); ok {
		_spec.SetField(rbacpolicy.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rpc.mutation.CreatedBy(); ok {
		_spec.SetField(rbacpolicy.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := rpc.mutation.UpdatedBy(); ok {
		_spec.SetField(rbacpolicy.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := rpc.mutation.Role(); ok {
		_spec.SetField(rbacpolicy.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if value, ok := rpc.mutation.Resource(); ok {
		_spec.SetField(rbacpolicy.FieldResource, field.TypeString, value)
		_node.Resource = value
	}
	if value, ok := rpc.mutation.Action(); ok {
		_spec.SetField(rbacpolicy.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := rpc.mutation.Effect(); ok {
		_spec.SetField(rbacpolicy.FieldEffect, field.TypeString, value)
		_node.Effect = value
	}
	return _node, _spec
}

// RBACPolicyCreateBulk is the builder for creating many RBACPolicy entities in bulk.
type RBACPolicyCreateBulk struct {
	config
	err      error
	builders []*RBACPolicyCreate
}

// Save creates the RBACPolicy entities in the database.
func (rpcb *RBACPolicyCreateBulk) Save(ctx context.Context) ([]*RBACPolicy, error) {
	if rpcb.err != nil {
		return nil, rpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rpcb.builders))
	nodes := make([]*RBACPolicy, len(rpcb.builders))
	mutators := make([]Mutator, len(rpcb.builders))
	for i := range rpcb.builders {
		func(i int, root context.Context) {
			builder := rpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RBACPolicyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpcb *RBACPolicyCreateBulk) SaveX(ctx context.Context) []*RBACPolicy {
	v, err := rpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpcb *RBACPolicyCreateBulk) Exec(ctx context.Context) error {
	_, err := rpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpcb *RBACPolicyCreateBulk) ExecX(ctx context.Context) {
	if err := rpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
