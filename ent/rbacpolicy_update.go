// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/rbacpolicy"
)

// RBACPolicyUpdate is the builder for updating RBACPolicy entities.
type RBACPolicyUpdate struct {
	config
	hooks    []Hook
	mutation *RBACPolicyMutation
}

// Where appends a list predicates to the RBACPolicyUpdate builder.
func (rpu *RBACPolicyUpdate) Where(ps ...predicate.RBACPolicy) *RBACPolicyUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetStatus sets the "status" field.
func (rpu *RBACPolicyUpdate) SetStatus(s string) *RBACPolicyUpdate {
	rpu.mutation.SetStatus(s)
	return rpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rpu *RBACPolicyUpdate) SetNillableStatus(s *string) *RBACPolicyUpdate {
	if s != nil {
		rpu.SetStatus(*s)
	}
	return rpu
}

// SetUpdatedAt sets the "updated_at" field.
func (rpu *RBACPolicyUpdate) SetUpdatedAt(t time.Time) *RBACPolicyUpdate {
	rpu.mutation.SetUpdatedAt(t)
	return rpu
}

// SetUpdatedBy sets the "updated_by" field.
func (rpu *RBACPolicyUpdate) SetUpdatedBy(s string) *RBACPolicyUpdate {
	rpu.mutation.SetUpdatedBy(s)
	return rpu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rpu *RBACPolicyUpdate) SetNillableUpdatedBy(s *string) *RBACPolicyUpdate {
	if s != nil {
		rpu.SetUpdatedBy(*s)
	}
	return rpu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (rpu *RBACPolicyUpdate) ClearUpdatedBy() *RBACPolicyUpdate {
	rpu.mutation.ClearUpdatedBy()
	return rpu
}

// SetRole sets the "role" field.
func (rpu *RBACPolicyUpdate) SetRole(s string) *RBACPolicyUpdate {
	rpu.mutation.SetRole(s)
	return rpu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (rpu *RBACPolicyUpdate) SetNillableRole(s *string) *RBACPolicyUpdate {
	if s != nil {
		rpu.SetRole(*s)
	}
	return rpu
}

// SetResource sets the "resource" field.
func (rpu *RBACPolicyUpdate) SetResource(s string) *RBACPolicyUpdate {
	rpu.mutation.SetResource(s)
	return rpu
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (rpu *RBACPolicyUpdate) SetNillableResource(s *string) *RBACPolicyUpdate {
	if s != nil {
		rpu.SetResource(*s)
	}
	return rpu
}

// SetAction sets the "action" field.
func (rpu *RBACPolicyUpdate) SetAction(s string) *RBACPolicyUpdate {
	rpu.mutation.SetAction(s)
	return rpu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (rpu *RBACPolicyUpdate) SetNillableAction(s *string) *RBACPolicyUpdate {
	if s != nil {
		rpu.SetAction(*s)
	}
	return rpu
}

// SetEffect sets the "effect" field.
func (rpu *RBACPolicyUpdate) SetEffect(s string) *RBACPolicyUpdate {
	rpu.mutation.SetEffect(s)
	return rpu
}

// SetNillableEffect sets the "effect" field if the given value is not nil.
func (rpu *RBACPolicyUpdate) SetNillableEffect(s *string) *RBACPolicyUpdate {
	if s != nil {
		rpu.SetEffect(*s)
	}
	return rpu
}

// Mutation returns the RBACPolicyMutation object of the builder.
func (rpu *RBACPolicyUpdate) Mutation() *RBACPolicyMutation {
	return rpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *RBACPolicyUpdate) Save(ctx context.Context) (int, error) {
	rpu.defaults()
	return withHooks(ctx, rpu.sqlSave, rpu.mutation, rpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *RBACPolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *RBACPolicyUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *RBACPolicyUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpu *RBACPolicyUpdate) defaults() {
	if _, ok := rpu.mutation.UpdatedAt(); !ok {
		v := rbacpolicy.UpdateDefaultUpdatedAt()
		rpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpu *RBACPolicyUpdate) check() error {
	if v, ok := rpu.mutation.Role(); ok {
		if err := rbacpolicy.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "RBACPolicy.role": %w`, err)}
		}
	}
	if v, ok := rpu.mutation.Resource(); ok {
		if err := rbacpolicy.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: validator failed for field "RBACPolicy.resource": %w`, err)}
		}
	}
	if v, ok := rpu.mutation.Action(); ok {
		if err := rbacpolicy.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "RBACPolicy.action": %w`, err)}
		}
	}
	return nil
}

func (rpu *RBACPolicyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rbacpolicy.Table, rbacpolicy.Columns, sqlgraph.NewFieldSpec(rbacpolicy.FieldID, field.TypeString))
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.Status(); ok {
		_spec.SetField(rbacpolicy.FieldStatus, field.TypeString, value)
	}
	if value, ok := rpu.mutation.UpdatedAt(); ok {
		_spec.SetField(rbacpolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpu.mutation.CreatedByCleared() {
		_spec.ClearField(rbacpolicy.FieldCreatedBy, field.TypeString)
	}
	if value, ok := rpu.mutation.UpdatedBy(); ok {
		_spec.SetField(rbacpolicy.FieldUpdatedBy, field.TypeString, value)
	}
	if rpu.mutation.UpdatedByCleared() {
		_spec.ClearField(rbacpolicy.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := rpu.mutation.Role(); ok {
		_spec.SetField(rbacpolicy.FieldRole, field.TypeString, value)
	}
	if value, ok := rpu.mutation.Resource(); ok {
		_spec.SetField(rbacpolicy.FieldResource, field.TypeString, value)
	}
	if value, ok := rpu.mutation.Action(); ok {
		_spec.SetField(rbacpolicy.FieldAction, field.TypeString, value)
	}
	if value, ok := rpu.mutation.Effect(); ok {
		_spec.SetField(rbacpolicy.FieldEffect, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rbacpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpu.mutation.done = true
	return n, nil
}

// RBACPolicyUpdateOne is the builder for updating a single RBACPolicy entity.
type RBACPolicyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RBACPolicyMutation
}

// SetStatus sets the "status" field.
func (rpuo *RBACPolicyUpdateOne) SetStatus(s string) *RBACPolicyUpdateOne {
	rpuo.mutation.SetStatus(s)
	return rpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rpuo *RBACPolicyUpdateOne) SetNillableStatus(s *string) *RBACPolicyUpdateOne {
	if s != nil {
		rpuo.SetStatus(*s)
	}
	return rpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rpuo *RBACPolicyUpdateOne) SetUpdatedAt(t time.Time) *RBACPolicyUpdateOne {
	rpuo.mutation.SetUpdatedAt(t)
	return rpuo
}

// SetUpdatedBy sets the "updated_by" field.
func (rpuo *RBACPolicyUpdateOne) SetUpdatedBy(s string) *RBACPolicyUpdateOne {
	rpuo.mutation.SetUpdatedBy(s)
	return rpuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rpuo *RBACPolicyUpdateOne) SetNillableUpdatedBy(s *string) *RBACPolicyUpdateOne {
	if s != nil {
		rpuo.SetUpdatedBy(*s)
	}
	return rpuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (rpuo *RBACPolicyUpdateOne) ClearUpdatedBy() *RBACPolicyUpdateOne {
	rpuo.mutation.ClearUpdatedBy()
	return rpuo
}

// SetRole sets the "role" field.
func (rpuo *RBACPolicyUpdateOne) SetRole(s string) *RBACPolicyUpdateOne {
	rpuo.mutation.SetRole(s)
	return rpuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (rpuo *RBACPolicyUpdateOne) SetNillableRole(s *string) *RBACPolicyUpdateOne {
	if s != nil {
		rpuo.SetRole(*s)
	}
	return rpuo
}

// SetResource sets the "resource" field.
func (rpuo *RBACPolicyUpdateOne) SetResource(s string) *RBACPolicyUpdateOne {
	rpuo.mutation.SetResource(s)
	return rpuo
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (rpuo *RBACPolicyUpdateOne) SetNillableResource(s *string) *RBACPolicyUpdateOne {
	if s != nil {
		rpuo.SetResource(*s)
	}
	return rpuo
}

// SetAction sets the "action" field.
func (rpuo *RBACPolicyUpdateOne) SetAction(s string) *RBACPolicyUpdateOne {
	rpuo.mutation.SetAction(s)
	return rpuo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (rpuo *RBACPolicyUpdateOne) SetNillableAction(s *string) *RBACPolicyUpdateOne {
	if s != nil {
		rpuo.SetAction(*s)
	}
	return rpuo
}

// SetEffect sets the "effect" field.
func (rpuo *RBACPolicyUpdateOne) SetEffect(s string) *RBACPolicyUpdateOne {
	rpuo.mutation.SetEffect(s)
	return rpuo
}

// SetNillableEffect sets the "effect" field if the given value is not nil.
func (rpuo *RBACPolicyUpdateOne) SetNillableEffect(s *string) *RBACPolicyUpdateOne {
	if s != nil {
		rpuo.SetEffect(*s)
	}
	return rpuo
}

// Mutation returns the RBACPolicyMutation object of the builder.
func (rpuo *RBACPolicyUpdateOne) Mutation() *RBACPolicyMutation {
	return rpuo.mutation
}

// Where appends a list predicates to the RBACPolicyUpdate builder.
func (rpuo *RBACPolicyUpdateOne) Where(ps ...predicate.RBACPolicy) *RBACPolicyUpdateOne {
	rpuo.mutation.Where(ps...)
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *RBACPolicyUpdateOne) Select(field string, fields ...string) *RBACPolicyUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated RBACPolicy entity.
func (rpuo *RBACPolicyUpdateOne) Save(ctx context.Context) (*RBACPolicy, error) {
	rpuo.defaults()
	return withHooks(ctx, rpuo.sqlSave, rpuo.mutation, rpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *RBACPolicyUpdateOne) SaveX(ctx context.Context) *RBACPolicy {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *RBACPolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *RBACPolicyUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpuo *RBACPolicyUpdateOne) defaults() {
	if _, ok := rpuo.mutation.UpdatedAt(); !ok {
		v := rbacpolicy.UpdateDefaultUpdatedAt()
		rpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpuo *RBACPolicyUpdateOne) check() error {
	if v, ok := rpuo.mutation.Role(); ok {
		if err := rbacpolicy.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "RBACPolicy.role": %w`, err)}
		}
	}
	if v, ok := rpuo.mutation.Resource(); ok {
		if err := rbacpolicy.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: validator failed for field "RBACPolicy.resource": %w`, err)}
		}
	}
	if v, ok := rpuo.mutation.Action(); ok {
		if err := rbacpolicy.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "RBACPolicy.action": %w`, err)}
		}
	}
	return nil
}

func (rpuo *RBACPolicyUpdateOne) sqlSave(ctx context.Context) (_node *RBACPolicy, err error) {
	if err := rpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rbacpolicy.Table, rbacpolicy.Columns, sqlgraph.NewFieldSpec(rbacpolicy.FieldID, field.TypeString))
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RBACPolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rbacpolicy.FieldID)
		for _, f := range fields {
			if !rbacpolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rbacpolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.Status(); ok {
		_spec.SetField(rbacpolicy.FieldStatus, field.TypeString, value)
	}
	if value, ok := rpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(rbacpolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpuo.mutation.CreatedByCleared() {
		_spec.ClearField(rbacpolicy.FieldCreatedBy, field.TypeString)
	}
	if value, ok := rpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(rbacpolicy.FieldUpdatedBy, field.TypeString, value)
	}
	if rpuo.mutation.UpdatedByCleared() {
		_spec.ClearField(rbacpolicy.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := rpuo.mutation.Role(); ok {
		_spec.SetField(rbacpolicy.FieldRole, field.TypeString, value)
	}
	if value, ok := rpuo.mutation.Resource(); ok {
		_spec.SetField(rbacpolicy.FieldResource, field.TypeString, value)
	}
	if value, ok := rpuo.mutation.Action(); ok {
		_spec.SetField(rbacpolicy.FieldAction, field.TypeString, value)
	}
	if value, ok := rpuo.mutation.Effect(); ok {
		_spec.SetField(rbacpolicy.FieldEffect, field.TypeString, value)
	}
	_node = &RBACPolicy{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rbacpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpuo.mutation.done = true
	return _node, nil
}
