// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/stripesyncbatch"
)

// StripeSyncBatch is the model entity for the StripeSyncBatch schema.
type StripeSyncBatch struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID string `json:"entity_id,omitempty"`
	// EntityType holds the value of the "entity_type" field.
	EntityType string `json:"entity_type,omitempty"`
	// MeterID holds the value of the "meter_id" field.
	MeterID string `json:"meter_id,omitempty"`
	// EventType holds the value of the "event_type" field.
	EventType string `json:"event_type,omitempty"`
	// AggregatedQuantity holds the value of the "aggregated_quantity" field.
	AggregatedQuantity float64 `json:"aggregated_quantity,omitempty"`
	// EventCount holds the value of the "event_count" field.
	EventCount int `json:"event_count,omitempty"`
	// StripeEventID holds the value of the "stripe_event_id" field.
	StripeEventID string `json:"stripe_event_id,omitempty"`
	// SyncStatus holds the value of the "sync_status" field.
	SyncStatus string `json:"sync_status,omitempty"`
	// RetryCount holds the value of the "retry_count" field.
	RetryCount int `json:"retry_count,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage string `json:"error_message,omitempty"`
	// WindowStart holds the value of the "window_start" field.
	WindowStart time.Time `json:"window_start,omitempty"`
	// WindowEnd holds the value of the "window_end" field.
	WindowEnd time.Time `json:"window_end,omitempty"`
	// SyncedAt holds the value of the "synced_at" field.
	SyncedAt     *time.Time `json:"synced_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StripeSyncBatch) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stripesyncbatch.FieldAggregatedQuantity:
			values[i] = new(sql.NullFloat64)
		case stripesyncbatch.FieldEventCount, stripesyncbatch.FieldRetryCount:
			values[i] = new(sql.NullInt64)
		case stripesyncbatch.FieldID, stripesyncbatch.FieldTenantID, stripesyncbatch.FieldStatus, stripesyncbatch.FieldCreatedBy, stripesyncbatch.FieldUpdatedBy, stripesyncbatch.FieldEnvironmentID, stripesyncbatch.FieldEntityID, stripesyncbatch.FieldEntityType, stripesyncbatch.FieldMeterID, stripesyncbatch.FieldEventType, stripesyncbatch.FieldStripeEventID, stripesyncbatch.FieldSyncStatus, stripesyncbatch.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case stripesyncbatch.FieldCreatedAt, stripesyncbatch.FieldUpdatedAt, stripesyncbatch.FieldWindowStart, stripesyncbatch.FieldWindowEnd, stripesyncbatch.FieldSyncedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StripeSyncBatch fields.
func (ssb *StripeSyncBatch) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stripesyncbatch.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ssb.ID = value.String
			}
		case stripesyncbatch.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ssb.TenantID = value.String
			}
		case stripesyncbatch.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ssb.Status = value.String
			}
		case stripesyncbatch.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ssb.CreatedAt = value.Time
			}
		case stripesyncbatch.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ssb.UpdatedAt = value.Time
			}
		case stripesyncbatch.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ssb.CreatedBy = value.String
			}
		case stripesyncbatch.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ssb.UpdatedBy = value.String
			}
		case stripesyncbatch.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				ssb.EnvironmentID = value.String
			}
		case stripesyncbatch.FieldEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				ssb.EntityID = value.String
			}
		case stripesyncbatch.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				ssb.EntityType = value.String
			}
		case stripesyncbatch.FieldMeterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meter_id", values[i])
			} else if value.Valid {
				ssb.MeterID = value.String
			}
		case stripesyncbatch.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				ssb.EventType = value.String
			}
		case stripesyncbatch.FieldAggregatedQuantity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field aggregated_quantity", values[i])
			} else if value.Valid {
				ssb.AggregatedQuantity = value.Float64
			}
		case stripesyncbatch.FieldEventCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_count", values[i])
			} else if value.Valid {
				ssb.EventCount = int(value.Int64)
			}
		case stripesyncbatch.FieldStripeEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_event_id", values[i])
			} else if value.Valid {
				ssb.StripeEventID = value.String
			}
		case stripesyncbatch.FieldSyncStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sync_status", values[i])
			} else if value.Valid {
				ssb.SyncStatus = value.String
			}
		case stripesyncbatch.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_count", values[i])
			} else if value.Valid {
				ssb.RetryCount = int(value.Int64)
			}
		case stripesyncbatch.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				ssb.ErrorMessage = value.String
			}
		case stripesyncbatch.FieldWindowStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field window_start", values[i])
			} else if value.Valid {
				ssb.WindowStart = value.Time
			}
		case stripesyncbatch.FieldWindowEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field window_end", values[i])
			} else if value.Valid {
				ssb.WindowEnd = value.Time
			}
		case stripesyncbatch.FieldSyncedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field synced_at", values[i])
			} else if value.Valid {
				ssb.SyncedAt = new(time.Time)
				*ssb.SyncedAt = value.Time
			}
		default:
			ssb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StripeSyncBatch.
// This includes values selected through modifiers, order, etc.
func (ssb *StripeSyncBatch) Value(name string) (ent.Value, error) {
	return ssb.selectValues.Get(name)
}

// Update returns a builder for updating this StripeSyncBatch.
// Note that you need to call StripeSyncBatch.Unwrap() before calling this method if this StripeSyncBatch
// was returned from a transaction, and the transaction was committed or rolled back.
func (ssb *StripeSyncBatch) Update() *StripeSyncBatchUpdateOne {
	return NewStripeSyncBatchClient(ssb.config).UpdateOne(ssb)
}

// Unwrap unwraps the StripeSyncBatch entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ssb *StripeSyncBatch) Unwrap() *StripeSyncBatch {
	_tx, ok := ssb.config.driver.(*txDriver)
	if !ok {
		panic("ent: StripeSyncBatch is not a transactional entity")
	}
	ssb.config.driver = _tx.drv
	return ssb
}

// String implements the fmt.Stringer.
func (ssb *StripeSyncBatch) String() string {
	var builder strings.Builder
	builder.WriteString("StripeSyncBatch(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ssb.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(ssb.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ssb.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ssb.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ssb.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ssb.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ssb.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(ssb.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(ssb.EntityID)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(ssb.EntityType)
	builder.WriteString(", ")
	builder.WriteString("meter_id=")
	builder.WriteString(ssb.MeterID)
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(ssb.EventType)
	builder.WriteString(", ")
	builder.WriteString("aggregated_quantity=")
	builder.WriteString(fmt.Sprintf("%v", ssb.AggregatedQuantity))
	builder.WriteString(", ")
	builder.WriteString("event_count=")
	builder.WriteString(fmt.Sprintf("%v", ssb.EventCount))
	builder.WriteString(", ")
	builder.WriteString("stripe_event_id=")
	builder.WriteString(ssb.StripeEventID)
	builder.WriteString(", ")
	builder.WriteString("sync_status=")
	builder.WriteString(ssb.SyncStatus)
	builder.WriteString(", ")
	builder.WriteString("retry_count=")
	builder.WriteString(fmt.Sprintf("%v", ssb.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(ssb.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("window_start=")
	builder.WriteString(ssb.WindowStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("window_end=")
	builder.WriteString(ssb.WindowEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ssb.SyncedAt; v != nil {
		builder.WriteString("synced_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// StripeSyncBatches is a parsable slice of StripeSyncBatch.
type StripeSyncBatches []*StripeSyncBatch
