// Code generated by ent, DO NOT EDIT.

package stripesyncbatch

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the stripesyncbatch type in the database.
	Label = "stripe_sync_batch"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldEntityID holds the string denoting the entity_id field in the database.
	FieldEntityID = "entity_id"
	// FieldEntityType holds the string denoting the entity_type field in the database.
	FieldEntityType = "entity_type"
	// FieldMeterID holds the string denoting the meter_id field in the database.
	FieldMeterID = "meter_id"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldAggregatedQuantity holds the string denoting the aggregated_quantity field in the database.
	FieldAggregatedQuantity = "aggregated_quantity"
	// FieldEventCount holds the string denoting the event_count field in the database.
	FieldEventCount = "event_count"
	// FieldStripeEventID holds the string denoting the stripe_event_id field in the database.
	FieldStripeEventID = "stripe_event_id"
	// FieldSyncStatus holds the string denoting the sync_status field in the database.
	FieldSyncStatus = "sync_status"
	// FieldRetryCount holds the string denoting the retry_count field in the database.
	FieldRetryCount = "retry_count"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldWindowStart holds the string denoting the window_start field in the database.
	FieldWindowStart = "window_start"
	// FieldWindowEnd holds the string denoting the window_end field in the database.
	FieldWindowEnd = "window_end"
	// FieldSyncedAt holds the string denoting the synced_at field in the database.
	FieldSyncedAt = "synced_at"
	// Table holds the table name of the stripesyncbatch in the database.
	Table = "stripe_sync_batches"
)

// Columns holds all SQL columns for stripesyncbatch fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldEntityID,
	FieldEntityType,
	FieldMeterID,
	FieldEventType,
	FieldAggregatedQuantity,
	FieldEventCount,
	FieldStripeEventID,
	FieldSyncStatus,
	FieldRetryCount,
	FieldErrorMessage,
	FieldWindowStart,
	FieldWindowEnd,
	FieldSyncedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// EntityIDValidator is a validator for the "entity_id" field. It is called by the builders before save.
	EntityIDValidator func(string) error
	// DefaultEntityType holds the default value on creation for the "entity_type" field.
	DefaultEntityType string
	// EntityTypeValidator is a validator for the "entity_type" field. It is called by the builders before save.
	EntityTypeValidator func(string) error
	// MeterIDValidator is a validator for the "meter_id" field. It is called by the builders before save.
	MeterIDValidator func(string) error
	// EventTypeValidator is a validator for the "event_type" field. It is called by the builders before save.
	EventTypeValidator func(string) error
	// DefaultAggregatedQuantity holds the default value on creation for the "aggregated_quantity" field.
	DefaultAggregatedQuantity float64
	// DefaultEventCount holds the default value on creation for the "event_count" field.
	DefaultEventCount int
	// DefaultSyncStatus holds the default value on creation for the "sync_status" field.
	DefaultSyncStatus string
	// DefaultRetryCount holds the default value on creation for the "retry_count" field.
	DefaultRetryCount int
)

// OrderOption defines the ordering options for the StripeSyncBatch queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByEntityID orders the results by the entity_id field.
func ByEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityID, opts...).ToFunc()
}

// ByEntityType orders the results by the entity_type field.
func ByEntityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityType, opts...).ToFunc()
}

// ByMeterID orders the results by the meter_id field.
func ByMeterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMeterID, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByAggregatedQuantity orders the results by the aggregated_quantity field.
func ByAggregatedQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAggregatedQuantity, opts...).ToFunc()
}

// ByEventCount orders the results by the event_count field.
func ByEventCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventCount, opts...).ToFunc()
}

// ByStripeEventID orders the results by the stripe_event_id field.
func ByStripeEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStripeEventID, opts...).ToFunc()
}

// BySyncStatus orders the results by the sync_status field.
func BySyncStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSyncStatus, opts...).ToFunc()
}

// ByRetryCount orders the results by the retry_count field.
func ByRetryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryCount, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByWindowStart orders the results by the window_start field.
func ByWindowStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWindowStart, opts...).ToFunc()
}

// ByWindowEnd orders the results by the window_end field.
func ByWindowEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWindowEnd, opts...).ToFunc()
}

// BySyncedAt orders the results by the synced_at field.
func BySyncedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSyncedAt, opts...).ToFunc()
}
