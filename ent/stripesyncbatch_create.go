// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/stripesyncbatch"
)

// StripeSyncBatchCreate is the builder for creating a StripeSyncBatch entity.
type StripeSyncBatchCreate struct {
	config
	mutation *StripeSyncBatchMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (ssbc *StripeSyncBatchCreate) SetTenantID(s string) *StripeSyncBatchCreate {
	ssbc.mutation.SetTenantID(s)
	return ssbc
}

// SetStatus sets the "status" field.
func (ssbc *StripeSyncBatchCreate) SetStatus(s string) *StripeSyncBatchCreate {
	ssbc.mutation.SetStatus(s)
	return ssbc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableStatus(s *string) *StripeSyncBatchCreate {
	if s != nil {
		ssbc.SetStatus(*s)
	}
	return ssbc
}

// SetCreatedAt sets the "created_at" field.
func (ssbc *StripeSyncBatchCreate) SetCreatedAt(t time.Time) *StripeSyncBatchCreate {
	ssbc.mutation.SetCreatedAt(t)
	return ssbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableCreatedAt(t *time.Time) *StripeSyncBatchCreate {
	if t != nil {
		ssbc.SetCreatedAt(*t)
	}
	return ssbc
}

// SetUpdatedAt sets the "updated_at" field.
func (ssbc *StripeSyncBatchCreate) SetUpdatedAt(t time.Time) *StripeSyncBatchCreate {
	ssbc.mutation.SetUpdatedAt(t)
	return ssbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableUpdatedAt(t *time.Time) *StripeSyncBatchCreate {
	if t != nil {
		ssbc.SetUpdatedAt(*t)
	}
	return ssbc
}

// SetCreatedBy sets the "created_by" field.
func (ssbc *StripeSyncBatchCreate) SetCreatedBy(s string) *StripeSyncBatchCreate {
	ssbc.mutation.SetCreatedBy(s)
	return ssbc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableCreatedBy(s *string) *StripeSyncBatchCreate {
	if s != nil {
		ssbc.SetCreatedBy(*s)
	}
	return ssbc
}

// SetUpdatedBy sets the "updated_by" field.
func (ssbc *StripeSyncBatchCreate) SetUpdatedBy(s string) *StripeSyncBatchCreate {
	ssbc.mutation.SetUpdatedBy(s)
	return ssbc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableUpdatedBy(s *string) *StripeSyncBatchCreate {
	if s != nil {
		ssbc.SetUpdatedBy(*s)
	}
	return ssbc
}

// SetEnvironmentID sets the "environment_id" field.
func (ssbc *StripeSyncBatchCreate) SetEnvironmentID(s string) *StripeSyncBatchCreate {
	ssbc.mutation.SetEnvironmentID(s)
	return ssbc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableEnvironmentID(s *string) *StripeSyncBatchCreate {
	if s != nil {
		ssbc.SetEnvironmentID(*s)
	}
	return ssbc
}

// SetEntityID sets the "entity_id" field.
func (ssbc *StripeSyncBatchCreate) SetEntityID(s string) *StripeSyncBatchCreate {
	ssbc.mutation.SetEntityID(s)
	return ssbc
}

// SetEntityType sets the "entity_type" field.
func (ssbc *StripeSyncBatchCreate) SetEntityType(s string) *StripeSyncBatchCreate {
	ssbc.mutation.SetEntityType(s)
	return ssbc
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableEntityType(s *string) *StripeSyncBatchCreate {
	if s != nil {
		ssbc.SetEntityType(*s)
	}
	return ssbc
}

// SetMeterID sets the "meter_id" field.
func (ssbc *StripeSyncBatchCreate) SetMeterID(s string) *StripeSyncBatchCreate {
	ssbc.mutation.SetMeterID(s)
	return ssbc
}

// SetEventType sets the "event_type" field.
func (ssbc *StripeSyncBatchCreate) SetEventType(s string) *StripeSyncBatchCreate {
	ssbc.mutation.SetEventType(s)
	return ssbc
}

// SetAggregatedQuantity sets the "aggregated_quantity" field.
func (ssbc *StripeSyncBatchCreate) SetAggregatedQuantity(f float64) *StripeSyncBatchCreate {
	ssbc.mutation.SetAggregatedQuantity(f)
	return ssbc
}

// SetNillableAggregatedQuantity sets the "aggregated_quantity" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableAggregatedQuantity(f *float64) *StripeSyncBatchCreate {
	if f != nil {
		ssbc.SetAggregatedQuantity(*f)
	}
	return ssbc
}

// SetEventCount sets the "event_count" field.
func (ssbc *StripeSyncBatchCreate) SetEventCount(i int) *StripeSyncBatchCreate {
	ssbc.mutation.SetEventCount(i)
	return ssbc
}

// SetNillableEventCount sets the "event_count" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableEventCount(i *int) *StripeSyncBatchCreate {
	if i != nil {
		ssbc.SetEventCount(*i)
	}
	return ssbc
}

// SetStripeEventID sets the "stripe_event_id" field.
func (ssbc *StripeSyncBatchCreate) SetStripeEventID(s string) *StripeSyncBatchCreate {
	ssbc.mutation.SetStripeEventID(s)
	return ssbc
}

// SetNillableStripeEventID sets the "stripe_event_id" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableStripeEventID(s *string) *StripeSyncBatchCreate {
	if s != nil {
		ssbc.SetStripeEventID(*s)
	}
	return ssbc
}

// SetSyncStatus sets the "sync_status" field.
func (ssbc *StripeSyncBatchCreate) SetSyncStatus(s string) *StripeSyncBatchCreate {
	ssbc.mutation.SetSyncStatus(s)
	return ssbc
}

// SetNillableSyncStatus sets the "sync_status" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableSyncStatus(s *string) *StripeSyncBatchCreate {
	if s != nil {
		ssbc.SetSyncStatus(*s)
	}
	return ssbc
}

// SetRetryCount sets the "retry_count" field.
func (ssbc *StripeSyncBatchCreate) SetRetryCount(i int) *StripeSyncBatchCreate {
	ssbc.mutation.SetRetryCount(i)
	return ssbc
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableRetryCount(i *int) *StripeSyncBatchCreate {
	if i != nil {
		ssbc.SetRetryCount(*i)
	}
	return ssbc
}

// SetErrorMessage sets the "error_message" field.
func (ssbc *StripeSyncBatchCreate) SetErrorMessage(s string) *StripeSyncBatchCreate {
	ssbc.mutation.SetErrorMessage(s)
	return ssbc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableErrorMessage(s *string) *StripeSyncBatchCreate {
	if s != nil {
		ssbc.SetErrorMessage(*s)
	}
	return ssbc
}

// SetWindowStart sets the "window_start" field.
func (ssbc *StripeSyncBatchCreate) SetWindowStart(t time.Time) *StripeSyncBatchCreate {
	ssbc.mutation.SetWindowStart(t)
	return ssbc
}

// SetWindowEnd sets the "window_end" field.
func (ssbc *StripeSyncBatchCreate) SetWindowEnd(t time.Time) *StripeSyncBatchCreate {
	ssbc.mutation.SetWindowEnd(t)
	return ssbc
}

// SetSyncedAt sets the "synced_at" field.
func (ssbc *StripeSyncBatchCreate) SetSyncedAt(t time.Time) *StripeSyncBatchCreate {
	ssbc.mutation.SetSyncedAt(t)
	return ssbc
}

// SetNillableSyncedAt sets the "synced_at" field if the given value is not nil.
func (ssbc *StripeSyncBatchCreate) SetNillableSyncedAt(t *time.Time) *StripeSyncBatchCreate {
	if t != nil {
		ssbc.SetSyncedAt(*t)
	}
	return ssbc
}

// SetID sets the "id" field.
func (ssbc *StripeSyncBatchCreate) SetID(s string) *StripeSyncBatchCreate {
	ssbc.mutation.SetID(s)
	return ssbc
}

// Mutation returns the StripeSyncBatchMutation object of the builder.
func (ssbc *StripeSyncBatchCreate) Mutation() *StripeSyncBatchMutation {
	return ssbc.mutation
}

// Save creates the StripeSyncBatch in the database.
func (ssbc *StripeSyncBatchCreate) Save(ctx context.Context) (*StripeSyncBatch, error) {
	ssbc.defaults()
	return withHooks(ctx, ssbc.sqlSave, ssbc.mutation, ssbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssbc *StripeSyncBatchCreate) SaveX(ctx context.Context) *StripeSyncBatch {
	v, err := ssbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssbc *StripeSyncBatchCreate) Exec(ctx context.Context) error {
	_, err := ssbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssbc *StripeSyncBatchCreate) ExecX(ctx context.Context) {
	if err := ssbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssbc *StripeSyncBatchCreate) defaults() {
	if _, ok := ssbc.mutation.Status(); !ok {
		v := stripesyncbatch.DefaultStatus
		ssbc.mutation.SetStatus(v)
	}
	if _, ok := ssbc.mutation.CreatedAt(); !ok {
		v := stripesyncbatch.DefaultCreatedAt()
		ssbc.mutation.SetCreatedAt(v)
	}
	if _, ok := ssbc.mutation.UpdatedAt(); !ok {
		v := stripesyncbatch.DefaultUpdatedAt()
		ssbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ssbc.mutation.EnvironmentID(); !ok {
		v := stripesyncbatch.DefaultEnvironmentID
		ssbc.mutation.SetEnvironmentID(v)
	}
	if _, ok := ssbc.mutation.EntityType(); !ok {
		v := stripesyncbatch.DefaultEntityType
		ssbc.mutation.SetEntityType(v)
	}
	if _, ok := ssbc.mutation.AggregatedQuantity(); !ok {
		v := stripesyncbatch.DefaultAggregatedQuantity
		ssbc.mutation.SetAggregatedQuantity(v)
	}
	if _, ok := ssbc.mutation.EventCount(); !ok {
		v := stripesyncbatch.DefaultEventCount
		ssbc.mutation.SetEventCount(v)
	}
	if _, ok := ssbc.mutation.SyncStatus(); !ok {
		v := stripesyncbatch.DefaultSyncStatus
		ssbc.mutation.SetSyncStatus(v)
	}
	if _, ok := ssbc.mutation.RetryCount(); !ok {
		v := stripesyncbatch.DefaultRetryCount
		ssbc.mutation.SetRetryCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssbc *StripeSyncBatchCreate) check() error {
	if _, ok := ssbc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "StripeSyncBatch.tenant_id"`)}
	}
	if v, ok := ssbc.mutation.TenantID(); ok {
		if err := stripesyncbatch.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "StripeSyncBatch.tenant_id": %w`, err)}
		}
	}
	if _, ok := ssbc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "StripeSyncBatch.status"`)}
	}
	if _, ok := ssbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StripeSyncBatch.created_at"`)}
	}
	if _, ok := ssbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StripeSyncBatch.updated_at"`)}
	}
	if _, ok := ssbc.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "StripeSyncBatch.entity_id"`)}
	}
	if v, ok := ssbc.mutation.EntityID(); ok {
		if err := stripesyncbatch.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "StripeSyncBatch.entity_id": %w`, err)}
		}
	}
	if _, ok := ssbc.mutation.EntityType(); !ok {
		return &ValidationError{Name: "entity_type", err: errors.New(`ent: missing required field "StripeSyncBatch.entity_type"`)}
	}
	if v, ok := ssbc.mutation.EntityType(); ok {
		if err := stripesyncbatch.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "StripeSyncBatch.entity_type": %w`, err)}
		}
	}
	if _, ok := ssbc.mutation.MeterID(); !ok {
		return &ValidationError{Name: "meter_id", err: errors.New(`ent: missing required field "StripeSyncBatch.meter_id"`)}
	}
	if v, ok := ssbc.mutation.MeterID(); ok {
		if err := stripesyncbatch.MeterIDValidator(v); err != nil {
			return &ValidationError{Name: "meter_id", err: fmt.Errorf(`ent: validator failed for field "StripeSyncBatch.meter_id": %w`, err)}
		}
	}
	if _, ok := ssbc.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "StripeSyncBatch.event_type"`)}
	}
	if v, ok := ssbc.mutation.EventType(); ok {
		if err := stripesyncbatch.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "StripeSyncBatch.event_type": %w`, err)}
		}
	}
	if _, ok := ssbc.mutation.AggregatedQuantity(); !ok {
		return &ValidationError{Name: "aggregated_quantity", err: errors.New(`ent: missing required field "StripeSyncBatch.aggregated_quantity"`)}
	}
	if _, ok := ssbc.mutation.EventCount(); !ok {
		return &ValidationError{Name: "event_count", err: errors.New(`ent: missing required field "StripeSyncBatch.event_count"`)}
	}
	if _, ok := ssbc.mutation.SyncStatus(); !ok {
		return &ValidationError{Name: "sync_status", err: errors.New(`ent: missing required field "StripeSyncBatch.sync_status"`)}
	}
	if _, ok := ssbc.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`ent: missing required field "StripeSyncBatch.retry_count"`)}
	}
	if _, ok := ssbc.mutation.WindowStart(); !ok {
		return &ValidationError{Name: "window_start", err: errors.New(`ent: missing required field "StripeSyncBatch.window_start"`)}
	}
	if _, ok := ssbc.mutation.WindowEnd(); !ok {
		return &ValidationError{Name: "window_end", err: errors.New(`ent: missing required field "StripeSyncBatch.window_end"`)}
	}
	return nil
}

func (ssbc *StripeSyncBatchCreate) sqlSave(ctx context.Context) (*StripeSyncBatch, error) {
	if err := ssbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected StripeSyncBatch.ID type: %T", _spec.ID.Value)
		}
	}
	ssbc.mutation.id = &_node.ID
	ssbc.mutation.done = true
	return _node, nil
}

func (ssbc *StripeSyncBatchCreate) createSpec() (*StripeSyncBatch, *sqlgraph.CreateSpec) {
	var (
		_node = &StripeSyncBatch{config: ssbc.config}
		_spec = sqlgraph.NewCreateSpec(stripesyncbatch.Table, sqlgraph.NewFieldSpec(stripesyncbatch.FieldID, field.TypeString))
	)
	if id, ok := ssbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ssbc.mutation.TenantID(); ok {
		_spec.SetField(stripesyncbatch.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := ssbc.mutation.Status(); ok {
		_spec.SetField(stripesyncbatch.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ssbc.mutation.CreatedAt(); ok {
		_spec.SetField(stripesyncbatch.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ssbc.mutation.UpdatedAt(); ok {
		_spec.SetField(stripesyncbatch.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ssbc.mutation.CreatedBy(); ok {
		_spec.SetField(stripesyncbatch.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ssbc.mutation.UpdatedBy(); ok {
		_spec.SetField(stripesyncbatch.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ssbc.mutation.EnvironmentID(); ok {
		_spec.SetField(stripesyncbatch.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := ssbc.mutation.EntityID(); ok {
		_spec.SetField(stripesyncbatch.FieldEntityID, field.TypeString, value)
		_node.EntityID = value
	}
	if value, ok := ssbc.mutation.EntityType(); ok {
		_spec.SetField(stripesyncbatch.FieldEntityType, field.TypeString, value)
		_node.EntityType = value
	}
	if value, ok := ssbc.mutation.MeterID(); ok {
		_spec.SetField(stripesyncbatch.FieldMeterID, field.TypeString, value)
		_node.MeterID = value
	}
	if value, ok := ssbc.mutation.EventType(); ok {
		_spec.SetField(stripesyncbatch.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := ssbc.mutation.AggregatedQuantity(); ok {
		_spec.SetField(stripesyncbatch.FieldAggregatedQuantity, field.TypeFloat64, value)
		_node.AggregatedQuantity = value
	}
	if value, ok := ssbc.mutation.EventCount(); ok {
		_spec.SetField(stripesyncbatch.FieldEventCount, field.TypeInt, value)
		_node.EventCount = value
	}
	if value, ok := ssbc.mutation.StripeEventID(); ok {
		_spec.SetField(stripesyncbatch.FieldStripeEventID, field.TypeString, value)
		_node.StripeEventID = value
	}
	if value, ok := ssbc.mutation.SyncStatus(); ok {
		_spec.SetField(stripesyncbatch.FieldSyncStatus, field.TypeString, value)
		_node.SyncStatus = value
	}
	if value, ok := ssbc.mutation.RetryCount(); ok {
		_spec.SetField(stripesyncbatch.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := ssbc.mutation.ErrorMessage(); ok {
		_spec.SetField(stripesyncbatch.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := ssbc.mutation.WindowStart(); ok {
		_spec.SetField(stripesyncbatch.FieldWindowStart, field.TypeTime, value)
		_node.WindowStart = value
	}
	if value, ok := ssbc.mutation.WindowEnd(); ok {
		_spec.SetField(stripesyncbatch.FieldWindowEnd, field.TypeTime, value)
		_node.WindowEnd = value
	}
	if value, ok := ssbc.mutation.SyncedAt(); ok {
		_spec.SetField(stripesyncbatch.FieldSyncedAt, field.TypeTime, value)
		_node.SyncedAt = &value
	}
	return _node, _spec
}

// StripeSyncBatchCreateBulk is the builder for creating many StripeSyncBatch entities in bulk.
type StripeSyncBatchCreateBulk struct {
	config
	err      error
	builders []*StripeSyncBatchCreate
}

// Save creates the StripeSyncBatch entities in the database.
func (ssbcb *StripeSyncBatchCreateBulk) Save(ctx context.Context) ([]*StripeSyncBatch, error) {
	if ssbcb.err != nil {
		return nil, ssbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ssbcb.builders))
	nodes := make([]*StripeSyncBatch, len(ssbcb.builders))
	mutators := make([]Mutator, len(ssbcb.builders))
	for i := range ssbcb.builders {
		func(i int, root context.Context) {
			builder := ssbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StripeSyncBatchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ssbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ssbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ssbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ssbcb *StripeSyncBatchCreateBulk) SaveX(ctx context.Context) []*StripeSyncBatch {
	v, err := ssbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssbcb *StripeSyncBatchCreateBulk) Exec(ctx context.Context) error {
	_, err := ssbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssbcb *StripeSyncBatchCreateBulk) ExecX(ctx context.Context) {
	if err := ssbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
