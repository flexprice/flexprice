// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/stripesyncbatch"
)

// StripeSyncBatchDelete is the builder for deleting a StripeSyncBatch entity.
type StripeSyncBatchDelete struct {
	config
	hooks    []Hook
	mutation *StripeSyncBatchMutation
}

// Where appends a list predicates to the StripeSyncBatchDelete builder.
func (ssbd *StripeSyncBatchDelete) Where(ps ...predicate.StripeSyncBatch) *StripeSyncBatchDelete {
	ssbd.mutation.Where(ps...)
	return ssbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ssbd *StripeSyncBatchDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ssbd.sqlExec, ssbd.mutation, ssbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ssbd *StripeSyncBatchDelete) ExecX(ctx context.Context) int {
	n, err := ssbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ssbd *StripeSyncBatchDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(stripesyncbatch.Table, sqlgraph.NewFieldSpec(stripesyncbatch.FieldID, field.TypeString))
	if ps := ssbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ssbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ssbd.mutation.done = true
	return affected, err
}

// StripeSyncBatchDeleteOne is the builder for deleting a single StripeSyncBatch entity.
type StripeSyncBatchDeleteOne struct {
	ssbd *StripeSyncBatchDelete
}

// Where appends a list predicates to the StripeSyncBatchDelete builder.
func (ssbdo *StripeSyncBatchDeleteOne) Where(ps ...predicate.StripeSyncBatch) *StripeSyncBatchDeleteOne {
	ssbdo.ssbd.mutation.Where(ps...)
	return ssbdo
}

// Exec executes the deletion query.
func (ssbdo *StripeSyncBatchDeleteOne) Exec(ctx context.Context) error {
	n, err := ssbdo.ssbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{stripesyncbatch.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ssbdo *StripeSyncBatchDeleteOne) ExecX(ctx context.Context) {
	if err := ssbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
