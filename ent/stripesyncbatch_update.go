// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/stripesyncbatch"
)

// StripeSyncBatchUpdate is the builder for updating StripeSyncBatch entities.
type StripeSyncBatchUpdate struct {
	config
	hooks    []Hook
	mutation *StripeSyncBatchMutation
}

// Where appends a list predicates to the StripeSyncBatchUpdate builder.
func (ssbu *StripeSyncBatchUpdate) Where(ps ...predicate.StripeSyncBatch) *StripeSyncBatchUpdate {
	ssbu.mutation.Where(ps...)
	return ssbu
}

// SetStatus sets the "status" field.
func (ssbu *StripeSyncBatchUpdate) SetStatus(s string) *StripeSyncBatchUpdate {
	ssbu.mutation.SetStatus(s)
	return ssbu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ssbu *StripeSyncBatchUpdate) SetNillableStatus(s *string) *StripeSyncBatchUpdate {
	if s != nil {
		ssbu.SetStatus(*s)
	}
	return ssbu
}

// SetUpdatedAt sets the "updated_at" field.
func (ssbu *StripeSyncBatchUpdate) SetUpdatedAt(t time.Time) *StripeSyncBatchUpdate {
	ssbu.mutation.SetUpdatedAt(t)
	return ssbu
}

// SetUpdatedBy sets the "updated_by" field.
func (ssbu *StripeSyncBatchUpdate) SetUpdatedBy(s string) *StripeSyncBatchUpdate {
	ssbu.mutation.SetUpdatedBy(s)
	return ssbu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ssbu *StripeSyncBatchUpdate) SetNillableUpdatedBy(s *string) *StripeSyncBatchUpdate {
	if s != nil {
		ssbu.SetUpdatedBy(*s)
	}
	return ssbu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ssbu *StripeSyncBatchUpdate) ClearUpdatedBy() *StripeSyncBatchUpdate {
	ssbu.mutation.ClearUpdatedBy()
	return ssbu
}

// SetAggregatedQuantity sets the "aggregated_quantity" field.
func (ssbu *StripeSyncBatchUpdate) SetAggregatedQuantity(f float64) *StripeSyncBatchUpdate {
	ssbu.mutation.ResetAggregatedQuantity()
	ssbu.mutation.SetAggregatedQuantity(f)
	return ssbu
}

// SetNillableAggregatedQuantity sets the "aggregated_quantity" field if the given value is not nil.
func (ssbu *StripeSyncBatchUpdate) SetNillableAggregatedQuantity(f *float64) *StripeSyncBatchUpdate {
	if f != nil {
		ssbu.SetAggregatedQuantity(*f)
	}
	return ssbu
}

// AddAggregatedQuantity adds f to the "aggregated_quantity" field.
func (ssbu *StripeSyncBatchUpdate) AddAggregatedQuantity(f float64) *StripeSyncBatchUpdate {
	ssbu.mutation.AddAggregatedQuantity(f)
	return ssbu
}

// SetEventCount sets the "event_count" field.
func (ssbu *StripeSyncBatchUpdate) SetEventCount(i int) *StripeSyncBatchUpdate {
	ssbu.mutation.ResetEventCount()
	ssbu.mutation.SetEventCount(i)
	return ssbu
}

// SetNillableEventCount sets the "event_count" field if the given value is not nil.
func (ssbu *StripeSyncBatchUpdate) SetNillableEventCount(i *int) *StripeSyncBatchUpdate {
	if i != nil {
		ssbu.SetEventCount(*i)
	}
	return ssbu
}

// AddEventCount adds i to the "event_count" field.
func (ssbu *StripeSyncBatchUpdate) AddEventCount(i int) *StripeSyncBatchUpdate {
	ssbu.mutation.AddEventCount(i)
	return ssbu
}

// SetStripeEventID sets the "stripe_event_id" field.
func (ssbu *StripeSyncBatchUpdate) SetStripeEventID(s string) *StripeSyncBatchUpdate {
	ssbu.mutation.SetStripeEventID(s)
	return ssbu
}

// SetNillableStripeEventID sets the "stripe_event_id" field if the given value is not nil.
func (ssbu *StripeSyncBatchUpdate) SetNillableStripeEventID(s *string) *StripeSyncBatchUpdate {
	if s != nil {
		ssbu.SetStripeEventID(*s)
	}
	return ssbu
}

// ClearStripeEventID clears the value of the "stripe_event_id" field.
func (ssbu *StripeSyncBatchUpdate) ClearStripeEventID() *StripeSyncBatchUpdate {
	ssbu.mutation.ClearStripeEventID()
	return ssbu
}

// SetSyncStatus sets the "sync_status" field.
func (ssbu *StripeSyncBatchUpdate) SetSyncStatus(s string) *StripeSyncBatchUpdate {
	ssbu.mutation.SetSyncStatus(s)
	return ssbu
}

// SetNillableSyncStatus sets the "sync_status" field if the given value is not nil.
func (ssbu *StripeSyncBatchUpdate) SetNillableSyncStatus(s *string) *StripeSyncBatchUpdate {
	if s != nil {
		ssbu.SetSyncStatus(*s)
	}
	return ssbu
}

// SetRetryCount sets the "retry_count" field.
func (ssbu *StripeSyncBatchUpdate) SetRetryCount(i int) *StripeSyncBatchUpdate {
	ssbu.mutation.ResetRetryCount()
	ssbu.mutation.SetRetryCount(i)
	return ssbu
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (ssbu *StripeSyncBatchUpdate) SetNillableRetryCount(i *int) *StripeSyncBatchUpdate {
	if i != nil {
		ssbu.SetRetryCount(*i)
	}
	return ssbu
}

// AddRetryCount adds i to the "retry_count" field.
func (ssbu *StripeSyncBatchUpdate) AddRetryCount(i int) *StripeSyncBatchUpdate {
	ssbu.mutation.AddRetryCount(i)
	return ssbu
}

// SetErrorMessage sets the "error_message" field.
func (ssbu *StripeSyncBatchUpdate) SetErrorMessage(s string) *StripeSyncBatchUpdate {
	ssbu.mutation.SetErrorMessage(s)
	return ssbu
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (ssbu *StripeSyncBatchUpdate) SetNillableErrorMessage(s *string) *StripeSyncBatchUpdate {
	if s != nil {
		ssbu.SetErrorMessage(*s)
	}
	return ssbu
}

// ClearErrorMessage clears the value of the "error_message" field.
func (ssbu *StripeSyncBatchUpdate) ClearErrorMessage() *StripeSyncBatchUpdate {
	ssbu.mutation.ClearErrorMessage()
	return ssbu
}

// SetSyncedAt sets the "synced_at" field.
func (ssbu *StripeSyncBatchUpdate) SetSyncedAt(t time.Time) *StripeSyncBatchUpdate {
	ssbu.mutation.SetSyncedAt(t)
	return ssbu
}

// SetNillableSyncedAt sets the "synced_at" field if the given value is not nil.
func (ssbu *StripeSyncBatchUpdate) SetNillableSyncedAt(t *time.Time) *StripeSyncBatchUpdate {
	if t != nil {
		ssbu.SetSyncedAt(*t)
	}
	return ssbu
}

// ClearSyncedAt clears the value of the "synced_at" field.
func (ssbu *StripeSyncBatchUpdate) ClearSyncedAt() *StripeSyncBatchUpdate {
	ssbu.mutation.ClearSyncedAt()
	return ssbu
}

// Mutation returns the StripeSyncBatchMutation object of the builder.
func (ssbu *StripeSyncBatchUpdate) Mutation() *StripeSyncBatchMutation {
	return ssbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssbu *StripeSyncBatchUpdate) Save(ctx context.Context) (int, error) {
	ssbu.defaults()
	return withHooks(ctx, ssbu.sqlSave, ssbu.mutation, ssbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssbu *StripeSyncBatchUpdate) SaveX(ctx context.Context) int {
	affected, err := ssbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssbu *StripeSyncBatchUpdate) Exec(ctx context.Context) error {
	_, err := ssbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssbu *StripeSyncBatchUpdate) ExecX(ctx context.Context) {
	if err := ssbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssbu *StripeSyncBatchUpdate) defaults() {
	if _, ok := ssbu.mutation.UpdatedAt(); !ok {
		v := stripesyncbatch.UpdateDefaultUpdatedAt()
		ssbu.mutation.SetUpdatedAt(v)
	}
}

func (ssbu *StripeSyncBatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(stripesyncbatch.Table, stripesyncbatch.Columns, sqlgraph.NewFieldSpec(stripesyncbatch.FieldID, field.TypeString))
	if ps := ssbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssbu.mutation.Status(); ok {
		_spec.SetField(stripesyncbatch.FieldStatus, field.TypeString, value)
	}
	if value, ok := ssbu.mutation.UpdatedAt(); ok {
		_spec.SetField(stripesyncbatch.FieldUpdatedAt, field.TypeTime, value)
	}
	if ssbu.mutation.CreatedByCleared() {
		_spec.ClearField(stripesyncbatch.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ssbu.mutation.UpdatedBy(); ok {
		_spec.SetField(stripesyncbatch.FieldUpdatedBy, field.TypeString, value)
	}
	if ssbu.mutation.UpdatedByCleared() {
		_spec.ClearField(stripesyncbatch.FieldUpdatedBy, field.TypeString)
	}
	if ssbu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(stripesyncbatch.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := ssbu.mutation.AggregatedQuantity(); ok {
		_spec.SetField(stripesyncbatch.FieldAggregatedQuantity, field.TypeFloat64, value)
	}
	if value, ok := ssbu.mutation.AddedAggregatedQuantity(); ok {
		_spec.AddField(stripesyncbatch.FieldAggregatedQuantity, field.TypeFloat64, value)
	}
	if value, ok := ssbu.mutation.EventCount(); ok {
		_spec.SetField(stripesyncbatch.FieldEventCount, field.TypeInt, value)
	}
	if value, ok := ssbu.mutation.AddedEventCount(); ok {
		_spec.AddField(stripesyncbatch.FieldEventCount, field.TypeInt, value)
	}
	if value, ok := ssbu.mutation.StripeEventID(); ok {
		_spec.SetField(stripesyncbatch.FieldStripeEventID, field.TypeString, value)
	}
	if ssbu.mutation.StripeEventIDCleared() {
		_spec.ClearField(stripesyncbatch.FieldStripeEventID, field.TypeString)
	}
	if value, ok := ssbu.mutation.SyncStatus(); ok {
		_spec.SetField(stripesyncbatch.FieldSyncStatus, field.TypeString, value)
	}
	if value, ok := ssbu.mutation.RetryCount(); ok {
		_spec.SetField(stripesyncbatch.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := ssbu.mutation.AddedRetryCount(); ok {
		_spec.AddField(stripesyncbatch.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := ssbu.mutation.ErrorMessage(); ok {
		_spec.SetField(stripesyncbatch.FieldErrorMessage, field.TypeString, value)
	}
	if ssbu.mutation.ErrorMessageCleared() {
		_spec.ClearField(stripesyncbatch.FieldErrorMessage, field.TypeString)
	}
	if value, ok := ssbu.mutation.SyncedAt(); ok {
		_spec.SetField(stripesyncbatch.FieldSyncedAt, field.TypeTime, value)
	}
	if ssbu.mutation.SyncedAtCleared() {
		_spec.ClearField(stripesyncbatch.FieldSyncedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stripesyncbatch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssbu.mutation.done = true
	return n, nil
}

// StripeSyncBatchUpdateOne is the builder for updating a single StripeSyncBatch entity.
type StripeSyncBatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StripeSyncBatchMutation
}

// SetStatus sets the "status" field.
func (ssbuo *StripeSyncBatchUpdateOne) SetStatus(s string) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.SetStatus(s)
	return ssbuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ssbuo *StripeSyncBatchUpdateOne) SetNillableStatus(s *string) *StripeSyncBatchUpdateOne {
	if s != nil {
		ssbuo.SetStatus(*s)
	}
	return ssbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ssbuo *StripeSyncBatchUpdateOne) SetUpdatedAt(t time.Time) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.SetUpdatedAt(t)
	return ssbuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ssbuo *StripeSyncBatchUpdateOne) SetUpdatedBy(s string) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.SetUpdatedBy(s)
	return ssbuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ssbuo *StripeSyncBatchUpdateOne) SetNillableUpdatedBy(s *string) *StripeSyncBatchUpdateOne {
	if s != nil {
		ssbuo.SetUpdatedBy(*s)
	}
	return ssbuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ssbuo *StripeSyncBatchUpdateOne) ClearUpdatedBy() *StripeSyncBatchUpdateOne {
	ssbuo.mutation.ClearUpdatedBy()
	return ssbuo
}

// SetAggregatedQuantity sets the "aggregated_quantity" field.
func (ssbuo *StripeSyncBatchUpdateOne) SetAggregatedQuantity(f float64) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.ResetAggregatedQuantity()
	ssbuo.mutation.SetAggregatedQuantity(f)
	return ssbuo
}

// SetNillableAggregatedQuantity sets the "aggregated_quantity" field if the given value is not nil.
func (ssbuo *StripeSyncBatchUpdateOne) SetNillableAggregatedQuantity(f *float64) *StripeSyncBatchUpdateOne {
	if f != nil {
		ssbuo.SetAggregatedQuantity(*f)
	}
	return ssbuo
}

// AddAggregatedQuantity adds f to the "aggregated_quantity" field.
func (ssbuo *StripeSyncBatchUpdateOne) AddAggregatedQuantity(f float64) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.AddAggregatedQuantity(f)
	return ssbuo
}

// SetEventCount sets the "event_count" field.
func (ssbuo *StripeSyncBatchUpdateOne) SetEventCount(i int) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.ResetEventCount()
	ssbuo.mutation.SetEventCount(i)
	return ssbuo
}

// SetNillableEventCount sets the "event_count" field if the given value is not nil.
func (ssbuo *StripeSyncBatchUpdateOne) SetNillableEventCount(i *int) *StripeSyncBatchUpdateOne {
	if i != nil {
		ssbuo.SetEventCount(*i)
	}
	return ssbuo
}

// AddEventCount adds i to the "event_count" field.
func (ssbuo *StripeSyncBatchUpdateOne) AddEventCount(i int) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.AddEventCount(i)
	return ssbuo
}

// SetStripeEventID sets the "stripe_event_id" field.
func (ssbuo *StripeSyncBatchUpdateOne) SetStripeEventID(s string) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.SetStripeEventID(s)
	return ssbuo
}

// SetNillableStripeEventID sets the "stripe_event_id" field if the given value is not nil.
func (ssbuo *StripeSyncBatchUpdateOne) SetNillableStripeEventID(s *string) *StripeSyncBatchUpdateOne {
	if s != nil {
		ssbuo.SetStripeEventID(*s)
	}
	return ssbuo
}

// ClearStripeEventID clears the value of the "stripe_event_id" field.
func (ssbuo *StripeSyncBatchUpdateOne) ClearStripeEventID() *StripeSyncBatchUpdateOne {
	ssbuo.mutation.ClearStripeEventID()
	return ssbuo
}

// SetSyncStatus sets the "sync_status" field.
func (ssbuo *StripeSyncBatchUpdateOne) SetSyncStatus(s string) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.SetSyncStatus(s)
	return ssbuo
}

// SetNillableSyncStatus sets the "sync_status" field if the given value is not nil.
func (ssbuo *StripeSyncBatchUpdateOne) SetNillableSyncStatus(s *string) *StripeSyncBatchUpdateOne {
	if s != nil {
		ssbuo.SetSyncStatus(*s)
	}
	return ssbuo
}

// SetRetryCount sets the "retry_count" field.
func (ssbuo *StripeSyncBatchUpdateOne) SetRetryCount(i int) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.ResetRetryCount()
	ssbuo.mutation.SetRetryCount(i)
	return ssbuo
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (ssbuo *StripeSyncBatchUpdateOne) SetNillableRetryCount(i *int) *StripeSyncBatchUpdateOne {
	if i != nil {
		ssbuo.SetRetryCount(*i)
	}
	return ssbuo
}

// AddRetryCount adds i to the "retry_count" field.
func (ssbuo *StripeSyncBatchUpdateOne) AddRetryCount(i int) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.AddRetryCount(i)
	return ssbuo
}

// SetErrorMessage sets the "error_message" field.
func (ssbuo *StripeSyncBatchUpdateOne) SetErrorMessage(s string) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.SetErrorMessage(s)
	return ssbuo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (ssbuo *StripeSyncBatchUpdateOne) SetNillableErrorMessage(s *string) *StripeSyncBatchUpdateOne {
	if s != nil {
		ssbuo.SetErrorMessage(*s)
	}
	return ssbuo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (ssbuo *StripeSyncBatchUpdateOne) ClearErrorMessage() *StripeSyncBatchUpdateOne {
	ssbuo.mutation.ClearErrorMessage()
	return ssbuo
}

// SetSyncedAt sets the "synced_at" field.
func (ssbuo *StripeSyncBatchUpdateOne) SetSyncedAt(t time.Time) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.SetSyncedAt(t)
	return ssbuo
}

// SetNillableSyncedAt sets the "synced_at" field if the given value is not nil.
func (ssbuo *StripeSyncBatchUpdateOne) SetNillableSyncedAt(t *time.Time) *StripeSyncBatchUpdateOne {
	if t != nil {
		ssbuo.SetSyncedAt(*t)
	}
	return ssbuo
}

// ClearSyncedAt clears the value of the "synced_at" field.
func (ssbuo *StripeSyncBatchUpdateOne) ClearSyncedAt() *StripeSyncBatchUpdateOne {
	ssbuo.mutation.ClearSyncedAt()
	return ssbuo
}

// Mutation returns the StripeSyncBatchMutation object of the builder.
func (ssbuo *StripeSyncBatchUpdateOne) Mutation() *StripeSyncBatchMutation {
	return ssbuo.mutation
}

// Where appends a list predicates to the StripeSyncBatchUpdate builder.
func (ssbuo *StripeSyncBatchUpdateOne) Where(ps ...predicate.StripeSyncBatch) *StripeSyncBatchUpdateOne {
	ssbuo.mutation.Where(ps...)
	return ssbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssbuo *StripeSyncBatchUpdateOne) Select(field string, fields ...string) *StripeSyncBatchUpdateOne {
	ssbuo.fields = append([]string{field}, fields...)
	return ssbuo
}

// Save executes the query and returns the updated StripeSyncBatch entity.
func (ssbuo *StripeSyncBatchUpdateOne) Save(ctx context.Context) (*StripeSyncBatch, error) {
	ssbuo.defaults()
	return withHooks(ctx, ssbuo.sqlSave, ssbuo.mutation, ssbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssbuo *StripeSyncBatchUpdateOne) SaveX(ctx context.Context) *StripeSyncBatch {
	node, err := ssbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssbuo *StripeSyncBatchUpdateOne) Exec(ctx context.Context) error {
	_, err := ssbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssbuo *StripeSyncBatchUpdateOne) ExecX(ctx context.Context) {
	if err := ssbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssbuo *StripeSyncBatchUpdateOne) defaults() {
	if _, ok := ssbuo.mutation.UpdatedAt(); !ok {
		v := stripesyncbatch.UpdateDefaultUpdatedAt()
		ssbuo.mutation.SetUpdatedAt(v)
	}
}

func (ssbuo *StripeSyncBatchUpdateOne) sqlSave(ctx context.Context) (_node *StripeSyncBatch, err error) {
	_spec := sqlgraph.NewUpdateSpec(stripesyncbatch.Table, stripesyncbatch.Columns, sqlgraph.NewFieldSpec(stripesyncbatch.FieldID, field.TypeString))
	id, ok := ssbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StripeSyncBatch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stripesyncbatch.FieldID)
		for _, f := range fields {
			if !stripesyncbatch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stripesyncbatch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssbuo.mutation.Status(); ok {
		_spec.SetField(stripesyncbatch.FieldStatus, field.TypeString, value)
	}
	if value, ok := ssbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(stripesyncbatch.FieldUpdatedAt, field.TypeTime, value)
	}
	if ssbuo.mutation.CreatedByCleared() {
		_spec.ClearField(stripesyncbatch.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ssbuo.mutation.UpdatedBy(); ok {
		_spec.SetField(stripesyncbatch.FieldUpdatedBy, field.TypeString, value)
	}
	if ssbuo.mutation.UpdatedByCleared() {
		_spec.ClearField(stripesyncbatch.FieldUpdatedBy, field.TypeString)
	}
	if ssbuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(stripesyncbatch.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := ssbuo.mutation.AggregatedQuantity(); ok {
		_spec.SetField(stripesyncbatch.FieldAggregatedQuantity, field.TypeFloat64, value)
	}
	if value, ok := ssbuo.mutation.AddedAggregatedQuantity(); ok {
		_spec.AddField(stripesyncbatch.FieldAggregatedQuantity, field.TypeFloat64, value)
	}
	if value, ok := ssbuo.mutation.EventCount(); ok {
		_spec.SetField(stripesyncbatch.FieldEventCount, field.TypeInt, value)
	}
	if value, ok := ssbuo.mutation.AddedEventCount(); ok {
		_spec.AddField(stripesyncbatch.FieldEventCount, field.TypeInt, value)
	}
	if value, ok := ssbuo.mutation.StripeEventID(); ok {
		_spec.SetField(stripesyncbatch.FieldStripeEventID, field.TypeString, value)
	}
	if ssbuo.mutation.StripeEventIDCleared() {
		_spec.ClearField(stripesyncbatch.FieldStripeEventID, field.TypeString)
	}
	if value, ok := ssbuo.mutation.SyncStatus(); ok {
		_spec.SetField(stripesyncbatch.FieldSyncStatus, field.TypeString, value)
	}
	if value, ok := ssbuo.mutation.RetryCount(); ok {
		_spec.SetField(stripesyncbatch.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := ssbuo.mutation.AddedRetryCount(); ok {
		_spec.AddField(stripesyncbatch.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := ssbuo.mutation.ErrorMessage(); ok {
		_spec.SetField(stripesyncbatch.FieldErrorMessage, field.TypeString, value)
	}
	if ssbuo.mutation.ErrorMessageCleared() {
		_spec.ClearField(stripesyncbatch.FieldErrorMessage, field.TypeString)
	}
	if value, ok := ssbuo.mutation.SyncedAt(); ok {
		_spec.SetField(stripesyncbatch.FieldSyncedAt, field.TypeTime, value)
	}
	if ssbuo.mutation.SyncedAtCleared() {
		_spec.ClearField(stripesyncbatch.FieldSyncedAt, field.TypeTime)
	}
	_node = &StripeSyncBatch{config: ssbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stripesyncbatch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssbuo.mutation.done = true
	return _node, nil
}
