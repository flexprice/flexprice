// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/stripetenantconfig"
)

// StripeTenantConfig is the model entity for the StripeTenantConfig schema.
type StripeTenantConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// APIKeyEncrypted holds the value of the "api_key_encrypted" field.
	APIKeyEncrypted string `json:"api_key_encrypted,omitempty"`
	// SyncEnabled holds the value of the "sync_enabled" field.
	SyncEnabled bool `json:"sync_enabled,omitempty"`
	// AggregationWindowMinutes holds the value of the "aggregation_window_minutes" field.
	AggregationWindowMinutes int `json:"aggregation_window_minutes,omitempty"`
	// WebhookConfig holds the value of the "webhook_config" field.
	WebhookConfig map[string]interface{} `json:"webhook_config,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StripeTenantConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stripetenantconfig.FieldWebhookConfig:
			values[i] = new([]byte)
		case stripetenantconfig.FieldSyncEnabled:
			values[i] = new(sql.NullBool)
		case stripetenantconfig.FieldAggregationWindowMinutes:
			values[i] = new(sql.NullInt64)
		case stripetenantconfig.FieldID, stripetenantconfig.FieldTenantID, stripetenantconfig.FieldStatus, stripetenantconfig.FieldCreatedBy, stripetenantconfig.FieldUpdatedBy, stripetenantconfig.FieldEnvironmentID, stripetenantconfig.FieldAPIKeyEncrypted:
			values[i] = new(sql.NullString)
		case stripetenantconfig.FieldCreatedAt, stripetenantconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StripeTenantConfig fields.
func (stc *StripeTenantConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stripetenantconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				stc.ID = value.String
			}
		case stripetenantconfig.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				stc.TenantID = value.String
			}
		case stripetenantconfig.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				stc.Status = value.String
			}
		case stripetenantconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				stc.CreatedAt = value.Time
			}
		case stripetenantconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				stc.UpdatedAt = value.Time
			}
		case stripetenantconfig.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				stc.CreatedBy = value.String
			}
		case stripetenantconfig.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				stc.UpdatedBy = value.String
			}
		case stripetenantconfig.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				stc.EnvironmentID = value.String
			}
		case stripetenantconfig.FieldAPIKeyEncrypted:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key_encrypted", values[i])
			} else if value.Valid {
				stc.APIKeyEncrypted = value.String
			}
		case stripetenantconfig.FieldSyncEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sync_enabled", values[i])
			} else if value.Valid {
				stc.SyncEnabled = value.Bool
			}
		case stripetenantconfig.FieldAggregationWindowMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field aggregation_window_minutes", values[i])
			} else if value.Valid {
				stc.AggregationWindowMinutes = int(value.Int64)
			}
		case stripetenantconfig.FieldWebhookConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field webhook_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &stc.WebhookConfig); err != nil {
					return fmt.Errorf("unmarshal field webhook_config: %w", err)
				}
			}
		default:
			stc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StripeTenantConfig.
// This includes values selected through modifiers, order, etc.
func (stc *StripeTenantConfig) Value(name string) (ent.Value, error) {
	return stc.selectValues.Get(name)
}

// Update returns a builder for updating this StripeTenantConfig.
// Note that you need to call StripeTenantConfig.Unwrap() before calling this method if this StripeTenantConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (stc *StripeTenantConfig) Update() *StripeTenantConfigUpdateOne {
	return NewStripeTenantConfigClient(stc.config).UpdateOne(stc)
}

// Unwrap unwraps the StripeTenantConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (stc *StripeTenantConfig) Unwrap() *StripeTenantConfig {
	_tx, ok := stc.config.driver.(*txDriver)
	if !ok {
		panic("ent: StripeTenantConfig is not a transactional entity")
	}
	stc.config.driver = _tx.drv
	return stc
}

// String implements the fmt.Stringer.
func (stc *StripeTenantConfig) String() string {
	var builder strings.Builder
	builder.WriteString("StripeTenantConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", stc.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(stc.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(stc.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(stc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(stc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(stc.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(stc.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(stc.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("api_key_encrypted=")
	builder.WriteString(stc.APIKeyEncrypted)
	builder.WriteString(", ")
	builder.WriteString("sync_enabled=")
	builder.WriteString(fmt.Sprintf("%v", stc.SyncEnabled))
	builder.WriteString(", ")
	builder.WriteString("aggregation_window_minutes=")
	builder.WriteString(fmt.Sprintf("%v", stc.AggregationWindowMinutes))
	builder.WriteString(", ")
	builder.WriteString("webhook_config=")
	builder.WriteString(fmt.Sprintf("%v", stc.WebhookConfig))
	builder.WriteByte(')')
	return builder.String()
}

// StripeTenantConfigs is a parsable slice of StripeTenantConfig.
type StripeTenantConfigs []*StripeTenantConfig
