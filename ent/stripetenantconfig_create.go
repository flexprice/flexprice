// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/stripetenantconfig"
)

// StripeTenantConfigCreate is the builder for creating a StripeTenantConfig entity.
type StripeTenantConfigCreate struct {
	config
	mutation *StripeTenantConfigMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (stcc *StripeTenantConfigCreate) SetTenantID(s string) *StripeTenantConfigCreate {
	stcc.mutation.SetTenantID(s)
	return stcc
}

// SetStatus sets the "status" field.
func (stcc *StripeTenantConfigCreate) SetStatus(s string) *StripeTenantConfigCreate {
	stcc.mutation.SetStatus(s)
	return stcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (stcc *StripeTenantConfigCreate) SetNillableStatus(s *string) *StripeTenantConfigCreate {
	if s != nil {
		stcc.SetStatus(*s)
	}
	return stcc
}

// SetCreatedAt sets the "created_at" field.
func (stcc *StripeTenantConfigCreate) SetCreatedAt(t time.Time) *StripeTenantConfigCreate {
	stcc.mutation.SetCreatedAt(t)
	return stcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stcc *StripeTenantConfigCreate) SetNillableCreatedAt(t *time.Time) *StripeTenantConfigCreate {
	if t != nil {
		stcc.SetCreatedAt(*t)
	}
	return stcc
}

// SetUpdatedAt sets the "updated_at" field.
func (stcc *StripeTenantConfigCreate) SetUpdatedAt(t time.Time) *StripeTenantConfigCreate {
	stcc.mutation.SetUpdatedAt(t)
	return stcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (stcc *StripeTenantConfigCreate) SetNillableUpdatedAt(t *time.Time) *StripeTenantConfigCreate {
	if t != nil {
		stcc.SetUpdatedAt(*t)
	}
	return stcc
}

// SetCreatedBy sets the "created_by" field.
func (stcc *StripeTenantConfigCreate) SetCreatedBy(s string) *StripeTenantConfigCreate {
	stcc.mutation.SetCreatedBy(s)
	return stcc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (stcc *StripeTenantConfigCreate) SetNillableCreatedBy(s *string) *StripeTenantConfigCreate {
	if s != nil {
		stcc.SetCreatedBy(*s)
	}
	return stcc
}

// SetUpdatedBy sets the "updated_by" field.
func (stcc *StripeTenantConfigCreate) SetUpdatedBy(s string) *StripeTenantConfigCreate {
	stcc.mutation.SetUpdatedBy(s)
	return stcc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (stcc *StripeTenantConfigCreate) SetNillableUpdatedBy(s *string) *StripeTenantConfigCreate {
	if s != nil {
		stcc.SetUpdatedBy(*s)
	}
	return stcc
}

// SetEnvironmentID sets the "environment_id" field.
func (stcc *StripeTenantConfigCreate) SetEnvironmentID(s string) *StripeTenantConfigCreate {
	stcc.mutation.SetEnvironmentID(s)
	return stcc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (stcc *StripeTenantConfigCreate) SetNillableEnvironmentID(s *string) *StripeTenantConfigCreate {
	if s != nil {
		stcc.SetEnvironmentID(*s)
	}
	return stcc
}

// SetAPIKeyEncrypted sets the "api_key_encrypted" field.
func (stcc *StripeTenantConfigCreate) SetAPIKeyEncrypted(s string) *StripeTenantConfigCreate {
	stcc.mutation.SetAPIKeyEncrypted(s)
	return stcc
}

// SetSyncEnabled sets the "sync_enabled" field.
func (stcc *StripeTenantConfigCreate) SetSyncEnabled(b bool) *StripeTenantConfigCreate {
	stcc.mutation.SetSyncEnabled(b)
	return stcc
}

// SetNillableSyncEnabled sets the "sync_enabled" field if the given value is not nil.
func (stcc *StripeTenantConfigCreate) SetNillableSyncEnabled(b *bool) *StripeTenantConfigCreate {
	if b != nil {
		stcc.SetSyncEnabled(*b)
	}
	return stcc
}

// SetAggregationWindowMinutes sets the "aggregation_window_minutes" field.
func (stcc *StripeTenantConfigCreate) SetAggregationWindowMinutes(i int) *StripeTenantConfigCreate {
	stcc.mutation.SetAggregationWindowMinutes(i)
	return stcc
}

// SetNillableAggregationWindowMinutes sets the "aggregation_window_minutes" field if the given value is not nil.
func (stcc *StripeTenantConfigCreate) SetNillableAggregationWindowMinutes(i *int) *StripeTenantConfigCreate {
	if i != nil {
		stcc.SetAggregationWindowMinutes(*i)
	}
	return stcc
}

// SetWebhookConfig sets the "webhook_config" field.
func (stcc *StripeTenantConfigCreate) SetWebhookConfig(m map[string]interface{}) *StripeTenantConfigCreate {
	stcc.mutation.SetWebhookConfig(m)
	return stcc
}

// SetID sets the "id" field.
func (stcc *StripeTenantConfigCreate) SetID(s string) *StripeTenantConfigCreate {
	stcc.mutation.SetID(s)
	return stcc
}

// Mutation returns the StripeTenantConfigMutation object of the builder.
func (stcc *StripeTenantConfigCreate) Mutation() *StripeTenantConfigMutation {
	return stcc.mutation
}

// Save creates the StripeTenantConfig in the database.
func (stcc *StripeTenantConfigCreate) Save(ctx context.Context) (*StripeTenantConfig, error) {
	stcc.defaults()
	return withHooks(ctx, stcc.sqlSave, stcc.mutation, stcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stcc *StripeTenantConfigCreate) SaveX(ctx context.Context) *StripeTenantConfig {
	v, err := stcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcc *StripeTenantConfigCreate) Exec(ctx context.Context) error {
	_, err := stcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcc *StripeTenantConfigCreate) ExecX(ctx context.Context) {
	if err := stcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stcc *StripeTenantConfigCreate) defaults() {
	if _, ok := stcc.mutation.Status(); !ok {
		v := stripetenantconfig.DefaultStatus
		stcc.mutation.SetStatus(v)
	}
	if _, ok := stcc.mutation.CreatedAt(); !ok {
		v := stripetenantconfig.DefaultCreatedAt()
		stcc.mutation.SetCreatedAt(v)
	}
	if _, ok := stcc.mutation.UpdatedAt(); !ok {
		v := stripetenantconfig.DefaultUpdatedAt()
		stcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := stcc.mutation.EnvironmentID(); !ok {
		v := stripetenantconfig.DefaultEnvironmentID
		stcc.mutation.SetEnvironmentID(v)
	}
	if _, ok := stcc.mutation.SyncEnabled(); !ok {
		v := stripetenantconfig.DefaultSyncEnabled
		stcc.mutation.SetSyncEnabled(v)
	}
	if _, ok := stcc.mutation.AggregationWindowMinutes(); !ok {
		v := stripetenantconfig.DefaultAggregationWindowMinutes
		stcc.mutation.SetAggregationWindowMinutes(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stcc *StripeTenantConfigCreate) check() error {
	if _, ok := stcc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "StripeTenantConfig.tenant_id"`)}
	}
	if v, ok := stcc.mutation.TenantID(); ok {
		if err := stripetenantconfig.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "StripeTenantConfig.tenant_id": %w`, err)}
		}
	}
	if _, ok := stcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "StripeTenantConfig.status"`)}
	}
	if _, ok := stcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StripeTenantConfig.created_at"`)}
	}
	if _, ok := stcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StripeTenantConfig.updated_at"`)}
	}
	if _, ok := stcc.mutation.APIKeyEncrypted(); !ok {
		return &ValidationError{Name: "api_key_encrypted", err: errors.New(`ent: missing required field "StripeTenantConfig.api_key_encrypted"`)}
	}
	if v, ok := stcc.mutation.APIKeyEncrypted(); ok {
		if err := stripetenantconfig.APIKeyEncryptedValidator(v); err != nil {
			return &ValidationError{Name: "api_key_encrypted", err: fmt.Errorf(`ent: validator failed for field "StripeTenantConfig.api_key_encrypted": %w`, err)}
		}
	}
	if _, ok := stcc.mutation.SyncEnabled(); !ok {
		return &ValidationError{Name: "sync_enabled", err: errors.New(`ent: missing required field "StripeTenantConfig.sync_enabled"`)}
	}
	if _, ok := stcc.mutation.AggregationWindowMinutes(); !ok {
		return &ValidationError{Name: "aggregation_window_minutes", err: errors.New(`ent: missing required field "StripeTenantConfig.aggregation_window_minutes"`)}
	}
	return nil
}

func (stcc *StripeTenantConfigCreate) sqlSave(ctx context.Context) (*StripeTenantConfig, error) {
	if err := stcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected StripeTenantConfig.ID type: %T", _spec.ID.Value)
		}
	}
	stcc.mutation.id = &_node.ID
	stcc.mutation.done = true
	return _node, nil
}

func (stcc *StripeTenantConfigCreate) createSpec() (*StripeTenantConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &StripeTenantConfig{config: stcc.config}
		_spec = sqlgraph.NewCreateSpec(stripetenantconfig.Table, sqlgraph.NewFieldSpec(stripetenantconfig.FieldID, field.TypeString))
	)
	if id, ok := stcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := stcc.mutation.TenantID(); ok {
		_spec.SetField(stripetenantconfig.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := stcc.mutation.Status(); ok {
		_spec.SetField(stripetenantconfig.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := stcc.mutation.CreatedAt(); ok {
		_spec.SetField(stripetenantconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := stcc.mutation.UpdatedAt(); ok {
		_spec.SetField(stripetenantconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := stcc.mutation.CreatedBy(); ok {
		_spec.SetField(stripetenantconfig.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := stcc.mutation.UpdatedBy(); ok {
		_spec.SetField(stripetenantconfig.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := stcc.mutation.EnvironmentID(); ok {
		_spec.SetField(stripetenantconfig.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := stcc.mutation.APIKeyEncrypted(); ok {
		_spec.SetField(stripetenantconfig.FieldAPIKeyEncrypted, field.TypeString, value)
		_node.APIKeyEncrypted = value
	}
	if value, ok := stcc.mutation.SyncEnabled(); ok {
		_spec.SetField(stripetenantconfig.FieldSyncEnabled, field.TypeBool, value)
		_node.SyncEnabled = value
	}
	if value, ok := stcc.mutation.AggregationWindowMinutes(); ok {
		_spec.SetField(stripetenantconfig.FieldAggregationWindowMinutes, field.TypeInt, value)
		_node.AggregationWindowMinutes = value
	}
	if value, ok := stcc.mutation.WebhookConfig(); ok {
		_spec.SetField(stripetenantconfig.FieldWebhookConfig, field.TypeJSON, value)
		_node.WebhookConfig = value
	}
	return _node, _spec
}

// StripeTenantConfigCreateBulk is the builder for creating many StripeTenantConfig entities in bulk.
type StripeTenantConfigCreateBulk struct {
	config
	err      error
	builders []*StripeTenantConfigCreate
}

// Save creates the StripeTenantConfig entities in the database.
func (stccb *StripeTenantConfigCreateBulk) Save(ctx context.Context) ([]*StripeTenantConfig, error) {
	if stccb.err != nil {
		return nil, stccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stccb.builders))
	nodes := make([]*StripeTenantConfig, len(stccb.builders))
	mutators := make([]Mutator, len(stccb.builders))
	for i := range stccb.builders {
		func(i int, root context.Context) {
			builder := stccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StripeTenantConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stccb *StripeTenantConfigCreateBulk) SaveX(ctx context.Context) []*StripeTenantConfig {
	v, err := stccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stccb *StripeTenantConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := stccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stccb *StripeTenantConfigCreateBulk) ExecX(ctx context.Context) {
	if err := stccb.Exec(ctx); err != nil {
		panic(err)
	}
}
