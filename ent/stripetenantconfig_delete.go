// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/stripetenantconfig"
)

// StripeTenantConfigDelete is the builder for deleting a StripeTenantConfig entity.
type StripeTenantConfigDelete struct {
	config
	hooks    []Hook
	mutation *StripeTenantConfigMutation
}

// Where appends a list predicates to the StripeTenantConfigDelete builder.
func (stcd *StripeTenantConfigDelete) Where(ps ...predicate.StripeTenantConfig) *StripeTenantConfigDelete {
	stcd.mutation.Where(ps...)
	return stcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (stcd *StripeTenantConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, stcd.sqlExec, stcd.mutation, stcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (stcd *StripeTenantConfigDelete) ExecX(ctx context.Context) int {
	n, err := stcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (stcd *StripeTenantConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(stripetenantconfig.Table, sqlgraph.NewFieldSpec(stripetenantconfig.FieldID, field.TypeString))
	if ps := stcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, stcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	stcd.mutation.done = true
	return affected, err
}

// StripeTenantConfigDeleteOne is the builder for deleting a single StripeTenantConfig entity.
type StripeTenantConfigDeleteOne struct {
	stcd *StripeTenantConfigDelete
}

// Where appends a list predicates to the StripeTenantConfigDelete builder.
func (stcdo *StripeTenantConfigDeleteOne) Where(ps ...predicate.StripeTenantConfig) *StripeTenantConfigDeleteOne {
	stcdo.stcd.mutation.Where(ps...)
	return stcdo
}

// Exec executes the deletion query.
func (stcdo *StripeTenantConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := stcdo.stcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{stripetenantconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (stcdo *StripeTenantConfigDeleteOne) ExecX(ctx context.Context) {
	if err := stcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
