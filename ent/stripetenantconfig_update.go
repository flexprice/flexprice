// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/stripetenantconfig"
)

// StripeTenantConfigUpdate is the builder for updating StripeTenantConfig entities.
type StripeTenantConfigUpdate struct {
	config
	hooks    []Hook
	mutation *StripeTenantConfigMutation
}

// Where appends a list predicates to the StripeTenantConfigUpdate builder.
func (stcu *StripeTenantConfigUpdate) Where(ps ...predicate.StripeTenantConfig) *StripeTenantConfigUpdate {
	stcu.mutation.Where(ps...)
	return stcu
}

// SetStatus sets the "status" field.
func (stcu *StripeTenantConfigUpdate) SetStatus(s string) *StripeTenantConfigUpdate {
	stcu.mutation.SetStatus(s)
	return stcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (stcu *StripeTenantConfigUpdate) SetNillableStatus(s *string) *StripeTenantConfigUpdate {
	if s != nil {
		stcu.SetStatus(*s)
	}
	return stcu
}

// SetUpdatedAt sets the "updated_at" field.
func (stcu *StripeTenantConfigUpdate) SetUpdatedAt(t time.Time) *StripeTenantConfigUpdate {
	stcu.mutation.SetUpdatedAt(t)
	return stcu
}

// SetUpdatedBy sets the "updated_by" field.
func (stcu *StripeTenantConfigUpdate) SetUpdatedBy(s string) *StripeTenantConfigUpdate {
	stcu.mutation.SetUpdatedBy(s)
	return stcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (stcu *StripeTenantConfigUpdate) SetNillableUpdatedBy(s *string) *StripeTenantConfigUpdate {
	if s != nil {
		stcu.SetUpdatedBy(*s)
	}
	return stcu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (stcu *StripeTenantConfigUpdate) ClearUpdatedBy() *StripeTenantConfigUpdate {
	stcu.mutation.ClearUpdatedBy()
	return stcu
}

// SetAPIKeyEncrypted sets the "api_key_encrypted" field.
func (stcu *StripeTenantConfigUpdate) SetAPIKeyEncrypted(s string) *StripeTenantConfigUpdate {
	stcu.mutation.SetAPIKeyEncrypted(s)
	return stcu
}

// SetNillableAPIKeyEncrypted sets the "api_key_encrypted" field if the given value is not nil.
func (stcu *StripeTenantConfigUpdate) SetNillableAPIKeyEncrypted(s *string) *StripeTenantConfigUpdate {
	if s != nil {
		stcu.SetAPIKeyEncrypted(*s)
	}
	return stcu
}

// SetSyncEnabled sets the "sync_enabled" field.
func (stcu *StripeTenantConfigUpdate) SetSyncEnabled(b bool) *StripeTenantConfigUpdate {
	stcu.mutation.SetSyncEnabled(b)
	return stcu
}

// SetNillableSyncEnabled sets the "sync_enabled" field if the given value is not nil.
func (stcu *StripeTenantConfigUpdate) SetNillableSyncEnabled(b *bool) *StripeTenantConfigUpdate {
	if b != nil {
		stcu.SetSyncEnabled(*b)
	}
	return stcu
}

// SetAggregationWindowMinutes sets the "aggregation_window_minutes" field.
func (stcu *StripeTenantConfigUpdate) SetAggregationWindowMinutes(i int) *StripeTenantConfigUpdate {
	stcu.mutation.ResetAggregationWindowMinutes()
	stcu.mutation.SetAggregationWindowMinutes(i)
	return stcu
}

// SetNillableAggregationWindowMinutes sets the "aggregation_window_minutes" field if the given value is not nil.
func (stcu *StripeTenantConfigUpdate) SetNillableAggregationWindowMinutes(i *int) *StripeTenantConfigUpdate {
	if i != nil {
		stcu.SetAggregationWindowMinutes(*i)
	}
	return stcu
}

// AddAggregationWindowMinutes adds i to the "aggregation_window_minutes" field.
func (stcu *StripeTenantConfigUpdate) AddAggregationWindowMinutes(i int) *StripeTenantConfigUpdate {
	stcu.mutation.AddAggregationWindowMinutes(i)
	return stcu
}

// SetWebhookConfig sets the "webhook_config" field.
func (stcu *StripeTenantConfigUpdate) SetWebhookConfig(m map[string]interface{}) *StripeTenantConfigUpdate {
	stcu.mutation.SetWebhookConfig(m)
	return stcu
}

// ClearWebhookConfig clears the value of the "webhook_config" field.
func (stcu *StripeTenantConfigUpdate) ClearWebhookConfig() *StripeTenantConfigUpdate {
	stcu.mutation.ClearWebhookConfig()
	return stcu
}

// Mutation returns the StripeTenantConfigMutation object of the builder.
func (stcu *StripeTenantConfigUpdate) Mutation() *StripeTenantConfigMutation {
	return stcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stcu *StripeTenantConfigUpdate) Save(ctx context.Context) (int, error) {
	stcu.defaults()
	return withHooks(ctx, stcu.sqlSave, stcu.mutation, stcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stcu *StripeTenantConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := stcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stcu *StripeTenantConfigUpdate) Exec(ctx context.Context) error {
	_, err := stcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcu *StripeTenantConfigUpdate) ExecX(ctx context.Context) {
	if err := stcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stcu *StripeTenantConfigUpdate) defaults() {
	if _, ok := stcu.mutation.UpdatedAt(); !ok {
		v := stripetenantconfig.UpdateDefaultUpdatedAt()
		stcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stcu *StripeTenantConfigUpdate) check() error {
	if v, ok := stcu.mutation.APIKeyEncrypted(); ok {
		if err := stripetenantconfig.APIKeyEncryptedValidator(v); err != nil {
			return &ValidationError{Name: "api_key_encrypted", err: fmt.Errorf(`ent: validator failed for field "StripeTenantConfig.api_key_encrypted": %w`, err)}
		}
	}
	return nil
}

func (stcu *StripeTenantConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := stcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stripetenantconfig.Table, stripetenantconfig.Columns, sqlgraph.NewFieldSpec(stripetenantconfig.FieldID, field.TypeString))
	if ps := stcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stcu.mutation.Status(); ok {
		_spec.SetField(stripetenantconfig.FieldStatus, field.TypeString, value)
	}
	if value, ok := stcu.mutation.UpdatedAt(); ok {
		_spec.SetField(stripetenantconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if stcu.mutation.CreatedByCleared() {
		_spec.ClearField(stripetenantconfig.FieldCreatedBy, field.TypeString)
	}
	if value, ok := stcu.mutation.UpdatedBy(); ok {
		_spec.SetField(stripetenantconfig.FieldUpdatedBy, field.TypeString, value)
	}
	if stcu.mutation.UpdatedByCleared() {
		_spec.ClearField(stripetenantconfig.FieldUpdatedBy, field.TypeString)
	}
	if stcu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(stripetenantconfig.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := stcu.mutation.APIKeyEncrypted(); ok {
		_spec.SetField(stripetenantconfig.FieldAPIKeyEncrypted, field.TypeString, value)
	}
	if value, ok := stcu.mutation.SyncEnabled(); ok {
		_spec.SetField(stripetenantconfig.FieldSyncEnabled, field.TypeBool, value)
	}
	if value, ok := stcu.mutation.AggregationWindowMinutes(); ok {
		_spec.SetField(stripetenantconfig.FieldAggregationWindowMinutes, field.TypeInt, value)
	}
	if value, ok := stcu.mutation.AddedAggregationWindowMinutes(); ok {
		_spec.AddField(stripetenantconfig.FieldAggregationWindowMinutes, field.TypeInt, value)
	}
	if value, ok := stcu.mutation.WebhookConfig(); ok {
		_spec.SetField(stripetenantconfig.FieldWebhookConfig, field.TypeJSON, value)
	}
	if stcu.mutation.WebhookConfigCleared() {
		_spec.ClearField(stripetenantconfig.FieldWebhookConfig, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stripetenantconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stcu.mutation.done = true
	return n, nil
}

// StripeTenantConfigUpdateOne is the builder for updating a single StripeTenantConfig entity.
type StripeTenantConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StripeTenantConfigMutation
}

// SetStatus sets the "status" field.
func (stcuo *StripeTenantConfigUpdateOne) SetStatus(s string) *StripeTenantConfigUpdateOne {
	stcuo.mutation.SetStatus(s)
	return stcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (stcuo *StripeTenantConfigUpdateOne) SetNillableStatus(s *string) *StripeTenantConfigUpdateOne {
	if s != nil {
		stcuo.SetStatus(*s)
	}
	return stcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (stcuo *StripeTenantConfigUpdateOne) SetUpdatedAt(t time.Time) *StripeTenantConfigUpdateOne {
	stcuo.mutation.SetUpdatedAt(t)
	return stcuo
}

// SetUpdatedBy sets the "updated_by" field.
func (stcuo *StripeTenantConfigUpdateOne) SetUpdatedBy(s string) *StripeTenantConfigUpdateOne {
	stcuo.mutation.SetUpdatedBy(s)
	return stcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (stcuo *StripeTenantConfigUpdateOne) SetNillableUpdatedBy(s *string) *StripeTenantConfigUpdateOne {
	if s != nil {
		stcuo.SetUpdatedBy(*s)
	}
	return stcuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (stcuo *StripeTenantConfigUpdateOne) ClearUpdatedBy() *StripeTenantConfigUpdateOne {
	stcuo.mutation.ClearUpdatedBy()
	return stcuo
}

// SetAPIKeyEncrypted sets the "api_key_encrypted" field.
func (stcuo *StripeTenantConfigUpdateOne) SetAPIKeyEncrypted(s string) *StripeTenantConfigUpdateOne {
	stcuo.mutation.SetAPIKeyEncrypted(s)
	return stcuo
}

// SetNillableAPIKeyEncrypted sets the "api_key_encrypted" field if the given value is not nil.
func (stcuo *StripeTenantConfigUpdateOne) SetNillableAPIKeyEncrypted(s *string) *StripeTenantConfigUpdateOne {
	if s != nil {
		stcuo.SetAPIKeyEncrypted(*s)
	}
	return stcuo
}

// SetSyncEnabled sets the "sync_enabled" field.
func (stcuo *StripeTenantConfigUpdateOne) SetSyncEnabled(b bool) *StripeTenantConfigUpdateOne {
	stcuo.mutation.SetSyncEnabled(b)
	return stcuo
}

// SetNillableSyncEnabled sets the "sync_enabled" field if the given value is not nil.
func (stcuo *StripeTenantConfigUpdateOne) SetNillableSyncEnabled(b *bool) *StripeTenantConfigUpdateOne {
	if b != nil {
		stcuo.SetSyncEnabled(*b)
	}
	return stcuo
}

// SetAggregationWindowMinutes sets the "aggregation_window_minutes" field.
func (stcuo *StripeTenantConfigUpdateOne) SetAggregationWindowMinutes(i int) *StripeTenantConfigUpdateOne {
	stcuo.mutation.ResetAggregationWindowMinutes()
	stcuo.mutation.SetAggregationWindowMinutes(i)
	return stcuo
}

// SetNillableAggregationWindowMinutes sets the "aggregation_window_minutes" field if the given value is not nil.
func (stcuo *StripeTenantConfigUpdateOne) SetNillableAggregationWindowMinutes(i *int) *StripeTenantConfigUpdateOne {
	if i != nil {
		stcuo.SetAggregationWindowMinutes(*i)
	}
	return stcuo
}

// AddAggregationWindowMinutes adds i to the "aggregation_window_minutes" field.
func (stcuo *StripeTenantConfigUpdateOne) AddAggregationWindowMinutes(i int) *StripeTenantConfigUpdateOne {
	stcuo.mutation.AddAggregationWindowMinutes(i)
	return stcuo
}

// SetWebhookConfig sets the "webhook_config" field.
func (stcuo *StripeTenantConfigUpdateOne) SetWebhookConfig(m map[string]interface{}) *StripeTenantConfigUpdateOne {
	stcuo.mutation.SetWebhookConfig(m)
	return stcuo
}

// ClearWebhookConfig clears the value of the "webhook_config" field.
func (stcuo *StripeTenantConfigUpdateOne) ClearWebhookConfig() *StripeTenantConfigUpdateOne {
	stcuo.mutation.ClearWebhookConfig()
	return stcuo
}

// Mutation returns the StripeTenantConfigMutation object of the builder.
func (stcuo *StripeTenantConfigUpdateOne) Mutation() *StripeTenantConfigMutation {
	return stcuo.mutation
}

// Where appends a list predicates to the StripeTenantConfigUpdate builder.
func (stcuo *StripeTenantConfigUpdateOne) Where(ps ...predicate.StripeTenantConfig) *StripeTenantConfigUpdateOne {
	stcuo.mutation.Where(ps...)
	return stcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stcuo *StripeTenantConfigUpdateOne) Select(field string, fields ...string) *StripeTenantConfigUpdateOne {
	stcuo.fields = append([]string{field}, fields...)
	return stcuo
}

// Save executes the query and returns the updated StripeTenantConfig entity.
func (stcuo *StripeTenantConfigUpdateOne) Save(ctx context.Context) (*StripeTenantConfig, error) {
	stcuo.defaults()
	return withHooks(ctx, stcuo.sqlSave, stcuo.mutation, stcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stcuo *StripeTenantConfigUpdateOne) SaveX(ctx context.Context) *StripeTenantConfig {
	node, err := stcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stcuo *StripeTenantConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := stcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcuo *StripeTenantConfigUpdateOne) ExecX(ctx context.Context) {
	if err := stcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stcuo *StripeTenantConfigUpdateOne) defaults() {
	if _, ok := stcuo.mutation.UpdatedAt(); !ok {
		v := stripetenantconfig.UpdateDefaultUpdatedAt()
		stcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stcuo *StripeTenantConfigUpdateOne) check() error {
	if v, ok := stcuo.mutation.APIKeyEncrypted(); ok {
		if err := stripetenantconfig.APIKeyEncryptedValidator(v); err != nil {
			return &ValidationError{Name: "api_key_encrypted", err: fmt.Errorf(`ent: validator failed for field "StripeTenantConfig.api_key_encrypted": %w`, err)}
		}
	}
	return nil
}

func (stcuo *StripeTenantConfigUpdateOne) sqlSave(ctx context.Context) (_node *StripeTenantConfig, err error) {
	if err := stcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stripetenantconfig.Table, stripetenantconfig.Columns, sqlgraph.NewFieldSpec(stripetenantconfig.FieldID, field.TypeString))
	id, ok := stcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StripeTenantConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stripetenantconfig.FieldID)
		for _, f := range fields {
			if !stripetenantconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stripetenantconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stcuo.mutation.Status(); ok {
		_spec.SetField(stripetenantconfig.FieldStatus, field.TypeString, value)
	}
	if value, ok := stcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(stripetenantconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if stcuo.mutation.CreatedByCleared() {
		_spec.ClearField(stripetenantconfig.FieldCreatedBy, field.TypeString)
	}
	if value, ok := stcuo.mutation.UpdatedBy(); ok {
		_spec.SetField(stripetenantconfig.FieldUpdatedBy, field.TypeString, value)
	}
	if stcuo.mutation.UpdatedByCleared() {
		_spec.ClearField(stripetenantconfig.FieldUpdatedBy, field.TypeString)
	}
	if stcuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(stripetenantconfig.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := stcuo.mutation.APIKeyEncrypted(); ok {
		_spec.SetField(stripetenantconfig.FieldAPIKeyEncrypted, field.TypeString, value)
	}
	if value, ok := stcuo.mutation.SyncEnabled(); ok {
		_spec.SetField(stripetenantconfig.FieldSyncEnabled, field.TypeBool, value)
	}
	if value, ok := stcuo.mutation.AggregationWindowMinutes(); ok {
		_spec.SetField(stripetenantconfig.FieldAggregationWindowMinutes, field.TypeInt, value)
	}
	if value, ok := stcuo.mutation.AddedAggregationWindowMinutes(); ok {
		_spec.AddField(stripetenantconfig.FieldAggregationWindowMinutes, field.TypeInt, value)
	}
	if value, ok := stcuo.mutation.WebhookConfig(); ok {
		_spec.SetField(stripetenantconfig.FieldWebhookConfig, field.TypeJSON, value)
	}
	if stcuo.mutation.WebhookConfigCleared() {
		_spec.ClearField(stripetenantconfig.FieldWebhookConfig, field.TypeJSON)
	}
	_node = &StripeTenantConfig{config: stcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stripetenantconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stcuo.mutation.done = true
	return _node, nil
}
