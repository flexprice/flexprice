// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/subscription"
)

// SubscriptionCreate is the builder for creating a Subscription entity.
type SubscriptionCreate struct {
	config
	mutation *SubscriptionMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (sc *SubscriptionCreate) SetTenantID(s string) *SubscriptionCreate {
	sc.mutation.SetTenantID(s)
	return sc
}

// SetStatus sets the "status" field.
func (sc *SubscriptionCreate) SetStatus(s string) *SubscriptionCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableStatus(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetStatus(*s)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SubscriptionCreate) SetCreatedAt(t time.Time) *SubscriptionCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCreatedAt(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SubscriptionCreate) SetUpdatedAt(t time.Time) *SubscriptionCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableUpdatedAt(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetCreatedBy sets the "created_by" field.
func (sc *SubscriptionCreate) SetCreatedBy(s string) *SubscriptionCreate {
	sc.mutation.SetCreatedBy(s)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCreatedBy(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetCreatedBy(*s)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *SubscriptionCreate) SetUpdatedBy(s string) *SubscriptionCreate {
	sc.mutation.SetUpdatedBy(s)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableUpdatedBy(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetUpdatedBy(*s)
	}
	return sc
}

// SetLookupKey sets the "lookup_key" field.
func (sc *SubscriptionCreate) SetLookupKey(s string) *SubscriptionCreate {
	sc.mutation.SetLookupKey(s)
	return sc
}

// SetNillableLookupKey sets the "lookup_key" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableLookupKey(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetLookupKey(*s)
	}
	return sc
}

// SetCustomerID sets the "customer_id" field.
func (sc *SubscriptionCreate) SetCustomerID(s string) *SubscriptionCreate {
	sc.mutation.SetCustomerID(s)
	return sc
}

// SetPlanID sets the "plan_id" field.
func (sc *SubscriptionCreate) SetPlanID(s string) *SubscriptionCreate {
	sc.mutation.SetPlanID(s)
	return sc
}

// SetSubscriptionStatus sets the "subscription_status" field.
func (sc *SubscriptionCreate) SetSubscriptionStatus(s string) *SubscriptionCreate {
	sc.mutation.SetSubscriptionStatus(s)
	return sc
}

// SetNillableSubscriptionStatus sets the "subscription_status" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableSubscriptionStatus(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetSubscriptionStatus(*s)
	}
	return sc
}

// SetCurrency sets the "currency" field.
func (sc *SubscriptionCreate) SetCurrency(s string) *SubscriptionCreate {
	sc.mutation.SetCurrency(s)
	return sc
}

// SetBillingAnchor sets the "billing_anchor" field.
func (sc *SubscriptionCreate) SetBillingAnchor(t time.Time) *SubscriptionCreate {
	sc.mutation.SetBillingAnchor(t)
	return sc
}

// SetNillableBillingAnchor sets the "billing_anchor" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableBillingAnchor(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetBillingAnchor(*t)
	}
	return sc
}

// SetStartDate sets the "start_date" field.
func (sc *SubscriptionCreate) SetStartDate(t time.Time) *SubscriptionCreate {
	sc.mutation.SetStartDate(t)
	return sc
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableStartDate(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetStartDate(*t)
	}
	return sc
}

// SetEndDate sets the "end_date" field.
func (sc *SubscriptionCreate) SetEndDate(t time.Time) *SubscriptionCreate {
	sc.mutation.SetEndDate(t)
	return sc
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableEndDate(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetEndDate(*t)
	}
	return sc
}

// SetCurrentPeriodStart sets the "current_period_start" field.
func (sc *SubscriptionCreate) SetCurrentPeriodStart(t time.Time) *SubscriptionCreate {
	sc.mutation.SetCurrentPeriodStart(t)
	return sc
}

// SetNillableCurrentPeriodStart sets the "current_period_start" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCurrentPeriodStart(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetCurrentPeriodStart(*t)
	}
	return sc
}

// SetCurrentPeriodEnd sets the "current_period_end" field.
func (sc *SubscriptionCreate) SetCurrentPeriodEnd(t time.Time) *SubscriptionCreate {
	sc.mutation.SetCurrentPeriodEnd(t)
	return sc
}

// SetNillableCurrentPeriodEnd sets the "current_period_end" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCurrentPeriodEnd(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetCurrentPeriodEnd(*t)
	}
	return sc
}

// SetCancelledAt sets the "cancelled_at" field.
func (sc *SubscriptionCreate) SetCancelledAt(t time.Time) *SubscriptionCreate {
	sc.mutation.SetCancelledAt(t)
	return sc
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCancelledAt(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetCancelledAt(*t)
	}
	return sc
}

// SetCancelAt sets the "cancel_at" field.
func (sc *SubscriptionCreate) SetCancelAt(t time.Time) *SubscriptionCreate {
	sc.mutation.SetCancelAt(t)
	return sc
}

// SetNillableCancelAt sets the "cancel_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCancelAt(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetCancelAt(*t)
	}
	return sc
}

// SetCancelAtPeriodEnd sets the "cancel_at_period_end" field.
func (sc *SubscriptionCreate) SetCancelAtPeriodEnd(b bool) *SubscriptionCreate {
	sc.mutation.SetCancelAtPeriodEnd(b)
	return sc
}

// SetNillableCancelAtPeriodEnd sets the "cancel_at_period_end" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCancelAtPeriodEnd(b *bool) *SubscriptionCreate {
	if b != nil {
		sc.SetCancelAtPeriodEnd(*b)
	}
	return sc
}

// SetTrialStart sets the "trial_start" field.
func (sc *SubscriptionCreate) SetTrialStart(t time.Time) *SubscriptionCreate {
	sc.mutation.SetTrialStart(t)
	return sc
}

// SetNillableTrialStart sets the "trial_start" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableTrialStart(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetTrialStart(*t)
	}
	return sc
}

// SetTrialEnd sets the "trial_end" field.
func (sc *SubscriptionCreate) SetTrialEnd(t time.Time) *SubscriptionCreate {
	sc.mutation.SetTrialEnd(t)
	return sc
}

// SetNillableTrialEnd sets the "trial_end" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableTrialEnd(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetTrialEnd(*t)
	}
	return sc
}

// SetInvoiceCadence sets the "invoice_cadence" field.
func (sc *SubscriptionCreate) SetInvoiceCadence(s string) *SubscriptionCreate {
	sc.mutation.SetInvoiceCadence(s)
	return sc
}

// SetBillingCadence sets the "billing_cadence" field.
func (sc *SubscriptionCreate) SetBillingCadence(s string) *SubscriptionCreate {
	sc.mutation.SetBillingCadence(s)
	return sc
}

// SetBillingPeriod sets the "billing_period" field.
func (sc *SubscriptionCreate) SetBillingPeriod(s string) *SubscriptionCreate {
	sc.mutation.SetBillingPeriod(s)
	return sc
}

// SetBillingPeriodCount sets the "billing_period_count" field.
func (sc *SubscriptionCreate) SetBillingPeriodCount(i int) *SubscriptionCreate {
	sc.mutation.SetBillingPeriodCount(i)
	return sc
}

// SetNillableBillingPeriodCount sets the "billing_period_count" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableBillingPeriodCount(i *int) *SubscriptionCreate {
	if i != nil {
		sc.SetBillingPeriodCount(*i)
	}
	return sc
}

// SetVersion sets the "version" field.
func (sc *SubscriptionCreate) SetVersion(i int) *SubscriptionCreate {
	sc.mutation.SetVersion(i)
	return sc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableVersion(i *int) *SubscriptionCreate {
	if i != nil {
		sc.SetVersion(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SubscriptionCreate) SetID(s string) *SubscriptionCreate {
	sc.mutation.SetID(s)
	return sc
}

// Mutation returns the SubscriptionMutation object of the builder.
func (sc *SubscriptionCreate) Mutation() *SubscriptionMutation {
	return sc.mutation
}

// Save creates the Subscription in the database.
func (sc *SubscriptionCreate) Save(ctx context.Context) (*Subscription, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubscriptionCreate) SaveX(ctx context.Context) *Subscription {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubscriptionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubscriptionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubscriptionCreate) defaults() {
	if _, ok := sc.mutation.Status(); !ok {
		v := subscription.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := subscription.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := subscription.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.SubscriptionStatus(); !ok {
		v := subscription.DefaultSubscriptionStatus
		sc.mutation.SetSubscriptionStatus(v)
	}
	if _, ok := sc.mutation.BillingAnchor(); !ok {
		v := subscription.DefaultBillingAnchor()
		sc.mutation.SetBillingAnchor(v)
	}
	if _, ok := sc.mutation.StartDate(); !ok {
		v := subscription.DefaultStartDate()
		sc.mutation.SetStartDate(v)
	}
	if _, ok := sc.mutation.CurrentPeriodStart(); !ok {
		v := subscription.DefaultCurrentPeriodStart()
		sc.mutation.SetCurrentPeriodStart(v)
	}
	if _, ok := sc.mutation.CurrentPeriodEnd(); !ok {
		v := subscription.DefaultCurrentPeriodEnd()
		sc.mutation.SetCurrentPeriodEnd(v)
	}
	if _, ok := sc.mutation.CancelAtPeriodEnd(); !ok {
		v := subscription.DefaultCancelAtPeriodEnd
		sc.mutation.SetCancelAtPeriodEnd(v)
	}
	if _, ok := sc.mutation.BillingPeriodCount(); !ok {
		v := subscription.DefaultBillingPeriodCount
		sc.mutation.SetBillingPeriodCount(v)
	}
	if _, ok := sc.mutation.Version(); !ok {
		v := subscription.DefaultVersion
		sc.mutation.SetVersion(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubscriptionCreate) check() error {
	if _, ok := sc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Subscription.tenant_id"`)}
	}
	if v, ok := sc.mutation.TenantID(); ok {
		if err := subscription.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Subscription.tenant_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Subscription.status"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Subscription.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Subscription.updated_at"`)}
	}
	if _, ok := sc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "Subscription.customer_id"`)}
	}
	if v, ok := sc.mutation.CustomerID(); ok {
		if err := subscription.CustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_id", err: fmt.Errorf(`ent: validator failed for field "Subscription.customer_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.PlanID(); !ok {
		return &ValidationError{Name: "plan_id", err: errors.New(`ent: missing required field "Subscription.plan_id"`)}
	}
	if v, ok := sc.mutation.PlanID(); ok {
		if err := subscription.PlanIDValidator(v); err != nil {
			return &ValidationError{Name: "plan_id", err: fmt.Errorf(`ent: validator failed for field "Subscription.plan_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.SubscriptionStatus(); !ok {
		return &ValidationError{Name: "subscription_status", err: errors.New(`ent: missing required field "Subscription.subscription_status"`)}
	}
	if _, ok := sc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Subscription.currency"`)}
	}
	if v, ok := sc.mutation.Currency(); ok {
		if err := subscription.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Subscription.currency": %w`, err)}
		}
	}
	if _, ok := sc.mutation.BillingAnchor(); !ok {
		return &ValidationError{Name: "billing_anchor", err: errors.New(`ent: missing required field "Subscription.billing_anchor"`)}
	}
	if _, ok := sc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Subscription.start_date"`)}
	}
	if _, ok := sc.mutation.CurrentPeriodStart(); !ok {
		return &ValidationError{Name: "current_period_start", err: errors.New(`ent: missing required field "Subscription.current_period_start"`)}
	}
	if _, ok := sc.mutation.CurrentPeriodEnd(); !ok {
		return &ValidationError{Name: "current_period_end", err: errors.New(`ent: missing required field "Subscription.current_period_end"`)}
	}
	if _, ok := sc.mutation.CancelAtPeriodEnd(); !ok {
		return &ValidationError{Name: "cancel_at_period_end", err: errors.New(`ent: missing required field "Subscription.cancel_at_period_end"`)}
	}
	if _, ok := sc.mutation.InvoiceCadence(); !ok {
		return &ValidationError{Name: "invoice_cadence", err: errors.New(`ent: missing required field "Subscription.invoice_cadence"`)}
	}
	if v, ok := sc.mutation.InvoiceCadence(); ok {
		if err := subscription.InvoiceCadenceValidator(v); err != nil {
			return &ValidationError{Name: "invoice_cadence", err: fmt.Errorf(`ent: validator failed for field "Subscription.invoice_cadence": %w`, err)}
		}
	}
	if _, ok := sc.mutation.BillingCadence(); !ok {
		return &ValidationError{Name: "billing_cadence", err: errors.New(`ent: missing required field "Subscription.billing_cadence"`)}
	}
	if v, ok := sc.mutation.BillingCadence(); ok {
		if err := subscription.BillingCadenceValidator(v); err != nil {
			return &ValidationError{Name: "billing_cadence", err: fmt.Errorf(`ent: validator failed for field "Subscription.billing_cadence": %w`, err)}
		}
	}
	if _, ok := sc.mutation.BillingPeriod(); !ok {
		return &ValidationError{Name: "billing_period", err: errors.New(`ent: missing required field "Subscription.billing_period"`)}
	}
	if v, ok := sc.mutation.BillingPeriod(); ok {
		if err := subscription.BillingPeriodValidator(v); err != nil {
			return &ValidationError{Name: "billing_period", err: fmt.Errorf(`ent: validator failed for field "Subscription.billing_period": %w`, err)}
		}
	}
	if _, ok := sc.mutation.BillingPeriodCount(); !ok {
		return &ValidationError{Name: "billing_period_count", err: errors.New(`ent: missing required field "Subscription.billing_period_count"`)}
	}
	if _, ok := sc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Subscription.version"`)}
	}
	return nil
}

func (sc *SubscriptionCreate) sqlSave(ctx context.Context) (*Subscription, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Subscription.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubscriptionCreate) createSpec() (*Subscription, *sqlgraph.CreateSpec) {
	var (
		_node = &Subscription{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subscription.Table, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.TenantID(); ok {
		_spec.SetField(subscription.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(subscription.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(subscription.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(subscription.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.LookupKey(); ok {
		_spec.SetField(subscription.FieldLookupKey, field.TypeString, value)
		_node.LookupKey = value
	}
	if value, ok := sc.mutation.CustomerID(); ok {
		_spec.SetField(subscription.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := sc.mutation.PlanID(); ok {
		_spec.SetField(subscription.FieldPlanID, field.TypeString, value)
		_node.PlanID = value
	}
	if value, ok := sc.mutation.SubscriptionStatus(); ok {
		_spec.SetField(subscription.FieldSubscriptionStatus, field.TypeString, value)
		_node.SubscriptionStatus = value
	}
	if value, ok := sc.mutation.Currency(); ok {
		_spec.SetField(subscription.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := sc.mutation.BillingAnchor(); ok {
		_spec.SetField(subscription.FieldBillingAnchor, field.TypeTime, value)
		_node.BillingAnchor = value
	}
	if value, ok := sc.mutation.StartDate(); ok {
		_spec.SetField(subscription.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := sc.mutation.EndDate(); ok {
		_spec.SetField(subscription.FieldEndDate, field.TypeTime, value)
		_node.EndDate = &value
	}
	if value, ok := sc.mutation.CurrentPeriodStart(); ok {
		_spec.SetField(subscription.FieldCurrentPeriodStart, field.TypeTime, value)
		_node.CurrentPeriodStart = value
	}
	if value, ok := sc.mutation.CurrentPeriodEnd(); ok {
		_spec.SetField(subscription.FieldCurrentPeriodEnd, field.TypeTime, value)
		_node.CurrentPeriodEnd = value
	}
	if value, ok := sc.mutation.CancelledAt(); ok {
		_spec.SetField(subscription.FieldCancelledAt, field.TypeTime, value)
		_node.CancelledAt = &value
	}
	if value, ok := sc.mutation.CancelAt(); ok {
		_spec.SetField(subscription.FieldCancelAt, field.TypeTime, value)
		_node.CancelAt = &value
	}
	if value, ok := sc.mutation.CancelAtPeriodEnd(); ok {
		_spec.SetField(subscription.FieldCancelAtPeriodEnd, field.TypeBool, value)
		_node.CancelAtPeriodEnd = value
	}
	if value, ok := sc.mutation.TrialStart(); ok {
		_spec.SetField(subscription.FieldTrialStart, field.TypeTime, value)
		_node.TrialStart = &value
	}
	if value, ok := sc.mutation.TrialEnd(); ok {
		_spec.SetField(subscription.FieldTrialEnd, field.TypeTime, value)
		_node.TrialEnd = &value
	}
	if value, ok := sc.mutation.InvoiceCadence(); ok {
		_spec.SetField(subscription.FieldInvoiceCadence, field.TypeString, value)
		_node.InvoiceCadence = value
	}
	if value, ok := sc.mutation.BillingCadence(); ok {
		_spec.SetField(subscription.FieldBillingCadence, field.TypeString, value)
		_node.BillingCadence = value
	}
	if value, ok := sc.mutation.BillingPeriod(); ok {
		_spec.SetField(subscription.FieldBillingPeriod, field.TypeString, value)
		_node.BillingPeriod = value
	}
	if value, ok := sc.mutation.BillingPeriodCount(); ok {
		_spec.SetField(subscription.FieldBillingPeriodCount, field.TypeInt, value)
		_node.BillingPeriodCount = value
	}
	if value, ok := sc.mutation.Version(); ok {
		_spec.SetField(subscription.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	return _node, _spec
}

// SubscriptionCreateBulk is the builder for creating many Subscription entities in bulk.
type SubscriptionCreateBulk struct {
	config
	err      error
	builders []*SubscriptionCreate
}

// Save creates the Subscription entities in the database.
func (scb *SubscriptionCreateBulk) Save(ctx context.Context) ([]*Subscription, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subscription, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubscriptionCreateBulk) SaveX(ctx context.Context) []*Subscription {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
