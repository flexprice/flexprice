// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscription"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionMutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (su *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetStatus sets the "status" field.
func (su *SubscriptionUpdate) SetStatus(s string) *SubscriptionUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableStatus(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubscriptionUpdate) SetUpdatedAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SubscriptionUpdate) SetUpdatedBy(s string) *SubscriptionUpdate {
	su.mutation.SetUpdatedBy(s)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableUpdatedBy(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetUpdatedBy(*s)
	}
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *SubscriptionUpdate) ClearUpdatedBy() *SubscriptionUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetLookupKey sets the "lookup_key" field.
func (su *SubscriptionUpdate) SetLookupKey(s string) *SubscriptionUpdate {
	su.mutation.SetLookupKey(s)
	return su
}

// SetNillableLookupKey sets the "lookup_key" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableLookupKey(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetLookupKey(*s)
	}
	return su
}

// ClearLookupKey clears the value of the "lookup_key" field.
func (su *SubscriptionUpdate) ClearLookupKey() *SubscriptionUpdate {
	su.mutation.ClearLookupKey()
	return su
}

// SetSubscriptionStatus sets the "subscription_status" field.
func (su *SubscriptionUpdate) SetSubscriptionStatus(s string) *SubscriptionUpdate {
	su.mutation.SetSubscriptionStatus(s)
	return su
}

// SetNillableSubscriptionStatus sets the "subscription_status" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableSubscriptionStatus(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetSubscriptionStatus(*s)
	}
	return su
}

// SetEndDate sets the "end_date" field.
func (su *SubscriptionUpdate) SetEndDate(t time.Time) *SubscriptionUpdate {
	su.mutation.SetEndDate(t)
	return su
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableEndDate(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetEndDate(*t)
	}
	return su
}

// ClearEndDate clears the value of the "end_date" field.
func (su *SubscriptionUpdate) ClearEndDate() *SubscriptionUpdate {
	su.mutation.ClearEndDate()
	return su
}

// SetCurrentPeriodStart sets the "current_period_start" field.
func (su *SubscriptionUpdate) SetCurrentPeriodStart(t time.Time) *SubscriptionUpdate {
	su.mutation.SetCurrentPeriodStart(t)
	return su
}

// SetNillableCurrentPeriodStart sets the "current_period_start" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCurrentPeriodStart(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetCurrentPeriodStart(*t)
	}
	return su
}

// SetCurrentPeriodEnd sets the "current_period_end" field.
func (su *SubscriptionUpdate) SetCurrentPeriodEnd(t time.Time) *SubscriptionUpdate {
	su.mutation.SetCurrentPeriodEnd(t)
	return su
}

// SetNillableCurrentPeriodEnd sets the "current_period_end" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCurrentPeriodEnd(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetCurrentPeriodEnd(*t)
	}
	return su
}

// SetCancelledAt sets the "cancelled_at" field.
func (su *SubscriptionUpdate) SetCancelledAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetCancelledAt(t)
	return su
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCancelledAt(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetCancelledAt(*t)
	}
	return su
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (su *SubscriptionUpdate) ClearCancelledAt() *SubscriptionUpdate {
	su.mutation.ClearCancelledAt()
	return su
}

// SetCancelAt sets the "cancel_at" field.
func (su *SubscriptionUpdate) SetCancelAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetCancelAt(t)
	return su
}

// SetNillableCancelAt sets the "cancel_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCancelAt(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetCancelAt(*t)
	}
	return su
}

// ClearCancelAt clears the value of the "cancel_at" field.
func (su *SubscriptionUpdate) ClearCancelAt() *SubscriptionUpdate {
	su.mutation.ClearCancelAt()
	return su
}

// SetCancelAtPeriodEnd sets the "cancel_at_period_end" field.
func (su *SubscriptionUpdate) SetCancelAtPeriodEnd(b bool) *SubscriptionUpdate {
	su.mutation.SetCancelAtPeriodEnd(b)
	return su
}

// SetNillableCancelAtPeriodEnd sets the "cancel_at_period_end" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCancelAtPeriodEnd(b *bool) *SubscriptionUpdate {
	if b != nil {
		su.SetCancelAtPeriodEnd(*b)
	}
	return su
}

// SetTrialStart sets the "trial_start" field.
func (su *SubscriptionUpdate) SetTrialStart(t time.Time) *SubscriptionUpdate {
	su.mutation.SetTrialStart(t)
	return su
}

// SetNillableTrialStart sets the "trial_start" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableTrialStart(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetTrialStart(*t)
	}
	return su
}

// ClearTrialStart clears the value of the "trial_start" field.
func (su *SubscriptionUpdate) ClearTrialStart() *SubscriptionUpdate {
	su.mutation.ClearTrialStart()
	return su
}

// SetTrialEnd sets the "trial_end" field.
func (su *SubscriptionUpdate) SetTrialEnd(t time.Time) *SubscriptionUpdate {
	su.mutation.SetTrialEnd(t)
	return su
}

// SetNillableTrialEnd sets the "trial_end" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableTrialEnd(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetTrialEnd(*t)
	}
	return su
}

// ClearTrialEnd clears the value of the "trial_end" field.
func (su *SubscriptionUpdate) ClearTrialEnd() *SubscriptionUpdate {
	su.mutation.ClearTrialEnd()
	return su
}

// SetVersion sets the "version" field.
func (su *SubscriptionUpdate) SetVersion(i int) *SubscriptionUpdate {
	su.mutation.ResetVersion()
	su.mutation.SetVersion(i)
	return su
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableVersion(i *int) *SubscriptionUpdate {
	if i != nil {
		su.SetVersion(*i)
	}
	return su
}

// AddVersion adds i to the "version" field.
func (su *SubscriptionUpdate) AddVersion(i int) *SubscriptionUpdate {
	su.mutation.AddVersion(i)
	return su
}

// Mutation returns the SubscriptionMutation object of the builder.
func (su *SubscriptionUpdate) Mutation() *SubscriptionMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubscriptionUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := subscription.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *SubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeString, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.CreatedByCleared() {
		_spec.ClearField(subscription.FieldCreatedBy, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(subscription.FieldUpdatedBy, field.TypeString, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(subscription.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := su.mutation.LookupKey(); ok {
		_spec.SetField(subscription.FieldLookupKey, field.TypeString, value)
	}
	if su.mutation.LookupKeyCleared() {
		_spec.ClearField(subscription.FieldLookupKey, field.TypeString)
	}
	if value, ok := su.mutation.SubscriptionStatus(); ok {
		_spec.SetField(subscription.FieldSubscriptionStatus, field.TypeString, value)
	}
	if value, ok := su.mutation.EndDate(); ok {
		_spec.SetField(subscription.FieldEndDate, field.TypeTime, value)
	}
	if su.mutation.EndDateCleared() {
		_spec.ClearField(subscription.FieldEndDate, field.TypeTime)
	}
	if value, ok := su.mutation.CurrentPeriodStart(); ok {
		_spec.SetField(subscription.FieldCurrentPeriodStart, field.TypeTime, value)
	}
	if value, ok := su.mutation.CurrentPeriodEnd(); ok {
		_spec.SetField(subscription.FieldCurrentPeriodEnd, field.TypeTime, value)
	}
	if value, ok := su.mutation.CancelledAt(); ok {
		_spec.SetField(subscription.FieldCancelledAt, field.TypeTime, value)
	}
	if su.mutation.CancelledAtCleared() {
		_spec.ClearField(subscription.FieldCancelledAt, field.TypeTime)
	}
	if value, ok := su.mutation.CancelAt(); ok {
		_spec.SetField(subscription.FieldCancelAt, field.TypeTime, value)
	}
	if su.mutation.CancelAtCleared() {
		_spec.ClearField(subscription.FieldCancelAt, field.TypeTime)
	}
	if value, ok := su.mutation.CancelAtPeriodEnd(); ok {
		_spec.SetField(subscription.FieldCancelAtPeriodEnd, field.TypeBool, value)
	}
	if value, ok := su.mutation.TrialStart(); ok {
		_spec.SetField(subscription.FieldTrialStart, field.TypeTime, value)
	}
	if su.mutation.TrialStartCleared() {
		_spec.ClearField(subscription.FieldTrialStart, field.TypeTime)
	}
	if value, ok := su.mutation.TrialEnd(); ok {
		_spec.SetField(subscription.FieldTrialEnd, field.TypeTime, value)
	}
	if su.mutation.TrialEndCleared() {
		_spec.ClearField(subscription.FieldTrialEnd, field.TypeTime)
	}
	if value, ok := su.mutation.Version(); ok {
		_spec.SetField(subscription.FieldVersion, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedVersion(); ok {
		_spec.AddField(subscription.FieldVersion, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionMutation
}

// SetStatus sets the "status" field.
func (suo *SubscriptionUpdateOne) SetStatus(s string) *SubscriptionUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableStatus(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubscriptionUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SubscriptionUpdateOne) SetUpdatedBy(s string) *SubscriptionUpdateOne {
	suo.mutation.SetUpdatedBy(s)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableUpdatedBy(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetUpdatedBy(*s)
	}
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *SubscriptionUpdateOne) ClearUpdatedBy() *SubscriptionUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetLookupKey sets the "lookup_key" field.
func (suo *SubscriptionUpdateOne) SetLookupKey(s string) *SubscriptionUpdateOne {
	suo.mutation.SetLookupKey(s)
	return suo
}

// SetNillableLookupKey sets the "lookup_key" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableLookupKey(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetLookupKey(*s)
	}
	return suo
}

// ClearLookupKey clears the value of the "lookup_key" field.
func (suo *SubscriptionUpdateOne) ClearLookupKey() *SubscriptionUpdateOne {
	suo.mutation.ClearLookupKey()
	return suo
}

// SetSubscriptionStatus sets the "subscription_status" field.
func (suo *SubscriptionUpdateOne) SetSubscriptionStatus(s string) *SubscriptionUpdateOne {
	suo.mutation.SetSubscriptionStatus(s)
	return suo
}

// SetNillableSubscriptionStatus sets the "subscription_status" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableSubscriptionStatus(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetSubscriptionStatus(*s)
	}
	return suo
}

// SetEndDate sets the "end_date" field.
func (suo *SubscriptionUpdateOne) SetEndDate(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetEndDate(t)
	return suo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableEndDate(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetEndDate(*t)
	}
	return suo
}

// ClearEndDate clears the value of the "end_date" field.
func (suo *SubscriptionUpdateOne) ClearEndDate() *SubscriptionUpdateOne {
	suo.mutation.ClearEndDate()
	return suo
}

// SetCurrentPeriodStart sets the "current_period_start" field.
func (suo *SubscriptionUpdateOne) SetCurrentPeriodStart(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetCurrentPeriodStart(t)
	return suo
}

// SetNillableCurrentPeriodStart sets the "current_period_start" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCurrentPeriodStart(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetCurrentPeriodStart(*t)
	}
	return suo
}

// SetCurrentPeriodEnd sets the "current_period_end" field.
func (suo *SubscriptionUpdateOne) SetCurrentPeriodEnd(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetCurrentPeriodEnd(t)
	return suo
}

// SetNillableCurrentPeriodEnd sets the "current_period_end" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCurrentPeriodEnd(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetCurrentPeriodEnd(*t)
	}
	return suo
}

// SetCancelledAt sets the "cancelled_at" field.
func (suo *SubscriptionUpdateOne) SetCancelledAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetCancelledAt(t)
	return suo
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCancelledAt(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetCancelledAt(*t)
	}
	return suo
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (suo *SubscriptionUpdateOne) ClearCancelledAt() *SubscriptionUpdateOne {
	suo.mutation.ClearCancelledAt()
	return suo
}

// SetCancelAt sets the "cancel_at" field.
func (suo *SubscriptionUpdateOne) SetCancelAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetCancelAt(t)
	return suo
}

// SetNillableCancelAt sets the "cancel_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCancelAt(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetCancelAt(*t)
	}
	return suo
}

// ClearCancelAt clears the value of the "cancel_at" field.
func (suo *SubscriptionUpdateOne) ClearCancelAt() *SubscriptionUpdateOne {
	suo.mutation.ClearCancelAt()
	return suo
}

// SetCancelAtPeriodEnd sets the "cancel_at_period_end" field.
func (suo *SubscriptionUpdateOne) SetCancelAtPeriodEnd(b bool) *SubscriptionUpdateOne {
	suo.mutation.SetCancelAtPeriodEnd(b)
	return suo
}

// SetNillableCancelAtPeriodEnd sets the "cancel_at_period_end" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCancelAtPeriodEnd(b *bool) *SubscriptionUpdateOne {
	if b != nil {
		suo.SetCancelAtPeriodEnd(*b)
	}
	return suo
}

// SetTrialStart sets the "trial_start" field.
func (suo *SubscriptionUpdateOne) SetTrialStart(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetTrialStart(t)
	return suo
}

// SetNillableTrialStart sets the "trial_start" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableTrialStart(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetTrialStart(*t)
	}
	return suo
}

// ClearTrialStart clears the value of the "trial_start" field.
func (suo *SubscriptionUpdateOne) ClearTrialStart() *SubscriptionUpdateOne {
	suo.mutation.ClearTrialStart()
	return suo
}

// SetTrialEnd sets the "trial_end" field.
func (suo *SubscriptionUpdateOne) SetTrialEnd(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetTrialEnd(t)
	return suo
}

// SetNillableTrialEnd sets the "trial_end" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableTrialEnd(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetTrialEnd(*t)
	}
	return suo
}

// ClearTrialEnd clears the value of the "trial_end" field.
func (suo *SubscriptionUpdateOne) ClearTrialEnd() *SubscriptionUpdateOne {
	suo.mutation.ClearTrialEnd()
	return suo
}

// SetVersion sets the "version" field.
func (suo *SubscriptionUpdateOne) SetVersion(i int) *SubscriptionUpdateOne {
	suo.mutation.ResetVersion()
	suo.mutation.SetVersion(i)
	return suo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableVersion(i *int) *SubscriptionUpdateOne {
	if i != nil {
		suo.SetVersion(*i)
	}
	return suo
}

// AddVersion adds i to the "version" field.
func (suo *SubscriptionUpdateOne) AddVersion(i int) *SubscriptionUpdateOne {
	suo.mutation.AddVersion(i)
	return suo
}

// Mutation returns the SubscriptionMutation object of the builder.
func (suo *SubscriptionUpdateOne) Mutation() *SubscriptionMutation {
	return suo.mutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (suo *SubscriptionUpdateOne) Where(ps ...predicate.Subscription) *SubscriptionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscriptionUpdateOne) Select(field string, fields ...string) *SubscriptionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscription entity.
func (suo *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubscriptionUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := subscription.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *SubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Subscription, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscription.FieldID)
		for _, f := range fields {
			if !subscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeString, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.CreatedByCleared() {
		_spec.ClearField(subscription.FieldCreatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(subscription.FieldUpdatedBy, field.TypeString, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(subscription.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.LookupKey(); ok {
		_spec.SetField(subscription.FieldLookupKey, field.TypeString, value)
	}
	if suo.mutation.LookupKeyCleared() {
		_spec.ClearField(subscription.FieldLookupKey, field.TypeString)
	}
	if value, ok := suo.mutation.SubscriptionStatus(); ok {
		_spec.SetField(subscription.FieldSubscriptionStatus, field.TypeString, value)
	}
	if value, ok := suo.mutation.EndDate(); ok {
		_spec.SetField(subscription.FieldEndDate, field.TypeTime, value)
	}
	if suo.mutation.EndDateCleared() {
		_spec.ClearField(subscription.FieldEndDate, field.TypeTime)
	}
	if value, ok := suo.mutation.CurrentPeriodStart(); ok {
		_spec.SetField(subscription.FieldCurrentPeriodStart, field.TypeTime, value)
	}
	if value, ok := suo.mutation.CurrentPeriodEnd(); ok {
		_spec.SetField(subscription.FieldCurrentPeriodEnd, field.TypeTime, value)
	}
	if value, ok := suo.mutation.CancelledAt(); ok {
		_spec.SetField(subscription.FieldCancelledAt, field.TypeTime, value)
	}
	if suo.mutation.CancelledAtCleared() {
		_spec.ClearField(subscription.FieldCancelledAt, field.TypeTime)
	}
	if value, ok := suo.mutation.CancelAt(); ok {
		_spec.SetField(subscription.FieldCancelAt, field.TypeTime, value)
	}
	if suo.mutation.CancelAtCleared() {
		_spec.ClearField(subscription.FieldCancelAt, field.TypeTime)
	}
	if value, ok := suo.mutation.CancelAtPeriodEnd(); ok {
		_spec.SetField(subscription.FieldCancelAtPeriodEnd, field.TypeBool, value)
	}
	if value, ok := suo.mutation.TrialStart(); ok {
		_spec.SetField(subscription.FieldTrialStart, field.TypeTime, value)
	}
	if suo.mutation.TrialStartCleared() {
		_spec.ClearField(subscription.FieldTrialStart, field.TypeTime)
	}
	if value, ok := suo.mutation.TrialEnd(); ok {
		_spec.SetField(subscription.FieldTrialEnd, field.TypeTime, value)
	}
	if suo.mutation.TrialEndCleared() {
		_spec.ClearField(subscription.FieldTrialEnd, field.TypeTime)
	}
	if value, ok := suo.mutation.Version(); ok {
		_spec.SetField(subscription.FieldVersion, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedVersion(); ok {
		_spec.AddField(subscription.FieldVersion, field.TypeInt, value)
	}
	_node = &Subscription{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
