// Code generated by ent, DO NOT EDIT.

package subscriptionaddon

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldUpdatedBy, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldEnvironmentID, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldSubscriptionID, v))
}

// AddonID applies equality check predicate on the "addon_id" field. It's identical to AddonIDEQ.
func AddonID(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldAddonID, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldEndDate, v))
}

// AddonStatus applies equality check predicate on the "addon_status" field. It's identical to AddonStatusEQ.
func AddonStatus(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldAddonStatus, v))
}

// CancellationReason applies equality check predicate on the "cancellation_reason" field. It's identical to CancellationReasonEQ.
func CancellationReason(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldCancellationReason, v))
}

// CancelledAt applies equality check predicate on the "cancelled_at" field. It's identical to CancelledAtEQ.
func CancelledAt(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldCancelledAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContains(FieldEnvironmentID, v))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasPrefix(FieldEnvironmentID, v))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasSuffix(FieldEnvironmentID, v))
}

// EnvironmentIDIsNil applies the IsNil predicate on the "environment_id" field.
func EnvironmentIDIsNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIsNull(FieldEnvironmentID))
}

// EnvironmentIDNotNil applies the NotNil predicate on the "environment_id" field.
func EnvironmentIDNotNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotNull(FieldEnvironmentID))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldEnvironmentID, v))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldEnvironmentID, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// AddonIDEQ applies the EQ predicate on the "addon_id" field.
func AddonIDEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldAddonID, v))
}

// AddonIDNEQ applies the NEQ predicate on the "addon_id" field.
func AddonIDNEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldAddonID, v))
}

// AddonIDIn applies the In predicate on the "addon_id" field.
func AddonIDIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldAddonID, vs...))
}

// AddonIDNotIn applies the NotIn predicate on the "addon_id" field.
func AddonIDNotIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldAddonID, vs...))
}

// AddonIDGT applies the GT predicate on the "addon_id" field.
func AddonIDGT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldAddonID, v))
}

// AddonIDGTE applies the GTE predicate on the "addon_id" field.
func AddonIDGTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldAddonID, v))
}

// AddonIDLT applies the LT predicate on the "addon_id" field.
func AddonIDLT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldAddonID, v))
}

// AddonIDLTE applies the LTE predicate on the "addon_id" field.
func AddonIDLTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldAddonID, v))
}

// AddonIDContains applies the Contains predicate on the "addon_id" field.
func AddonIDContains(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContains(FieldAddonID, v))
}

// AddonIDHasPrefix applies the HasPrefix predicate on the "addon_id" field.
func AddonIDHasPrefix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasPrefix(FieldAddonID, v))
}

// AddonIDHasSuffix applies the HasSuffix predicate on the "addon_id" field.
func AddonIDHasSuffix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasSuffix(FieldAddonID, v))
}

// AddonIDEqualFold applies the EqualFold predicate on the "addon_id" field.
func AddonIDEqualFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldAddonID, v))
}

// AddonIDContainsFold applies the ContainsFold predicate on the "addon_id" field.
func AddonIDContainsFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldAddonID, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "start_date" field.
func StartDateIsNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "start_date" field.
func StartDateNotNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotNull(FieldStartDate))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotNull(FieldEndDate))
}

// AddonStatusEQ applies the EQ predicate on the "addon_status" field.
func AddonStatusEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldAddonStatus, v))
}

// AddonStatusNEQ applies the NEQ predicate on the "addon_status" field.
func AddonStatusNEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldAddonStatus, v))
}

// AddonStatusIn applies the In predicate on the "addon_status" field.
func AddonStatusIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldAddonStatus, vs...))
}

// AddonStatusNotIn applies the NotIn predicate on the "addon_status" field.
func AddonStatusNotIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldAddonStatus, vs...))
}

// AddonStatusGT applies the GT predicate on the "addon_status" field.
func AddonStatusGT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldAddonStatus, v))
}

// AddonStatusGTE applies the GTE predicate on the "addon_status" field.
func AddonStatusGTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldAddonStatus, v))
}

// AddonStatusLT applies the LT predicate on the "addon_status" field.
func AddonStatusLT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldAddonStatus, v))
}

// AddonStatusLTE applies the LTE predicate on the "addon_status" field.
func AddonStatusLTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldAddonStatus, v))
}

// AddonStatusContains applies the Contains predicate on the "addon_status" field.
func AddonStatusContains(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContains(FieldAddonStatus, v))
}

// AddonStatusHasPrefix applies the HasPrefix predicate on the "addon_status" field.
func AddonStatusHasPrefix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasPrefix(FieldAddonStatus, v))
}

// AddonStatusHasSuffix applies the HasSuffix predicate on the "addon_status" field.
func AddonStatusHasSuffix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasSuffix(FieldAddonStatus, v))
}

// AddonStatusEqualFold applies the EqualFold predicate on the "addon_status" field.
func AddonStatusEqualFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldAddonStatus, v))
}

// AddonStatusContainsFold applies the ContainsFold predicate on the "addon_status" field.
func AddonStatusContainsFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldAddonStatus, v))
}

// CancellationReasonEQ applies the EQ predicate on the "cancellation_reason" field.
func CancellationReasonEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldCancellationReason, v))
}

// CancellationReasonNEQ applies the NEQ predicate on the "cancellation_reason" field.
func CancellationReasonNEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldCancellationReason, v))
}

// CancellationReasonIn applies the In predicate on the "cancellation_reason" field.
func CancellationReasonIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldCancellationReason, vs...))
}

// CancellationReasonNotIn applies the NotIn predicate on the "cancellation_reason" field.
func CancellationReasonNotIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldCancellationReason, vs...))
}

// CancellationReasonGT applies the GT predicate on the "cancellation_reason" field.
func CancellationReasonGT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldCancellationReason, v))
}

// CancellationReasonGTE applies the GTE predicate on the "cancellation_reason" field.
func CancellationReasonGTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldCancellationReason, v))
}

// CancellationReasonLT applies the LT predicate on the "cancellation_reason" field.
func CancellationReasonLT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldCancellationReason, v))
}

// CancellationReasonLTE applies the LTE predicate on the "cancellation_reason" field.
func CancellationReasonLTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldCancellationReason, v))
}

// CancellationReasonContains applies the Contains predicate on the "cancellation_reason" field.
func CancellationReasonContains(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContains(FieldCancellationReason, v))
}

// CancellationReasonHasPrefix applies the HasPrefix predicate on the "cancellation_reason" field.
func CancellationReasonHasPrefix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasPrefix(FieldCancellationReason, v))
}

// CancellationReasonHasSuffix applies the HasSuffix predicate on the "cancellation_reason" field.
func CancellationReasonHasSuffix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasSuffix(FieldCancellationReason, v))
}

// CancellationReasonIsNil applies the IsNil predicate on the "cancellation_reason" field.
func CancellationReasonIsNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIsNull(FieldCancellationReason))
}

// CancellationReasonNotNil applies the NotNil predicate on the "cancellation_reason" field.
func CancellationReasonNotNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotNull(FieldCancellationReason))
}

// CancellationReasonEqualFold applies the EqualFold predicate on the "cancellation_reason" field.
func CancellationReasonEqualFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldCancellationReason, v))
}

// CancellationReasonContainsFold applies the ContainsFold predicate on the "cancellation_reason" field.
func CancellationReasonContainsFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldCancellationReason, v))
}

// CancelledAtEQ applies the EQ predicate on the "cancelled_at" field.
func CancelledAtEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldCancelledAt, v))
}

// CancelledAtNEQ applies the NEQ predicate on the "cancelled_at" field.
func CancelledAtNEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldCancelledAt, v))
}

// CancelledAtIn applies the In predicate on the "cancelled_at" field.
func CancelledAtIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldCancelledAt, vs...))
}

// CancelledAtNotIn applies the NotIn predicate on the "cancelled_at" field.
func CancelledAtNotIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldCancelledAt, vs...))
}

// CancelledAtGT applies the GT predicate on the "cancelled_at" field.
func CancelledAtGT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldCancelledAt, v))
}

// CancelledAtGTE applies the GTE predicate on the "cancelled_at" field.
func CancelledAtGTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldCancelledAt, v))
}

// CancelledAtLT applies the LT predicate on the "cancelled_at" field.
func CancelledAtLT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldCancelledAt, v))
}

// CancelledAtLTE applies the LTE predicate on the "cancelled_at" field.
func CancelledAtLTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldCancelledAt, v))
}

// CancelledAtIsNil applies the IsNil predicate on the "cancelled_at" field.
func CancelledAtIsNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIsNull(FieldCancelledAt))
}

// CancelledAtNotNil applies the NotNil predicate on the "cancelled_at" field.
func CancelledAtNotNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotNull(FieldCancelledAt))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotNull(FieldMetadata))
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.Subscription) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddon applies the HasEdge predicate on the "addon" edge.
func HasAddon() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AddonTable, AddonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddonWith applies the HasEdge predicate on the "addon" edge with a given conditions (other predicates).
func HasAddonWith(preds ...predicate.Addon) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(func(s *sql.Selector) {
		step := newAddonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubscriptionAddon) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubscriptionAddon) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubscriptionAddon) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.NotPredicates(p))
}
