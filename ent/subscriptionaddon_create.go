// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/addon"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionaddon"
)

// SubscriptionAddonCreate is the builder for creating a SubscriptionAddon entity.
type SubscriptionAddonCreate struct {
	config
	mutation *SubscriptionAddonMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (sac *SubscriptionAddonCreate) SetTenantID(s string) *SubscriptionAddonCreate {
	sac.mutation.SetTenantID(s)
	return sac
}

// SetStatus sets the "status" field.
func (sac *SubscriptionAddonCreate) SetStatus(s string) *SubscriptionAddonCreate {
	sac.mutation.SetStatus(s)
	return sac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sac *SubscriptionAddonCreate) SetNillableStatus(s *string) *SubscriptionAddonCreate {
	if s != nil {
		sac.SetStatus(*s)
	}
	return sac
}

// SetCreatedAt sets the "created_at" field.
func (sac *SubscriptionAddonCreate) SetCreatedAt(t time.Time) *SubscriptionAddonCreate {
	sac.mutation.SetCreatedAt(t)
	return sac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sac *SubscriptionAddonCreate) SetNillableCreatedAt(t *time.Time) *SubscriptionAddonCreate {
	if t != nil {
		sac.SetCreatedAt(*t)
	}
	return sac
}

// SetUpdatedAt sets the "updated_at" field.
func (sac *SubscriptionAddonCreate) SetUpdatedAt(t time.Time) *SubscriptionAddonCreate {
	sac.mutation.SetUpdatedAt(t)
	return sac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sac *SubscriptionAddonCreate) SetNillableUpdatedAt(t *time.Time) *SubscriptionAddonCreate {
	if t != nil {
		sac.SetUpdatedAt(*t)
	}
	return sac
}

// SetCreatedBy sets the "created_by" field.
func (sac *SubscriptionAddonCreate) SetCreatedBy(s string) *SubscriptionAddonCreate {
	sac.mutation.SetCreatedBy(s)
	return sac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sac *SubscriptionAddonCreate) SetNillableCreatedBy(s *string) *SubscriptionAddonCreate {
	if s != nil {
		sac.SetCreatedBy(*s)
	}
	return sac
}

// SetUpdatedBy sets the "updated_by" field.
func (sac *SubscriptionAddonCreate) SetUpdatedBy(s string) *SubscriptionAddonCreate {
	sac.mutation.SetUpdatedBy(s)
	return sac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sac *SubscriptionAddonCreate) SetNillableUpdatedBy(s *string) *SubscriptionAddonCreate {
	if s != nil {
		sac.SetUpdatedBy(*s)
	}
	return sac
}

// SetEnvironmentID sets the "environment_id" field.
func (sac *SubscriptionAddonCreate) SetEnvironmentID(s string) *SubscriptionAddonCreate {
	sac.mutation.SetEnvironmentID(s)
	return sac
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (sac *SubscriptionAddonCreate) SetNillableEnvironmentID(s *string) *SubscriptionAddonCreate {
	if s != nil {
		sac.SetEnvironmentID(*s)
	}
	return sac
}

// SetSubscriptionID sets the "subscription_id" field.
func (sac *SubscriptionAddonCreate) SetSubscriptionID(s string) *SubscriptionAddonCreate {
	sac.mutation.SetSubscriptionID(s)
	return sac
}

// SetAddonID sets the "addon_id" field.
func (sac *SubscriptionAddonCreate) SetAddonID(s string) *SubscriptionAddonCreate {
	sac.mutation.SetAddonID(s)
	return sac
}

// SetStartDate sets the "start_date" field.
func (sac *SubscriptionAddonCreate) SetStartDate(t time.Time) *SubscriptionAddonCreate {
	sac.mutation.SetStartDate(t)
	return sac
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (sac *SubscriptionAddonCreate) SetNillableStartDate(t *time.Time) *SubscriptionAddonCreate {
	if t != nil {
		sac.SetStartDate(*t)
	}
	return sac
}

// SetEndDate sets the "end_date" field.
func (sac *SubscriptionAddonCreate) SetEndDate(t time.Time) *SubscriptionAddonCreate {
	sac.mutation.SetEndDate(t)
	return sac
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (sac *SubscriptionAddonCreate) SetNillableEndDate(t *time.Time) *SubscriptionAddonCreate {
	if t != nil {
		sac.SetEndDate(*t)
	}
	return sac
}

// SetAddonStatus sets the "addon_status" field.
func (sac *SubscriptionAddonCreate) SetAddonStatus(s string) *SubscriptionAddonCreate {
	sac.mutation.SetAddonStatus(s)
	return sac
}

// SetNillableAddonStatus sets the "addon_status" field if the given value is not nil.
func (sac *SubscriptionAddonCreate) SetNillableAddonStatus(s *string) *SubscriptionAddonCreate {
	if s != nil {
		sac.SetAddonStatus(*s)
	}
	return sac
}

// SetCancellationReason sets the "cancellation_reason" field.
func (sac *SubscriptionAddonCreate) SetCancellationReason(s string) *SubscriptionAddonCreate {
	sac.mutation.SetCancellationReason(s)
	return sac
}

// SetNillableCancellationReason sets the "cancellation_reason" field if the given value is not nil.
func (sac *SubscriptionAddonCreate) SetNillableCancellationReason(s *string) *SubscriptionAddonCreate {
	if s != nil {
		sac.SetCancellationReason(*s)
	}
	return sac
}

// SetCancelledAt sets the "cancelled_at" field.
func (sac *SubscriptionAddonCreate) SetCancelledAt(t time.Time) *SubscriptionAddonCreate {
	sac.mutation.SetCancelledAt(t)
	return sac
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (sac *SubscriptionAddonCreate) SetNillableCancelledAt(t *time.Time) *SubscriptionAddonCreate {
	if t != nil {
		sac.SetCancelledAt(*t)
	}
	return sac
}

// SetMetadata sets the "metadata" field.
func (sac *SubscriptionAddonCreate) SetMetadata(m map[string]interface{}) *SubscriptionAddonCreate {
	sac.mutation.SetMetadata(m)
	return sac
}

// SetID sets the "id" field.
func (sac *SubscriptionAddonCreate) SetID(s string) *SubscriptionAddonCreate {
	sac.mutation.SetID(s)
	return sac
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (sac *SubscriptionAddonCreate) SetSubscription(s *Subscription) *SubscriptionAddonCreate {
	return sac.SetSubscriptionID(s.ID)
}

// SetAddon sets the "addon" edge to the Addon entity.
func (sac *SubscriptionAddonCreate) SetAddon(a *Addon) *SubscriptionAddonCreate {
	return sac.SetAddonID(a.ID)
}

// Mutation returns the SubscriptionAddonMutation object of the builder.
func (sac *SubscriptionAddonCreate) Mutation() *SubscriptionAddonMutation {
	return sac.mutation
}

// Save creates the SubscriptionAddon in the database.
func (sac *SubscriptionAddonCreate) Save(ctx context.Context) (*SubscriptionAddon, error) {
	sac.defaults()
	return withHooks(ctx, sac.sqlSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *SubscriptionAddonCreate) SaveX(ctx context.Context) *SubscriptionAddon {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *SubscriptionAddonCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *SubscriptionAddonCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *SubscriptionAddonCreate) defaults() {
	if _, ok := sac.mutation.Status(); !ok {
		v := subscriptionaddon.DefaultStatus
		sac.mutation.SetStatus(v)
	}
	if _, ok := sac.mutation.CreatedAt(); !ok {
		v := subscriptionaddon.DefaultCreatedAt()
		sac.mutation.SetCreatedAt(v)
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		v := subscriptionaddon.DefaultUpdatedAt()
		sac.mutation.SetUpdatedAt(v)
	}
	if _, ok := sac.mutation.EnvironmentID(); !ok {
		v := subscriptionaddon.DefaultEnvironmentID
		sac.mutation.SetEnvironmentID(v)
	}
	if _, ok := sac.mutation.StartDate(); !ok {
		v := subscriptionaddon.DefaultStartDate()
		sac.mutation.SetStartDate(v)
	}
	if _, ok := sac.mutation.AddonStatus(); !ok {
		v := subscriptionaddon.DefaultAddonStatus
		sac.mutation.SetAddonStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *SubscriptionAddonCreate) check() error {
	if _, ok := sac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "SubscriptionAddon.tenant_id"`)}
	}
	if v, ok := sac.mutation.TenantID(); ok {
		if err := subscriptionaddon.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionAddon.tenant_id": %w`, err)}
		}
	}
	if _, ok := sac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SubscriptionAddon.status"`)}
	}
	if _, ok := sac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SubscriptionAddon.created_at"`)}
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SubscriptionAddon.updated_at"`)}
	}
	if _, ok := sac.mutation.SubscriptionID(); !ok {
		return &ValidationError{Name: "subscription_id", err: errors.New(`ent: missing required field "SubscriptionAddon.subscription_id"`)}
	}
	if v, ok := sac.mutation.SubscriptionID(); ok {
		if err := subscriptionaddon.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionAddon.subscription_id": %w`, err)}
		}
	}
	if _, ok := sac.mutation.AddonID(); !ok {
		return &ValidationError{Name: "addon_id", err: errors.New(`ent: missing required field "SubscriptionAddon.addon_id"`)}
	}
	if v, ok := sac.mutation.AddonID(); ok {
		if err := subscriptionaddon.AddonIDValidator(v); err != nil {
			return &ValidationError{Name: "addon_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionAddon.addon_id": %w`, err)}
		}
	}
	if _, ok := sac.mutation.AddonStatus(); !ok {
		return &ValidationError{Name: "addon_status", err: errors.New(`ent: missing required field "SubscriptionAddon.addon_status"`)}
	}
	if len(sac.mutation.SubscriptionIDs()) == 0 {
		return &ValidationError{Name: "subscription", err: errors.New(`ent: missing required edge "SubscriptionAddon.subscription"`)}
	}
	if len(sac.mutation.AddonIDs()) == 0 {
		return &ValidationError{Name: "addon", err: errors.New(`ent: missing required edge "SubscriptionAddon.addon"`)}
	}
	return nil
}

func (sac *SubscriptionAddonCreate) sqlSave(ctx context.Context) (*SubscriptionAddon, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubscriptionAddon.ID type: %T", _spec.ID.Value)
		}
	}
	sac.mutation.id = &_node.ID
	sac.mutation.done = true
	return _node, nil
}

func (sac *SubscriptionAddonCreate) createSpec() (*SubscriptionAddon, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionAddon{config: sac.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionaddon.Table, sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString))
	)
	if id, ok := sac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sac.mutation.TenantID(); ok {
		_spec.SetField(subscriptionaddon.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := sac.mutation.Status(); ok {
		_spec.SetField(subscriptionaddon.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := sac.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionaddon.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sac.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionaddon.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sac.mutation.CreatedBy(); ok {
		_spec.SetField(subscriptionaddon.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sac.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionaddon.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sac.mutation.EnvironmentID(); ok {
		_spec.SetField(subscriptionaddon.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := sac.mutation.StartDate(); ok {
		_spec.SetField(subscriptionaddon.FieldStartDate, field.TypeTime, value)
		_node.StartDate = &value
	}
	if value, ok := sac.mutation.EndDate(); ok {
		_spec.SetField(subscriptionaddon.FieldEndDate, field.TypeTime, value)
		_node.EndDate = &value
	}
	if value, ok := sac.mutation.AddonStatus(); ok {
		_spec.SetField(subscriptionaddon.FieldAddonStatus, field.TypeString, value)
		_node.AddonStatus = value
	}
	if value, ok := sac.mutation.CancellationReason(); ok {
		_spec.SetField(subscriptionaddon.FieldCancellationReason, field.TypeString, value)
		_node.CancellationReason = value
	}
	if value, ok := sac.mutation.CancelledAt(); ok {
		_spec.SetField(subscriptionaddon.FieldCancelledAt, field.TypeTime, value)
		_node.CancelledAt = &value
	}
	if value, ok := sac.mutation.Metadata(); ok {
		_spec.SetField(subscriptionaddon.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := sac.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionaddon.SubscriptionTable,
			Columns: []string{subscriptionaddon.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.AddonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionaddon.AddonTable,
			Columns: []string{subscriptionaddon.AddonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AddonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubscriptionAddonCreateBulk is the builder for creating many SubscriptionAddon entities in bulk.
type SubscriptionAddonCreateBulk struct {
	config
	err      error
	builders []*SubscriptionAddonCreate
}

// Save creates the SubscriptionAddon entities in the database.
func (sacb *SubscriptionAddonCreateBulk) Save(ctx context.Context) ([]*SubscriptionAddon, error) {
	if sacb.err != nil {
		return nil, sacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*SubscriptionAddon, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionAddonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *SubscriptionAddonCreateBulk) SaveX(ctx context.Context) []*SubscriptionAddon {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *SubscriptionAddonCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *SubscriptionAddonCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}
