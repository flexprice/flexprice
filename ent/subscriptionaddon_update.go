// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscriptionaddon"
)

// SubscriptionAddonUpdate is the builder for updating SubscriptionAddon entities.
type SubscriptionAddonUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionAddonMutation
}

// Where appends a list predicates to the SubscriptionAddonUpdate builder.
func (sau *SubscriptionAddonUpdate) Where(ps ...predicate.SubscriptionAddon) *SubscriptionAddonUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// SetStatus sets the "status" field.
func (sau *SubscriptionAddonUpdate) SetStatus(s string) *SubscriptionAddonUpdate {
	sau.mutation.SetStatus(s)
	return sau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sau *SubscriptionAddonUpdate) SetNillableStatus(s *string) *SubscriptionAddonUpdate {
	if s != nil {
		sau.SetStatus(*s)
	}
	return sau
}

// SetUpdatedAt sets the "updated_at" field.
func (sau *SubscriptionAddonUpdate) SetUpdatedAt(t time.Time) *SubscriptionAddonUpdate {
	sau.mutation.SetUpdatedAt(t)
	return sau
}

// SetUpdatedBy sets the "updated_by" field.
func (sau *SubscriptionAddonUpdate) SetUpdatedBy(s string) *SubscriptionAddonUpdate {
	sau.mutation.SetUpdatedBy(s)
	return sau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sau *SubscriptionAddonUpdate) SetNillableUpdatedBy(s *string) *SubscriptionAddonUpdate {
	if s != nil {
		sau.SetUpdatedBy(*s)
	}
	return sau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sau *SubscriptionAddonUpdate) ClearUpdatedBy() *SubscriptionAddonUpdate {
	sau.mutation.ClearUpdatedBy()
	return sau
}

// SetStartDate sets the "start_date" field.
func (sau *SubscriptionAddonUpdate) SetStartDate(t time.Time) *SubscriptionAddonUpdate {
	sau.mutation.SetStartDate(t)
	return sau
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (sau *SubscriptionAddonUpdate) SetNillableStartDate(t *time.Time) *SubscriptionAddonUpdate {
	if t != nil {
		sau.SetStartDate(*t)
	}
	return sau
}

// ClearStartDate clears the value of the "start_date" field.
func (sau *SubscriptionAddonUpdate) ClearStartDate() *SubscriptionAddonUpdate {
	sau.mutation.ClearStartDate()
	return sau
}

// SetEndDate sets the "end_date" field.
func (sau *SubscriptionAddonUpdate) SetEndDate(t time.Time) *SubscriptionAddonUpdate {
	sau.mutation.SetEndDate(t)
	return sau
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (sau *SubscriptionAddonUpdate) SetNillableEndDate(t *time.Time) *SubscriptionAddonUpdate {
	if t != nil {
		sau.SetEndDate(*t)
	}
	return sau
}

// ClearEndDate clears the value of the "end_date" field.
func (sau *SubscriptionAddonUpdate) ClearEndDate() *SubscriptionAddonUpdate {
	sau.mutation.ClearEndDate()
	return sau
}

// SetAddonStatus sets the "addon_status" field.
func (sau *SubscriptionAddonUpdate) SetAddonStatus(s string) *SubscriptionAddonUpdate {
	sau.mutation.SetAddonStatus(s)
	return sau
}

// SetNillableAddonStatus sets the "addon_status" field if the given value is not nil.
func (sau *SubscriptionAddonUpdate) SetNillableAddonStatus(s *string) *SubscriptionAddonUpdate {
	if s != nil {
		sau.SetAddonStatus(*s)
	}
	return sau
}

// SetCancellationReason sets the "cancellation_reason" field.
func (sau *SubscriptionAddonUpdate) SetCancellationReason(s string) *SubscriptionAddonUpdate {
	sau.mutation.SetCancellationReason(s)
	return sau
}

// SetNillableCancellationReason sets the "cancellation_reason" field if the given value is not nil.
func (sau *SubscriptionAddonUpdate) SetNillableCancellationReason(s *string) *SubscriptionAddonUpdate {
	if s != nil {
		sau.SetCancellationReason(*s)
	}
	return sau
}

// ClearCancellationReason clears the value of the "cancellation_reason" field.
func (sau *SubscriptionAddonUpdate) ClearCancellationReason() *SubscriptionAddonUpdate {
	sau.mutation.ClearCancellationReason()
	return sau
}

// SetCancelledAt sets the "cancelled_at" field.
func (sau *SubscriptionAddonUpdate) SetCancelledAt(t time.Time) *SubscriptionAddonUpdate {
	sau.mutation.SetCancelledAt(t)
	return sau
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (sau *SubscriptionAddonUpdate) SetNillableCancelledAt(t *time.Time) *SubscriptionAddonUpdate {
	if t != nil {
		sau.SetCancelledAt(*t)
	}
	return sau
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (sau *SubscriptionAddonUpdate) ClearCancelledAt() *SubscriptionAddonUpdate {
	sau.mutation.ClearCancelledAt()
	return sau
}

// SetMetadata sets the "metadata" field.
func (sau *SubscriptionAddonUpdate) SetMetadata(m map[string]interface{}) *SubscriptionAddonUpdate {
	sau.mutation.SetMetadata(m)
	return sau
}

// ClearMetadata clears the value of the "metadata" field.
func (sau *SubscriptionAddonUpdate) ClearMetadata() *SubscriptionAddonUpdate {
	sau.mutation.ClearMetadata()
	return sau
}

// Mutation returns the SubscriptionAddonMutation object of the builder.
func (sau *SubscriptionAddonUpdate) Mutation() *SubscriptionAddonMutation {
	return sau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *SubscriptionAddonUpdate) Save(ctx context.Context) (int, error) {
	sau.defaults()
	return withHooks(ctx, sau.sqlSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *SubscriptionAddonUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *SubscriptionAddonUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *SubscriptionAddonUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sau *SubscriptionAddonUpdate) defaults() {
	if _, ok := sau.mutation.UpdatedAt(); !ok {
		v := subscriptionaddon.UpdateDefaultUpdatedAt()
		sau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sau *SubscriptionAddonUpdate) check() error {
	if v, ok := sau.mutation.AddonStatus(); ok {
		if err := subscriptionaddon.AddonStatusValidator(v); err != nil {
			return &ValidationError{Name: "addon_status", err: fmt.Errorf(`ent: validator failed for field "SubscriptionAddon.addon_status": %w`, err)}
		}
	}
	if sau.mutation.SubscriptionCleared() && len(sau.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubscriptionAddon.subscription"`)
	}
	if sau.mutation.AddonCleared() && len(sau.mutation.AddonIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubscriptionAddon.addon"`)
	}
	return nil
}

func (sau *SubscriptionAddonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionaddon.Table, subscriptionaddon.Columns, sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString))
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sau.mutation.Status(); ok {
		_spec.SetField(subscriptionaddon.FieldStatus, field.TypeString, value)
	}
	if value, ok := sau.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionaddon.FieldUpdatedAt, field.TypeTime, value)
	}
	if sau.mutation.CreatedByCleared() {
		_spec.ClearField(subscriptionaddon.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sau.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionaddon.FieldUpdatedBy, field.TypeString, value)
	}
	if sau.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriptionaddon.FieldUpdatedBy, field.TypeString)
	}
	if sau.mutation.EnvironmentIDCleared() {
		_spec.ClearField(subscriptionaddon.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := sau.mutation.StartDate(); ok {
		_spec.SetField(subscriptionaddon.FieldStartDate, field.TypeTime, value)
	}
	if sau.mutation.StartDateCleared() {
		_spec.ClearField(subscriptionaddon.FieldStartDate, field.TypeTime)
	}
	if value, ok := sau.mutation.EndDate(); ok {
		_spec.SetField(subscriptionaddon.FieldEndDate, field.TypeTime, value)
	}
	if sau.mutation.EndDateCleared() {
		_spec.ClearField(subscriptionaddon.FieldEndDate, field.TypeTime)
	}
	if value, ok := sau.mutation.AddonStatus(); ok {
		_spec.SetField(subscriptionaddon.FieldAddonStatus, field.TypeString, value)
	}
	if value, ok := sau.mutation.CancellationReason(); ok {
		_spec.SetField(subscriptionaddon.FieldCancellationReason, field.TypeString, value)
	}
	if sau.mutation.CancellationReasonCleared() {
		_spec.ClearField(subscriptionaddon.FieldCancellationReason, field.TypeString)
	}
	if value, ok := sau.mutation.CancelledAt(); ok {
		_spec.SetField(subscriptionaddon.FieldCancelledAt, field.TypeTime, value)
	}
	if sau.mutation.CancelledAtCleared() {
		_spec.ClearField(subscriptionaddon.FieldCancelledAt, field.TypeTime)
	}
	if value, ok := sau.mutation.Metadata(); ok {
		_spec.SetField(subscriptionaddon.FieldMetadata, field.TypeJSON, value)
	}
	if sau.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionaddon.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionaddon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sau.mutation.done = true
	return n, nil
}

// SubscriptionAddonUpdateOne is the builder for updating a single SubscriptionAddon entity.
type SubscriptionAddonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionAddonMutation
}

// SetStatus sets the "status" field.
func (sauo *SubscriptionAddonUpdateOne) SetStatus(s string) *SubscriptionAddonUpdateOne {
	sauo.mutation.SetStatus(s)
	return sauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sauo *SubscriptionAddonUpdateOne) SetNillableStatus(s *string) *SubscriptionAddonUpdateOne {
	if s != nil {
		sauo.SetStatus(*s)
	}
	return sauo
}

// SetUpdatedAt sets the "updated_at" field.
func (sauo *SubscriptionAddonUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionAddonUpdateOne {
	sauo.mutation.SetUpdatedAt(t)
	return sauo
}

// SetUpdatedBy sets the "updated_by" field.
func (sauo *SubscriptionAddonUpdateOne) SetUpdatedBy(s string) *SubscriptionAddonUpdateOne {
	sauo.mutation.SetUpdatedBy(s)
	return sauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sauo *SubscriptionAddonUpdateOne) SetNillableUpdatedBy(s *string) *SubscriptionAddonUpdateOne {
	if s != nil {
		sauo.SetUpdatedBy(*s)
	}
	return sauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sauo *SubscriptionAddonUpdateOne) ClearUpdatedBy() *SubscriptionAddonUpdateOne {
	sauo.mutation.ClearUpdatedBy()
	return sauo
}

// SetStartDate sets the "start_date" field.
func (sauo *SubscriptionAddonUpdateOne) SetStartDate(t time.Time) *SubscriptionAddonUpdateOne {
	sauo.mutation.SetStartDate(t)
	return sauo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (sauo *SubscriptionAddonUpdateOne) SetNillableStartDate(t *time.Time) *SubscriptionAddonUpdateOne {
	if t != nil {
		sauo.SetStartDate(*t)
	}
	return sauo
}

// ClearStartDate clears the value of the "start_date" field.
func (sauo *SubscriptionAddonUpdateOne) ClearStartDate() *SubscriptionAddonUpdateOne {
	sauo.mutation.ClearStartDate()
	return sauo
}

// SetEndDate sets the "end_date" field.
func (sauo *SubscriptionAddonUpdateOne) SetEndDate(t time.Time) *SubscriptionAddonUpdateOne {
	sauo.mutation.SetEndDate(t)
	return sauo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (sauo *SubscriptionAddonUpdateOne) SetNillableEndDate(t *time.Time) *SubscriptionAddonUpdateOne {
	if t != nil {
		sauo.SetEndDate(*t)
	}
	return sauo
}

// ClearEndDate clears the value of the "end_date" field.
func (sauo *SubscriptionAddonUpdateOne) ClearEndDate() *SubscriptionAddonUpdateOne {
	sauo.mutation.ClearEndDate()
	return sauo
}

// SetAddonStatus sets the "addon_status" field.
func (sauo *SubscriptionAddonUpdateOne) SetAddonStatus(s string) *SubscriptionAddonUpdateOne {
	sauo.mutation.SetAddonStatus(s)
	return sauo
}

// SetNillableAddonStatus sets the "addon_status" field if the given value is not nil.
func (sauo *SubscriptionAddonUpdateOne) SetNillableAddonStatus(s *string) *SubscriptionAddonUpdateOne {
	if s != nil {
		sauo.SetAddonStatus(*s)
	}
	return sauo
}

// SetCancellationReason sets the "cancellation_reason" field.
func (sauo *SubscriptionAddonUpdateOne) SetCancellationReason(s string) *SubscriptionAddonUpdateOne {
	sauo.mutation.SetCancellationReason(s)
	return sauo
}

// SetNillableCancellationReason sets the "cancellation_reason" field if the given value is not nil.
func (sauo *SubscriptionAddonUpdateOne) SetNillableCancellationReason(s *string) *SubscriptionAddonUpdateOne {
	if s != nil {
		sauo.SetCancellationReason(*s)
	}
	return sauo
}

// ClearCancellationReason clears the value of the "cancellation_reason" field.
func (sauo *SubscriptionAddonUpdateOne) ClearCancellationReason() *SubscriptionAddonUpdateOne {
	sauo.mutation.ClearCancellationReason()
	return sauo
}

// SetCancelledAt sets the "cancelled_at" field.
func (sauo *SubscriptionAddonUpdateOne) SetCancelledAt(t time.Time) *SubscriptionAddonUpdateOne {
	sauo.mutation.SetCancelledAt(t)
	return sauo
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (sauo *SubscriptionAddonUpdateOne) SetNillableCancelledAt(t *time.Time) *SubscriptionAddonUpdateOne {
	if t != nil {
		sauo.SetCancelledAt(*t)
	}
	return sauo
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (sauo *SubscriptionAddonUpdateOne) ClearCancelledAt() *SubscriptionAddonUpdateOne {
	sauo.mutation.ClearCancelledAt()
	return sauo
}

// SetMetadata sets the "metadata" field.
func (sauo *SubscriptionAddonUpdateOne) SetMetadata(m map[string]interface{}) *SubscriptionAddonUpdateOne {
	sauo.mutation.SetMetadata(m)
	return sauo
}

// ClearMetadata clears the value of the "metadata" field.
func (sauo *SubscriptionAddonUpdateOne) ClearMetadata() *SubscriptionAddonUpdateOne {
	sauo.mutation.ClearMetadata()
	return sauo
}

// Mutation returns the SubscriptionAddonMutation object of the builder.
func (sauo *SubscriptionAddonUpdateOne) Mutation() *SubscriptionAddonMutation {
	return sauo.mutation
}

// Where appends a list predicates to the SubscriptionAddonUpdate builder.
func (sauo *SubscriptionAddonUpdateOne) Where(ps ...predicate.SubscriptionAddon) *SubscriptionAddonUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *SubscriptionAddonUpdateOne) Select(field string, fields ...string) *SubscriptionAddonUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated SubscriptionAddon entity.
func (sauo *SubscriptionAddonUpdateOne) Save(ctx context.Context) (*SubscriptionAddon, error) {
	sauo.defaults()
	return withHooks(ctx, sauo.sqlSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *SubscriptionAddonUpdateOne) SaveX(ctx context.Context) *SubscriptionAddon {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *SubscriptionAddonUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *SubscriptionAddonUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sauo *SubscriptionAddonUpdateOne) defaults() {
	if _, ok := sauo.mutation.UpdatedAt(); !ok {
		v := subscriptionaddon.UpdateDefaultUpdatedAt()
		sauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sauo *SubscriptionAddonUpdateOne) check() error {
	if v, ok := sauo.mutation.AddonStatus(); ok {
		if err := subscriptionaddon.AddonStatusValidator(v); err != nil {
			return &ValidationError{Name: "addon_status", err: fmt.Errorf(`ent: validator failed for field "SubscriptionAddon.addon_status": %w`, err)}
		}
	}
	if sauo.mutation.SubscriptionCleared() && len(sauo.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubscriptionAddon.subscription"`)
	}
	if sauo.mutation.AddonCleared() && len(sauo.mutation.AddonIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubscriptionAddon.addon"`)
	}
	return nil
}

func (sauo *SubscriptionAddonUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionAddon, err error) {
	if err := sauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionaddon.Table, subscriptionaddon.Columns, sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString))
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscriptionAddon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionaddon.FieldID)
		for _, f := range fields {
			if !subscriptionaddon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscriptionaddon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sauo.mutation.Status(); ok {
		_spec.SetField(subscriptionaddon.FieldStatus, field.TypeString, value)
	}
	if value, ok := sauo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionaddon.FieldUpdatedAt, field.TypeTime, value)
	}
	if sauo.mutation.CreatedByCleared() {
		_spec.ClearField(subscriptionaddon.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sauo.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionaddon.FieldUpdatedBy, field.TypeString, value)
	}
	if sauo.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriptionaddon.FieldUpdatedBy, field.TypeString)
	}
	if sauo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(subscriptionaddon.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := sauo.mutation.StartDate(); ok {
		_spec.SetField(subscriptionaddon.FieldStartDate, field.TypeTime, value)
	}
	if sauo.mutation.StartDateCleared() {
		_spec.ClearField(subscriptionaddon.FieldStartDate, field.TypeTime)
	}
	if value, ok := sauo.mutation.EndDate(); ok {
		_spec.SetField(subscriptionaddon.FieldEndDate, field.TypeTime, value)
	}
	if sauo.mutation.EndDateCleared() {
		_spec.ClearField(subscriptionaddon.FieldEndDate, field.TypeTime)
	}
	if value, ok := sauo.mutation.AddonStatus(); ok {
		_spec.SetField(subscriptionaddon.FieldAddonStatus, field.TypeString, value)
	}
	if value, ok := sauo.mutation.CancellationReason(); ok {
		_spec.SetField(subscriptionaddon.FieldCancellationReason, field.TypeString, value)
	}
	if sauo.mutation.CancellationReasonCleared() {
		_spec.ClearField(subscriptionaddon.FieldCancellationReason, field.TypeString)
	}
	if value, ok := sauo.mutation.CancelledAt(); ok {
		_spec.SetField(subscriptionaddon.FieldCancelledAt, field.TypeTime, value)
	}
	if sauo.mutation.CancelledAtCleared() {
		_spec.ClearField(subscriptionaddon.FieldCancelledAt, field.TypeTime)
	}
	if value, ok := sauo.mutation.Metadata(); ok {
		_spec.SetField(subscriptionaddon.FieldMetadata, field.TypeJSON, value)
	}
	if sauo.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionaddon.FieldMetadata, field.TypeJSON)
	}
	_node = &SubscriptionAddon{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionaddon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauo.mutation.done = true
	return _node, nil
}
