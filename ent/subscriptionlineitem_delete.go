// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscriptionlineitem"
)

// SubscriptionLineItemDelete is the builder for deleting a SubscriptionLineItem entity.
type SubscriptionLineItemDelete struct {
	config
	hooks    []Hook
	mutation *SubscriptionLineItemMutation
}

// Where appends a list predicates to the SubscriptionLineItemDelete builder.
func (slid *SubscriptionLineItemDelete) Where(ps ...predicate.SubscriptionLineItem) *SubscriptionLineItemDelete {
	slid.mutation.Where(ps...)
	return slid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (slid *SubscriptionLineItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, slid.sqlExec, slid.mutation, slid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (slid *SubscriptionLineItemDelete) ExecX(ctx context.Context) int {
	n, err := slid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (slid *SubscriptionLineItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(subscriptionlineitem.Table, sqlgraph.NewFieldSpec(subscriptionlineitem.FieldID, field.TypeString))
	if ps := slid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, slid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	slid.mutation.done = true
	return affected, err
}

// SubscriptionLineItemDeleteOne is the builder for deleting a single SubscriptionLineItem entity.
type SubscriptionLineItemDeleteOne struct {
	slid *SubscriptionLineItemDelete
}

// Where appends a list predicates to the SubscriptionLineItemDelete builder.
func (slido *SubscriptionLineItemDeleteOne) Where(ps ...predicate.SubscriptionLineItem) *SubscriptionLineItemDeleteOne {
	slido.slid.mutation.Where(ps...)
	return slido
}

// Exec executes the deletion query.
func (slido *SubscriptionLineItemDeleteOne) Exec(ctx context.Context) error {
	n, err := slido.slid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{subscriptionlineitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (slido *SubscriptionLineItemDeleteOne) ExecX(ctx context.Context) {
	if err := slido.Exec(ctx); err != nil {
		panic(err)
	}
}
