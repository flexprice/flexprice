// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionpause"
)

// SubscriptionPause is the model entity for the SubscriptionPause schema.
type SubscriptionPause struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID string `json:"subscription_id,omitempty"`
	// PauseStatus holds the value of the "pause_status" field.
	PauseStatus string `json:"pause_status,omitempty"`
	// PauseMode holds the value of the "pause_mode" field.
	PauseMode string `json:"pause_mode,omitempty"`
	// ResumeMode holds the value of the "resume_mode" field.
	ResumeMode string `json:"resume_mode,omitempty"`
	// PauseStart holds the value of the "pause_start" field.
	PauseStart time.Time `json:"pause_start,omitempty"`
	// PauseEnd holds the value of the "pause_end" field.
	PauseEnd *time.Time `json:"pause_end,omitempty"`
	// ResumedAt holds the value of the "resumed_at" field.
	ResumedAt *time.Time `json:"resumed_at,omitempty"`
	// OriginalPeriodStart holds the value of the "original_period_start" field.
	OriginalPeriodStart time.Time `json:"original_period_start,omitempty"`
	// OriginalPeriodEnd holds the value of the "original_period_end" field.
	OriginalPeriodEnd time.Time `json:"original_period_end,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionPauseQuery when eager-loading is set.
	Edges        SubscriptionPauseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubscriptionPauseEdges holds the relations/edges for other nodes in the graph.
type SubscriptionPauseEdges struct {
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionPauseEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.Subscription != nil {
		return e.Subscription, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: subscription.Label}
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionPause) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionpause.FieldMetadata:
			values[i] = new([]byte)
		case subscriptionpause.FieldID, subscriptionpause.FieldTenantID, subscriptionpause.FieldStatus, subscriptionpause.FieldCreatedBy, subscriptionpause.FieldUpdatedBy, subscriptionpause.FieldEnvironmentID, subscriptionpause.FieldSubscriptionID, subscriptionpause.FieldPauseStatus, subscriptionpause.FieldPauseMode, subscriptionpause.FieldResumeMode, subscriptionpause.FieldReason:
			values[i] = new(sql.NullString)
		case subscriptionpause.FieldCreatedAt, subscriptionpause.FieldUpdatedAt, subscriptionpause.FieldPauseStart, subscriptionpause.FieldPauseEnd, subscriptionpause.FieldResumedAt, subscriptionpause.FieldOriginalPeriodStart, subscriptionpause.FieldOriginalPeriodEnd:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionPause fields.
func (sp *SubscriptionPause) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionpause.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sp.ID = value.String
			}
		case subscriptionpause.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				sp.TenantID = value.String
			}
		case subscriptionpause.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sp.Status = value.String
			}
		case subscriptionpause.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case subscriptionpause.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sp.UpdatedAt = value.Time
			}
		case subscriptionpause.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sp.CreatedBy = value.String
			}
		case subscriptionpause.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sp.UpdatedBy = value.String
			}
		case subscriptionpause.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				sp.EnvironmentID = value.String
			}
		case subscriptionpause.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				sp.SubscriptionID = value.String
			}
		case subscriptionpause.FieldPauseStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pause_status", values[i])
			} else if value.Valid {
				sp.PauseStatus = value.String
			}
		case subscriptionpause.FieldPauseMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pause_mode", values[i])
			} else if value.Valid {
				sp.PauseMode = value.String
			}
		case subscriptionpause.FieldResumeMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resume_mode", values[i])
			} else if value.Valid {
				sp.ResumeMode = value.String
			}
		case subscriptionpause.FieldPauseStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pause_start", values[i])
			} else if value.Valid {
				sp.PauseStart = value.Time
			}
		case subscriptionpause.FieldPauseEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pause_end", values[i])
			} else if value.Valid {
				sp.PauseEnd = new(time.Time)
				*sp.PauseEnd = value.Time
			}
		case subscriptionpause.FieldResumedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field resumed_at", values[i])
			} else if value.Valid {
				sp.ResumedAt = new(time.Time)
				*sp.ResumedAt = value.Time
			}
		case subscriptionpause.FieldOriginalPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field original_period_start", values[i])
			} else if value.Valid {
				sp.OriginalPeriodStart = value.Time
			}
		case subscriptionpause.FieldOriginalPeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field original_period_end", values[i])
			} else if value.Valid {
				sp.OriginalPeriodEnd = value.Time
			}
		case subscriptionpause.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				sp.Reason = value.String
			}
		case subscriptionpause.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sp.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionPause.
// This includes values selected through modifiers, order, etc.
func (sp *SubscriptionPause) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// QuerySubscription queries the "subscription" edge of the SubscriptionPause entity.
func (sp *SubscriptionPause) QuerySubscription() *SubscriptionQuery {
	return NewSubscriptionPauseClient(sp.config).QuerySubscription(sp)
}

// Update returns a builder for updating this SubscriptionPause.
// Note that you need to call SubscriptionPause.Unwrap() before calling this method if this SubscriptionPause
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SubscriptionPause) Update() *SubscriptionPauseUpdateOne {
	return NewSubscriptionPauseClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the SubscriptionPause entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SubscriptionPause) Unwrap() *SubscriptionPause {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubscriptionPause is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SubscriptionPause) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionPause(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(sp.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(sp.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sp.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sp.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(sp.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(sp.SubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("pause_status=")
	builder.WriteString(sp.PauseStatus)
	builder.WriteString(", ")
	builder.WriteString("pause_mode=")
	builder.WriteString(sp.PauseMode)
	builder.WriteString(", ")
	builder.WriteString("resume_mode=")
	builder.WriteString(sp.ResumeMode)
	builder.WriteString(", ")
	builder.WriteString("pause_start=")
	builder.WriteString(sp.PauseStart.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sp.PauseEnd; v != nil {
		builder.WriteString("pause_end=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := sp.ResumedAt; v != nil {
		builder.WriteString("resumed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("original_period_start=")
	builder.WriteString(sp.OriginalPeriodStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("original_period_end=")
	builder.WriteString(sp.OriginalPeriodEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(sp.Reason)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", sp.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionPauses is a parsable slice of SubscriptionPause.
type SubscriptionPauses []*SubscriptionPause
