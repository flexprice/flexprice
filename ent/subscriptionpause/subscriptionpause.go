// Code generated by ent, DO NOT EDIT.

package subscriptionpause

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subscriptionpause type in the database.
	Label = "subscription_pause"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldSubscriptionID holds the string denoting the subscription_id field in the database.
	FieldSubscriptionID = "subscription_id"
	// FieldPauseStatus holds the string denoting the pause_status field in the database.
	FieldPauseStatus = "pause_status"
	// FieldPauseMode holds the string denoting the pause_mode field in the database.
	FieldPauseMode = "pause_mode"
	// FieldResumeMode holds the string denoting the resume_mode field in the database.
	FieldResumeMode = "resume_mode"
	// FieldPauseStart holds the string denoting the pause_start field in the database.
	FieldPauseStart = "pause_start"
	// FieldPauseEnd holds the string denoting the pause_end field in the database.
	FieldPauseEnd = "pause_end"
	// FieldResumedAt holds the string denoting the resumed_at field in the database.
	FieldResumedAt = "resumed_at"
	// FieldOriginalPeriodStart holds the string denoting the original_period_start field in the database.
	FieldOriginalPeriodStart = "original_period_start"
	// FieldOriginalPeriodEnd holds the string denoting the original_period_end field in the database.
	FieldOriginalPeriodEnd = "original_period_end"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeSubscription holds the string denoting the subscription edge name in mutations.
	EdgeSubscription = "subscription"
	// Table holds the table name of the subscriptionpause in the database.
	Table = "subscription_pauses"
	// SubscriptionTable is the table that holds the subscription relation/edge.
	SubscriptionTable = "subscription_pauses"
	// SubscriptionInverseTable is the table name for the Subscription entity.
	// It exists in this package in order to avoid circular dependency with the "subscription" package.
	SubscriptionInverseTable = "subscriptions"
	// SubscriptionColumn is the table column denoting the subscription relation/edge.
	SubscriptionColumn = "subscription_id"
)

// Columns holds all SQL columns for subscriptionpause fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldSubscriptionID,
	FieldPauseStatus,
	FieldPauseMode,
	FieldResumeMode,
	FieldPauseStart,
	FieldPauseEnd,
	FieldResumedAt,
	FieldOriginalPeriodStart,
	FieldOriginalPeriodEnd,
	FieldReason,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// SubscriptionIDValidator is a validator for the "subscription_id" field. It is called by the builders before save.
	SubscriptionIDValidator func(string) error
	// PauseStatusValidator is a validator for the "pause_status" field. It is called by the builders before save.
	PauseStatusValidator func(string) error
	// DefaultPauseMode holds the default value on creation for the "pause_mode" field.
	DefaultPauseMode string
	// PauseModeValidator is a validator for the "pause_mode" field. It is called by the builders before save.
	PauseModeValidator func(string) error
	// DefaultPauseStart holds the default value on creation for the "pause_start" field.
	DefaultPauseStart func() time.Time
	// DefaultOriginalPeriodStart holds the default value on creation for the "original_period_start" field.
	DefaultOriginalPeriodStart func() time.Time
	// DefaultOriginalPeriodEnd holds the default value on creation for the "original_period_end" field.
	DefaultOriginalPeriodEnd func() time.Time
)

// OrderOption defines the ordering options for the SubscriptionPause queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// BySubscriptionID orders the results by the subscription_id field.
func BySubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionID, opts...).ToFunc()
}

// ByPauseStatus orders the results by the pause_status field.
func ByPauseStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPauseStatus, opts...).ToFunc()
}

// ByPauseMode orders the results by the pause_mode field.
func ByPauseMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPauseMode, opts...).ToFunc()
}

// ByResumeMode orders the results by the resume_mode field.
func ByResumeMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResumeMode, opts...).ToFunc()
}

// ByPauseStart orders the results by the pause_start field.
func ByPauseStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPauseStart, opts...).ToFunc()
}

// ByPauseEnd orders the results by the pause_end field.
func ByPauseEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPauseEnd, opts...).ToFunc()
}

// ByResumedAt orders the results by the resumed_at field.
func ByResumedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResumedAt, opts...).ToFunc()
}

// ByOriginalPeriodStart orders the results by the original_period_start field.
func ByOriginalPeriodStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalPeriodStart, opts...).ToFunc()
}

// ByOriginalPeriodEnd orders the results by the original_period_end field.
func ByOriginalPeriodEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalPeriodEnd, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// BySubscriptionField orders the results by subscription field.
func BySubscriptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionStep(), sql.OrderByField(field, opts...))
	}
}
func newSubscriptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
	)
}
