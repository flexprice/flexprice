// Code generated by ent, DO NOT EDIT.

package subscriptionpause

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldUpdatedBy, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldEnvironmentID, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldSubscriptionID, v))
}

// PauseStatus applies equality check predicate on the "pause_status" field. It's identical to PauseStatusEQ.
func PauseStatus(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldPauseStatus, v))
}

// PauseMode applies equality check predicate on the "pause_mode" field. It's identical to PauseModeEQ.
func PauseMode(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldPauseMode, v))
}

// ResumeMode applies equality check predicate on the "resume_mode" field. It's identical to ResumeModeEQ.
func ResumeMode(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldResumeMode, v))
}

// PauseStart applies equality check predicate on the "pause_start" field. It's identical to PauseStartEQ.
func PauseStart(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldPauseStart, v))
}

// PauseEnd applies equality check predicate on the "pause_end" field. It's identical to PauseEndEQ.
func PauseEnd(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldPauseEnd, v))
}

// ResumedAt applies equality check predicate on the "resumed_at" field. It's identical to ResumedAtEQ.
func ResumedAt(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldResumedAt, v))
}

// OriginalPeriodStart applies equality check predicate on the "original_period_start" field. It's identical to OriginalPeriodStartEQ.
func OriginalPeriodStart(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldOriginalPeriodStart, v))
}

// OriginalPeriodEnd applies equality check predicate on the "original_period_end" field. It's identical to OriginalPeriodEndEQ.
func OriginalPeriodEnd(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldOriginalPeriodEnd, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldReason, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContains(FieldEnvironmentID, v))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasPrefix(FieldEnvironmentID, v))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasSuffix(FieldEnvironmentID, v))
}

// EnvironmentIDIsNil applies the IsNil predicate on the "environment_id" field.
func EnvironmentIDIsNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIsNull(FieldEnvironmentID))
}

// EnvironmentIDNotNil applies the NotNil predicate on the "environment_id" field.
func EnvironmentIDNotNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotNull(FieldEnvironmentID))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEqualFold(FieldEnvironmentID, v))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContainsFold(FieldEnvironmentID, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// PauseStatusEQ applies the EQ predicate on the "pause_status" field.
func PauseStatusEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldPauseStatus, v))
}

// PauseStatusNEQ applies the NEQ predicate on the "pause_status" field.
func PauseStatusNEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldPauseStatus, v))
}

// PauseStatusIn applies the In predicate on the "pause_status" field.
func PauseStatusIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldPauseStatus, vs...))
}

// PauseStatusNotIn applies the NotIn predicate on the "pause_status" field.
func PauseStatusNotIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldPauseStatus, vs...))
}

// PauseStatusGT applies the GT predicate on the "pause_status" field.
func PauseStatusGT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldPauseStatus, v))
}

// PauseStatusGTE applies the GTE predicate on the "pause_status" field.
func PauseStatusGTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldPauseStatus, v))
}

// PauseStatusLT applies the LT predicate on the "pause_status" field.
func PauseStatusLT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldPauseStatus, v))
}

// PauseStatusLTE applies the LTE predicate on the "pause_status" field.
func PauseStatusLTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldPauseStatus, v))
}

// PauseStatusContains applies the Contains predicate on the "pause_status" field.
func PauseStatusContains(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContains(FieldPauseStatus, v))
}

// PauseStatusHasPrefix applies the HasPrefix predicate on the "pause_status" field.
func PauseStatusHasPrefix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasPrefix(FieldPauseStatus, v))
}

// PauseStatusHasSuffix applies the HasSuffix predicate on the "pause_status" field.
func PauseStatusHasSuffix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasSuffix(FieldPauseStatus, v))
}

// PauseStatusEqualFold applies the EqualFold predicate on the "pause_status" field.
func PauseStatusEqualFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEqualFold(FieldPauseStatus, v))
}

// PauseStatusContainsFold applies the ContainsFold predicate on the "pause_status" field.
func PauseStatusContainsFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContainsFold(FieldPauseStatus, v))
}

// PauseModeEQ applies the EQ predicate on the "pause_mode" field.
func PauseModeEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldPauseMode, v))
}

// PauseModeNEQ applies the NEQ predicate on the "pause_mode" field.
func PauseModeNEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldPauseMode, v))
}

// PauseModeIn applies the In predicate on the "pause_mode" field.
func PauseModeIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldPauseMode, vs...))
}

// PauseModeNotIn applies the NotIn predicate on the "pause_mode" field.
func PauseModeNotIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldPauseMode, vs...))
}

// PauseModeGT applies the GT predicate on the "pause_mode" field.
func PauseModeGT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldPauseMode, v))
}

// PauseModeGTE applies the GTE predicate on the "pause_mode" field.
func PauseModeGTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldPauseMode, v))
}

// PauseModeLT applies the LT predicate on the "pause_mode" field.
func PauseModeLT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldPauseMode, v))
}

// PauseModeLTE applies the LTE predicate on the "pause_mode" field.
func PauseModeLTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldPauseMode, v))
}

// PauseModeContains applies the Contains predicate on the "pause_mode" field.
func PauseModeContains(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContains(FieldPauseMode, v))
}

// PauseModeHasPrefix applies the HasPrefix predicate on the "pause_mode" field.
func PauseModeHasPrefix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasPrefix(FieldPauseMode, v))
}

// PauseModeHasSuffix applies the HasSuffix predicate on the "pause_mode" field.
func PauseModeHasSuffix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasSuffix(FieldPauseMode, v))
}

// PauseModeEqualFold applies the EqualFold predicate on the "pause_mode" field.
func PauseModeEqualFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEqualFold(FieldPauseMode, v))
}

// PauseModeContainsFold applies the ContainsFold predicate on the "pause_mode" field.
func PauseModeContainsFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContainsFold(FieldPauseMode, v))
}

// ResumeModeEQ applies the EQ predicate on the "resume_mode" field.
func ResumeModeEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldResumeMode, v))
}

// ResumeModeNEQ applies the NEQ predicate on the "resume_mode" field.
func ResumeModeNEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldResumeMode, v))
}

// ResumeModeIn applies the In predicate on the "resume_mode" field.
func ResumeModeIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldResumeMode, vs...))
}

// ResumeModeNotIn applies the NotIn predicate on the "resume_mode" field.
func ResumeModeNotIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldResumeMode, vs...))
}

// ResumeModeGT applies the GT predicate on the "resume_mode" field.
func ResumeModeGT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldResumeMode, v))
}

// ResumeModeGTE applies the GTE predicate on the "resume_mode" field.
func ResumeModeGTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldResumeMode, v))
}

// ResumeModeLT applies the LT predicate on the "resume_mode" field.
func ResumeModeLT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldResumeMode, v))
}

// ResumeModeLTE applies the LTE predicate on the "resume_mode" field.
func ResumeModeLTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldResumeMode, v))
}

// ResumeModeContains applies the Contains predicate on the "resume_mode" field.
func ResumeModeContains(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContains(FieldResumeMode, v))
}

// ResumeModeHasPrefix applies the HasPrefix predicate on the "resume_mode" field.
func ResumeModeHasPrefix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasPrefix(FieldResumeMode, v))
}

// ResumeModeHasSuffix applies the HasSuffix predicate on the "resume_mode" field.
func ResumeModeHasSuffix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasSuffix(FieldResumeMode, v))
}

// ResumeModeIsNil applies the IsNil predicate on the "resume_mode" field.
func ResumeModeIsNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIsNull(FieldResumeMode))
}

// ResumeModeNotNil applies the NotNil predicate on the "resume_mode" field.
func ResumeModeNotNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotNull(FieldResumeMode))
}

// ResumeModeEqualFold applies the EqualFold predicate on the "resume_mode" field.
func ResumeModeEqualFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEqualFold(FieldResumeMode, v))
}

// ResumeModeContainsFold applies the ContainsFold predicate on the "resume_mode" field.
func ResumeModeContainsFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContainsFold(FieldResumeMode, v))
}

// PauseStartEQ applies the EQ predicate on the "pause_start" field.
func PauseStartEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldPauseStart, v))
}

// PauseStartNEQ applies the NEQ predicate on the "pause_start" field.
func PauseStartNEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldPauseStart, v))
}

// PauseStartIn applies the In predicate on the "pause_start" field.
func PauseStartIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldPauseStart, vs...))
}

// PauseStartNotIn applies the NotIn predicate on the "pause_start" field.
func PauseStartNotIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldPauseStart, vs...))
}

// PauseStartGT applies the GT predicate on the "pause_start" field.
func PauseStartGT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldPauseStart, v))
}

// PauseStartGTE applies the GTE predicate on the "pause_start" field.
func PauseStartGTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldPauseStart, v))
}

// PauseStartLT applies the LT predicate on the "pause_start" field.
func PauseStartLT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldPauseStart, v))
}

// PauseStartLTE applies the LTE predicate on the "pause_start" field.
func PauseStartLTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldPauseStart, v))
}

// PauseEndEQ applies the EQ predicate on the "pause_end" field.
func PauseEndEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldPauseEnd, v))
}

// PauseEndNEQ applies the NEQ predicate on the "pause_end" field.
func PauseEndNEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldPauseEnd, v))
}

// PauseEndIn applies the In predicate on the "pause_end" field.
func PauseEndIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldPauseEnd, vs...))
}

// PauseEndNotIn applies the NotIn predicate on the "pause_end" field.
func PauseEndNotIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldPauseEnd, vs...))
}

// PauseEndGT applies the GT predicate on the "pause_end" field.
func PauseEndGT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldPauseEnd, v))
}

// PauseEndGTE applies the GTE predicate on the "pause_end" field.
func PauseEndGTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldPauseEnd, v))
}

// PauseEndLT applies the LT predicate on the "pause_end" field.
func PauseEndLT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldPauseEnd, v))
}

// PauseEndLTE applies the LTE predicate on the "pause_end" field.
func PauseEndLTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldPauseEnd, v))
}

// PauseEndIsNil applies the IsNil predicate on the "pause_end" field.
func PauseEndIsNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIsNull(FieldPauseEnd))
}

// PauseEndNotNil applies the NotNil predicate on the "pause_end" field.
func PauseEndNotNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotNull(FieldPauseEnd))
}

// ResumedAtEQ applies the EQ predicate on the "resumed_at" field.
func ResumedAtEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldResumedAt, v))
}

// ResumedAtNEQ applies the NEQ predicate on the "resumed_at" field.
func ResumedAtNEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldResumedAt, v))
}

// ResumedAtIn applies the In predicate on the "resumed_at" field.
func ResumedAtIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldResumedAt, vs...))
}

// ResumedAtNotIn applies the NotIn predicate on the "resumed_at" field.
func ResumedAtNotIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldResumedAt, vs...))
}

// ResumedAtGT applies the GT predicate on the "resumed_at" field.
func ResumedAtGT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldResumedAt, v))
}

// ResumedAtGTE applies the GTE predicate on the "resumed_at" field.
func ResumedAtGTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldResumedAt, v))
}

// ResumedAtLT applies the LT predicate on the "resumed_at" field.
func ResumedAtLT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldResumedAt, v))
}

// ResumedAtLTE applies the LTE predicate on the "resumed_at" field.
func ResumedAtLTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldResumedAt, v))
}

// ResumedAtIsNil applies the IsNil predicate on the "resumed_at" field.
func ResumedAtIsNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIsNull(FieldResumedAt))
}

// ResumedAtNotNil applies the NotNil predicate on the "resumed_at" field.
func ResumedAtNotNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotNull(FieldResumedAt))
}

// OriginalPeriodStartEQ applies the EQ predicate on the "original_period_start" field.
func OriginalPeriodStartEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldOriginalPeriodStart, v))
}

// OriginalPeriodStartNEQ applies the NEQ predicate on the "original_period_start" field.
func OriginalPeriodStartNEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldOriginalPeriodStart, v))
}

// OriginalPeriodStartIn applies the In predicate on the "original_period_start" field.
func OriginalPeriodStartIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldOriginalPeriodStart, vs...))
}

// OriginalPeriodStartNotIn applies the NotIn predicate on the "original_period_start" field.
func OriginalPeriodStartNotIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldOriginalPeriodStart, vs...))
}

// OriginalPeriodStartGT applies the GT predicate on the "original_period_start" field.
func OriginalPeriodStartGT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldOriginalPeriodStart, v))
}

// OriginalPeriodStartGTE applies the GTE predicate on the "original_period_start" field.
func OriginalPeriodStartGTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldOriginalPeriodStart, v))
}

// OriginalPeriodStartLT applies the LT predicate on the "original_period_start" field.
func OriginalPeriodStartLT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldOriginalPeriodStart, v))
}

// OriginalPeriodStartLTE applies the LTE predicate on the "original_period_start" field.
func OriginalPeriodStartLTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldOriginalPeriodStart, v))
}

// OriginalPeriodEndEQ applies the EQ predicate on the "original_period_end" field.
func OriginalPeriodEndEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldOriginalPeriodEnd, v))
}

// OriginalPeriodEndNEQ applies the NEQ predicate on the "original_period_end" field.
func OriginalPeriodEndNEQ(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldOriginalPeriodEnd, v))
}

// OriginalPeriodEndIn applies the In predicate on the "original_period_end" field.
func OriginalPeriodEndIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldOriginalPeriodEnd, vs...))
}

// OriginalPeriodEndNotIn applies the NotIn predicate on the "original_period_end" field.
func OriginalPeriodEndNotIn(vs ...time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldOriginalPeriodEnd, vs...))
}

// OriginalPeriodEndGT applies the GT predicate on the "original_period_end" field.
func OriginalPeriodEndGT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldOriginalPeriodEnd, v))
}

// OriginalPeriodEndGTE applies the GTE predicate on the "original_period_end" field.
func OriginalPeriodEndGTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldOriginalPeriodEnd, v))
}

// OriginalPeriodEndLT applies the LT predicate on the "original_period_end" field.
func OriginalPeriodEndLT(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldOriginalPeriodEnd, v))
}

// OriginalPeriodEndLTE applies the LTE predicate on the "original_period_end" field.
func OriginalPeriodEndLTE(v time.Time) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldOriginalPeriodEnd, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldContainsFold(FieldReason, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.FieldNotNull(FieldMetadata))
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.SubscriptionPause {
	return predicate.SubscriptionPause(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.Subscription) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubscriptionPause) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubscriptionPause) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubscriptionPause) predicate.SubscriptionPause {
	return predicate.SubscriptionPause(sql.NotPredicates(p))
}
