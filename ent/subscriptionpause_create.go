// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionpause"
)

// SubscriptionPauseCreate is the builder for creating a SubscriptionPause entity.
type SubscriptionPauseCreate struct {
	config
	mutation *SubscriptionPauseMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (spc *SubscriptionPauseCreate) SetTenantID(s string) *SubscriptionPauseCreate {
	spc.mutation.SetTenantID(s)
	return spc
}

// SetStatus sets the "status" field.
func (spc *SubscriptionPauseCreate) SetStatus(s string) *SubscriptionPauseCreate {
	spc.mutation.SetStatus(s)
	return spc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillableStatus(s *string) *SubscriptionPauseCreate {
	if s != nil {
		spc.SetStatus(*s)
	}
	return spc
}

// SetCreatedAt sets the "created_at" field.
func (spc *SubscriptionPauseCreate) SetCreatedAt(t time.Time) *SubscriptionPauseCreate {
	spc.mutation.SetCreatedAt(t)
	return spc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillableCreatedAt(t *time.Time) *SubscriptionPauseCreate {
	if t != nil {
		spc.SetCreatedAt(*t)
	}
	return spc
}

// SetUpdatedAt sets the "updated_at" field.
func (spc *SubscriptionPauseCreate) SetUpdatedAt(t time.Time) *SubscriptionPauseCreate {
	spc.mutation.SetUpdatedAt(t)
	return spc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillableUpdatedAt(t *time.Time) *SubscriptionPauseCreate {
	if t != nil {
		spc.SetUpdatedAt(*t)
	}
	return spc
}

// SetCreatedBy sets the "created_by" field.
func (spc *SubscriptionPauseCreate) SetCreatedBy(s string) *SubscriptionPauseCreate {
	spc.mutation.SetCreatedBy(s)
	return spc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillableCreatedBy(s *string) *SubscriptionPauseCreate {
	if s != nil {
		spc.SetCreatedBy(*s)
	}
	return spc
}

// SetUpdatedBy sets the "updated_by" field.
func (spc *SubscriptionPauseCreate) SetUpdatedBy(s string) *SubscriptionPauseCreate {
	spc.mutation.SetUpdatedBy(s)
	return spc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillableUpdatedBy(s *string) *SubscriptionPauseCreate {
	if s != nil {
		spc.SetUpdatedBy(*s)
	}
	return spc
}

// SetEnvironmentID sets the "environment_id" field.
func (spc *SubscriptionPauseCreate) SetEnvironmentID(s string) *SubscriptionPauseCreate {
	spc.mutation.SetEnvironmentID(s)
	return spc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillableEnvironmentID(s *string) *SubscriptionPauseCreate {
	if s != nil {
		spc.SetEnvironmentID(*s)
	}
	return spc
}

// SetSubscriptionID sets the "subscription_id" field.
func (spc *SubscriptionPauseCreate) SetSubscriptionID(s string) *SubscriptionPauseCreate {
	spc.mutation.SetSubscriptionID(s)
	return spc
}

// SetPauseStatus sets the "pause_status" field.
func (spc *SubscriptionPauseCreate) SetPauseStatus(s string) *SubscriptionPauseCreate {
	spc.mutation.SetPauseStatus(s)
	return spc
}

// SetPauseMode sets the "pause_mode" field.
func (spc *SubscriptionPauseCreate) SetPauseMode(s string) *SubscriptionPauseCreate {
	spc.mutation.SetPauseMode(s)
	return spc
}

// SetNillablePauseMode sets the "pause_mode" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillablePauseMode(s *string) *SubscriptionPauseCreate {
	if s != nil {
		spc.SetPauseMode(*s)
	}
	return spc
}

// SetResumeMode sets the "resume_mode" field.
func (spc *SubscriptionPauseCreate) SetResumeMode(s string) *SubscriptionPauseCreate {
	spc.mutation.SetResumeMode(s)
	return spc
}

// SetNillableResumeMode sets the "resume_mode" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillableResumeMode(s *string) *SubscriptionPauseCreate {
	if s != nil {
		spc.SetResumeMode(*s)
	}
	return spc
}

// SetPauseStart sets the "pause_start" field.
func (spc *SubscriptionPauseCreate) SetPauseStart(t time.Time) *SubscriptionPauseCreate {
	spc.mutation.SetPauseStart(t)
	return spc
}

// SetNillablePauseStart sets the "pause_start" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillablePauseStart(t *time.Time) *SubscriptionPauseCreate {
	if t != nil {
		spc.SetPauseStart(*t)
	}
	return spc
}

// SetPauseEnd sets the "pause_end" field.
func (spc *SubscriptionPauseCreate) SetPauseEnd(t time.Time) *SubscriptionPauseCreate {
	spc.mutation.SetPauseEnd(t)
	return spc
}

// SetNillablePauseEnd sets the "pause_end" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillablePauseEnd(t *time.Time) *SubscriptionPauseCreate {
	if t != nil {
		spc.SetPauseEnd(*t)
	}
	return spc
}

// SetResumedAt sets the "resumed_at" field.
func (spc *SubscriptionPauseCreate) SetResumedAt(t time.Time) *SubscriptionPauseCreate {
	spc.mutation.SetResumedAt(t)
	return spc
}

// SetNillableResumedAt sets the "resumed_at" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillableResumedAt(t *time.Time) *SubscriptionPauseCreate {
	if t != nil {
		spc.SetResumedAt(*t)
	}
	return spc
}

// SetOriginalPeriodStart sets the "original_period_start" field.
func (spc *SubscriptionPauseCreate) SetOriginalPeriodStart(t time.Time) *SubscriptionPauseCreate {
	spc.mutation.SetOriginalPeriodStart(t)
	return spc
}

// SetNillableOriginalPeriodStart sets the "original_period_start" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillableOriginalPeriodStart(t *time.Time) *SubscriptionPauseCreate {
	if t != nil {
		spc.SetOriginalPeriodStart(*t)
	}
	return spc
}

// SetOriginalPeriodEnd sets the "original_period_end" field.
func (spc *SubscriptionPauseCreate) SetOriginalPeriodEnd(t time.Time) *SubscriptionPauseCreate {
	spc.mutation.SetOriginalPeriodEnd(t)
	return spc
}

// SetNillableOriginalPeriodEnd sets the "original_period_end" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillableOriginalPeriodEnd(t *time.Time) *SubscriptionPauseCreate {
	if t != nil {
		spc.SetOriginalPeriodEnd(*t)
	}
	return spc
}

// SetReason sets the "reason" field.
func (spc *SubscriptionPauseCreate) SetReason(s string) *SubscriptionPauseCreate {
	spc.mutation.SetReason(s)
	return spc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (spc *SubscriptionPauseCreate) SetNillableReason(s *string) *SubscriptionPauseCreate {
	if s != nil {
		spc.SetReason(*s)
	}
	return spc
}

// SetMetadata sets the "metadata" field.
func (spc *SubscriptionPauseCreate) SetMetadata(m map[string]string) *SubscriptionPauseCreate {
	spc.mutation.SetMetadata(m)
	return spc
}

// SetID sets the "id" field.
func (spc *SubscriptionPauseCreate) SetID(s string) *SubscriptionPauseCreate {
	spc.mutation.SetID(s)
	return spc
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (spc *SubscriptionPauseCreate) SetSubscription(s *Subscription) *SubscriptionPauseCreate {
	return spc.SetSubscriptionID(s.ID)
}

// Mutation returns the SubscriptionPauseMutation object of the builder.
func (spc *SubscriptionPauseCreate) Mutation() *SubscriptionPauseMutation {
	return spc.mutation
}

// Save creates the SubscriptionPause in the database.
func (spc *SubscriptionPauseCreate) Save(ctx context.Context) (*SubscriptionPause, error) {
	spc.defaults()
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SubscriptionPauseCreate) SaveX(ctx context.Context) *SubscriptionPause {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *SubscriptionPauseCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *SubscriptionPauseCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *SubscriptionPauseCreate) defaults() {
	if _, ok := spc.mutation.Status(); !ok {
		v := subscriptionpause.DefaultStatus
		spc.mutation.SetStatus(v)
	}
	if _, ok := spc.mutation.CreatedAt(); !ok {
		v := subscriptionpause.DefaultCreatedAt()
		spc.mutation.SetCreatedAt(v)
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		v := subscriptionpause.DefaultUpdatedAt()
		spc.mutation.SetUpdatedAt(v)
	}
	if _, ok := spc.mutation.EnvironmentID(); !ok {
		v := subscriptionpause.DefaultEnvironmentID
		spc.mutation.SetEnvironmentID(v)
	}
	if _, ok := spc.mutation.PauseMode(); !ok {
		v := subscriptionpause.DefaultPauseMode
		spc.mutation.SetPauseMode(v)
	}
	if _, ok := spc.mutation.PauseStart(); !ok {
		v := subscriptionpause.DefaultPauseStart()
		spc.mutation.SetPauseStart(v)
	}
	if _, ok := spc.mutation.OriginalPeriodStart(); !ok {
		v := subscriptionpause.DefaultOriginalPeriodStart()
		spc.mutation.SetOriginalPeriodStart(v)
	}
	if _, ok := spc.mutation.OriginalPeriodEnd(); !ok {
		v := subscriptionpause.DefaultOriginalPeriodEnd()
		spc.mutation.SetOriginalPeriodEnd(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *SubscriptionPauseCreate) check() error {
	if _, ok := spc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "SubscriptionPause.tenant_id"`)}
	}
	if v, ok := spc.mutation.TenantID(); ok {
		if err := subscriptionpause.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionPause.tenant_id": %w`, err)}
		}
	}
	if _, ok := spc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SubscriptionPause.status"`)}
	}
	if _, ok := spc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SubscriptionPause.created_at"`)}
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SubscriptionPause.updated_at"`)}
	}
	if _, ok := spc.mutation.SubscriptionID(); !ok {
		return &ValidationError{Name: "subscription_id", err: errors.New(`ent: missing required field "SubscriptionPause.subscription_id"`)}
	}
	if v, ok := spc.mutation.SubscriptionID(); ok {
		if err := subscriptionpause.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionPause.subscription_id": %w`, err)}
		}
	}
	if _, ok := spc.mutation.PauseStatus(); !ok {
		return &ValidationError{Name: "pause_status", err: errors.New(`ent: missing required field "SubscriptionPause.pause_status"`)}
	}
	if v, ok := spc.mutation.PauseStatus(); ok {
		if err := subscriptionpause.PauseStatusValidator(v); err != nil {
			return &ValidationError{Name: "pause_status", err: fmt.Errorf(`ent: validator failed for field "SubscriptionPause.pause_status": %w`, err)}
		}
	}
	if _, ok := spc.mutation.PauseMode(); !ok {
		return &ValidationError{Name: "pause_mode", err: errors.New(`ent: missing required field "SubscriptionPause.pause_mode"`)}
	}
	if v, ok := spc.mutation.PauseMode(); ok {
		if err := subscriptionpause.PauseModeValidator(v); err != nil {
			return &ValidationError{Name: "pause_mode", err: fmt.Errorf(`ent: validator failed for field "SubscriptionPause.pause_mode": %w`, err)}
		}
	}
	if _, ok := spc.mutation.PauseStart(); !ok {
		return &ValidationError{Name: "pause_start", err: errors.New(`ent: missing required field "SubscriptionPause.pause_start"`)}
	}
	if _, ok := spc.mutation.OriginalPeriodStart(); !ok {
		return &ValidationError{Name: "original_period_start", err: errors.New(`ent: missing required field "SubscriptionPause.original_period_start"`)}
	}
	if _, ok := spc.mutation.OriginalPeriodEnd(); !ok {
		return &ValidationError{Name: "original_period_end", err: errors.New(`ent: missing required field "SubscriptionPause.original_period_end"`)}
	}
	if len(spc.mutation.SubscriptionIDs()) == 0 {
		return &ValidationError{Name: "subscription", err: errors.New(`ent: missing required edge "SubscriptionPause.subscription"`)}
	}
	return nil
}

func (spc *SubscriptionPauseCreate) sqlSave(ctx context.Context) (*SubscriptionPause, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubscriptionPause.ID type: %T", _spec.ID.Value)
		}
	}
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *SubscriptionPauseCreate) createSpec() (*SubscriptionPause, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionPause{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionpause.Table, sqlgraph.NewFieldSpec(subscriptionpause.FieldID, field.TypeString))
	)
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := spc.mutation.TenantID(); ok {
		_spec.SetField(subscriptionpause.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := spc.mutation.Status(); ok {
		_spec.SetField(subscriptionpause.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := spc.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionpause.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := spc.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionpause.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := spc.mutation.CreatedBy(); ok {
		_spec.SetField(subscriptionpause.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := spc.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionpause.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := spc.mutation.EnvironmentID(); ok {
		_spec.SetField(subscriptionpause.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := spc.mutation.PauseStatus(); ok {
		_spec.SetField(subscriptionpause.FieldPauseStatus, field.TypeString, value)
		_node.PauseStatus = value
	}
	if value, ok := spc.mutation.PauseMode(); ok {
		_spec.SetField(subscriptionpause.FieldPauseMode, field.TypeString, value)
		_node.PauseMode = value
	}
	if value, ok := spc.mutation.ResumeMode(); ok {
		_spec.SetField(subscriptionpause.FieldResumeMode, field.TypeString, value)
		_node.ResumeMode = value
	}
	if value, ok := spc.mutation.PauseStart(); ok {
		_spec.SetField(subscriptionpause.FieldPauseStart, field.TypeTime, value)
		_node.PauseStart = value
	}
	if value, ok := spc.mutation.PauseEnd(); ok {
		_spec.SetField(subscriptionpause.FieldPauseEnd, field.TypeTime, value)
		_node.PauseEnd = &value
	}
	if value, ok := spc.mutation.ResumedAt(); ok {
		_spec.SetField(subscriptionpause.FieldResumedAt, field.TypeTime, value)
		_node.ResumedAt = &value
	}
	if value, ok := spc.mutation.OriginalPeriodStart(); ok {
		_spec.SetField(subscriptionpause.FieldOriginalPeriodStart, field.TypeTime, value)
		_node.OriginalPeriodStart = value
	}
	if value, ok := spc.mutation.OriginalPeriodEnd(); ok {
		_spec.SetField(subscriptionpause.FieldOriginalPeriodEnd, field.TypeTime, value)
		_node.OriginalPeriodEnd = value
	}
	if value, ok := spc.mutation.Reason(); ok {
		_spec.SetField(subscriptionpause.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := spc.mutation.Metadata(); ok {
		_spec.SetField(subscriptionpause.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := spc.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionpause.SubscriptionTable,
			Columns: []string{subscriptionpause.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubscriptionPauseCreateBulk is the builder for creating many SubscriptionPause entities in bulk.
type SubscriptionPauseCreateBulk struct {
	config
	err      error
	builders []*SubscriptionPauseCreate
}

// Save creates the SubscriptionPause entities in the database.
func (spcb *SubscriptionPauseCreateBulk) Save(ctx context.Context) ([]*SubscriptionPause, error) {
	if spcb.err != nil {
		return nil, spcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SubscriptionPause, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionPauseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SubscriptionPauseCreateBulk) SaveX(ctx context.Context) []*SubscriptionPause {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *SubscriptionPauseCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *SubscriptionPauseCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}
