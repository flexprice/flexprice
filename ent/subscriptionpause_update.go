// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionpause"
)

// SubscriptionPauseUpdate is the builder for updating SubscriptionPause entities.
type SubscriptionPauseUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionPauseMutation
}

// Where appends a list predicates to the SubscriptionPauseUpdate builder.
func (spu *SubscriptionPauseUpdate) Where(ps ...predicate.SubscriptionPause) *SubscriptionPauseUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetStatus sets the "status" field.
func (spu *SubscriptionPauseUpdate) SetStatus(s string) *SubscriptionPauseUpdate {
	spu.mutation.SetStatus(s)
	return spu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spu *SubscriptionPauseUpdate) SetNillableStatus(s *string) *SubscriptionPauseUpdate {
	if s != nil {
		spu.SetStatus(*s)
	}
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *SubscriptionPauseUpdate) SetUpdatedAt(t time.Time) *SubscriptionPauseUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetUpdatedBy sets the "updated_by" field.
func (spu *SubscriptionPauseUpdate) SetUpdatedBy(s string) *SubscriptionPauseUpdate {
	spu.mutation.SetUpdatedBy(s)
	return spu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spu *SubscriptionPauseUpdate) SetNillableUpdatedBy(s *string) *SubscriptionPauseUpdate {
	if s != nil {
		spu.SetUpdatedBy(*s)
	}
	return spu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spu *SubscriptionPauseUpdate) ClearUpdatedBy() *SubscriptionPauseUpdate {
	spu.mutation.ClearUpdatedBy()
	return spu
}

// SetSubscriptionID sets the "subscription_id" field.
func (spu *SubscriptionPauseUpdate) SetSubscriptionID(s string) *SubscriptionPauseUpdate {
	spu.mutation.SetSubscriptionID(s)
	return spu
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (spu *SubscriptionPauseUpdate) SetNillableSubscriptionID(s *string) *SubscriptionPauseUpdate {
	if s != nil {
		spu.SetSubscriptionID(*s)
	}
	return spu
}

// SetPauseStatus sets the "pause_status" field.
func (spu *SubscriptionPauseUpdate) SetPauseStatus(s string) *SubscriptionPauseUpdate {
	spu.mutation.SetPauseStatus(s)
	return spu
}

// SetNillablePauseStatus sets the "pause_status" field if the given value is not nil.
func (spu *SubscriptionPauseUpdate) SetNillablePauseStatus(s *string) *SubscriptionPauseUpdate {
	if s != nil {
		spu.SetPauseStatus(*s)
	}
	return spu
}

// SetPauseMode sets the "pause_mode" field.
func (spu *SubscriptionPauseUpdate) SetPauseMode(s string) *SubscriptionPauseUpdate {
	spu.mutation.SetPauseMode(s)
	return spu
}

// SetNillablePauseMode sets the "pause_mode" field if the given value is not nil.
func (spu *SubscriptionPauseUpdate) SetNillablePauseMode(s *string) *SubscriptionPauseUpdate {
	if s != nil {
		spu.SetPauseMode(*s)
	}
	return spu
}

// SetResumeMode sets the "resume_mode" field.
func (spu *SubscriptionPauseUpdate) SetResumeMode(s string) *SubscriptionPauseUpdate {
	spu.mutation.SetResumeMode(s)
	return spu
}

// SetNillableResumeMode sets the "resume_mode" field if the given value is not nil.
func (spu *SubscriptionPauseUpdate) SetNillableResumeMode(s *string) *SubscriptionPauseUpdate {
	if s != nil {
		spu.SetResumeMode(*s)
	}
	return spu
}

// ClearResumeMode clears the value of the "resume_mode" field.
func (spu *SubscriptionPauseUpdate) ClearResumeMode() *SubscriptionPauseUpdate {
	spu.mutation.ClearResumeMode()
	return spu
}

// SetPauseStart sets the "pause_start" field.
func (spu *SubscriptionPauseUpdate) SetPauseStart(t time.Time) *SubscriptionPauseUpdate {
	spu.mutation.SetPauseStart(t)
	return spu
}

// SetNillablePauseStart sets the "pause_start" field if the given value is not nil.
func (spu *SubscriptionPauseUpdate) SetNillablePauseStart(t *time.Time) *SubscriptionPauseUpdate {
	if t != nil {
		spu.SetPauseStart(*t)
	}
	return spu
}

// SetPauseEnd sets the "pause_end" field.
func (spu *SubscriptionPauseUpdate) SetPauseEnd(t time.Time) *SubscriptionPauseUpdate {
	spu.mutation.SetPauseEnd(t)
	return spu
}

// SetNillablePauseEnd sets the "pause_end" field if the given value is not nil.
func (spu *SubscriptionPauseUpdate) SetNillablePauseEnd(t *time.Time) *SubscriptionPauseUpdate {
	if t != nil {
		spu.SetPauseEnd(*t)
	}
	return spu
}

// ClearPauseEnd clears the value of the "pause_end" field.
func (spu *SubscriptionPauseUpdate) ClearPauseEnd() *SubscriptionPauseUpdate {
	spu.mutation.ClearPauseEnd()
	return spu
}

// SetResumedAt sets the "resumed_at" field.
func (spu *SubscriptionPauseUpdate) SetResumedAt(t time.Time) *SubscriptionPauseUpdate {
	spu.mutation.SetResumedAt(t)
	return spu
}

// SetNillableResumedAt sets the "resumed_at" field if the given value is not nil.
func (spu *SubscriptionPauseUpdate) SetNillableResumedAt(t *time.Time) *SubscriptionPauseUpdate {
	if t != nil {
		spu.SetResumedAt(*t)
	}
	return spu
}

// ClearResumedAt clears the value of the "resumed_at" field.
func (spu *SubscriptionPauseUpdate) ClearResumedAt() *SubscriptionPauseUpdate {
	spu.mutation.ClearResumedAt()
	return spu
}

// SetOriginalPeriodStart sets the "original_period_start" field.
func (spu *SubscriptionPauseUpdate) SetOriginalPeriodStart(t time.Time) *SubscriptionPauseUpdate {
	spu.mutation.SetOriginalPeriodStart(t)
	return spu
}

// SetNillableOriginalPeriodStart sets the "original_period_start" field if the given value is not nil.
func (spu *SubscriptionPauseUpdate) SetNillableOriginalPeriodStart(t *time.Time) *SubscriptionPauseUpdate {
	if t != nil {
		spu.SetOriginalPeriodStart(*t)
	}
	return spu
}

// SetOriginalPeriodEnd sets the "original_period_end" field.
func (spu *SubscriptionPauseUpdate) SetOriginalPeriodEnd(t time.Time) *SubscriptionPauseUpdate {
	spu.mutation.SetOriginalPeriodEnd(t)
	return spu
}

// SetNillableOriginalPeriodEnd sets the "original_period_end" field if the given value is not nil.
func (spu *SubscriptionPauseUpdate) SetNillableOriginalPeriodEnd(t *time.Time) *SubscriptionPauseUpdate {
	if t != nil {
		spu.SetOriginalPeriodEnd(*t)
	}
	return spu
}

// SetReason sets the "reason" field.
func (spu *SubscriptionPauseUpdate) SetReason(s string) *SubscriptionPauseUpdate {
	spu.mutation.SetReason(s)
	return spu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (spu *SubscriptionPauseUpdate) SetNillableReason(s *string) *SubscriptionPauseUpdate {
	if s != nil {
		spu.SetReason(*s)
	}
	return spu
}

// ClearReason clears the value of the "reason" field.
func (spu *SubscriptionPauseUpdate) ClearReason() *SubscriptionPauseUpdate {
	spu.mutation.ClearReason()
	return spu
}

// SetMetadata sets the "metadata" field.
func (spu *SubscriptionPauseUpdate) SetMetadata(m map[string]string) *SubscriptionPauseUpdate {
	spu.mutation.SetMetadata(m)
	return spu
}

// ClearMetadata clears the value of the "metadata" field.
func (spu *SubscriptionPauseUpdate) ClearMetadata() *SubscriptionPauseUpdate {
	spu.mutation.ClearMetadata()
	return spu
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (spu *SubscriptionPauseUpdate) SetSubscription(s *Subscription) *SubscriptionPauseUpdate {
	return spu.SetSubscriptionID(s.ID)
}

// Mutation returns the SubscriptionPauseMutation object of the builder.
func (spu *SubscriptionPauseUpdate) Mutation() *SubscriptionPauseMutation {
	return spu.mutation
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (spu *SubscriptionPauseUpdate) ClearSubscription() *SubscriptionPauseUpdate {
	spu.mutation.ClearSubscription()
	return spu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SubscriptionPauseUpdate) Save(ctx context.Context) (int, error) {
	spu.defaults()
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SubscriptionPauseUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SubscriptionPauseUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SubscriptionPauseUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *SubscriptionPauseUpdate) defaults() {
	if _, ok := spu.mutation.UpdatedAt(); !ok {
		v := subscriptionpause.UpdateDefaultUpdatedAt()
		spu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *SubscriptionPauseUpdate) check() error {
	if v, ok := spu.mutation.SubscriptionID(); ok {
		if err := subscriptionpause.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionPause.subscription_id": %w`, err)}
		}
	}
	if v, ok := spu.mutation.PauseStatus(); ok {
		if err := subscriptionpause.PauseStatusValidator(v); err != nil {
			return &ValidationError{Name: "pause_status", err: fmt.Errorf(`ent: validator failed for field "SubscriptionPause.pause_status": %w`, err)}
		}
	}
	if v, ok := spu.mutation.PauseMode(); ok {
		if err := subscriptionpause.PauseModeValidator(v); err != nil {
			return &ValidationError{Name: "pause_mode", err: fmt.Errorf(`ent: validator failed for field "SubscriptionPause.pause_mode": %w`, err)}
		}
	}
	if spu.mutation.SubscriptionCleared() && len(spu.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubscriptionPause.subscription"`)
	}
	return nil
}

func (spu *SubscriptionPauseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionpause.Table, subscriptionpause.Columns, sqlgraph.NewFieldSpec(subscriptionpause.FieldID, field.TypeString))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.Status(); ok {
		_spec.SetField(subscriptionpause.FieldStatus, field.TypeString, value)
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionpause.FieldUpdatedAt, field.TypeTime, value)
	}
	if spu.mutation.CreatedByCleared() {
		_spec.ClearField(subscriptionpause.FieldCreatedBy, field.TypeString)
	}
	if value, ok := spu.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionpause.FieldUpdatedBy, field.TypeString, value)
	}
	if spu.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriptionpause.FieldUpdatedBy, field.TypeString)
	}
	if spu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(subscriptionpause.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := spu.mutation.PauseStatus(); ok {
		_spec.SetField(subscriptionpause.FieldPauseStatus, field.TypeString, value)
	}
	if value, ok := spu.mutation.PauseMode(); ok {
		_spec.SetField(subscriptionpause.FieldPauseMode, field.TypeString, value)
	}
	if value, ok := spu.mutation.ResumeMode(); ok {
		_spec.SetField(subscriptionpause.FieldResumeMode, field.TypeString, value)
	}
	if spu.mutation.ResumeModeCleared() {
		_spec.ClearField(subscriptionpause.FieldResumeMode, field.TypeString)
	}
	if value, ok := spu.mutation.PauseStart(); ok {
		_spec.SetField(subscriptionpause.FieldPauseStart, field.TypeTime, value)
	}
	if value, ok := spu.mutation.PauseEnd(); ok {
		_spec.SetField(subscriptionpause.FieldPauseEnd, field.TypeTime, value)
	}
	if spu.mutation.PauseEndCleared() {
		_spec.ClearField(subscriptionpause.FieldPauseEnd, field.TypeTime)
	}
	if value, ok := spu.mutation.ResumedAt(); ok {
		_spec.SetField(subscriptionpause.FieldResumedAt, field.TypeTime, value)
	}
	if spu.mutation.ResumedAtCleared() {
		_spec.ClearField(subscriptionpause.FieldResumedAt, field.TypeTime)
	}
	if value, ok := spu.mutation.OriginalPeriodStart(); ok {
		_spec.SetField(subscriptionpause.FieldOriginalPeriodStart, field.TypeTime, value)
	}
	if value, ok := spu.mutation.OriginalPeriodEnd(); ok {
		_spec.SetField(subscriptionpause.FieldOriginalPeriodEnd, field.TypeTime, value)
	}
	if value, ok := spu.mutation.Reason(); ok {
		_spec.SetField(subscriptionpause.FieldReason, field.TypeString, value)
	}
	if spu.mutation.ReasonCleared() {
		_spec.ClearField(subscriptionpause.FieldReason, field.TypeString)
	}
	if value, ok := spu.mutation.Metadata(); ok {
		_spec.SetField(subscriptionpause.FieldMetadata, field.TypeJSON, value)
	}
	if spu.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionpause.FieldMetadata, field.TypeJSON)
	}
	if spu.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionpause.SubscriptionTable,
			Columns: []string{subscriptionpause.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionpause.SubscriptionTable,
			Columns: []string{subscriptionpause.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionpause.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// SubscriptionPauseUpdateOne is the builder for updating a single SubscriptionPause entity.
type SubscriptionPauseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionPauseMutation
}

// SetStatus sets the "status" field.
func (spuo *SubscriptionPauseUpdateOne) SetStatus(s string) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetStatus(s)
	return spuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spuo *SubscriptionPauseUpdateOne) SetNillableStatus(s *string) *SubscriptionPauseUpdateOne {
	if s != nil {
		spuo.SetStatus(*s)
	}
	return spuo
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *SubscriptionPauseUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetUpdatedBy sets the "updated_by" field.
func (spuo *SubscriptionPauseUpdateOne) SetUpdatedBy(s string) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetUpdatedBy(s)
	return spuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spuo *SubscriptionPauseUpdateOne) SetNillableUpdatedBy(s *string) *SubscriptionPauseUpdateOne {
	if s != nil {
		spuo.SetUpdatedBy(*s)
	}
	return spuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spuo *SubscriptionPauseUpdateOne) ClearUpdatedBy() *SubscriptionPauseUpdateOne {
	spuo.mutation.ClearUpdatedBy()
	return spuo
}

// SetSubscriptionID sets the "subscription_id" field.
func (spuo *SubscriptionPauseUpdateOne) SetSubscriptionID(s string) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetSubscriptionID(s)
	return spuo
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (spuo *SubscriptionPauseUpdateOne) SetNillableSubscriptionID(s *string) *SubscriptionPauseUpdateOne {
	if s != nil {
		spuo.SetSubscriptionID(*s)
	}
	return spuo
}

// SetPauseStatus sets the "pause_status" field.
func (spuo *SubscriptionPauseUpdateOne) SetPauseStatus(s string) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetPauseStatus(s)
	return spuo
}

// SetNillablePauseStatus sets the "pause_status" field if the given value is not nil.
func (spuo *SubscriptionPauseUpdateOne) SetNillablePauseStatus(s *string) *SubscriptionPauseUpdateOne {
	if s != nil {
		spuo.SetPauseStatus(*s)
	}
	return spuo
}

// SetPauseMode sets the "pause_mode" field.
func (spuo *SubscriptionPauseUpdateOne) SetPauseMode(s string) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetPauseMode(s)
	return spuo
}

// SetNillablePauseMode sets the "pause_mode" field if the given value is not nil.
func (spuo *SubscriptionPauseUpdateOne) SetNillablePauseMode(s *string) *SubscriptionPauseUpdateOne {
	if s != nil {
		spuo.SetPauseMode(*s)
	}
	return spuo
}

// SetResumeMode sets the "resume_mode" field.
func (spuo *SubscriptionPauseUpdateOne) SetResumeMode(s string) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetResumeMode(s)
	return spuo
}

// SetNillableResumeMode sets the "resume_mode" field if the given value is not nil.
func (spuo *SubscriptionPauseUpdateOne) SetNillableResumeMode(s *string) *SubscriptionPauseUpdateOne {
	if s != nil {
		spuo.SetResumeMode(*s)
	}
	return spuo
}

// ClearResumeMode clears the value of the "resume_mode" field.
func (spuo *SubscriptionPauseUpdateOne) ClearResumeMode() *SubscriptionPauseUpdateOne {
	spuo.mutation.ClearResumeMode()
	return spuo
}

// SetPauseStart sets the "pause_start" field.
func (spuo *SubscriptionPauseUpdateOne) SetPauseStart(t time.Time) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetPauseStart(t)
	return spuo
}

// SetNillablePauseStart sets the "pause_start" field if the given value is not nil.
func (spuo *SubscriptionPauseUpdateOne) SetNillablePauseStart(t *time.Time) *SubscriptionPauseUpdateOne {
	if t != nil {
		spuo.SetPauseStart(*t)
	}
	return spuo
}

// SetPauseEnd sets the "pause_end" field.
func (spuo *SubscriptionPauseUpdateOne) SetPauseEnd(t time.Time) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetPauseEnd(t)
	return spuo
}

// SetNillablePauseEnd sets the "pause_end" field if the given value is not nil.
func (spuo *SubscriptionPauseUpdateOne) SetNillablePauseEnd(t *time.Time) *SubscriptionPauseUpdateOne {
	if t != nil {
		spuo.SetPauseEnd(*t)
	}
	return spuo
}

// ClearPauseEnd clears the value of the "pause_end" field.
func (spuo *SubscriptionPauseUpdateOne) ClearPauseEnd() *SubscriptionPauseUpdateOne {
	spuo.mutation.ClearPauseEnd()
	return spuo
}

// SetResumedAt sets the "resumed_at" field.
func (spuo *SubscriptionPauseUpdateOne) SetResumedAt(t time.Time) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetResumedAt(t)
	return spuo
}

// SetNillableResumedAt sets the "resumed_at" field if the given value is not nil.
func (spuo *SubscriptionPauseUpdateOne) SetNillableResumedAt(t *time.Time) *SubscriptionPauseUpdateOne {
	if t != nil {
		spuo.SetResumedAt(*t)
	}
	return spuo
}

// ClearResumedAt clears the value of the "resumed_at" field.
func (spuo *SubscriptionPauseUpdateOne) ClearResumedAt() *SubscriptionPauseUpdateOne {
	spuo.mutation.ClearResumedAt()
	return spuo
}

// SetOriginalPeriodStart sets the "original_period_start" field.
func (spuo *SubscriptionPauseUpdateOne) SetOriginalPeriodStart(t time.Time) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetOriginalPeriodStart(t)
	return spuo
}

// SetNillableOriginalPeriodStart sets the "original_period_start" field if the given value is not nil.
func (spuo *SubscriptionPauseUpdateOne) SetNillableOriginalPeriodStart(t *time.Time) *SubscriptionPauseUpdateOne {
	if t != nil {
		spuo.SetOriginalPeriodStart(*t)
	}
	return spuo
}

// SetOriginalPeriodEnd sets the "original_period_end" field.
func (spuo *SubscriptionPauseUpdateOne) SetOriginalPeriodEnd(t time.Time) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetOriginalPeriodEnd(t)
	return spuo
}

// SetNillableOriginalPeriodEnd sets the "original_period_end" field if the given value is not nil.
func (spuo *SubscriptionPauseUpdateOne) SetNillableOriginalPeriodEnd(t *time.Time) *SubscriptionPauseUpdateOne {
	if t != nil {
		spuo.SetOriginalPeriodEnd(*t)
	}
	return spuo
}

// SetReason sets the "reason" field.
func (spuo *SubscriptionPauseUpdateOne) SetReason(s string) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetReason(s)
	return spuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (spuo *SubscriptionPauseUpdateOne) SetNillableReason(s *string) *SubscriptionPauseUpdateOne {
	if s != nil {
		spuo.SetReason(*s)
	}
	return spuo
}

// ClearReason clears the value of the "reason" field.
func (spuo *SubscriptionPauseUpdateOne) ClearReason() *SubscriptionPauseUpdateOne {
	spuo.mutation.ClearReason()
	return spuo
}

// SetMetadata sets the "metadata" field.
func (spuo *SubscriptionPauseUpdateOne) SetMetadata(m map[string]string) *SubscriptionPauseUpdateOne {
	spuo.mutation.SetMetadata(m)
	return spuo
}

// ClearMetadata clears the value of the "metadata" field.
func (spuo *SubscriptionPauseUpdateOne) ClearMetadata() *SubscriptionPauseUpdateOne {
	spuo.mutation.ClearMetadata()
	return spuo
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (spuo *SubscriptionPauseUpdateOne) SetSubscription(s *Subscription) *SubscriptionPauseUpdateOne {
	return spuo.SetSubscriptionID(s.ID)
}

// Mutation returns the SubscriptionPauseMutation object of the builder.
func (spuo *SubscriptionPauseUpdateOne) Mutation() *SubscriptionPauseMutation {
	return spuo.mutation
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (spuo *SubscriptionPauseUpdateOne) ClearSubscription() *SubscriptionPauseUpdateOne {
	spuo.mutation.ClearSubscription()
	return spuo
}

// Where appends a list predicates to the SubscriptionPauseUpdate builder.
func (spuo *SubscriptionPauseUpdateOne) Where(ps ...predicate.SubscriptionPause) *SubscriptionPauseUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SubscriptionPauseUpdateOne) Select(field string, fields ...string) *SubscriptionPauseUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SubscriptionPause entity.
func (spuo *SubscriptionPauseUpdateOne) Save(ctx context.Context) (*SubscriptionPause, error) {
	spuo.defaults()
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SubscriptionPauseUpdateOne) SaveX(ctx context.Context) *SubscriptionPause {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SubscriptionPauseUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SubscriptionPauseUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *SubscriptionPauseUpdateOne) defaults() {
	if _, ok := spuo.mutation.UpdatedAt(); !ok {
		v := subscriptionpause.UpdateDefaultUpdatedAt()
		spuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *SubscriptionPauseUpdateOne) check() error {
	if v, ok := spuo.mutation.SubscriptionID(); ok {
		if err := subscriptionpause.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionPause.subscription_id": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.PauseStatus(); ok {
		if err := subscriptionpause.PauseStatusValidator(v); err != nil {
			return &ValidationError{Name: "pause_status", err: fmt.Errorf(`ent: validator failed for field "SubscriptionPause.pause_status": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.PauseMode(); ok {
		if err := subscriptionpause.PauseModeValidator(v); err != nil {
			return &ValidationError{Name: "pause_mode", err: fmt.Errorf(`ent: validator failed for field "SubscriptionPause.pause_mode": %w`, err)}
		}
	}
	if spuo.mutation.SubscriptionCleared() && len(spuo.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubscriptionPause.subscription"`)
	}
	return nil
}

func (spuo *SubscriptionPauseUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionPause, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionpause.Table, subscriptionpause.Columns, sqlgraph.NewFieldSpec(subscriptionpause.FieldID, field.TypeString))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscriptionPause.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionpause.FieldID)
		for _, f := range fields {
			if !subscriptionpause.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscriptionpause.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.Status(); ok {
		_spec.SetField(subscriptionpause.FieldStatus, field.TypeString, value)
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionpause.FieldUpdatedAt, field.TypeTime, value)
	}
	if spuo.mutation.CreatedByCleared() {
		_spec.ClearField(subscriptionpause.FieldCreatedBy, field.TypeString)
	}
	if value, ok := spuo.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionpause.FieldUpdatedBy, field.TypeString, value)
	}
	if spuo.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriptionpause.FieldUpdatedBy, field.TypeString)
	}
	if spuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(subscriptionpause.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := spuo.mutation.PauseStatus(); ok {
		_spec.SetField(subscriptionpause.FieldPauseStatus, field.TypeString, value)
	}
	if value, ok := spuo.mutation.PauseMode(); ok {
		_spec.SetField(subscriptionpause.FieldPauseMode, field.TypeString, value)
	}
	if value, ok := spuo.mutation.ResumeMode(); ok {
		_spec.SetField(subscriptionpause.FieldResumeMode, field.TypeString, value)
	}
	if spuo.mutation.ResumeModeCleared() {
		_spec.ClearField(subscriptionpause.FieldResumeMode, field.TypeString)
	}
	if value, ok := spuo.mutation.PauseStart(); ok {
		_spec.SetField(subscriptionpause.FieldPauseStart, field.TypeTime, value)
	}
	if value, ok := spuo.mutation.PauseEnd(); ok {
		_spec.SetField(subscriptionpause.FieldPauseEnd, field.TypeTime, value)
	}
	if spuo.mutation.PauseEndCleared() {
		_spec.ClearField(subscriptionpause.FieldPauseEnd, field.TypeTime)
	}
	if value, ok := spuo.mutation.ResumedAt(); ok {
		_spec.SetField(subscriptionpause.FieldResumedAt, field.TypeTime, value)
	}
	if spuo.mutation.ResumedAtCleared() {
		_spec.ClearField(subscriptionpause.FieldResumedAt, field.TypeTime)
	}
	if value, ok := spuo.mutation.OriginalPeriodStart(); ok {
		_spec.SetField(subscriptionpause.FieldOriginalPeriodStart, field.TypeTime, value)
	}
	if value, ok := spuo.mutation.OriginalPeriodEnd(); ok {
		_spec.SetField(subscriptionpause.FieldOriginalPeriodEnd, field.TypeTime, value)
	}
	if value, ok := spuo.mutation.Reason(); ok {
		_spec.SetField(subscriptionpause.FieldReason, field.TypeString, value)
	}
	if spuo.mutation.ReasonCleared() {
		_spec.ClearField(subscriptionpause.FieldReason, field.TypeString)
	}
	if value, ok := spuo.mutation.Metadata(); ok {
		_spec.SetField(subscriptionpause.FieldMetadata, field.TypeJSON, value)
	}
	if spuo.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionpause.FieldMetadata, field.TypeJSON)
	}
	if spuo.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionpause.SubscriptionTable,
			Columns: []string{subscriptionpause.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionpause.SubscriptionTable,
			Columns: []string{subscriptionpause.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubscriptionPause{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionpause.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
