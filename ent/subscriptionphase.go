// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/subscriptionphase"
)

// SubscriptionPhase is the model entity for the SubscriptionPhase schema.
type SubscriptionPhase struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Reference to the subscription
	SubscriptionID string `json:"subscription_id,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate      *time.Time `json:"end_date,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionPhase) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionphase.FieldMetadata:
			values[i] = new([]byte)
		case subscriptionphase.FieldID, subscriptionphase.FieldTenantID, subscriptionphase.FieldStatus, subscriptionphase.FieldCreatedBy, subscriptionphase.FieldUpdatedBy, subscriptionphase.FieldEnvironmentID, subscriptionphase.FieldSubscriptionID:
			values[i] = new(sql.NullString)
		case subscriptionphase.FieldCreatedAt, subscriptionphase.FieldUpdatedAt, subscriptionphase.FieldStartDate, subscriptionphase.FieldEndDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionPhase fields.
func (sp *SubscriptionPhase) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionphase.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sp.ID = value.String
			}
		case subscriptionphase.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				sp.TenantID = value.String
			}
		case subscriptionphase.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sp.Status = value.String
			}
		case subscriptionphase.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case subscriptionphase.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sp.UpdatedAt = value.Time
			}
		case subscriptionphase.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sp.CreatedBy = value.String
			}
		case subscriptionphase.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sp.UpdatedBy = value.String
			}
		case subscriptionphase.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				sp.EnvironmentID = value.String
			}
		case subscriptionphase.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sp.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case subscriptionphase.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				sp.SubscriptionID = value.String
			}
		case subscriptionphase.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				sp.StartDate = value.Time
			}
		case subscriptionphase.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				sp.EndDate = new(time.Time)
				*sp.EndDate = value.Time
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionPhase.
// This includes values selected through modifiers, order, etc.
func (sp *SubscriptionPhase) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// Update returns a builder for updating this SubscriptionPhase.
// Note that you need to call SubscriptionPhase.Unwrap() before calling this method if this SubscriptionPhase
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SubscriptionPhase) Update() *SubscriptionPhaseUpdateOne {
	return NewSubscriptionPhaseClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the SubscriptionPhase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SubscriptionPhase) Unwrap() *SubscriptionPhase {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubscriptionPhase is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SubscriptionPhase) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionPhase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(sp.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(sp.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sp.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sp.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(sp.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", sp.Metadata))
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(sp.SubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(sp.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sp.EndDate; v != nil {
		builder.WriteString("end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionPhases is a parsable slice of SubscriptionPhase.
type SubscriptionPhases []*SubscriptionPhase
