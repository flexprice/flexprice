// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscriptionphase"
)

// SubscriptionPhaseUpdate is the builder for updating SubscriptionPhase entities.
type SubscriptionPhaseUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionPhaseMutation
}

// Where appends a list predicates to the SubscriptionPhaseUpdate builder.
func (spu *SubscriptionPhaseUpdate) Where(ps ...predicate.SubscriptionPhase) *SubscriptionPhaseUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetStatus sets the "status" field.
func (spu *SubscriptionPhaseUpdate) SetStatus(s string) *SubscriptionPhaseUpdate {
	spu.mutation.SetStatus(s)
	return spu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spu *SubscriptionPhaseUpdate) SetNillableStatus(s *string) *SubscriptionPhaseUpdate {
	if s != nil {
		spu.SetStatus(*s)
	}
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *SubscriptionPhaseUpdate) SetUpdatedAt(t time.Time) *SubscriptionPhaseUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetUpdatedBy sets the "updated_by" field.
func (spu *SubscriptionPhaseUpdate) SetUpdatedBy(s string) *SubscriptionPhaseUpdate {
	spu.mutation.SetUpdatedBy(s)
	return spu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spu *SubscriptionPhaseUpdate) SetNillableUpdatedBy(s *string) *SubscriptionPhaseUpdate {
	if s != nil {
		spu.SetUpdatedBy(*s)
	}
	return spu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spu *SubscriptionPhaseUpdate) ClearUpdatedBy() *SubscriptionPhaseUpdate {
	spu.mutation.ClearUpdatedBy()
	return spu
}

// SetMetadata sets the "metadata" field.
func (spu *SubscriptionPhaseUpdate) SetMetadata(m map[string]string) *SubscriptionPhaseUpdate {
	spu.mutation.SetMetadata(m)
	return spu
}

// ClearMetadata clears the value of the "metadata" field.
func (spu *SubscriptionPhaseUpdate) ClearMetadata() *SubscriptionPhaseUpdate {
	spu.mutation.ClearMetadata()
	return spu
}

// SetSubscriptionID sets the "subscription_id" field.
func (spu *SubscriptionPhaseUpdate) SetSubscriptionID(s string) *SubscriptionPhaseUpdate {
	spu.mutation.SetSubscriptionID(s)
	return spu
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (spu *SubscriptionPhaseUpdate) SetNillableSubscriptionID(s *string) *SubscriptionPhaseUpdate {
	if s != nil {
		spu.SetSubscriptionID(*s)
	}
	return spu
}

// SetEndDate sets the "end_date" field.
func (spu *SubscriptionPhaseUpdate) SetEndDate(t time.Time) *SubscriptionPhaseUpdate {
	spu.mutation.SetEndDate(t)
	return spu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (spu *SubscriptionPhaseUpdate) SetNillableEndDate(t *time.Time) *SubscriptionPhaseUpdate {
	if t != nil {
		spu.SetEndDate(*t)
	}
	return spu
}

// ClearEndDate clears the value of the "end_date" field.
func (spu *SubscriptionPhaseUpdate) ClearEndDate() *SubscriptionPhaseUpdate {
	spu.mutation.ClearEndDate()
	return spu
}

// Mutation returns the SubscriptionPhaseMutation object of the builder.
func (spu *SubscriptionPhaseUpdate) Mutation() *SubscriptionPhaseMutation {
	return spu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SubscriptionPhaseUpdate) Save(ctx context.Context) (int, error) {
	spu.defaults()
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SubscriptionPhaseUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SubscriptionPhaseUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SubscriptionPhaseUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *SubscriptionPhaseUpdate) defaults() {
	if _, ok := spu.mutation.UpdatedAt(); !ok {
		v := subscriptionphase.UpdateDefaultUpdatedAt()
		spu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *SubscriptionPhaseUpdate) check() error {
	if v, ok := spu.mutation.SubscriptionID(); ok {
		if err := subscriptionphase.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionPhase.subscription_id": %w`, err)}
		}
	}
	return nil
}

func (spu *SubscriptionPhaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionphase.Table, subscriptionphase.Columns, sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.Status(); ok {
		_spec.SetField(subscriptionphase.FieldStatus, field.TypeString, value)
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionphase.FieldUpdatedAt, field.TypeTime, value)
	}
	if spu.mutation.CreatedByCleared() {
		_spec.ClearField(subscriptionphase.FieldCreatedBy, field.TypeString)
	}
	if value, ok := spu.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionphase.FieldUpdatedBy, field.TypeString, value)
	}
	if spu.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriptionphase.FieldUpdatedBy, field.TypeString)
	}
	if spu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(subscriptionphase.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := spu.mutation.Metadata(); ok {
		_spec.SetField(subscriptionphase.FieldMetadata, field.TypeJSON, value)
	}
	if spu.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionphase.FieldMetadata, field.TypeJSON)
	}
	if value, ok := spu.mutation.SubscriptionID(); ok {
		_spec.SetField(subscriptionphase.FieldSubscriptionID, field.TypeString, value)
	}
	if value, ok := spu.mutation.EndDate(); ok {
		_spec.SetField(subscriptionphase.FieldEndDate, field.TypeTime, value)
	}
	if spu.mutation.EndDateCleared() {
		_spec.ClearField(subscriptionphase.FieldEndDate, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionphase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// SubscriptionPhaseUpdateOne is the builder for updating a single SubscriptionPhase entity.
type SubscriptionPhaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionPhaseMutation
}

// SetStatus sets the "status" field.
func (spuo *SubscriptionPhaseUpdateOne) SetStatus(s string) *SubscriptionPhaseUpdateOne {
	spuo.mutation.SetStatus(s)
	return spuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spuo *SubscriptionPhaseUpdateOne) SetNillableStatus(s *string) *SubscriptionPhaseUpdateOne {
	if s != nil {
		spuo.SetStatus(*s)
	}
	return spuo
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *SubscriptionPhaseUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionPhaseUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetUpdatedBy sets the "updated_by" field.
func (spuo *SubscriptionPhaseUpdateOne) SetUpdatedBy(s string) *SubscriptionPhaseUpdateOne {
	spuo.mutation.SetUpdatedBy(s)
	return spuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spuo *SubscriptionPhaseUpdateOne) SetNillableUpdatedBy(s *string) *SubscriptionPhaseUpdateOne {
	if s != nil {
		spuo.SetUpdatedBy(*s)
	}
	return spuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spuo *SubscriptionPhaseUpdateOne) ClearUpdatedBy() *SubscriptionPhaseUpdateOne {
	spuo.mutation.ClearUpdatedBy()
	return spuo
}

// SetMetadata sets the "metadata" field.
func (spuo *SubscriptionPhaseUpdateOne) SetMetadata(m map[string]string) *SubscriptionPhaseUpdateOne {
	spuo.mutation.SetMetadata(m)
	return spuo
}

// ClearMetadata clears the value of the "metadata" field.
func (spuo *SubscriptionPhaseUpdateOne) ClearMetadata() *SubscriptionPhaseUpdateOne {
	spuo.mutation.ClearMetadata()
	return spuo
}

// SetSubscriptionID sets the "subscription_id" field.
func (spuo *SubscriptionPhaseUpdateOne) SetSubscriptionID(s string) *SubscriptionPhaseUpdateOne {
	spuo.mutation.SetSubscriptionID(s)
	return spuo
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (spuo *SubscriptionPhaseUpdateOne) SetNillableSubscriptionID(s *string) *SubscriptionPhaseUpdateOne {
	if s != nil {
		spuo.SetSubscriptionID(*s)
	}
	return spuo
}

// SetEndDate sets the "end_date" field.
func (spuo *SubscriptionPhaseUpdateOne) SetEndDate(t time.Time) *SubscriptionPhaseUpdateOne {
	spuo.mutation.SetEndDate(t)
	return spuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (spuo *SubscriptionPhaseUpdateOne) SetNillableEndDate(t *time.Time) *SubscriptionPhaseUpdateOne {
	if t != nil {
		spuo.SetEndDate(*t)
	}
	return spuo
}

// ClearEndDate clears the value of the "end_date" field.
func (spuo *SubscriptionPhaseUpdateOne) ClearEndDate() *SubscriptionPhaseUpdateOne {
	spuo.mutation.ClearEndDate()
	return spuo
}

// Mutation returns the SubscriptionPhaseMutation object of the builder.
func (spuo *SubscriptionPhaseUpdateOne) Mutation() *SubscriptionPhaseMutation {
	return spuo.mutation
}

// Where appends a list predicates to the SubscriptionPhaseUpdate builder.
func (spuo *SubscriptionPhaseUpdateOne) Where(ps ...predicate.SubscriptionPhase) *SubscriptionPhaseUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SubscriptionPhaseUpdateOne) Select(field string, fields ...string) *SubscriptionPhaseUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SubscriptionPhase entity.
func (spuo *SubscriptionPhaseUpdateOne) Save(ctx context.Context) (*SubscriptionPhase, error) {
	spuo.defaults()
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SubscriptionPhaseUpdateOne) SaveX(ctx context.Context) *SubscriptionPhase {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SubscriptionPhaseUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SubscriptionPhaseUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *SubscriptionPhaseUpdateOne) defaults() {
	if _, ok := spuo.mutation.UpdatedAt(); !ok {
		v := subscriptionphase.UpdateDefaultUpdatedAt()
		spuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *SubscriptionPhaseUpdateOne) check() error {
	if v, ok := spuo.mutation.SubscriptionID(); ok {
		if err := subscriptionphase.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionPhase.subscription_id": %w`, err)}
		}
	}
	return nil
}

func (spuo *SubscriptionPhaseUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionPhase, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionphase.Table, subscriptionphase.Columns, sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscriptionPhase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionphase.FieldID)
		for _, f := range fields {
			if !subscriptionphase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscriptionphase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.Status(); ok {
		_spec.SetField(subscriptionphase.FieldStatus, field.TypeString, value)
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionphase.FieldUpdatedAt, field.TypeTime, value)
	}
	if spuo.mutation.CreatedByCleared() {
		_spec.ClearField(subscriptionphase.FieldCreatedBy, field.TypeString)
	}
	if value, ok := spuo.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionphase.FieldUpdatedBy, field.TypeString, value)
	}
	if spuo.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriptionphase.FieldUpdatedBy, field.TypeString)
	}
	if spuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(subscriptionphase.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := spuo.mutation.Metadata(); ok {
		_spec.SetField(subscriptionphase.FieldMetadata, field.TypeJSON, value)
	}
	if spuo.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionphase.FieldMetadata, field.TypeJSON)
	}
	if value, ok := spuo.mutation.SubscriptionID(); ok {
		_spec.SetField(subscriptionphase.FieldSubscriptionID, field.TypeString, value)
	}
	if value, ok := spuo.mutation.EndDate(); ok {
		_spec.SetField(subscriptionphase.FieldEndDate, field.TypeTime, value)
	}
	if spuo.mutation.EndDateCleared() {
		_spec.ClearField(subscriptionphase.FieldEndDate, field.TypeTime)
	}
	_node = &SubscriptionPhase{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionphase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
