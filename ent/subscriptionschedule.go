// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionschedule"
	"github.com/flexprice/flexprice/internal/types"
)

// SubscriptionSchedule is the model entity for the SubscriptionSchedule schema.
type SubscriptionSchedule struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID string `json:"subscription_id,omitempty"`
	// ScheduleStatus holds the value of the "schedule_status" field.
	ScheduleStatus types.SubscriptionScheduleStatus `json:"schedule_status,omitempty"`
	// CurrentPhaseIndex holds the value of the "current_phase_index" field.
	CurrentPhaseIndex int `json:"current_phase_index,omitempty"`
	// EndBehavior holds the value of the "end_behavior" field.
	EndBehavior types.ScheduleEndBehavior `json:"end_behavior,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionScheduleQuery when eager-loading is set.
	Edges        SubscriptionScheduleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubscriptionScheduleEdges holds the relations/edges for other nodes in the graph.
type SubscriptionScheduleEdges struct {
	// Phases holds the value of the phases edge.
	Phases []*SubscriptionSchedulePhase `json:"phases,omitempty"`
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PhasesOrErr returns the Phases value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionScheduleEdges) PhasesOrErr() ([]*SubscriptionSchedulePhase, error) {
	if e.loadedTypes[0] {
		return e.Phases, nil
	}
	return nil, &NotLoadedError{edge: "phases"}
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionScheduleEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.Subscription != nil {
		return e.Subscription, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: subscription.Label}
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionSchedule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionschedule.FieldMetadata:
			values[i] = new([]byte)
		case subscriptionschedule.FieldCurrentPhaseIndex:
			values[i] = new(sql.NullInt64)
		case subscriptionschedule.FieldID, subscriptionschedule.FieldTenantID, subscriptionschedule.FieldStatus, subscriptionschedule.FieldCreatedBy, subscriptionschedule.FieldUpdatedBy, subscriptionschedule.FieldEnvironmentID, subscriptionschedule.FieldSubscriptionID, subscriptionschedule.FieldScheduleStatus, subscriptionschedule.FieldEndBehavior:
			values[i] = new(sql.NullString)
		case subscriptionschedule.FieldCreatedAt, subscriptionschedule.FieldUpdatedAt, subscriptionschedule.FieldStartDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionSchedule fields.
func (ss *SubscriptionSchedule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionschedule.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ss.ID = value.String
			}
		case subscriptionschedule.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ss.TenantID = value.String
			}
		case subscriptionschedule.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ss.Status = value.String
			}
		case subscriptionschedule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ss.CreatedAt = value.Time
			}
		case subscriptionschedule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ss.UpdatedAt = value.Time
			}
		case subscriptionschedule.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ss.CreatedBy = value.String
			}
		case subscriptionschedule.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ss.UpdatedBy = value.String
			}
		case subscriptionschedule.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				ss.EnvironmentID = value.String
			}
		case subscriptionschedule.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				ss.SubscriptionID = value.String
			}
		case subscriptionschedule.FieldScheduleStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_status", values[i])
			} else if value.Valid {
				ss.ScheduleStatus = types.SubscriptionScheduleStatus(value.String)
			}
		case subscriptionschedule.FieldCurrentPhaseIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_phase_index", values[i])
			} else if value.Valid {
				ss.CurrentPhaseIndex = int(value.Int64)
			}
		case subscriptionschedule.FieldEndBehavior:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field end_behavior", values[i])
			} else if value.Valid {
				ss.EndBehavior = types.ScheduleEndBehavior(value.String)
			}
		case subscriptionschedule.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				ss.StartDate = value.Time
			}
		case subscriptionschedule.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ss.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionSchedule.
// This includes values selected through modifiers, order, etc.
func (ss *SubscriptionSchedule) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// QueryPhases queries the "phases" edge of the SubscriptionSchedule entity.
func (ss *SubscriptionSchedule) QueryPhases() *SubscriptionSchedulePhaseQuery {
	return NewSubscriptionScheduleClient(ss.config).QueryPhases(ss)
}

// QuerySubscription queries the "subscription" edge of the SubscriptionSchedule entity.
func (ss *SubscriptionSchedule) QuerySubscription() *SubscriptionQuery {
	return NewSubscriptionScheduleClient(ss.config).QuerySubscription(ss)
}

// Update returns a builder for updating this SubscriptionSchedule.
// Note that you need to call SubscriptionSchedule.Unwrap() before calling this method if this SubscriptionSchedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *SubscriptionSchedule) Update() *SubscriptionScheduleUpdateOne {
	return NewSubscriptionScheduleClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the SubscriptionSchedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *SubscriptionSchedule) Unwrap() *SubscriptionSchedule {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubscriptionSchedule is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *SubscriptionSchedule) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionSchedule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(ss.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ss.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ss.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ss.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ss.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ss.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(ss.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(ss.SubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("schedule_status=")
	builder.WriteString(fmt.Sprintf("%v", ss.ScheduleStatus))
	builder.WriteString(", ")
	builder.WriteString("current_phase_index=")
	builder.WriteString(fmt.Sprintf("%v", ss.CurrentPhaseIndex))
	builder.WriteString(", ")
	builder.WriteString("end_behavior=")
	builder.WriteString(fmt.Sprintf("%v", ss.EndBehavior))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(ss.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", ss.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionSchedules is a parsable slice of SubscriptionSchedule.
type SubscriptionSchedules []*SubscriptionSchedule
