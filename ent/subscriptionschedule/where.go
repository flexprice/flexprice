// Code generated by ent, DO NOT EDIT.

package subscriptionschedule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/internal/types"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldUpdatedBy, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldEnvironmentID, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldSubscriptionID, v))
}

// ScheduleStatus applies equality check predicate on the "schedule_status" field. It's identical to ScheduleStatusEQ.
func ScheduleStatus(v types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldScheduleStatus, vc))
}

// CurrentPhaseIndex applies equality check predicate on the "current_phase_index" field. It's identical to CurrentPhaseIndexEQ.
func CurrentPhaseIndex(v int) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldCurrentPhaseIndex, v))
}

// EndBehavior applies equality check predicate on the "end_behavior" field. It's identical to EndBehaviorEQ.
func EndBehavior(v types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldEndBehavior, vc))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldStartDate, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldContains(FieldEnvironmentID, v))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldHasPrefix(FieldEnvironmentID, v))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldHasSuffix(FieldEnvironmentID, v))
}

// EnvironmentIDIsNil applies the IsNil predicate on the "environment_id" field.
func EnvironmentIDIsNil() predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIsNull(FieldEnvironmentID))
}

// EnvironmentIDNotNil applies the NotNil predicate on the "environment_id" field.
func EnvironmentIDNotNil() predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotNull(FieldEnvironmentID))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEqualFold(FieldEnvironmentID, v))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldContainsFold(FieldEnvironmentID, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// ScheduleStatusEQ applies the EQ predicate on the "schedule_status" field.
func ScheduleStatusEQ(v types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldScheduleStatus, vc))
}

// ScheduleStatusNEQ applies the NEQ predicate on the "schedule_status" field.
func ScheduleStatusNEQ(v types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldNEQ(FieldScheduleStatus, vc))
}

// ScheduleStatusIn applies the In predicate on the "schedule_status" field.
func ScheduleStatusIn(vs ...types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SubscriptionSchedule(sql.FieldIn(FieldScheduleStatus, v...))
}

// ScheduleStatusNotIn applies the NotIn predicate on the "schedule_status" field.
func ScheduleStatusNotIn(vs ...types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SubscriptionSchedule(sql.FieldNotIn(FieldScheduleStatus, v...))
}

// ScheduleStatusGT applies the GT predicate on the "schedule_status" field.
func ScheduleStatusGT(v types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldGT(FieldScheduleStatus, vc))
}

// ScheduleStatusGTE applies the GTE predicate on the "schedule_status" field.
func ScheduleStatusGTE(v types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldGTE(FieldScheduleStatus, vc))
}

// ScheduleStatusLT applies the LT predicate on the "schedule_status" field.
func ScheduleStatusLT(v types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldLT(FieldScheduleStatus, vc))
}

// ScheduleStatusLTE applies the LTE predicate on the "schedule_status" field.
func ScheduleStatusLTE(v types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldLTE(FieldScheduleStatus, vc))
}

// ScheduleStatusContains applies the Contains predicate on the "schedule_status" field.
func ScheduleStatusContains(v types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldContains(FieldScheduleStatus, vc))
}

// ScheduleStatusHasPrefix applies the HasPrefix predicate on the "schedule_status" field.
func ScheduleStatusHasPrefix(v types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldHasPrefix(FieldScheduleStatus, vc))
}

// ScheduleStatusHasSuffix applies the HasSuffix predicate on the "schedule_status" field.
func ScheduleStatusHasSuffix(v types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldHasSuffix(FieldScheduleStatus, vc))
}

// ScheduleStatusEqualFold applies the EqualFold predicate on the "schedule_status" field.
func ScheduleStatusEqualFold(v types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldEqualFold(FieldScheduleStatus, vc))
}

// ScheduleStatusContainsFold applies the ContainsFold predicate on the "schedule_status" field.
func ScheduleStatusContainsFold(v types.SubscriptionScheduleStatus) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldContainsFold(FieldScheduleStatus, vc))
}

// CurrentPhaseIndexEQ applies the EQ predicate on the "current_phase_index" field.
func CurrentPhaseIndexEQ(v int) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldCurrentPhaseIndex, v))
}

// CurrentPhaseIndexNEQ applies the NEQ predicate on the "current_phase_index" field.
func CurrentPhaseIndexNEQ(v int) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNEQ(FieldCurrentPhaseIndex, v))
}

// CurrentPhaseIndexIn applies the In predicate on the "current_phase_index" field.
func CurrentPhaseIndexIn(vs ...int) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIn(FieldCurrentPhaseIndex, vs...))
}

// CurrentPhaseIndexNotIn applies the NotIn predicate on the "current_phase_index" field.
func CurrentPhaseIndexNotIn(vs ...int) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotIn(FieldCurrentPhaseIndex, vs...))
}

// CurrentPhaseIndexGT applies the GT predicate on the "current_phase_index" field.
func CurrentPhaseIndexGT(v int) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGT(FieldCurrentPhaseIndex, v))
}

// CurrentPhaseIndexGTE applies the GTE predicate on the "current_phase_index" field.
func CurrentPhaseIndexGTE(v int) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGTE(FieldCurrentPhaseIndex, v))
}

// CurrentPhaseIndexLT applies the LT predicate on the "current_phase_index" field.
func CurrentPhaseIndexLT(v int) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLT(FieldCurrentPhaseIndex, v))
}

// CurrentPhaseIndexLTE applies the LTE predicate on the "current_phase_index" field.
func CurrentPhaseIndexLTE(v int) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLTE(FieldCurrentPhaseIndex, v))
}

// EndBehaviorEQ applies the EQ predicate on the "end_behavior" field.
func EndBehaviorEQ(v types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldEndBehavior, vc))
}

// EndBehaviorNEQ applies the NEQ predicate on the "end_behavior" field.
func EndBehaviorNEQ(v types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldNEQ(FieldEndBehavior, vc))
}

// EndBehaviorIn applies the In predicate on the "end_behavior" field.
func EndBehaviorIn(vs ...types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SubscriptionSchedule(sql.FieldIn(FieldEndBehavior, v...))
}

// EndBehaviorNotIn applies the NotIn predicate on the "end_behavior" field.
func EndBehaviorNotIn(vs ...types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SubscriptionSchedule(sql.FieldNotIn(FieldEndBehavior, v...))
}

// EndBehaviorGT applies the GT predicate on the "end_behavior" field.
func EndBehaviorGT(v types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldGT(FieldEndBehavior, vc))
}

// EndBehaviorGTE applies the GTE predicate on the "end_behavior" field.
func EndBehaviorGTE(v types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldGTE(FieldEndBehavior, vc))
}

// EndBehaviorLT applies the LT predicate on the "end_behavior" field.
func EndBehaviorLT(v types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldLT(FieldEndBehavior, vc))
}

// EndBehaviorLTE applies the LTE predicate on the "end_behavior" field.
func EndBehaviorLTE(v types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldLTE(FieldEndBehavior, vc))
}

// EndBehaviorContains applies the Contains predicate on the "end_behavior" field.
func EndBehaviorContains(v types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldContains(FieldEndBehavior, vc))
}

// EndBehaviorHasPrefix applies the HasPrefix predicate on the "end_behavior" field.
func EndBehaviorHasPrefix(v types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldHasPrefix(FieldEndBehavior, vc))
}

// EndBehaviorHasSuffix applies the HasSuffix predicate on the "end_behavior" field.
func EndBehaviorHasSuffix(v types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldHasSuffix(FieldEndBehavior, vc))
}

// EndBehaviorEqualFold applies the EqualFold predicate on the "end_behavior" field.
func EndBehaviorEqualFold(v types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldEqualFold(FieldEndBehavior, vc))
}

// EndBehaviorContainsFold applies the ContainsFold predicate on the "end_behavior" field.
func EndBehaviorContainsFold(v types.ScheduleEndBehavior) predicate.SubscriptionSchedule {
	vc := string(v)
	return predicate.SubscriptionSchedule(sql.FieldContainsFold(FieldEndBehavior, vc))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldLTE(FieldStartDate, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.FieldNotNull(FieldMetadata))
}

// HasPhases applies the HasEdge predicate on the "phases" edge.
func HasPhases() predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PhasesTable, PhasesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhasesWith applies the HasEdge predicate on the "phases" edge with a given conditions (other predicates).
func HasPhasesWith(preds ...predicate.SubscriptionSchedulePhase) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(func(s *sql.Selector) {
		step := newPhasesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SubscriptionTable, SubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.Subscription) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubscriptionSchedule) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubscriptionSchedule) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubscriptionSchedule) predicate.SubscriptionSchedule {
	return predicate.SubscriptionSchedule(sql.NotPredicates(p))
}
