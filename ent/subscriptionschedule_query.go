// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionschedule"
	"github.com/flexprice/flexprice/ent/subscriptionschedulephase"
)

// SubscriptionScheduleQuery is the builder for querying SubscriptionSchedule entities.
type SubscriptionScheduleQuery struct {
	config
	ctx              *QueryContext
	order            []subscriptionschedule.OrderOption
	inters           []Interceptor
	predicates       []predicate.SubscriptionSchedule
	withPhases       *SubscriptionSchedulePhaseQuery
	withSubscription *SubscriptionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubscriptionScheduleQuery builder.
func (ssq *SubscriptionScheduleQuery) Where(ps ...predicate.SubscriptionSchedule) *SubscriptionScheduleQuery {
	ssq.predicates = append(ssq.predicates, ps...)
	return ssq
}

// Limit the number of records to be returned by this query.
func (ssq *SubscriptionScheduleQuery) Limit(limit int) *SubscriptionScheduleQuery {
	ssq.ctx.Limit = &limit
	return ssq
}

// Offset to start from.
func (ssq *SubscriptionScheduleQuery) Offset(offset int) *SubscriptionScheduleQuery {
	ssq.ctx.Offset = &offset
	return ssq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ssq *SubscriptionScheduleQuery) Unique(unique bool) *SubscriptionScheduleQuery {
	ssq.ctx.Unique = &unique
	return ssq
}

// Order specifies how the records should be ordered.
func (ssq *SubscriptionScheduleQuery) Order(o ...subscriptionschedule.OrderOption) *SubscriptionScheduleQuery {
	ssq.order = append(ssq.order, o...)
	return ssq
}

// QueryPhases chains the current query on the "phases" edge.
func (ssq *SubscriptionScheduleQuery) QueryPhases() *SubscriptionSchedulePhaseQuery {
	query := (&SubscriptionSchedulePhaseClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionschedule.Table, subscriptionschedule.FieldID, selector),
			sqlgraph.To(subscriptionschedulephase.Table, subscriptionschedulephase.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscriptionschedule.PhasesTable, subscriptionschedule.PhasesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscription chains the current query on the "subscription" edge.
func (ssq *SubscriptionScheduleQuery) QuerySubscription() *SubscriptionQuery {
	query := (&SubscriptionClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionschedule.Table, subscriptionschedule.FieldID, selector),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, subscriptionschedule.SubscriptionTable, subscriptionschedule.SubscriptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubscriptionSchedule entity from the query.
// Returns a *NotFoundError when no SubscriptionSchedule was found.
func (ssq *SubscriptionScheduleQuery) First(ctx context.Context) (*SubscriptionSchedule, error) {
	nodes, err := ssq.Limit(1).All(setContextOp(ctx, ssq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subscriptionschedule.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ssq *SubscriptionScheduleQuery) FirstX(ctx context.Context) *SubscriptionSchedule {
	node, err := ssq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SubscriptionSchedule ID from the query.
// Returns a *NotFoundError when no SubscriptionSchedule ID was found.
func (ssq *SubscriptionScheduleQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ssq.Limit(1).IDs(setContextOp(ctx, ssq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subscriptionschedule.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ssq *SubscriptionScheduleQuery) FirstIDX(ctx context.Context) string {
	id, err := ssq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SubscriptionSchedule entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SubscriptionSchedule entity is found.
// Returns a *NotFoundError when no SubscriptionSchedule entities are found.
func (ssq *SubscriptionScheduleQuery) Only(ctx context.Context) (*SubscriptionSchedule, error) {
	nodes, err := ssq.Limit(2).All(setContextOp(ctx, ssq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subscriptionschedule.Label}
	default:
		return nil, &NotSingularError{subscriptionschedule.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ssq *SubscriptionScheduleQuery) OnlyX(ctx context.Context) *SubscriptionSchedule {
	node, err := ssq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SubscriptionSchedule ID in the query.
// Returns a *NotSingularError when more than one SubscriptionSchedule ID is found.
// Returns a *NotFoundError when no entities are found.
func (ssq *SubscriptionScheduleQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ssq.Limit(2).IDs(setContextOp(ctx, ssq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subscriptionschedule.Label}
	default:
		err = &NotSingularError{subscriptionschedule.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ssq *SubscriptionScheduleQuery) OnlyIDX(ctx context.Context) string {
	id, err := ssq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubscriptionSchedules.
func (ssq *SubscriptionScheduleQuery) All(ctx context.Context) ([]*SubscriptionSchedule, error) {
	ctx = setContextOp(ctx, ssq.ctx, ent.OpQueryAll)
	if err := ssq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SubscriptionSchedule, *SubscriptionScheduleQuery]()
	return withInterceptors[[]*SubscriptionSchedule](ctx, ssq, qr, ssq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ssq *SubscriptionScheduleQuery) AllX(ctx context.Context) []*SubscriptionSchedule {
	nodes, err := ssq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SubscriptionSchedule IDs.
func (ssq *SubscriptionScheduleQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ssq.ctx.Unique == nil && ssq.path != nil {
		ssq.Unique(true)
	}
	ctx = setContextOp(ctx, ssq.ctx, ent.OpQueryIDs)
	if err = ssq.Select(subscriptionschedule.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ssq *SubscriptionScheduleQuery) IDsX(ctx context.Context) []string {
	ids, err := ssq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ssq *SubscriptionScheduleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ssq.ctx, ent.OpQueryCount)
	if err := ssq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ssq, querierCount[*SubscriptionScheduleQuery](), ssq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ssq *SubscriptionScheduleQuery) CountX(ctx context.Context) int {
	count, err := ssq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ssq *SubscriptionScheduleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ssq.ctx, ent.OpQueryExist)
	switch _, err := ssq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ssq *SubscriptionScheduleQuery) ExistX(ctx context.Context) bool {
	exist, err := ssq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubscriptionScheduleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ssq *SubscriptionScheduleQuery) Clone() *SubscriptionScheduleQuery {
	if ssq == nil {
		return nil
	}
	return &SubscriptionScheduleQuery{
		config:           ssq.config,
		ctx:              ssq.ctx.Clone(),
		order:            append([]subscriptionschedule.OrderOption{}, ssq.order...),
		inters:           append([]Interceptor{}, ssq.inters...),
		predicates:       append([]predicate.SubscriptionSchedule{}, ssq.predicates...),
		withPhases:       ssq.withPhases.Clone(),
		withSubscription: ssq.withSubscription.Clone(),
		// clone intermediate query.
		sql:  ssq.sql.Clone(),
		path: ssq.path,
	}
}

// WithPhases tells the query-builder to eager-load the nodes that are connected to
// the "phases" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SubscriptionScheduleQuery) WithPhases(opts ...func(*SubscriptionSchedulePhaseQuery)) *SubscriptionScheduleQuery {
	query := (&SubscriptionSchedulePhaseClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withPhases = query
	return ssq
}

// WithSubscription tells the query-builder to eager-load the nodes that are connected to
// the "subscription" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SubscriptionScheduleQuery) WithSubscription(opts ...func(*SubscriptionQuery)) *SubscriptionScheduleQuery {
	query := (&SubscriptionClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withSubscription = query
	return ssq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID string `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SubscriptionSchedule.Query().
//		GroupBy(subscriptionschedule.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ssq *SubscriptionScheduleQuery) GroupBy(field string, fields ...string) *SubscriptionScheduleGroupBy {
	ssq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SubscriptionScheduleGroupBy{build: ssq}
	grbuild.flds = &ssq.ctx.Fields
	grbuild.label = subscriptionschedule.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID string `json:"tenant_id,omitempty"`
//	}
//
//	client.SubscriptionSchedule.Query().
//		Select(subscriptionschedule.FieldTenantID).
//		Scan(ctx, &v)
func (ssq *SubscriptionScheduleQuery) Select(fields ...string) *SubscriptionScheduleSelect {
	ssq.ctx.Fields = append(ssq.ctx.Fields, fields...)
	sbuild := &SubscriptionScheduleSelect{SubscriptionScheduleQuery: ssq}
	sbuild.label = subscriptionschedule.Label
	sbuild.flds, sbuild.scan = &ssq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubscriptionScheduleSelect configured with the given aggregations.
func (ssq *SubscriptionScheduleQuery) Aggregate(fns ...AggregateFunc) *SubscriptionScheduleSelect {
	return ssq.Select().Aggregate(fns...)
}

func (ssq *SubscriptionScheduleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ssq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ssq); err != nil {
				return err
			}
		}
	}
	for _, f := range ssq.ctx.Fields {
		if !subscriptionschedule.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ssq.path != nil {
		prev, err := ssq.path(ctx)
		if err != nil {
			return err
		}
		ssq.sql = prev
	}
	return nil
}

func (ssq *SubscriptionScheduleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SubscriptionSchedule, error) {
	var (
		nodes       = []*SubscriptionSchedule{}
		_spec       = ssq.querySpec()
		loadedTypes = [2]bool{
			ssq.withPhases != nil,
			ssq.withSubscription != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SubscriptionSchedule).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SubscriptionSchedule{config: ssq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ssq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ssq.withPhases; query != nil {
		if err := ssq.loadPhases(ctx, query, nodes,
			func(n *SubscriptionSchedule) { n.Edges.Phases = []*SubscriptionSchedulePhase{} },
			func(n *SubscriptionSchedule, e *SubscriptionSchedulePhase) {
				n.Edges.Phases = append(n.Edges.Phases, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ssq.withSubscription; query != nil {
		if err := ssq.loadSubscription(ctx, query, nodes, nil,
			func(n *SubscriptionSchedule, e *Subscription) { n.Edges.Subscription = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ssq *SubscriptionScheduleQuery) loadPhases(ctx context.Context, query *SubscriptionSchedulePhaseQuery, nodes []*SubscriptionSchedule, init func(*SubscriptionSchedule), assign func(*SubscriptionSchedule, *SubscriptionSchedulePhase)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*SubscriptionSchedule)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(subscriptionschedulephase.FieldScheduleID)
	}
	query.Where(predicate.SubscriptionSchedulePhase(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(subscriptionschedule.PhasesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScheduleID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "schedule_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ssq *SubscriptionScheduleQuery) loadSubscription(ctx context.Context, query *SubscriptionQuery, nodes []*SubscriptionSchedule, init func(*SubscriptionSchedule), assign func(*SubscriptionSchedule, *Subscription)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SubscriptionSchedule)
	for i := range nodes {
		fk := nodes[i].SubscriptionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscription.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscription_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ssq *SubscriptionScheduleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ssq.querySpec()
	_spec.Node.Columns = ssq.ctx.Fields
	if len(ssq.ctx.Fields) > 0 {
		_spec.Unique = ssq.ctx.Unique != nil && *ssq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ssq.driver, _spec)
}

func (ssq *SubscriptionScheduleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(subscriptionschedule.Table, subscriptionschedule.Columns, sqlgraph.NewFieldSpec(subscriptionschedule.FieldID, field.TypeString))
	_spec.From = ssq.sql
	if unique := ssq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ssq.path != nil {
		_spec.Unique = true
	}
	if fields := ssq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionschedule.FieldID)
		for i := range fields {
			if fields[i] != subscriptionschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ssq.withSubscription != nil {
			_spec.Node.AddColumnOnce(subscriptionschedule.FieldSubscriptionID)
		}
	}
	if ps := ssq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ssq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ssq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ssq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ssq *SubscriptionScheduleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ssq.driver.Dialect())
	t1 := builder.Table(subscriptionschedule.Table)
	columns := ssq.ctx.Fields
	if len(columns) == 0 {
		columns = subscriptionschedule.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ssq.sql != nil {
		selector = ssq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ssq.ctx.Unique != nil && *ssq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ssq.predicates {
		p(selector)
	}
	for _, p := range ssq.order {
		p(selector)
	}
	if offset := ssq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ssq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SubscriptionScheduleGroupBy is the group-by builder for SubscriptionSchedule entities.
type SubscriptionScheduleGroupBy struct {
	selector
	build *SubscriptionScheduleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ssgb *SubscriptionScheduleGroupBy) Aggregate(fns ...AggregateFunc) *SubscriptionScheduleGroupBy {
	ssgb.fns = append(ssgb.fns, fns...)
	return ssgb
}

// Scan applies the selector query and scans the result into the given value.
func (ssgb *SubscriptionScheduleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ssgb.build.ctx, ent.OpQueryGroupBy)
	if err := ssgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionScheduleQuery, *SubscriptionScheduleGroupBy](ctx, ssgb.build, ssgb, ssgb.build.inters, v)
}

func (ssgb *SubscriptionScheduleGroupBy) sqlScan(ctx context.Context, root *SubscriptionScheduleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ssgb.fns))
	for _, fn := range ssgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ssgb.flds)+len(ssgb.fns))
		for _, f := range *ssgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ssgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ssgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubscriptionScheduleSelect is the builder for selecting fields of SubscriptionSchedule entities.
type SubscriptionScheduleSelect struct {
	*SubscriptionScheduleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sss *SubscriptionScheduleSelect) Aggregate(fns ...AggregateFunc) *SubscriptionScheduleSelect {
	sss.fns = append(sss.fns, fns...)
	return sss
}

// Scan applies the selector query and scans the result into the given value.
func (sss *SubscriptionScheduleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sss.ctx, ent.OpQuerySelect)
	if err := sss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionScheduleQuery, *SubscriptionScheduleSelect](ctx, sss.SubscriptionScheduleQuery, sss, sss.inters, v)
}

func (sss *SubscriptionScheduleSelect) sqlScan(ctx context.Context, root *SubscriptionScheduleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sss.fns))
	for _, fn := range sss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
