// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscription"
	"github.com/flexprice/flexprice/ent/subscriptionschedule"
	"github.com/flexprice/flexprice/ent/subscriptionschedulephase"
	"github.com/flexprice/flexprice/internal/types"
)

// SubscriptionScheduleUpdate is the builder for updating SubscriptionSchedule entities.
type SubscriptionScheduleUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionScheduleMutation
}

// Where appends a list predicates to the SubscriptionScheduleUpdate builder.
func (ssu *SubscriptionScheduleUpdate) Where(ps ...predicate.SubscriptionSchedule) *SubscriptionScheduleUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetStatus sets the "status" field.
func (ssu *SubscriptionScheduleUpdate) SetStatus(s string) *SubscriptionScheduleUpdate {
	ssu.mutation.SetStatus(s)
	return ssu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ssu *SubscriptionScheduleUpdate) SetNillableStatus(s *string) *SubscriptionScheduleUpdate {
	if s != nil {
		ssu.SetStatus(*s)
	}
	return ssu
}

// SetUpdatedAt sets the "updated_at" field.
func (ssu *SubscriptionScheduleUpdate) SetUpdatedAt(t time.Time) *SubscriptionScheduleUpdate {
	ssu.mutation.SetUpdatedAt(t)
	return ssu
}

// SetUpdatedBy sets the "updated_by" field.
func (ssu *SubscriptionScheduleUpdate) SetUpdatedBy(s string) *SubscriptionScheduleUpdate {
	ssu.mutation.SetUpdatedBy(s)
	return ssu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ssu *SubscriptionScheduleUpdate) SetNillableUpdatedBy(s *string) *SubscriptionScheduleUpdate {
	if s != nil {
		ssu.SetUpdatedBy(*s)
	}
	return ssu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ssu *SubscriptionScheduleUpdate) ClearUpdatedBy() *SubscriptionScheduleUpdate {
	ssu.mutation.ClearUpdatedBy()
	return ssu
}

// SetSubscriptionID sets the "subscription_id" field.
func (ssu *SubscriptionScheduleUpdate) SetSubscriptionID(s string) *SubscriptionScheduleUpdate {
	ssu.mutation.SetSubscriptionID(s)
	return ssu
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (ssu *SubscriptionScheduleUpdate) SetNillableSubscriptionID(s *string) *SubscriptionScheduleUpdate {
	if s != nil {
		ssu.SetSubscriptionID(*s)
	}
	return ssu
}

// SetScheduleStatus sets the "schedule_status" field.
func (ssu *SubscriptionScheduleUpdate) SetScheduleStatus(tss types.SubscriptionScheduleStatus) *SubscriptionScheduleUpdate {
	ssu.mutation.SetScheduleStatus(tss)
	return ssu
}

// SetNillableScheduleStatus sets the "schedule_status" field if the given value is not nil.
func (ssu *SubscriptionScheduleUpdate) SetNillableScheduleStatus(tss *types.SubscriptionScheduleStatus) *SubscriptionScheduleUpdate {
	if tss != nil {
		ssu.SetScheduleStatus(*tss)
	}
	return ssu
}

// SetCurrentPhaseIndex sets the "current_phase_index" field.
func (ssu *SubscriptionScheduleUpdate) SetCurrentPhaseIndex(i int) *SubscriptionScheduleUpdate {
	ssu.mutation.ResetCurrentPhaseIndex()
	ssu.mutation.SetCurrentPhaseIndex(i)
	return ssu
}

// SetNillableCurrentPhaseIndex sets the "current_phase_index" field if the given value is not nil.
func (ssu *SubscriptionScheduleUpdate) SetNillableCurrentPhaseIndex(i *int) *SubscriptionScheduleUpdate {
	if i != nil {
		ssu.SetCurrentPhaseIndex(*i)
	}
	return ssu
}

// AddCurrentPhaseIndex adds i to the "current_phase_index" field.
func (ssu *SubscriptionScheduleUpdate) AddCurrentPhaseIndex(i int) *SubscriptionScheduleUpdate {
	ssu.mutation.AddCurrentPhaseIndex(i)
	return ssu
}

// SetEndBehavior sets the "end_behavior" field.
func (ssu *SubscriptionScheduleUpdate) SetEndBehavior(teb types.ScheduleEndBehavior) *SubscriptionScheduleUpdate {
	ssu.mutation.SetEndBehavior(teb)
	return ssu
}

// SetNillableEndBehavior sets the "end_behavior" field if the given value is not nil.
func (ssu *SubscriptionScheduleUpdate) SetNillableEndBehavior(teb *types.ScheduleEndBehavior) *SubscriptionScheduleUpdate {
	if teb != nil {
		ssu.SetEndBehavior(*teb)
	}
	return ssu
}

// SetStartDate sets the "start_date" field.
func (ssu *SubscriptionScheduleUpdate) SetStartDate(t time.Time) *SubscriptionScheduleUpdate {
	ssu.mutation.SetStartDate(t)
	return ssu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (ssu *SubscriptionScheduleUpdate) SetNillableStartDate(t *time.Time) *SubscriptionScheduleUpdate {
	if t != nil {
		ssu.SetStartDate(*t)
	}
	return ssu
}

// SetMetadata sets the "metadata" field.
func (ssu *SubscriptionScheduleUpdate) SetMetadata(m map[string]string) *SubscriptionScheduleUpdate {
	ssu.mutation.SetMetadata(m)
	return ssu
}

// ClearMetadata clears the value of the "metadata" field.
func (ssu *SubscriptionScheduleUpdate) ClearMetadata() *SubscriptionScheduleUpdate {
	ssu.mutation.ClearMetadata()
	return ssu
}

// AddPhaseIDs adds the "phases" edge to the SubscriptionSchedulePhase entity by IDs.
func (ssu *SubscriptionScheduleUpdate) AddPhaseIDs(ids ...string) *SubscriptionScheduleUpdate {
	ssu.mutation.AddPhaseIDs(ids...)
	return ssu
}

// AddPhases adds the "phases" edges to the SubscriptionSchedulePhase entity.
func (ssu *SubscriptionScheduleUpdate) AddPhases(s ...*SubscriptionSchedulePhase) *SubscriptionScheduleUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.AddPhaseIDs(ids...)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (ssu *SubscriptionScheduleUpdate) SetSubscription(s *Subscription) *SubscriptionScheduleUpdate {
	return ssu.SetSubscriptionID(s.ID)
}

// Mutation returns the SubscriptionScheduleMutation object of the builder.
func (ssu *SubscriptionScheduleUpdate) Mutation() *SubscriptionScheduleMutation {
	return ssu.mutation
}

// ClearPhases clears all "phases" edges to the SubscriptionSchedulePhase entity.
func (ssu *SubscriptionScheduleUpdate) ClearPhases() *SubscriptionScheduleUpdate {
	ssu.mutation.ClearPhases()
	return ssu
}

// RemovePhaseIDs removes the "phases" edge to SubscriptionSchedulePhase entities by IDs.
func (ssu *SubscriptionScheduleUpdate) RemovePhaseIDs(ids ...string) *SubscriptionScheduleUpdate {
	ssu.mutation.RemovePhaseIDs(ids...)
	return ssu
}

// RemovePhases removes "phases" edges to SubscriptionSchedulePhase entities.
func (ssu *SubscriptionScheduleUpdate) RemovePhases(s ...*SubscriptionSchedulePhase) *SubscriptionScheduleUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.RemovePhaseIDs(ids...)
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (ssu *SubscriptionScheduleUpdate) ClearSubscription() *SubscriptionScheduleUpdate {
	ssu.mutation.ClearSubscription()
	return ssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SubscriptionScheduleUpdate) Save(ctx context.Context) (int, error) {
	ssu.defaults()
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SubscriptionScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SubscriptionScheduleUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SubscriptionScheduleUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssu *SubscriptionScheduleUpdate) defaults() {
	if _, ok := ssu.mutation.UpdatedAt(); !ok {
		v := subscriptionschedule.UpdateDefaultUpdatedAt()
		ssu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *SubscriptionScheduleUpdate) check() error {
	if v, ok := ssu.mutation.SubscriptionID(); ok {
		if err := subscriptionschedule.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionSchedule.subscription_id": %w`, err)}
		}
	}
	if ssu.mutation.SubscriptionCleared() && len(ssu.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubscriptionSchedule.subscription"`)
	}
	return nil
}

func (ssu *SubscriptionScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ssu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionschedule.Table, subscriptionschedule.Columns, sqlgraph.NewFieldSpec(subscriptionschedule.FieldID, field.TypeString))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.Status(); ok {
		_spec.SetField(subscriptionschedule.FieldStatus, field.TypeString, value)
	}
	if value, ok := ssu.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionschedule.FieldUpdatedAt, field.TypeTime, value)
	}
	if ssu.mutation.CreatedByCleared() {
		_spec.ClearField(subscriptionschedule.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ssu.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionschedule.FieldUpdatedBy, field.TypeString, value)
	}
	if ssu.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriptionschedule.FieldUpdatedBy, field.TypeString)
	}
	if ssu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(subscriptionschedule.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := ssu.mutation.ScheduleStatus(); ok {
		_spec.SetField(subscriptionschedule.FieldScheduleStatus, field.TypeString, value)
	}
	if value, ok := ssu.mutation.CurrentPhaseIndex(); ok {
		_spec.SetField(subscriptionschedule.FieldCurrentPhaseIndex, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedCurrentPhaseIndex(); ok {
		_spec.AddField(subscriptionschedule.FieldCurrentPhaseIndex, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.EndBehavior(); ok {
		_spec.SetField(subscriptionschedule.FieldEndBehavior, field.TypeString, value)
	}
	if value, ok := ssu.mutation.StartDate(); ok {
		_spec.SetField(subscriptionschedule.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := ssu.mutation.Metadata(); ok {
		_spec.SetField(subscriptionschedule.FieldMetadata, field.TypeJSON, value)
	}
	if ssu.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionschedule.FieldMetadata, field.TypeJSON)
	}
	if ssu.mutation.PhasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionschedule.PhasesTable,
			Columns: []string{subscriptionschedule.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionschedulephase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.RemovedPhasesIDs(); len(nodes) > 0 && !ssu.mutation.PhasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionschedule.PhasesTable,
			Columns: []string{subscriptionschedule.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionschedulephase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.PhasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionschedule.PhasesTable,
			Columns: []string{subscriptionschedule.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionschedulephase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscriptionschedule.SubscriptionTable,
			Columns: []string{subscriptionschedule.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscriptionschedule.SubscriptionTable,
			Columns: []string{subscriptionschedule.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// SubscriptionScheduleUpdateOne is the builder for updating a single SubscriptionSchedule entity.
type SubscriptionScheduleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionScheduleMutation
}

// SetStatus sets the "status" field.
func (ssuo *SubscriptionScheduleUpdateOne) SetStatus(s string) *SubscriptionScheduleUpdateOne {
	ssuo.mutation.SetStatus(s)
	return ssuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ssuo *SubscriptionScheduleUpdateOne) SetNillableStatus(s *string) *SubscriptionScheduleUpdateOne {
	if s != nil {
		ssuo.SetStatus(*s)
	}
	return ssuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ssuo *SubscriptionScheduleUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionScheduleUpdateOne {
	ssuo.mutation.SetUpdatedAt(t)
	return ssuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ssuo *SubscriptionScheduleUpdateOne) SetUpdatedBy(s string) *SubscriptionScheduleUpdateOne {
	ssuo.mutation.SetUpdatedBy(s)
	return ssuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ssuo *SubscriptionScheduleUpdateOne) SetNillableUpdatedBy(s *string) *SubscriptionScheduleUpdateOne {
	if s != nil {
		ssuo.SetUpdatedBy(*s)
	}
	return ssuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ssuo *SubscriptionScheduleUpdateOne) ClearUpdatedBy() *SubscriptionScheduleUpdateOne {
	ssuo.mutation.ClearUpdatedBy()
	return ssuo
}

// SetSubscriptionID sets the "subscription_id" field.
func (ssuo *SubscriptionScheduleUpdateOne) SetSubscriptionID(s string) *SubscriptionScheduleUpdateOne {
	ssuo.mutation.SetSubscriptionID(s)
	return ssuo
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (ssuo *SubscriptionScheduleUpdateOne) SetNillableSubscriptionID(s *string) *SubscriptionScheduleUpdateOne {
	if s != nil {
		ssuo.SetSubscriptionID(*s)
	}
	return ssuo
}

// SetScheduleStatus sets the "schedule_status" field.
func (ssuo *SubscriptionScheduleUpdateOne) SetScheduleStatus(tss types.SubscriptionScheduleStatus) *SubscriptionScheduleUpdateOne {
	ssuo.mutation.SetScheduleStatus(tss)
	return ssuo
}

// SetNillableScheduleStatus sets the "schedule_status" field if the given value is not nil.
func (ssuo *SubscriptionScheduleUpdateOne) SetNillableScheduleStatus(tss *types.SubscriptionScheduleStatus) *SubscriptionScheduleUpdateOne {
	if tss != nil {
		ssuo.SetScheduleStatus(*tss)
	}
	return ssuo
}

// SetCurrentPhaseIndex sets the "current_phase_index" field.
func (ssuo *SubscriptionScheduleUpdateOne) SetCurrentPhaseIndex(i int) *SubscriptionScheduleUpdateOne {
	ssuo.mutation.ResetCurrentPhaseIndex()
	ssuo.mutation.SetCurrentPhaseIndex(i)
	return ssuo
}

// SetNillableCurrentPhaseIndex sets the "current_phase_index" field if the given value is not nil.
func (ssuo *SubscriptionScheduleUpdateOne) SetNillableCurrentPhaseIndex(i *int) *SubscriptionScheduleUpdateOne {
	if i != nil {
		ssuo.SetCurrentPhaseIndex(*i)
	}
	return ssuo
}

// AddCurrentPhaseIndex adds i to the "current_phase_index" field.
func (ssuo *SubscriptionScheduleUpdateOne) AddCurrentPhaseIndex(i int) *SubscriptionScheduleUpdateOne {
	ssuo.mutation.AddCurrentPhaseIndex(i)
	return ssuo
}

// SetEndBehavior sets the "end_behavior" field.
func (ssuo *SubscriptionScheduleUpdateOne) SetEndBehavior(teb types.ScheduleEndBehavior) *SubscriptionScheduleUpdateOne {
	ssuo.mutation.SetEndBehavior(teb)
	return ssuo
}

// SetNillableEndBehavior sets the "end_behavior" field if the given value is not nil.
func (ssuo *SubscriptionScheduleUpdateOne) SetNillableEndBehavior(teb *types.ScheduleEndBehavior) *SubscriptionScheduleUpdateOne {
	if teb != nil {
		ssuo.SetEndBehavior(*teb)
	}
	return ssuo
}

// SetStartDate sets the "start_date" field.
func (ssuo *SubscriptionScheduleUpdateOne) SetStartDate(t time.Time) *SubscriptionScheduleUpdateOne {
	ssuo.mutation.SetStartDate(t)
	return ssuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (ssuo *SubscriptionScheduleUpdateOne) SetNillableStartDate(t *time.Time) *SubscriptionScheduleUpdateOne {
	if t != nil {
		ssuo.SetStartDate(*t)
	}
	return ssuo
}

// SetMetadata sets the "metadata" field.
func (ssuo *SubscriptionScheduleUpdateOne) SetMetadata(m map[string]string) *SubscriptionScheduleUpdateOne {
	ssuo.mutation.SetMetadata(m)
	return ssuo
}

// ClearMetadata clears the value of the "metadata" field.
func (ssuo *SubscriptionScheduleUpdateOne) ClearMetadata() *SubscriptionScheduleUpdateOne {
	ssuo.mutation.ClearMetadata()
	return ssuo
}

// AddPhaseIDs adds the "phases" edge to the SubscriptionSchedulePhase entity by IDs.
func (ssuo *SubscriptionScheduleUpdateOne) AddPhaseIDs(ids ...string) *SubscriptionScheduleUpdateOne {
	ssuo.mutation.AddPhaseIDs(ids...)
	return ssuo
}

// AddPhases adds the "phases" edges to the SubscriptionSchedulePhase entity.
func (ssuo *SubscriptionScheduleUpdateOne) AddPhases(s ...*SubscriptionSchedulePhase) *SubscriptionScheduleUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.AddPhaseIDs(ids...)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (ssuo *SubscriptionScheduleUpdateOne) SetSubscription(s *Subscription) *SubscriptionScheduleUpdateOne {
	return ssuo.SetSubscriptionID(s.ID)
}

// Mutation returns the SubscriptionScheduleMutation object of the builder.
func (ssuo *SubscriptionScheduleUpdateOne) Mutation() *SubscriptionScheduleMutation {
	return ssuo.mutation
}

// ClearPhases clears all "phases" edges to the SubscriptionSchedulePhase entity.
func (ssuo *SubscriptionScheduleUpdateOne) ClearPhases() *SubscriptionScheduleUpdateOne {
	ssuo.mutation.ClearPhases()
	return ssuo
}

// RemovePhaseIDs removes the "phases" edge to SubscriptionSchedulePhase entities by IDs.
func (ssuo *SubscriptionScheduleUpdateOne) RemovePhaseIDs(ids ...string) *SubscriptionScheduleUpdateOne {
	ssuo.mutation.RemovePhaseIDs(ids...)
	return ssuo
}

// RemovePhases removes "phases" edges to SubscriptionSchedulePhase entities.
func (ssuo *SubscriptionScheduleUpdateOne) RemovePhases(s ...*SubscriptionSchedulePhase) *SubscriptionScheduleUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.RemovePhaseIDs(ids...)
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (ssuo *SubscriptionScheduleUpdateOne) ClearSubscription() *SubscriptionScheduleUpdateOne {
	ssuo.mutation.ClearSubscription()
	return ssuo
}

// Where appends a list predicates to the SubscriptionScheduleUpdate builder.
func (ssuo *SubscriptionScheduleUpdateOne) Where(ps ...predicate.SubscriptionSchedule) *SubscriptionScheduleUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SubscriptionScheduleUpdateOne) Select(field string, fields ...string) *SubscriptionScheduleUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SubscriptionSchedule entity.
func (ssuo *SubscriptionScheduleUpdateOne) Save(ctx context.Context) (*SubscriptionSchedule, error) {
	ssuo.defaults()
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SubscriptionScheduleUpdateOne) SaveX(ctx context.Context) *SubscriptionSchedule {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SubscriptionScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SubscriptionScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssuo *SubscriptionScheduleUpdateOne) defaults() {
	if _, ok := ssuo.mutation.UpdatedAt(); !ok {
		v := subscriptionschedule.UpdateDefaultUpdatedAt()
		ssuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *SubscriptionScheduleUpdateOne) check() error {
	if v, ok := ssuo.mutation.SubscriptionID(); ok {
		if err := subscriptionschedule.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionSchedule.subscription_id": %w`, err)}
		}
	}
	if ssuo.mutation.SubscriptionCleared() && len(ssuo.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubscriptionSchedule.subscription"`)
	}
	return nil
}

func (ssuo *SubscriptionScheduleUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionSchedule, err error) {
	if err := ssuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionschedule.Table, subscriptionschedule.Columns, sqlgraph.NewFieldSpec(subscriptionschedule.FieldID, field.TypeString))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscriptionSchedule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionschedule.FieldID)
		for _, f := range fields {
			if !subscriptionschedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscriptionschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.Status(); ok {
		_spec.SetField(subscriptionschedule.FieldStatus, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionschedule.FieldUpdatedAt, field.TypeTime, value)
	}
	if ssuo.mutation.CreatedByCleared() {
		_spec.ClearField(subscriptionschedule.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ssuo.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionschedule.FieldUpdatedBy, field.TypeString, value)
	}
	if ssuo.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriptionschedule.FieldUpdatedBy, field.TypeString)
	}
	if ssuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(subscriptionschedule.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := ssuo.mutation.ScheduleStatus(); ok {
		_spec.SetField(subscriptionschedule.FieldScheduleStatus, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.CurrentPhaseIndex(); ok {
		_spec.SetField(subscriptionschedule.FieldCurrentPhaseIndex, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedCurrentPhaseIndex(); ok {
		_spec.AddField(subscriptionschedule.FieldCurrentPhaseIndex, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.EndBehavior(); ok {
		_spec.SetField(subscriptionschedule.FieldEndBehavior, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.StartDate(); ok {
		_spec.SetField(subscriptionschedule.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := ssuo.mutation.Metadata(); ok {
		_spec.SetField(subscriptionschedule.FieldMetadata, field.TypeJSON, value)
	}
	if ssuo.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionschedule.FieldMetadata, field.TypeJSON)
	}
	if ssuo.mutation.PhasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionschedule.PhasesTable,
			Columns: []string{subscriptionschedule.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionschedulephase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.RemovedPhasesIDs(); len(nodes) > 0 && !ssuo.mutation.PhasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionschedule.PhasesTable,
			Columns: []string{subscriptionschedule.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionschedulephase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.PhasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionschedule.PhasesTable,
			Columns: []string{subscriptionschedule.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionschedulephase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscriptionschedule.SubscriptionTable,
			Columns: []string{subscriptionschedule.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscriptionschedule.SubscriptionTable,
			Columns: []string{subscriptionschedule.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubscriptionSchedule{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
