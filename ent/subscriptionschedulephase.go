// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/subscriptionschedule"
	"github.com/flexprice/flexprice/ent/subscriptionschedulephase"
	"github.com/flexprice/flexprice/internal/types"
	"github.com/shopspring/decimal"
)

// SubscriptionSchedulePhase is the model entity for the SubscriptionSchedulePhase schema.
type SubscriptionSchedulePhase struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// ScheduleID holds the value of the "schedule_id" field.
	ScheduleID string `json:"schedule_id,omitempty"`
	// PhaseIndex holds the value of the "phase_index" field.
	PhaseIndex int `json:"phase_index,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate *time.Time `json:"end_date,omitempty"`
	// CommitmentAmount holds the value of the "commitment_amount" field.
	CommitmentAmount *decimal.Decimal `json:"commitment_amount,omitempty"`
	// OverageFactor holds the value of the "overage_factor" field.
	OverageFactor *decimal.Decimal `json:"overage_factor,omitempty"`
	// LineItems holds the value of the "line_items" field.
	LineItems []types.SchedulePhaseLineItem `json:"line_items,omitempty"`
	// CreditGrants holds the value of the "credit_grants" field.
	CreditGrants []types.SchedulePhaseCreditGrant `json:"credit_grants,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionSchedulePhaseQuery when eager-loading is set.
	Edges        SubscriptionSchedulePhaseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubscriptionSchedulePhaseEdges holds the relations/edges for other nodes in the graph.
type SubscriptionSchedulePhaseEdges struct {
	// Schedule holds the value of the schedule edge.
	Schedule *SubscriptionSchedule `json:"schedule,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ScheduleOrErr returns the Schedule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionSchedulePhaseEdges) ScheduleOrErr() (*SubscriptionSchedule, error) {
	if e.Schedule != nil {
		return e.Schedule, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: subscriptionschedule.Label}
	}
	return nil, &NotLoadedError{edge: "schedule"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionSchedulePhase) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionschedulephase.FieldCommitmentAmount, subscriptionschedulephase.FieldOverageFactor:
			values[i] = &sql.NullScanner{S: new(decimal.Decimal)}
		case subscriptionschedulephase.FieldLineItems, subscriptionschedulephase.FieldCreditGrants, subscriptionschedulephase.FieldMetadata:
			values[i] = new([]byte)
		case subscriptionschedulephase.FieldPhaseIndex:
			values[i] = new(sql.NullInt64)
		case subscriptionschedulephase.FieldID, subscriptionschedulephase.FieldTenantID, subscriptionschedulephase.FieldStatus, subscriptionschedulephase.FieldCreatedBy, subscriptionschedulephase.FieldUpdatedBy, subscriptionschedulephase.FieldEnvironmentID, subscriptionschedulephase.FieldScheduleID:
			values[i] = new(sql.NullString)
		case subscriptionschedulephase.FieldCreatedAt, subscriptionschedulephase.FieldUpdatedAt, subscriptionschedulephase.FieldStartDate, subscriptionschedulephase.FieldEndDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionSchedulePhase fields.
func (ssp *SubscriptionSchedulePhase) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionschedulephase.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ssp.ID = value.String
			}
		case subscriptionschedulephase.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ssp.TenantID = value.String
			}
		case subscriptionschedulephase.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ssp.Status = value.String
			}
		case subscriptionschedulephase.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ssp.CreatedAt = value.Time
			}
		case subscriptionschedulephase.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ssp.UpdatedAt = value.Time
			}
		case subscriptionschedulephase.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ssp.CreatedBy = value.String
			}
		case subscriptionschedulephase.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ssp.UpdatedBy = value.String
			}
		case subscriptionschedulephase.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				ssp.EnvironmentID = value.String
			}
		case subscriptionschedulephase.FieldScheduleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_id", values[i])
			} else if value.Valid {
				ssp.ScheduleID = value.String
			}
		case subscriptionschedulephase.FieldPhaseIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field phase_index", values[i])
			} else if value.Valid {
				ssp.PhaseIndex = int(value.Int64)
			}
		case subscriptionschedulephase.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				ssp.StartDate = value.Time
			}
		case subscriptionschedulephase.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				ssp.EndDate = new(time.Time)
				*ssp.EndDate = value.Time
			}
		case subscriptionschedulephase.FieldCommitmentAmount:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field commitment_amount", values[i])
			} else if value.Valid {
				ssp.CommitmentAmount = new(decimal.Decimal)
				*ssp.CommitmentAmount = *value.S.(*decimal.Decimal)
			}
		case subscriptionschedulephase.FieldOverageFactor:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field overage_factor", values[i])
			} else if value.Valid {
				ssp.OverageFactor = new(decimal.Decimal)
				*ssp.OverageFactor = *value.S.(*decimal.Decimal)
			}
		case subscriptionschedulephase.FieldLineItems:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field line_items", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ssp.LineItems); err != nil {
					return fmt.Errorf("unmarshal field line_items: %w", err)
				}
			}
		case subscriptionschedulephase.FieldCreditGrants:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field credit_grants", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ssp.CreditGrants); err != nil {
					return fmt.Errorf("unmarshal field credit_grants: %w", err)
				}
			}
		case subscriptionschedulephase.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ssp.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			ssp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionSchedulePhase.
// This includes values selected through modifiers, order, etc.
func (ssp *SubscriptionSchedulePhase) Value(name string) (ent.Value, error) {
	return ssp.selectValues.Get(name)
}

// QuerySchedule queries the "schedule" edge of the SubscriptionSchedulePhase entity.
func (ssp *SubscriptionSchedulePhase) QuerySchedule() *SubscriptionScheduleQuery {
	return NewSubscriptionSchedulePhaseClient(ssp.config).QuerySchedule(ssp)
}

// Update returns a builder for updating this SubscriptionSchedulePhase.
// Note that you need to call SubscriptionSchedulePhase.Unwrap() before calling this method if this SubscriptionSchedulePhase
// was returned from a transaction, and the transaction was committed or rolled back.
func (ssp *SubscriptionSchedulePhase) Update() *SubscriptionSchedulePhaseUpdateOne {
	return NewSubscriptionSchedulePhaseClient(ssp.config).UpdateOne(ssp)
}

// Unwrap unwraps the SubscriptionSchedulePhase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ssp *SubscriptionSchedulePhase) Unwrap() *SubscriptionSchedulePhase {
	_tx, ok := ssp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubscriptionSchedulePhase is not a transactional entity")
	}
	ssp.config.driver = _tx.drv
	return ssp
}

// String implements the fmt.Stringer.
func (ssp *SubscriptionSchedulePhase) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionSchedulePhase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ssp.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(ssp.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ssp.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ssp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ssp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ssp.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ssp.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(ssp.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("schedule_id=")
	builder.WriteString(ssp.ScheduleID)
	builder.WriteString(", ")
	builder.WriteString("phase_index=")
	builder.WriteString(fmt.Sprintf("%v", ssp.PhaseIndex))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(ssp.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ssp.EndDate; v != nil {
		builder.WriteString("end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ssp.CommitmentAmount; v != nil {
		builder.WriteString("commitment_amount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ssp.OverageFactor; v != nil {
		builder.WriteString("overage_factor=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("line_items=")
	builder.WriteString(fmt.Sprintf("%v", ssp.LineItems))
	builder.WriteString(", ")
	builder.WriteString("credit_grants=")
	builder.WriteString(fmt.Sprintf("%v", ssp.CreditGrants))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", ssp.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionSchedulePhases is a parsable slice of SubscriptionSchedulePhase.
type SubscriptionSchedulePhases []*SubscriptionSchedulePhase
