// Code generated by ent, DO NOT EDIT.

package subscriptionschedulephase

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subscriptionschedulephase type in the database.
	Label = "subscription_schedule_phase"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldScheduleID holds the string denoting the schedule_id field in the database.
	FieldScheduleID = "schedule_id"
	// FieldPhaseIndex holds the string denoting the phase_index field in the database.
	FieldPhaseIndex = "phase_index"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldCommitmentAmount holds the string denoting the commitment_amount field in the database.
	FieldCommitmentAmount = "commitment_amount"
	// FieldOverageFactor holds the string denoting the overage_factor field in the database.
	FieldOverageFactor = "overage_factor"
	// FieldLineItems holds the string denoting the line_items field in the database.
	FieldLineItems = "line_items"
	// FieldCreditGrants holds the string denoting the credit_grants field in the database.
	FieldCreditGrants = "credit_grants"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeSchedule holds the string denoting the schedule edge name in mutations.
	EdgeSchedule = "schedule"
	// Table holds the table name of the subscriptionschedulephase in the database.
	Table = "subscription_schedule_phases"
	// ScheduleTable is the table that holds the schedule relation/edge.
	ScheduleTable = "subscription_schedule_phases"
	// ScheduleInverseTable is the table name for the SubscriptionSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "subscriptionschedule" package.
	ScheduleInverseTable = "subscription_schedules"
	// ScheduleColumn is the table column denoting the schedule relation/edge.
	ScheduleColumn = "schedule_id"
)

// Columns holds all SQL columns for subscriptionschedulephase fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldScheduleID,
	FieldPhaseIndex,
	FieldStartDate,
	FieldEndDate,
	FieldCommitmentAmount,
	FieldOverageFactor,
	FieldLineItems,
	FieldCreditGrants,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// ScheduleIDValidator is a validator for the "schedule_id" field. It is called by the builders before save.
	ScheduleIDValidator func(string) error
	// PhaseIndexValidator is a validator for the "phase_index" field. It is called by the builders before save.
	PhaseIndexValidator func(int) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the SubscriptionSchedulePhase queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByScheduleID orders the results by the schedule_id field.
func ByScheduleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduleID, opts...).ToFunc()
}

// ByPhaseIndex orders the results by the phase_index field.
func ByPhaseIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhaseIndex, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByCommitmentAmount orders the results by the commitment_amount field.
func ByCommitmentAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitmentAmount, opts...).ToFunc()
}

// ByOverageFactor orders the results by the overage_factor field.
func ByOverageFactor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverageFactor, opts...).ToFunc()
}

// ByScheduleField orders the results by schedule field.
func ByScheduleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScheduleStep(), sql.OrderByField(field, opts...))
	}
}
func newScheduleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScheduleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScheduleTable, ScheduleColumn),
	)
}
