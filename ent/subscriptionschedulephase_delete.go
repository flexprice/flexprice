// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscriptionschedulephase"
)

// SubscriptionSchedulePhaseDelete is the builder for deleting a SubscriptionSchedulePhase entity.
type SubscriptionSchedulePhaseDelete struct {
	config
	hooks    []Hook
	mutation *SubscriptionSchedulePhaseMutation
}

// Where appends a list predicates to the SubscriptionSchedulePhaseDelete builder.
func (sspd *SubscriptionSchedulePhaseDelete) Where(ps ...predicate.SubscriptionSchedulePhase) *SubscriptionSchedulePhaseDelete {
	sspd.mutation.Where(ps...)
	return sspd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sspd *SubscriptionSchedulePhaseDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sspd.sqlExec, sspd.mutation, sspd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sspd *SubscriptionSchedulePhaseDelete) ExecX(ctx context.Context) int {
	n, err := sspd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sspd *SubscriptionSchedulePhaseDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(subscriptionschedulephase.Table, sqlgraph.NewFieldSpec(subscriptionschedulephase.FieldID, field.TypeString))
	if ps := sspd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sspd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sspd.mutation.done = true
	return affected, err
}

// SubscriptionSchedulePhaseDeleteOne is the builder for deleting a single SubscriptionSchedulePhase entity.
type SubscriptionSchedulePhaseDeleteOne struct {
	sspd *SubscriptionSchedulePhaseDelete
}

// Where appends a list predicates to the SubscriptionSchedulePhaseDelete builder.
func (sspdo *SubscriptionSchedulePhaseDeleteOne) Where(ps ...predicate.SubscriptionSchedulePhase) *SubscriptionSchedulePhaseDeleteOne {
	sspdo.sspd.mutation.Where(ps...)
	return sspdo
}

// Exec executes the deletion query.
func (sspdo *SubscriptionSchedulePhaseDeleteOne) Exec(ctx context.Context) error {
	n, err := sspdo.sspd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{subscriptionschedulephase.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sspdo *SubscriptionSchedulePhaseDeleteOne) ExecX(ctx context.Context) {
	if err := sspdo.Exec(ctx); err != nil {
		panic(err)
	}
}
