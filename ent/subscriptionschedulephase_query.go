// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscriptionschedule"
	"github.com/flexprice/flexprice/ent/subscriptionschedulephase"
)

// SubscriptionSchedulePhaseQuery is the builder for querying SubscriptionSchedulePhase entities.
type SubscriptionSchedulePhaseQuery struct {
	config
	ctx          *QueryContext
	order        []subscriptionschedulephase.OrderOption
	inters       []Interceptor
	predicates   []predicate.SubscriptionSchedulePhase
	withSchedule *SubscriptionScheduleQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubscriptionSchedulePhaseQuery builder.
func (sspq *SubscriptionSchedulePhaseQuery) Where(ps ...predicate.SubscriptionSchedulePhase) *SubscriptionSchedulePhaseQuery {
	sspq.predicates = append(sspq.predicates, ps...)
	return sspq
}

// Limit the number of records to be returned by this query.
func (sspq *SubscriptionSchedulePhaseQuery) Limit(limit int) *SubscriptionSchedulePhaseQuery {
	sspq.ctx.Limit = &limit
	return sspq
}

// Offset to start from.
func (sspq *SubscriptionSchedulePhaseQuery) Offset(offset int) *SubscriptionSchedulePhaseQuery {
	sspq.ctx.Offset = &offset
	return sspq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sspq *SubscriptionSchedulePhaseQuery) Unique(unique bool) *SubscriptionSchedulePhaseQuery {
	sspq.ctx.Unique = &unique
	return sspq
}

// Order specifies how the records should be ordered.
func (sspq *SubscriptionSchedulePhaseQuery) Order(o ...subscriptionschedulephase.OrderOption) *SubscriptionSchedulePhaseQuery {
	sspq.order = append(sspq.order, o...)
	return sspq
}

// QuerySchedule chains the current query on the "schedule" edge.
func (sspq *SubscriptionSchedulePhaseQuery) QuerySchedule() *SubscriptionScheduleQuery {
	query := (&SubscriptionScheduleClient{config: sspq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sspq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sspq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionschedulephase.Table, subscriptionschedulephase.FieldID, selector),
			sqlgraph.To(subscriptionschedule.Table, subscriptionschedule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionschedulephase.ScheduleTable, subscriptionschedulephase.ScheduleColumn),
		)
		fromU = sqlgraph.SetNeighbors(sspq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubscriptionSchedulePhase entity from the query.
// Returns a *NotFoundError when no SubscriptionSchedulePhase was found.
func (sspq *SubscriptionSchedulePhaseQuery) First(ctx context.Context) (*SubscriptionSchedulePhase, error) {
	nodes, err := sspq.Limit(1).All(setContextOp(ctx, sspq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subscriptionschedulephase.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sspq *SubscriptionSchedulePhaseQuery) FirstX(ctx context.Context) *SubscriptionSchedulePhase {
	node, err := sspq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SubscriptionSchedulePhase ID from the query.
// Returns a *NotFoundError when no SubscriptionSchedulePhase ID was found.
func (sspq *SubscriptionSchedulePhaseQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sspq.Limit(1).IDs(setContextOp(ctx, sspq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subscriptionschedulephase.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sspq *SubscriptionSchedulePhaseQuery) FirstIDX(ctx context.Context) string {
	id, err := sspq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SubscriptionSchedulePhase entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SubscriptionSchedulePhase entity is found.
// Returns a *NotFoundError when no SubscriptionSchedulePhase entities are found.
func (sspq *SubscriptionSchedulePhaseQuery) Only(ctx context.Context) (*SubscriptionSchedulePhase, error) {
	nodes, err := sspq.Limit(2).All(setContextOp(ctx, sspq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subscriptionschedulephase.Label}
	default:
		return nil, &NotSingularError{subscriptionschedulephase.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sspq *SubscriptionSchedulePhaseQuery) OnlyX(ctx context.Context) *SubscriptionSchedulePhase {
	node, err := sspq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SubscriptionSchedulePhase ID in the query.
// Returns a *NotSingularError when more than one SubscriptionSchedulePhase ID is found.
// Returns a *NotFoundError when no entities are found.
func (sspq *SubscriptionSchedulePhaseQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sspq.Limit(2).IDs(setContextOp(ctx, sspq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subscriptionschedulephase.Label}
	default:
		err = &NotSingularError{subscriptionschedulephase.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sspq *SubscriptionSchedulePhaseQuery) OnlyIDX(ctx context.Context) string {
	id, err := sspq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubscriptionSchedulePhases.
func (sspq *SubscriptionSchedulePhaseQuery) All(ctx context.Context) ([]*SubscriptionSchedulePhase, error) {
	ctx = setContextOp(ctx, sspq.ctx, ent.OpQueryAll)
	if err := sspq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SubscriptionSchedulePhase, *SubscriptionSchedulePhaseQuery]()
	return withInterceptors[[]*SubscriptionSchedulePhase](ctx, sspq, qr, sspq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sspq *SubscriptionSchedulePhaseQuery) AllX(ctx context.Context) []*SubscriptionSchedulePhase {
	nodes, err := sspq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SubscriptionSchedulePhase IDs.
func (sspq *SubscriptionSchedulePhaseQuery) IDs(ctx context.Context) (ids []string, err error) {
	if sspq.ctx.Unique == nil && sspq.path != nil {
		sspq.Unique(true)
	}
	ctx = setContextOp(ctx, sspq.ctx, ent.OpQueryIDs)
	if err = sspq.Select(subscriptionschedulephase.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sspq *SubscriptionSchedulePhaseQuery) IDsX(ctx context.Context) []string {
	ids, err := sspq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sspq *SubscriptionSchedulePhaseQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sspq.ctx, ent.OpQueryCount)
	if err := sspq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sspq, querierCount[*SubscriptionSchedulePhaseQuery](), sspq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sspq *SubscriptionSchedulePhaseQuery) CountX(ctx context.Context) int {
	count, err := sspq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sspq *SubscriptionSchedulePhaseQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sspq.ctx, ent.OpQueryExist)
	switch _, err := sspq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sspq *SubscriptionSchedulePhaseQuery) ExistX(ctx context.Context) bool {
	exist, err := sspq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubscriptionSchedulePhaseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sspq *SubscriptionSchedulePhaseQuery) Clone() *SubscriptionSchedulePhaseQuery {
	if sspq == nil {
		return nil
	}
	return &SubscriptionSchedulePhaseQuery{
		config:       sspq.config,
		ctx:          sspq.ctx.Clone(),
		order:        append([]subscriptionschedulephase.OrderOption{}, sspq.order...),
		inters:       append([]Interceptor{}, sspq.inters...),
		predicates:   append([]predicate.SubscriptionSchedulePhase{}, sspq.predicates...),
		withSchedule: sspq.withSchedule.Clone(),
		// clone intermediate query.
		sql:  sspq.sql.Clone(),
		path: sspq.path,
	}
}

// WithSchedule tells the query-builder to eager-load the nodes that are connected to
// the "schedule" edge. The optional arguments are used to configure the query builder of the edge.
func (sspq *SubscriptionSchedulePhaseQuery) WithSchedule(opts ...func(*SubscriptionScheduleQuery)) *SubscriptionSchedulePhaseQuery {
	query := (&SubscriptionScheduleClient{config: sspq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sspq.withSchedule = query
	return sspq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID string `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SubscriptionSchedulePhase.Query().
//		GroupBy(subscriptionschedulephase.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sspq *SubscriptionSchedulePhaseQuery) GroupBy(field string, fields ...string) *SubscriptionSchedulePhaseGroupBy {
	sspq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SubscriptionSchedulePhaseGroupBy{build: sspq}
	grbuild.flds = &sspq.ctx.Fields
	grbuild.label = subscriptionschedulephase.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID string `json:"tenant_id,omitempty"`
//	}
//
//	client.SubscriptionSchedulePhase.Query().
//		Select(subscriptionschedulephase.FieldTenantID).
//		Scan(ctx, &v)
func (sspq *SubscriptionSchedulePhaseQuery) Select(fields ...string) *SubscriptionSchedulePhaseSelect {
	sspq.ctx.Fields = append(sspq.ctx.Fields, fields...)
	sbuild := &SubscriptionSchedulePhaseSelect{SubscriptionSchedulePhaseQuery: sspq}
	sbuild.label = subscriptionschedulephase.Label
	sbuild.flds, sbuild.scan = &sspq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubscriptionSchedulePhaseSelect configured with the given aggregations.
func (sspq *SubscriptionSchedulePhaseQuery) Aggregate(fns ...AggregateFunc) *SubscriptionSchedulePhaseSelect {
	return sspq.Select().Aggregate(fns...)
}

func (sspq *SubscriptionSchedulePhaseQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sspq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sspq); err != nil {
				return err
			}
		}
	}
	for _, f := range sspq.ctx.Fields {
		if !subscriptionschedulephase.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sspq.path != nil {
		prev, err := sspq.path(ctx)
		if err != nil {
			return err
		}
		sspq.sql = prev
	}
	return nil
}

func (sspq *SubscriptionSchedulePhaseQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SubscriptionSchedulePhase, error) {
	var (
		nodes       = []*SubscriptionSchedulePhase{}
		_spec       = sspq.querySpec()
		loadedTypes = [1]bool{
			sspq.withSchedule != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SubscriptionSchedulePhase).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SubscriptionSchedulePhase{config: sspq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sspq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sspq.withSchedule; query != nil {
		if err := sspq.loadSchedule(ctx, query, nodes, nil,
			func(n *SubscriptionSchedulePhase, e *SubscriptionSchedule) { n.Edges.Schedule = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sspq *SubscriptionSchedulePhaseQuery) loadSchedule(ctx context.Context, query *SubscriptionScheduleQuery, nodes []*SubscriptionSchedulePhase, init func(*SubscriptionSchedulePhase), assign func(*SubscriptionSchedulePhase, *SubscriptionSchedule)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SubscriptionSchedulePhase)
	for i := range nodes {
		fk := nodes[i].ScheduleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscriptionschedule.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "schedule_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sspq *SubscriptionSchedulePhaseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sspq.querySpec()
	_spec.Node.Columns = sspq.ctx.Fields
	if len(sspq.ctx.Fields) > 0 {
		_spec.Unique = sspq.ctx.Unique != nil && *sspq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sspq.driver, _spec)
}

func (sspq *SubscriptionSchedulePhaseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(subscriptionschedulephase.Table, subscriptionschedulephase.Columns, sqlgraph.NewFieldSpec(subscriptionschedulephase.FieldID, field.TypeString))
	_spec.From = sspq.sql
	if unique := sspq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sspq.path != nil {
		_spec.Unique = true
	}
	if fields := sspq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionschedulephase.FieldID)
		for i := range fields {
			if fields[i] != subscriptionschedulephase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sspq.withSchedule != nil {
			_spec.Node.AddColumnOnce(subscriptionschedulephase.FieldScheduleID)
		}
	}
	if ps := sspq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sspq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sspq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sspq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sspq *SubscriptionSchedulePhaseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sspq.driver.Dialect())
	t1 := builder.Table(subscriptionschedulephase.Table)
	columns := sspq.ctx.Fields
	if len(columns) == 0 {
		columns = subscriptionschedulephase.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sspq.sql != nil {
		selector = sspq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sspq.ctx.Unique != nil && *sspq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sspq.predicates {
		p(selector)
	}
	for _, p := range sspq.order {
		p(selector)
	}
	if offset := sspq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sspq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SubscriptionSchedulePhaseGroupBy is the group-by builder for SubscriptionSchedulePhase entities.
type SubscriptionSchedulePhaseGroupBy struct {
	selector
	build *SubscriptionSchedulePhaseQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sspgb *SubscriptionSchedulePhaseGroupBy) Aggregate(fns ...AggregateFunc) *SubscriptionSchedulePhaseGroupBy {
	sspgb.fns = append(sspgb.fns, fns...)
	return sspgb
}

// Scan applies the selector query and scans the result into the given value.
func (sspgb *SubscriptionSchedulePhaseGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sspgb.build.ctx, ent.OpQueryGroupBy)
	if err := sspgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionSchedulePhaseQuery, *SubscriptionSchedulePhaseGroupBy](ctx, sspgb.build, sspgb, sspgb.build.inters, v)
}

func (sspgb *SubscriptionSchedulePhaseGroupBy) sqlScan(ctx context.Context, root *SubscriptionSchedulePhaseQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sspgb.fns))
	for _, fn := range sspgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sspgb.flds)+len(sspgb.fns))
		for _, f := range *sspgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sspgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sspgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubscriptionSchedulePhaseSelect is the builder for selecting fields of SubscriptionSchedulePhase entities.
type SubscriptionSchedulePhaseSelect struct {
	*SubscriptionSchedulePhaseQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ssps *SubscriptionSchedulePhaseSelect) Aggregate(fns ...AggregateFunc) *SubscriptionSchedulePhaseSelect {
	ssps.fns = append(ssps.fns, fns...)
	return ssps
}

// Scan applies the selector query and scans the result into the given value.
func (ssps *SubscriptionSchedulePhaseSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ssps.ctx, ent.OpQuerySelect)
	if err := ssps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionSchedulePhaseQuery, *SubscriptionSchedulePhaseSelect](ctx, ssps.SubscriptionSchedulePhaseQuery, ssps, ssps.inters, v)
}

func (ssps *SubscriptionSchedulePhaseSelect) sqlScan(ctx context.Context, root *SubscriptionSchedulePhaseQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ssps.fns))
	for _, fn := range ssps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ssps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ssps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
