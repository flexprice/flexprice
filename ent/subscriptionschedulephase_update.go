// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/subscriptionschedule"
	"github.com/flexprice/flexprice/ent/subscriptionschedulephase"
	"github.com/flexprice/flexprice/internal/types"
	"github.com/shopspring/decimal"
)

// SubscriptionSchedulePhaseUpdate is the builder for updating SubscriptionSchedulePhase entities.
type SubscriptionSchedulePhaseUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionSchedulePhaseMutation
}

// Where appends a list predicates to the SubscriptionSchedulePhaseUpdate builder.
func (sspu *SubscriptionSchedulePhaseUpdate) Where(ps ...predicate.SubscriptionSchedulePhase) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.Where(ps...)
	return sspu
}

// SetStatus sets the "status" field.
func (sspu *SubscriptionSchedulePhaseUpdate) SetStatus(s string) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.SetStatus(s)
	return sspu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sspu *SubscriptionSchedulePhaseUpdate) SetNillableStatus(s *string) *SubscriptionSchedulePhaseUpdate {
	if s != nil {
		sspu.SetStatus(*s)
	}
	return sspu
}

// SetUpdatedAt sets the "updated_at" field.
func (sspu *SubscriptionSchedulePhaseUpdate) SetUpdatedAt(t time.Time) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.SetUpdatedAt(t)
	return sspu
}

// SetUpdatedBy sets the "updated_by" field.
func (sspu *SubscriptionSchedulePhaseUpdate) SetUpdatedBy(s string) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.SetUpdatedBy(s)
	return sspu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sspu *SubscriptionSchedulePhaseUpdate) SetNillableUpdatedBy(s *string) *SubscriptionSchedulePhaseUpdate {
	if s != nil {
		sspu.SetUpdatedBy(*s)
	}
	return sspu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sspu *SubscriptionSchedulePhaseUpdate) ClearUpdatedBy() *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.ClearUpdatedBy()
	return sspu
}

// SetScheduleID sets the "schedule_id" field.
func (sspu *SubscriptionSchedulePhaseUpdate) SetScheduleID(s string) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.SetScheduleID(s)
	return sspu
}

// SetNillableScheduleID sets the "schedule_id" field if the given value is not nil.
func (sspu *SubscriptionSchedulePhaseUpdate) SetNillableScheduleID(s *string) *SubscriptionSchedulePhaseUpdate {
	if s != nil {
		sspu.SetScheduleID(*s)
	}
	return sspu
}

// SetPhaseIndex sets the "phase_index" field.
func (sspu *SubscriptionSchedulePhaseUpdate) SetPhaseIndex(i int) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.ResetPhaseIndex()
	sspu.mutation.SetPhaseIndex(i)
	return sspu
}

// SetNillablePhaseIndex sets the "phase_index" field if the given value is not nil.
func (sspu *SubscriptionSchedulePhaseUpdate) SetNillablePhaseIndex(i *int) *SubscriptionSchedulePhaseUpdate {
	if i != nil {
		sspu.SetPhaseIndex(*i)
	}
	return sspu
}

// AddPhaseIndex adds i to the "phase_index" field.
func (sspu *SubscriptionSchedulePhaseUpdate) AddPhaseIndex(i int) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.AddPhaseIndex(i)
	return sspu
}

// SetStartDate sets the "start_date" field.
func (sspu *SubscriptionSchedulePhaseUpdate) SetStartDate(t time.Time) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.SetStartDate(t)
	return sspu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (sspu *SubscriptionSchedulePhaseUpdate) SetNillableStartDate(t *time.Time) *SubscriptionSchedulePhaseUpdate {
	if t != nil {
		sspu.SetStartDate(*t)
	}
	return sspu
}

// SetEndDate sets the "end_date" field.
func (sspu *SubscriptionSchedulePhaseUpdate) SetEndDate(t time.Time) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.SetEndDate(t)
	return sspu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (sspu *SubscriptionSchedulePhaseUpdate) SetNillableEndDate(t *time.Time) *SubscriptionSchedulePhaseUpdate {
	if t != nil {
		sspu.SetEndDate(*t)
	}
	return sspu
}

// ClearEndDate clears the value of the "end_date" field.
func (sspu *SubscriptionSchedulePhaseUpdate) ClearEndDate() *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.ClearEndDate()
	return sspu
}

// SetCommitmentAmount sets the "commitment_amount" field.
func (sspu *SubscriptionSchedulePhaseUpdate) SetCommitmentAmount(d decimal.Decimal) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.SetCommitmentAmount(d)
	return sspu
}

// SetNillableCommitmentAmount sets the "commitment_amount" field if the given value is not nil.
func (sspu *SubscriptionSchedulePhaseUpdate) SetNillableCommitmentAmount(d *decimal.Decimal) *SubscriptionSchedulePhaseUpdate {
	if d != nil {
		sspu.SetCommitmentAmount(*d)
	}
	return sspu
}

// ClearCommitmentAmount clears the value of the "commitment_amount" field.
func (sspu *SubscriptionSchedulePhaseUpdate) ClearCommitmentAmount() *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.ClearCommitmentAmount()
	return sspu
}

// SetOverageFactor sets the "overage_factor" field.
func (sspu *SubscriptionSchedulePhaseUpdate) SetOverageFactor(d decimal.Decimal) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.SetOverageFactor(d)
	return sspu
}

// SetNillableOverageFactor sets the "overage_factor" field if the given value is not nil.
func (sspu *SubscriptionSchedulePhaseUpdate) SetNillableOverageFactor(d *decimal.Decimal) *SubscriptionSchedulePhaseUpdate {
	if d != nil {
		sspu.SetOverageFactor(*d)
	}
	return sspu
}

// ClearOverageFactor clears the value of the "overage_factor" field.
func (sspu *SubscriptionSchedulePhaseUpdate) ClearOverageFactor() *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.ClearOverageFactor()
	return sspu
}

// SetLineItems sets the "line_items" field.
func (sspu *SubscriptionSchedulePhaseUpdate) SetLineItems(tpli []types.SchedulePhaseLineItem) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.SetLineItems(tpli)
	return sspu
}

// AppendLineItems appends tpli to the "line_items" field.
func (sspu *SubscriptionSchedulePhaseUpdate) AppendLineItems(tpli []types.SchedulePhaseLineItem) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.AppendLineItems(tpli)
	return sspu
}

// ClearLineItems clears the value of the "line_items" field.
func (sspu *SubscriptionSchedulePhaseUpdate) ClearLineItems() *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.ClearLineItems()
	return sspu
}

// SetCreditGrants sets the "credit_grants" field.
func (sspu *SubscriptionSchedulePhaseUpdate) SetCreditGrants(tpcg []types.SchedulePhaseCreditGrant) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.SetCreditGrants(tpcg)
	return sspu
}

// AppendCreditGrants appends tpcg to the "credit_grants" field.
func (sspu *SubscriptionSchedulePhaseUpdate) AppendCreditGrants(tpcg []types.SchedulePhaseCreditGrant) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.AppendCreditGrants(tpcg)
	return sspu
}

// ClearCreditGrants clears the value of the "credit_grants" field.
func (sspu *SubscriptionSchedulePhaseUpdate) ClearCreditGrants() *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.ClearCreditGrants()
	return sspu
}

// SetMetadata sets the "metadata" field.
func (sspu *SubscriptionSchedulePhaseUpdate) SetMetadata(m map[string]string) *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.SetMetadata(m)
	return sspu
}

// ClearMetadata clears the value of the "metadata" field.
func (sspu *SubscriptionSchedulePhaseUpdate) ClearMetadata() *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.ClearMetadata()
	return sspu
}

// SetSchedule sets the "schedule" edge to the SubscriptionSchedule entity.
func (sspu *SubscriptionSchedulePhaseUpdate) SetSchedule(s *SubscriptionSchedule) *SubscriptionSchedulePhaseUpdate {
	return sspu.SetScheduleID(s.ID)
}

// Mutation returns the SubscriptionSchedulePhaseMutation object of the builder.
func (sspu *SubscriptionSchedulePhaseUpdate) Mutation() *SubscriptionSchedulePhaseMutation {
	return sspu.mutation
}

// ClearSchedule clears the "schedule" edge to the SubscriptionSchedule entity.
func (sspu *SubscriptionSchedulePhaseUpdate) ClearSchedule() *SubscriptionSchedulePhaseUpdate {
	sspu.mutation.ClearSchedule()
	return sspu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sspu *SubscriptionSchedulePhaseUpdate) Save(ctx context.Context) (int, error) {
	sspu.defaults()
	return withHooks(ctx, sspu.sqlSave, sspu.mutation, sspu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sspu *SubscriptionSchedulePhaseUpdate) SaveX(ctx context.Context) int {
	affected, err := sspu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sspu *SubscriptionSchedulePhaseUpdate) Exec(ctx context.Context) error {
	_, err := sspu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sspu *SubscriptionSchedulePhaseUpdate) ExecX(ctx context.Context) {
	if err := sspu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sspu *SubscriptionSchedulePhaseUpdate) defaults() {
	if _, ok := sspu.mutation.UpdatedAt(); !ok {
		v := subscriptionschedulephase.UpdateDefaultUpdatedAt()
		sspu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sspu *SubscriptionSchedulePhaseUpdate) check() error {
	if v, ok := sspu.mutation.ScheduleID(); ok {
		if err := subscriptionschedulephase.ScheduleIDValidator(v); err != nil {
			return &ValidationError{Name: "schedule_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionSchedulePhase.schedule_id": %w`, err)}
		}
	}
	if v, ok := sspu.mutation.PhaseIndex(); ok {
		if err := subscriptionschedulephase.PhaseIndexValidator(v); err != nil {
			return &ValidationError{Name: "phase_index", err: fmt.Errorf(`ent: validator failed for field "SubscriptionSchedulePhase.phase_index": %w`, err)}
		}
	}
	if sspu.mutation.ScheduleCleared() && len(sspu.mutation.ScheduleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubscriptionSchedulePhase.schedule"`)
	}
	return nil
}

func (sspu *SubscriptionSchedulePhaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sspu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionschedulephase.Table, subscriptionschedulephase.Columns, sqlgraph.NewFieldSpec(subscriptionschedulephase.FieldID, field.TypeString))
	if ps := sspu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sspu.mutation.Status(); ok {
		_spec.SetField(subscriptionschedulephase.FieldStatus, field.TypeString, value)
	}
	if value, ok := sspu.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionschedulephase.FieldUpdatedAt, field.TypeTime, value)
	}
	if sspu.mutation.CreatedByCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sspu.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionschedulephase.FieldUpdatedBy, field.TypeString, value)
	}
	if sspu.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldUpdatedBy, field.TypeString)
	}
	if sspu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := sspu.mutation.PhaseIndex(); ok {
		_spec.SetField(subscriptionschedulephase.FieldPhaseIndex, field.TypeInt, value)
	}
	if value, ok := sspu.mutation.AddedPhaseIndex(); ok {
		_spec.AddField(subscriptionschedulephase.FieldPhaseIndex, field.TypeInt, value)
	}
	if value, ok := sspu.mutation.StartDate(); ok {
		_spec.SetField(subscriptionschedulephase.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := sspu.mutation.EndDate(); ok {
		_spec.SetField(subscriptionschedulephase.FieldEndDate, field.TypeTime, value)
	}
	if sspu.mutation.EndDateCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldEndDate, field.TypeTime)
	}
	if value, ok := sspu.mutation.CommitmentAmount(); ok {
		_spec.SetField(subscriptionschedulephase.FieldCommitmentAmount, field.TypeOther, value)
	}
	if sspu.mutation.CommitmentAmountCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldCommitmentAmount, field.TypeOther)
	}
	if value, ok := sspu.mutation.OverageFactor(); ok {
		_spec.SetField(subscriptionschedulephase.FieldOverageFactor, field.TypeOther, value)
	}
	if sspu.mutation.OverageFactorCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldOverageFactor, field.TypeOther)
	}
	if value, ok := sspu.mutation.LineItems(); ok {
		_spec.SetField(subscriptionschedulephase.FieldLineItems, field.TypeJSON, value)
	}
	if value, ok := sspu.mutation.AppendedLineItems(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subscriptionschedulephase.FieldLineItems, value)
		})
	}
	if sspu.mutation.LineItemsCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldLineItems, field.TypeJSON)
	}
	if value, ok := sspu.mutation.CreditGrants(); ok {
		_spec.SetField(subscriptionschedulephase.FieldCreditGrants, field.TypeJSON, value)
	}
	if value, ok := sspu.mutation.AppendedCreditGrants(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subscriptionschedulephase.FieldCreditGrants, value)
		})
	}
	if sspu.mutation.CreditGrantsCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldCreditGrants, field.TypeJSON)
	}
	if value, ok := sspu.mutation.Metadata(); ok {
		_spec.SetField(subscriptionschedulephase.FieldMetadata, field.TypeJSON, value)
	}
	if sspu.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldMetadata, field.TypeJSON)
	}
	if sspu.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionschedulephase.ScheduleTable,
			Columns: []string{subscriptionschedulephase.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionschedule.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sspu.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionschedulephase.ScheduleTable,
			Columns: []string{subscriptionschedulephase.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionschedule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sspu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionschedulephase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sspu.mutation.done = true
	return n, nil
}

// SubscriptionSchedulePhaseUpdateOne is the builder for updating a single SubscriptionSchedulePhase entity.
type SubscriptionSchedulePhaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionSchedulePhaseMutation
}

// SetStatus sets the "status" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetStatus(s string) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.SetStatus(s)
	return sspuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetNillableStatus(s *string) *SubscriptionSchedulePhaseUpdateOne {
	if s != nil {
		sspuo.SetStatus(*s)
	}
	return sspuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.SetUpdatedAt(t)
	return sspuo
}

// SetUpdatedBy sets the "updated_by" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetUpdatedBy(s string) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.SetUpdatedBy(s)
	return sspuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetNillableUpdatedBy(s *string) *SubscriptionSchedulePhaseUpdateOne {
	if s != nil {
		sspuo.SetUpdatedBy(*s)
	}
	return sspuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) ClearUpdatedBy() *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.ClearUpdatedBy()
	return sspuo
}

// SetScheduleID sets the "schedule_id" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetScheduleID(s string) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.SetScheduleID(s)
	return sspuo
}

// SetNillableScheduleID sets the "schedule_id" field if the given value is not nil.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetNillableScheduleID(s *string) *SubscriptionSchedulePhaseUpdateOne {
	if s != nil {
		sspuo.SetScheduleID(*s)
	}
	return sspuo
}

// SetPhaseIndex sets the "phase_index" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetPhaseIndex(i int) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.ResetPhaseIndex()
	sspuo.mutation.SetPhaseIndex(i)
	return sspuo
}

// SetNillablePhaseIndex sets the "phase_index" field if the given value is not nil.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetNillablePhaseIndex(i *int) *SubscriptionSchedulePhaseUpdateOne {
	if i != nil {
		sspuo.SetPhaseIndex(*i)
	}
	return sspuo
}

// AddPhaseIndex adds i to the "phase_index" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) AddPhaseIndex(i int) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.AddPhaseIndex(i)
	return sspuo
}

// SetStartDate sets the "start_date" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetStartDate(t time.Time) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.SetStartDate(t)
	return sspuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetNillableStartDate(t *time.Time) *SubscriptionSchedulePhaseUpdateOne {
	if t != nil {
		sspuo.SetStartDate(*t)
	}
	return sspuo
}

// SetEndDate sets the "end_date" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetEndDate(t time.Time) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.SetEndDate(t)
	return sspuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetNillableEndDate(t *time.Time) *SubscriptionSchedulePhaseUpdateOne {
	if t != nil {
		sspuo.SetEndDate(*t)
	}
	return sspuo
}

// ClearEndDate clears the value of the "end_date" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) ClearEndDate() *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.ClearEndDate()
	return sspuo
}

// SetCommitmentAmount sets the "commitment_amount" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetCommitmentAmount(d decimal.Decimal) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.SetCommitmentAmount(d)
	return sspuo
}

// SetNillableCommitmentAmount sets the "commitment_amount" field if the given value is not nil.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetNillableCommitmentAmount(d *decimal.Decimal) *SubscriptionSchedulePhaseUpdateOne {
	if d != nil {
		sspuo.SetCommitmentAmount(*d)
	}
	return sspuo
}

// ClearCommitmentAmount clears the value of the "commitment_amount" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) ClearCommitmentAmount() *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.ClearCommitmentAmount()
	return sspuo
}

// SetOverageFactor sets the "overage_factor" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetOverageFactor(d decimal.Decimal) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.SetOverageFactor(d)
	return sspuo
}

// SetNillableOverageFactor sets the "overage_factor" field if the given value is not nil.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetNillableOverageFactor(d *decimal.Decimal) *SubscriptionSchedulePhaseUpdateOne {
	if d != nil {
		sspuo.SetOverageFactor(*d)
	}
	return sspuo
}

// ClearOverageFactor clears the value of the "overage_factor" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) ClearOverageFactor() *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.ClearOverageFactor()
	return sspuo
}

// SetLineItems sets the "line_items" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetLineItems(tpli []types.SchedulePhaseLineItem) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.SetLineItems(tpli)
	return sspuo
}

// AppendLineItems appends tpli to the "line_items" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) AppendLineItems(tpli []types.SchedulePhaseLineItem) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.AppendLineItems(tpli)
	return sspuo
}

// ClearLineItems clears the value of the "line_items" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) ClearLineItems() *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.ClearLineItems()
	return sspuo
}

// SetCreditGrants sets the "credit_grants" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetCreditGrants(tpcg []types.SchedulePhaseCreditGrant) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.SetCreditGrants(tpcg)
	return sspuo
}

// AppendCreditGrants appends tpcg to the "credit_grants" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) AppendCreditGrants(tpcg []types.SchedulePhaseCreditGrant) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.AppendCreditGrants(tpcg)
	return sspuo
}

// ClearCreditGrants clears the value of the "credit_grants" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) ClearCreditGrants() *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.ClearCreditGrants()
	return sspuo
}

// SetMetadata sets the "metadata" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetMetadata(m map[string]string) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.SetMetadata(m)
	return sspuo
}

// ClearMetadata clears the value of the "metadata" field.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) ClearMetadata() *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.ClearMetadata()
	return sspuo
}

// SetSchedule sets the "schedule" edge to the SubscriptionSchedule entity.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SetSchedule(s *SubscriptionSchedule) *SubscriptionSchedulePhaseUpdateOne {
	return sspuo.SetScheduleID(s.ID)
}

// Mutation returns the SubscriptionSchedulePhaseMutation object of the builder.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) Mutation() *SubscriptionSchedulePhaseMutation {
	return sspuo.mutation
}

// ClearSchedule clears the "schedule" edge to the SubscriptionSchedule entity.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) ClearSchedule() *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.ClearSchedule()
	return sspuo
}

// Where appends a list predicates to the SubscriptionSchedulePhaseUpdate builder.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) Where(ps ...predicate.SubscriptionSchedulePhase) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.mutation.Where(ps...)
	return sspuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) Select(field string, fields ...string) *SubscriptionSchedulePhaseUpdateOne {
	sspuo.fields = append([]string{field}, fields...)
	return sspuo
}

// Save executes the query and returns the updated SubscriptionSchedulePhase entity.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) Save(ctx context.Context) (*SubscriptionSchedulePhase, error) {
	sspuo.defaults()
	return withHooks(ctx, sspuo.sqlSave, sspuo.mutation, sspuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) SaveX(ctx context.Context) *SubscriptionSchedulePhase {
	node, err := sspuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) Exec(ctx context.Context) error {
	_, err := sspuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) ExecX(ctx context.Context) {
	if err := sspuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) defaults() {
	if _, ok := sspuo.mutation.UpdatedAt(); !ok {
		v := subscriptionschedulephase.UpdateDefaultUpdatedAt()
		sspuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sspuo *SubscriptionSchedulePhaseUpdateOne) check() error {
	if v, ok := sspuo.mutation.ScheduleID(); ok {
		if err := subscriptionschedulephase.ScheduleIDValidator(v); err != nil {
			return &ValidationError{Name: "schedule_id", err: fmt.Errorf(`ent: validator failed for field "SubscriptionSchedulePhase.schedule_id": %w`, err)}
		}
	}
	if v, ok := sspuo.mutation.PhaseIndex(); ok {
		if err := subscriptionschedulephase.PhaseIndexValidator(v); err != nil {
			return &ValidationError{Name: "phase_index", err: fmt.Errorf(`ent: validator failed for field "SubscriptionSchedulePhase.phase_index": %w`, err)}
		}
	}
	if sspuo.mutation.ScheduleCleared() && len(sspuo.mutation.ScheduleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubscriptionSchedulePhase.schedule"`)
	}
	return nil
}

func (sspuo *SubscriptionSchedulePhaseUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionSchedulePhase, err error) {
	if err := sspuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionschedulephase.Table, subscriptionschedulephase.Columns, sqlgraph.NewFieldSpec(subscriptionschedulephase.FieldID, field.TypeString))
	id, ok := sspuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscriptionSchedulePhase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sspuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionschedulephase.FieldID)
		for _, f := range fields {
			if !subscriptionschedulephase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscriptionschedulephase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sspuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sspuo.mutation.Status(); ok {
		_spec.SetField(subscriptionschedulephase.FieldStatus, field.TypeString, value)
	}
	if value, ok := sspuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionschedulephase.FieldUpdatedAt, field.TypeTime, value)
	}
	if sspuo.mutation.CreatedByCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sspuo.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriptionschedulephase.FieldUpdatedBy, field.TypeString, value)
	}
	if sspuo.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldUpdatedBy, field.TypeString)
	}
	if sspuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := sspuo.mutation.PhaseIndex(); ok {
		_spec.SetField(subscriptionschedulephase.FieldPhaseIndex, field.TypeInt, value)
	}
	if value, ok := sspuo.mutation.AddedPhaseIndex(); ok {
		_spec.AddField(subscriptionschedulephase.FieldPhaseIndex, field.TypeInt, value)
	}
	if value, ok := sspuo.mutation.StartDate(); ok {
		_spec.SetField(subscriptionschedulephase.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := sspuo.mutation.EndDate(); ok {
		_spec.SetField(subscriptionschedulephase.FieldEndDate, field.TypeTime, value)
	}
	if sspuo.mutation.EndDateCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldEndDate, field.TypeTime)
	}
	if value, ok := sspuo.mutation.CommitmentAmount(); ok {
		_spec.SetField(subscriptionschedulephase.FieldCommitmentAmount, field.TypeOther, value)
	}
	if sspuo.mutation.CommitmentAmountCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldCommitmentAmount, field.TypeOther)
	}
	if value, ok := sspuo.mutation.OverageFactor(); ok {
		_spec.SetField(subscriptionschedulephase.FieldOverageFactor, field.TypeOther, value)
	}
	if sspuo.mutation.OverageFactorCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldOverageFactor, field.TypeOther)
	}
	if value, ok := sspuo.mutation.LineItems(); ok {
		_spec.SetField(subscriptionschedulephase.FieldLineItems, field.TypeJSON, value)
	}
	if value, ok := sspuo.mutation.AppendedLineItems(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subscriptionschedulephase.FieldLineItems, value)
		})
	}
	if sspuo.mutation.LineItemsCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldLineItems, field.TypeJSON)
	}
	if value, ok := sspuo.mutation.CreditGrants(); ok {
		_spec.SetField(subscriptionschedulephase.FieldCreditGrants, field.TypeJSON, value)
	}
	if value, ok := sspuo.mutation.AppendedCreditGrants(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subscriptionschedulephase.FieldCreditGrants, value)
		})
	}
	if sspuo.mutation.CreditGrantsCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldCreditGrants, field.TypeJSON)
	}
	if value, ok := sspuo.mutation.Metadata(); ok {
		_spec.SetField(subscriptionschedulephase.FieldMetadata, field.TypeJSON, value)
	}
	if sspuo.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionschedulephase.FieldMetadata, field.TypeJSON)
	}
	if sspuo.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionschedulephase.ScheduleTable,
			Columns: []string{subscriptionschedulephase.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionschedule.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sspuo.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionschedulephase.ScheduleTable,
			Columns: []string{subscriptionschedulephase.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionschedule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubscriptionSchedulePhase{config: sspuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sspuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionschedulephase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sspuo.mutation.done = true
	return _node, nil
}
