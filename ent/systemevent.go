// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/systemevent"
	"github.com/google/uuid"
)

// SystemEvent is the model entity for the SystemEvent schema.
type SystemEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload map[string]interface{} `json:"payload,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// WorkflowID holds the value of the "workflow_id" field.
	WorkflowID   string `json:"workflow_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemevent.FieldPayload:
			values[i] = new([]byte)
		case systemevent.FieldTenantID, systemevent.FieldType, systemevent.FieldStatus, systemevent.FieldCreatedBy, systemevent.FieldUpdatedBy, systemevent.FieldWorkflowID:
			values[i] = new(sql.NullString)
		case systemevent.FieldCreatedAt, systemevent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case systemevent.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemEvent fields.
func (se *SystemEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemevent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				se.ID = *value
			}
		case systemevent.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				se.TenantID = value.String
			}
		case systemevent.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				se.Type = value.String
			}
		case systemevent.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &se.Payload); err != nil {
					return fmt.Errorf("unmarshal field payload: %w", err)
				}
			}
		case systemevent.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				se.Status = value.String
			}
		case systemevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				se.CreatedAt = value.Time
			}
		case systemevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				se.UpdatedAt = value.Time
			}
		case systemevent.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				se.CreatedBy = value.String
			}
		case systemevent.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				se.UpdatedBy = value.String
			}
		case systemevent.FieldWorkflowID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_id", values[i])
			} else if value.Valid {
				se.WorkflowID = value.String
			}
		default:
			se.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemEvent.
// This includes values selected through modifiers, order, etc.
func (se *SystemEvent) Value(name string) (ent.Value, error) {
	return se.selectValues.Get(name)
}

// Update returns a builder for updating this SystemEvent.
// Note that you need to call SystemEvent.Unwrap() before calling this method if this SystemEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (se *SystemEvent) Update() *SystemEventUpdateOne {
	return NewSystemEventClient(se.config).UpdateOne(se)
}

// Unwrap unwraps the SystemEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (se *SystemEvent) Unwrap() *SystemEvent {
	_tx, ok := se.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemEvent is not a transactional entity")
	}
	se.config.driver = _tx.drv
	return se
}

// String implements the fmt.Stringer.
func (se *SystemEvent) String() string {
	var builder strings.Builder
	builder.WriteString("SystemEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", se.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(se.TenantID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(se.Type)
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", se.Payload))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(se.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(se.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(se.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(se.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(se.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("workflow_id=")
	builder.WriteString(se.WorkflowID)
	builder.WriteByte(')')
	return builder.String()
}

// SystemEvents is a parsable slice of SystemEvent.
type SystemEvents []*SystemEvent
