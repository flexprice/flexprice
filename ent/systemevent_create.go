// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/systemevent"
	"github.com/google/uuid"
)

// SystemEventCreate is the builder for creating a SystemEvent entity.
type SystemEventCreate struct {
	config
	mutation *SystemEventMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (sec *SystemEventCreate) SetTenantID(s string) *SystemEventCreate {
	sec.mutation.SetTenantID(s)
	return sec
}

// SetType sets the "type" field.
func (sec *SystemEventCreate) SetType(s string) *SystemEventCreate {
	sec.mutation.SetType(s)
	return sec
}

// SetPayload sets the "payload" field.
func (sec *SystemEventCreate) SetPayload(m map[string]interface{}) *SystemEventCreate {
	sec.mutation.SetPayload(m)
	return sec
}

// SetStatus sets the "status" field.
func (sec *SystemEventCreate) SetStatus(s string) *SystemEventCreate {
	sec.mutation.SetStatus(s)
	return sec
}

// SetCreatedAt sets the "created_at" field.
func (sec *SystemEventCreate) SetCreatedAt(t time.Time) *SystemEventCreate {
	sec.mutation.SetCreatedAt(t)
	return sec
}

// SetUpdatedAt sets the "updated_at" field.
func (sec *SystemEventCreate) SetUpdatedAt(t time.Time) *SystemEventCreate {
	sec.mutation.SetUpdatedAt(t)
	return sec
}

// SetCreatedBy sets the "created_by" field.
func (sec *SystemEventCreate) SetCreatedBy(s string) *SystemEventCreate {
	sec.mutation.SetCreatedBy(s)
	return sec
}

// SetUpdatedBy sets the "updated_by" field.
func (sec *SystemEventCreate) SetUpdatedBy(s string) *SystemEventCreate {
	sec.mutation.SetUpdatedBy(s)
	return sec
}

// SetWorkflowID sets the "workflow_id" field.
func (sec *SystemEventCreate) SetWorkflowID(s string) *SystemEventCreate {
	sec.mutation.SetWorkflowID(s)
	return sec
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (sec *SystemEventCreate) SetNillableWorkflowID(s *string) *SystemEventCreate {
	if s != nil {
		sec.SetWorkflowID(*s)
	}
	return sec
}

// SetID sets the "id" field.
func (sec *SystemEventCreate) SetID(u uuid.UUID) *SystemEventCreate {
	sec.mutation.SetID(u)
	return sec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sec *SystemEventCreate) SetNillableID(u *uuid.UUID) *SystemEventCreate {
	if u != nil {
		sec.SetID(*u)
	}
	return sec
}

// Mutation returns the SystemEventMutation object of the builder.
func (sec *SystemEventCreate) Mutation() *SystemEventMutation {
	return sec.mutation
}

// Save creates the SystemEvent in the database.
func (sec *SystemEventCreate) Save(ctx context.Context) (*SystemEvent, error) {
	sec.defaults()
	return withHooks(ctx, sec.sqlSave, sec.mutation, sec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sec *SystemEventCreate) SaveX(ctx context.Context) *SystemEvent {
	v, err := sec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sec *SystemEventCreate) Exec(ctx context.Context) error {
	_, err := sec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sec *SystemEventCreate) ExecX(ctx context.Context) {
	if err := sec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sec *SystemEventCreate) defaults() {
	if _, ok := sec.mutation.ID(); !ok {
		v := systemevent.DefaultID()
		sec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sec *SystemEventCreate) check() error {
	if _, ok := sec.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "SystemEvent.tenant_id"`)}
	}
	if v, ok := sec.mutation.TenantID(); ok {
		if err := systemevent.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.tenant_id": %w`, err)}
		}
	}
	if _, ok := sec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SystemEvent.type"`)}
	}
	if v, ok := sec.mutation.GetType(); ok {
		if err := systemevent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.type": %w`, err)}
		}
	}
	if _, ok := sec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SystemEvent.status"`)}
	}
	if v, ok := sec.mutation.Status(); ok {
		if err := systemevent.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.status": %w`, err)}
		}
	}
	if _, ok := sec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemEvent.created_at"`)}
	}
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SystemEvent.updated_at"`)}
	}
	if _, ok := sec.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "SystemEvent.created_by"`)}
	}
	if v, ok := sec.mutation.CreatedBy(); ok {
		if err := systemevent.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.created_by": %w`, err)}
		}
	}
	if _, ok := sec.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "SystemEvent.updated_by"`)}
	}
	if v, ok := sec.mutation.UpdatedBy(); ok {
		if err := systemevent.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.updated_by": %w`, err)}
		}
	}
	return nil
}

func (sec *SystemEventCreate) sqlSave(ctx context.Context) (*SystemEvent, error) {
	if err := sec.check(); err != nil {
		return nil, err
	}
	_node, _spec := sec.createSpec()
	if err := sqlgraph.CreateNode(ctx, sec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sec.mutation.id = &_node.ID
	sec.mutation.done = true
	return _node, nil
}

func (sec *SystemEventCreate) createSpec() (*SystemEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemEvent{config: sec.config}
		_spec = sqlgraph.NewCreateSpec(systemevent.Table, sqlgraph.NewFieldSpec(systemevent.FieldID, field.TypeUUID))
	)
	if id, ok := sec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sec.mutation.TenantID(); ok {
		_spec.SetField(systemevent.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := sec.mutation.GetType(); ok {
		_spec.SetField(systemevent.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := sec.mutation.Payload(); ok {
		_spec.SetField(systemevent.FieldPayload, field.TypeJSON, value)
		_node.Payload = value
	}
	if value, ok := sec.mutation.Status(); ok {
		_spec.SetField(systemevent.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := sec.mutation.CreatedAt(); ok {
		_spec.SetField(systemevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sec.mutation.UpdatedAt(); ok {
		_spec.SetField(systemevent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sec.mutation.CreatedBy(); ok {
		_spec.SetField(systemevent.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sec.mutation.UpdatedBy(); ok {
		_spec.SetField(systemevent.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sec.mutation.WorkflowID(); ok {
		_spec.SetField(systemevent.FieldWorkflowID, field.TypeString, value)
		_node.WorkflowID = value
	}
	return _node, _spec
}

// SystemEventCreateBulk is the builder for creating many SystemEvent entities in bulk.
type SystemEventCreateBulk struct {
	config
	err      error
	builders []*SystemEventCreate
}

// Save creates the SystemEvent entities in the database.
func (secb *SystemEventCreateBulk) Save(ctx context.Context) ([]*SystemEvent, error) {
	if secb.err != nil {
		return nil, secb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(secb.builders))
	nodes := make([]*SystemEvent, len(secb.builders))
	mutators := make([]Mutator, len(secb.builders))
	for i := range secb.builders {
		func(i int, root context.Context) {
			builder := secb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, secb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, secb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, secb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (secb *SystemEventCreateBulk) SaveX(ctx context.Context) []*SystemEvent {
	v, err := secb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (secb *SystemEventCreateBulk) Exec(ctx context.Context) error {
	_, err := secb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (secb *SystemEventCreateBulk) ExecX(ctx context.Context) {
	if err := secb.Exec(ctx); err != nil {
		panic(err)
	}
}
