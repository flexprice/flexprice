// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/systemevent"
)

// SystemEventDelete is the builder for deleting a SystemEvent entity.
type SystemEventDelete struct {
	config
	hooks    []Hook
	mutation *SystemEventMutation
}

// Where appends a list predicates to the SystemEventDelete builder.
func (sed *SystemEventDelete) Where(ps ...predicate.SystemEvent) *SystemEventDelete {
	sed.mutation.Where(ps...)
	return sed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sed *SystemEventDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sed.sqlExec, sed.mutation, sed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sed *SystemEventDelete) ExecX(ctx context.Context) int {
	n, err := sed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sed *SystemEventDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(systemevent.Table, sqlgraph.NewFieldSpec(systemevent.FieldID, field.TypeUUID))
	if ps := sed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sed.mutation.done = true
	return affected, err
}

// SystemEventDeleteOne is the builder for deleting a single SystemEvent entity.
type SystemEventDeleteOne struct {
	sed *SystemEventDelete
}

// Where appends a list predicates to the SystemEventDelete builder.
func (sedo *SystemEventDeleteOne) Where(ps ...predicate.SystemEvent) *SystemEventDeleteOne {
	sedo.sed.mutation.Where(ps...)
	return sedo
}

// Exec executes the deletion query.
func (sedo *SystemEventDeleteOne) Exec(ctx context.Context) error {
	n, err := sedo.sed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{systemevent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sedo *SystemEventDeleteOne) ExecX(ctx context.Context) {
	if err := sedo.Exec(ctx); err != nil {
		panic(err)
	}
}
