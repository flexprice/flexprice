// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/systemevent"
)

// SystemEventUpdate is the builder for updating SystemEvent entities.
type SystemEventUpdate struct {
	config
	hooks    []Hook
	mutation *SystemEventMutation
}

// Where appends a list predicates to the SystemEventUpdate builder.
func (seu *SystemEventUpdate) Where(ps ...predicate.SystemEvent) *SystemEventUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetTenantID sets the "tenant_id" field.
func (seu *SystemEventUpdate) SetTenantID(s string) *SystemEventUpdate {
	seu.mutation.SetTenantID(s)
	return seu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (seu *SystemEventUpdate) SetNillableTenantID(s *string) *SystemEventUpdate {
	if s != nil {
		seu.SetTenantID(*s)
	}
	return seu
}

// SetType sets the "type" field.
func (seu *SystemEventUpdate) SetType(s string) *SystemEventUpdate {
	seu.mutation.SetType(s)
	return seu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (seu *SystemEventUpdate) SetNillableType(s *string) *SystemEventUpdate {
	if s != nil {
		seu.SetType(*s)
	}
	return seu
}

// SetPayload sets the "payload" field.
func (seu *SystemEventUpdate) SetPayload(m map[string]interface{}) *SystemEventUpdate {
	seu.mutation.SetPayload(m)
	return seu
}

// ClearPayload clears the value of the "payload" field.
func (seu *SystemEventUpdate) ClearPayload() *SystemEventUpdate {
	seu.mutation.ClearPayload()
	return seu
}

// SetStatus sets the "status" field.
func (seu *SystemEventUpdate) SetStatus(s string) *SystemEventUpdate {
	seu.mutation.SetStatus(s)
	return seu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seu *SystemEventUpdate) SetNillableStatus(s *string) *SystemEventUpdate {
	if s != nil {
		seu.SetStatus(*s)
	}
	return seu
}

// SetCreatedAt sets the "created_at" field.
func (seu *SystemEventUpdate) SetCreatedAt(t time.Time) *SystemEventUpdate {
	seu.mutation.SetCreatedAt(t)
	return seu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seu *SystemEventUpdate) SetNillableCreatedAt(t *time.Time) *SystemEventUpdate {
	if t != nil {
		seu.SetCreatedAt(*t)
	}
	return seu
}

// SetUpdatedAt sets the "updated_at" field.
func (seu *SystemEventUpdate) SetUpdatedAt(t time.Time) *SystemEventUpdate {
	seu.mutation.SetUpdatedAt(t)
	return seu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (seu *SystemEventUpdate) SetNillableUpdatedAt(t *time.Time) *SystemEventUpdate {
	if t != nil {
		seu.SetUpdatedAt(*t)
	}
	return seu
}

// SetCreatedBy sets the "created_by" field.
func (seu *SystemEventUpdate) SetCreatedBy(s string) *SystemEventUpdate {
	seu.mutation.SetCreatedBy(s)
	return seu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (seu *SystemEventUpdate) SetNillableCreatedBy(s *string) *SystemEventUpdate {
	if s != nil {
		seu.SetCreatedBy(*s)
	}
	return seu
}

// SetUpdatedBy sets the "updated_by" field.
func (seu *SystemEventUpdate) SetUpdatedBy(s string) *SystemEventUpdate {
	seu.mutation.SetUpdatedBy(s)
	return seu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (seu *SystemEventUpdate) SetNillableUpdatedBy(s *string) *SystemEventUpdate {
	if s != nil {
		seu.SetUpdatedBy(*s)
	}
	return seu
}

// SetWorkflowID sets the "workflow_id" field.
func (seu *SystemEventUpdate) SetWorkflowID(s string) *SystemEventUpdate {
	seu.mutation.SetWorkflowID(s)
	return seu
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (seu *SystemEventUpdate) SetNillableWorkflowID(s *string) *SystemEventUpdate {
	if s != nil {
		seu.SetWorkflowID(*s)
	}
	return seu
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (seu *SystemEventUpdate) ClearWorkflowID() *SystemEventUpdate {
	seu.mutation.ClearWorkflowID()
	return seu
}

// Mutation returns the SystemEventMutation object of the builder.
func (seu *SystemEventUpdate) Mutation() *SystemEventMutation {
	return seu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *SystemEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, seu.sqlSave, seu.mutation, seu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seu *SystemEventUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *SystemEventUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *SystemEventUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seu *SystemEventUpdate) check() error {
	if v, ok := seu.mutation.TenantID(); ok {
		if err := systemevent.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.tenant_id": %w`, err)}
		}
	}
	if v, ok := seu.mutation.GetType(); ok {
		if err := systemevent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.type": %w`, err)}
		}
	}
	if v, ok := seu.mutation.Status(); ok {
		if err := systemevent.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.status": %w`, err)}
		}
	}
	if v, ok := seu.mutation.CreatedBy(); ok {
		if err := systemevent.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.created_by": %w`, err)}
		}
	}
	if v, ok := seu.mutation.UpdatedBy(); ok {
		if err := systemevent.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.updated_by": %w`, err)}
		}
	}
	return nil
}

func (seu *SystemEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := seu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemevent.Table, systemevent.Columns, sqlgraph.NewFieldSpec(systemevent.FieldID, field.TypeUUID))
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.TenantID(); ok {
		_spec.SetField(systemevent.FieldTenantID, field.TypeString, value)
	}
	if value, ok := seu.mutation.GetType(); ok {
		_spec.SetField(systemevent.FieldType, field.TypeString, value)
	}
	if value, ok := seu.mutation.Payload(); ok {
		_spec.SetField(systemevent.FieldPayload, field.TypeJSON, value)
	}
	if seu.mutation.PayloadCleared() {
		_spec.ClearField(systemevent.FieldPayload, field.TypeJSON)
	}
	if value, ok := seu.mutation.Status(); ok {
		_spec.SetField(systemevent.FieldStatus, field.TypeString, value)
	}
	if value, ok := seu.mutation.CreatedAt(); ok {
		_spec.SetField(systemevent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := seu.mutation.UpdatedAt(); ok {
		_spec.SetField(systemevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := seu.mutation.CreatedBy(); ok {
		_spec.SetField(systemevent.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := seu.mutation.UpdatedBy(); ok {
		_spec.SetField(systemevent.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := seu.mutation.WorkflowID(); ok {
		_spec.SetField(systemevent.FieldWorkflowID, field.TypeString, value)
	}
	if seu.mutation.WorkflowIDCleared() {
		_spec.ClearField(systemevent.FieldWorkflowID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seu.mutation.done = true
	return n, nil
}

// SystemEventUpdateOne is the builder for updating a single SystemEvent entity.
type SystemEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SystemEventMutation
}

// SetTenantID sets the "tenant_id" field.
func (seuo *SystemEventUpdateOne) SetTenantID(s string) *SystemEventUpdateOne {
	seuo.mutation.SetTenantID(s)
	return seuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (seuo *SystemEventUpdateOne) SetNillableTenantID(s *string) *SystemEventUpdateOne {
	if s != nil {
		seuo.SetTenantID(*s)
	}
	return seuo
}

// SetType sets the "type" field.
func (seuo *SystemEventUpdateOne) SetType(s string) *SystemEventUpdateOne {
	seuo.mutation.SetType(s)
	return seuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (seuo *SystemEventUpdateOne) SetNillableType(s *string) *SystemEventUpdateOne {
	if s != nil {
		seuo.SetType(*s)
	}
	return seuo
}

// SetPayload sets the "payload" field.
func (seuo *SystemEventUpdateOne) SetPayload(m map[string]interface{}) *SystemEventUpdateOne {
	seuo.mutation.SetPayload(m)
	return seuo
}

// ClearPayload clears the value of the "payload" field.
func (seuo *SystemEventUpdateOne) ClearPayload() *SystemEventUpdateOne {
	seuo.mutation.ClearPayload()
	return seuo
}

// SetStatus sets the "status" field.
func (seuo *SystemEventUpdateOne) SetStatus(s string) *SystemEventUpdateOne {
	seuo.mutation.SetStatus(s)
	return seuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seuo *SystemEventUpdateOne) SetNillableStatus(s *string) *SystemEventUpdateOne {
	if s != nil {
		seuo.SetStatus(*s)
	}
	return seuo
}

// SetCreatedAt sets the "created_at" field.
func (seuo *SystemEventUpdateOne) SetCreatedAt(t time.Time) *SystemEventUpdateOne {
	seuo.mutation.SetCreatedAt(t)
	return seuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seuo *SystemEventUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemEventUpdateOne {
	if t != nil {
		seuo.SetCreatedAt(*t)
	}
	return seuo
}

// SetUpdatedAt sets the "updated_at" field.
func (seuo *SystemEventUpdateOne) SetUpdatedAt(t time.Time) *SystemEventUpdateOne {
	seuo.mutation.SetUpdatedAt(t)
	return seuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (seuo *SystemEventUpdateOne) SetNillableUpdatedAt(t *time.Time) *SystemEventUpdateOne {
	if t != nil {
		seuo.SetUpdatedAt(*t)
	}
	return seuo
}

// SetCreatedBy sets the "created_by" field.
func (seuo *SystemEventUpdateOne) SetCreatedBy(s string) *SystemEventUpdateOne {
	seuo.mutation.SetCreatedBy(s)
	return seuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (seuo *SystemEventUpdateOne) SetNillableCreatedBy(s *string) *SystemEventUpdateOne {
	if s != nil {
		seuo.SetCreatedBy(*s)
	}
	return seuo
}

// SetUpdatedBy sets the "updated_by" field.
func (seuo *SystemEventUpdateOne) SetUpdatedBy(s string) *SystemEventUpdateOne {
	seuo.mutation.SetUpdatedBy(s)
	return seuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (seuo *SystemEventUpdateOne) SetNillableUpdatedBy(s *string) *SystemEventUpdateOne {
	if s != nil {
		seuo.SetUpdatedBy(*s)
	}
	return seuo
}

// SetWorkflowID sets the "workflow_id" field.
func (seuo *SystemEventUpdateOne) SetWorkflowID(s string) *SystemEventUpdateOne {
	seuo.mutation.SetWorkflowID(s)
	return seuo
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (seuo *SystemEventUpdateOne) SetNillableWorkflowID(s *string) *SystemEventUpdateOne {
	if s != nil {
		seuo.SetWorkflowID(*s)
	}
	return seuo
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (seuo *SystemEventUpdateOne) ClearWorkflowID() *SystemEventUpdateOne {
	seuo.mutation.ClearWorkflowID()
	return seuo
}

// Mutation returns the SystemEventMutation object of the builder.
func (seuo *SystemEventUpdateOne) Mutation() *SystemEventMutation {
	return seuo.mutation
}

// Where appends a list predicates to the SystemEventUpdate builder.
func (seuo *SystemEventUpdateOne) Where(ps ...predicate.SystemEvent) *SystemEventUpdateOne {
	seuo.mutation.Where(ps...)
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *SystemEventUpdateOne) Select(field string, fields ...string) *SystemEventUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated SystemEvent entity.
func (seuo *SystemEventUpdateOne) Save(ctx context.Context) (*SystemEvent, error) {
	return withHooks(ctx, seuo.sqlSave, seuo.mutation, seuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *SystemEventUpdateOne) SaveX(ctx context.Context) *SystemEvent {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *SystemEventUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *SystemEventUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seuo *SystemEventUpdateOne) check() error {
	if v, ok := seuo.mutation.TenantID(); ok {
		if err := systemevent.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.tenant_id": %w`, err)}
		}
	}
	if v, ok := seuo.mutation.GetType(); ok {
		if err := systemevent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.type": %w`, err)}
		}
	}
	if v, ok := seuo.mutation.Status(); ok {
		if err := systemevent.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.status": %w`, err)}
		}
	}
	if v, ok := seuo.mutation.CreatedBy(); ok {
		if err := systemevent.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.created_by": %w`, err)}
		}
	}
	if v, ok := seuo.mutation.UpdatedBy(); ok {
		if err := systemevent.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "SystemEvent.updated_by": %w`, err)}
		}
	}
	return nil
}

func (seuo *SystemEventUpdateOne) sqlSave(ctx context.Context) (_node *SystemEvent, err error) {
	if err := seuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemevent.Table, systemevent.Columns, sqlgraph.NewFieldSpec(systemevent.FieldID, field.TypeUUID))
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemevent.FieldID)
		for _, f := range fields {
			if !systemevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.TenantID(); ok {
		_spec.SetField(systemevent.FieldTenantID, field.TypeString, value)
	}
	if value, ok := seuo.mutation.GetType(); ok {
		_spec.SetField(systemevent.FieldType, field.TypeString, value)
	}
	if value, ok := seuo.mutation.Payload(); ok {
		_spec.SetField(systemevent.FieldPayload, field.TypeJSON, value)
	}
	if seuo.mutation.PayloadCleared() {
		_spec.ClearField(systemevent.FieldPayload, field.TypeJSON)
	}
	if value, ok := seuo.mutation.Status(); ok {
		_spec.SetField(systemevent.FieldStatus, field.TypeString, value)
	}
	if value, ok := seuo.mutation.CreatedAt(); ok {
		_spec.SetField(systemevent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := seuo.mutation.UpdatedAt(); ok {
		_spec.SetField(systemevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := seuo.mutation.CreatedBy(); ok {
		_spec.SetField(systemevent.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := seuo.mutation.UpdatedBy(); ok {
		_spec.SetField(systemevent.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := seuo.mutation.WorkflowID(); ok {
		_spec.SetField(systemevent.FieldWorkflowID, field.TypeString, value)
	}
	if seuo.mutation.WorkflowIDCleared() {
		_spec.ClearField(systemevent.FieldWorkflowID, field.TypeString)
	}
	_node = &SystemEvent{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seuo.mutation.done = true
	return _node, nil
}
