// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/task"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// TaskType holds the value of the "task_type" field.
	TaskType string `json:"task_type,omitempty"`
	// EntityType holds the value of the "entity_type" field.
	EntityType string `json:"entity_type,omitempty"`
	// FileURL holds the value of the "file_url" field.
	FileURL string `json:"file_url,omitempty"`
	// FileName holds the value of the "file_name" field.
	FileName *string `json:"file_name,omitempty"`
	// FileType holds the value of the "file_type" field.
	FileType string `json:"file_type,omitempty"`
	// TaskStatus holds the value of the "task_status" field.
	TaskStatus string `json:"task_status,omitempty"`
	// TotalRecords holds the value of the "total_records" field.
	TotalRecords *int `json:"total_records,omitempty"`
	// ProcessedRecords holds the value of the "processed_records" field.
	ProcessedRecords int `json:"processed_records,omitempty"`
	// SuccessfulRecords holds the value of the "successful_records" field.
	SuccessfulRecords int `json:"successful_records,omitempty"`
	// FailedRecords holds the value of the "failed_records" field.
	FailedRecords int `json:"failed_records,omitempty"`
	// ErrorSummary holds the value of the "error_summary" field.
	ErrorSummary *string `json:"error_summary,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// FailedAt holds the value of the "failed_at" field.
	FailedAt     *time.Time `json:"failed_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldMetadata:
			values[i] = new([]byte)
		case task.FieldTotalRecords, task.FieldProcessedRecords, task.FieldSuccessfulRecords, task.FieldFailedRecords:
			values[i] = new(sql.NullInt64)
		case task.FieldID, task.FieldTenantID, task.FieldStatus, task.FieldCreatedBy, task.FieldUpdatedBy, task.FieldTaskType, task.FieldEntityType, task.FieldFileURL, task.FieldFileName, task.FieldFileType, task.FieldTaskStatus, task.FieldErrorSummary:
			values[i] = new(sql.NullString)
		case task.FieldCreatedAt, task.FieldUpdatedAt, task.FieldStartedAt, task.FieldCompletedAt, task.FieldFailedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case task.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				t.TenantID = value.String
			}
		case task.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = value.String
			}
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case task.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case task.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				t.CreatedBy = value.String
			}
		case task.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				t.UpdatedBy = value.String
			}
		case task.FieldTaskType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_type", values[i])
			} else if value.Valid {
				t.TaskType = value.String
			}
		case task.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				t.EntityType = value.String
			}
		case task.FieldFileURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_url", values[i])
			} else if value.Valid {
				t.FileURL = value.String
			}
		case task.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_name", values[i])
			} else if value.Valid {
				t.FileName = new(string)
				*t.FileName = value.String
			}
		case task.FieldFileType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_type", values[i])
			} else if value.Valid {
				t.FileType = value.String
			}
		case task.FieldTaskStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_status", values[i])
			} else if value.Valid {
				t.TaskStatus = value.String
			}
		case task.FieldTotalRecords:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_records", values[i])
			} else if value.Valid {
				t.TotalRecords = new(int)
				*t.TotalRecords = int(value.Int64)
			}
		case task.FieldProcessedRecords:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field processed_records", values[i])
			} else if value.Valid {
				t.ProcessedRecords = int(value.Int64)
			}
		case task.FieldSuccessfulRecords:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field successful_records", values[i])
			} else if value.Valid {
				t.SuccessfulRecords = int(value.Int64)
			}
		case task.FieldFailedRecords:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field failed_records", values[i])
			} else if value.Valid {
				t.FailedRecords = int(value.Int64)
			}
		case task.FieldErrorSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_summary", values[i])
			} else if value.Valid {
				t.ErrorSummary = new(string)
				*t.ErrorSummary = value.String
			}
		case task.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case task.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				t.StartedAt = new(time.Time)
				*t.StartedAt = value.Time
			}
		case task.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				t.CompletedAt = new(time.Time)
				*t.CompletedAt = value.Time
			}
		case task.FieldFailedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field failed_at", values[i])
			} else if value.Valid {
				t.FailedAt = new(time.Time)
				*t.FailedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(t.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(t.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(t.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(t.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("task_type=")
	builder.WriteString(t.TaskType)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(t.EntityType)
	builder.WriteString(", ")
	builder.WriteString("file_url=")
	builder.WriteString(t.FileURL)
	builder.WriteString(", ")
	if v := t.FileName; v != nil {
		builder.WriteString("file_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("file_type=")
	builder.WriteString(t.FileType)
	builder.WriteString(", ")
	builder.WriteString("task_status=")
	builder.WriteString(t.TaskStatus)
	builder.WriteString(", ")
	if v := t.TotalRecords; v != nil {
		builder.WriteString("total_records=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("processed_records=")
	builder.WriteString(fmt.Sprintf("%v", t.ProcessedRecords))
	builder.WriteString(", ")
	builder.WriteString("successful_records=")
	builder.WriteString(fmt.Sprintf("%v", t.SuccessfulRecords))
	builder.WriteString(", ")
	builder.WriteString("failed_records=")
	builder.WriteString(fmt.Sprintf("%v", t.FailedRecords))
	builder.WriteString(", ")
	if v := t.ErrorSummary; v != nil {
		builder.WriteString("error_summary=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", t.Metadata))
	builder.WriteString(", ")
	if v := t.StartedAt; v != nil {
		builder.WriteString("started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := t.CompletedAt; v != nil {
		builder.WriteString("completed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := t.FailedAt; v != nil {
		builder.WriteString("failed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
