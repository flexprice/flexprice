// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldTaskType holds the string denoting the task_type field in the database.
	FieldTaskType = "task_type"
	// FieldEntityType holds the string denoting the entity_type field in the database.
	FieldEntityType = "entity_type"
	// FieldFileURL holds the string denoting the file_url field in the database.
	FieldFileURL = "file_url"
	// FieldFileName holds the string denoting the file_name field in the database.
	FieldFileName = "file_name"
	// FieldFileType holds the string denoting the file_type field in the database.
	FieldFileType = "file_type"
	// FieldTaskStatus holds the string denoting the task_status field in the database.
	FieldTaskStatus = "task_status"
	// FieldTotalRecords holds the string denoting the total_records field in the database.
	FieldTotalRecords = "total_records"
	// FieldProcessedRecords holds the string denoting the processed_records field in the database.
	FieldProcessedRecords = "processed_records"
	// FieldSuccessfulRecords holds the string denoting the successful_records field in the database.
	FieldSuccessfulRecords = "successful_records"
	// FieldFailedRecords holds the string denoting the failed_records field in the database.
	FieldFailedRecords = "failed_records"
	// FieldErrorSummary holds the string denoting the error_summary field in the database.
	FieldErrorSummary = "error_summary"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldFailedAt holds the string denoting the failed_at field in the database.
	FieldFailedAt = "failed_at"
	// Table holds the table name of the task in the database.
	Table = "tasks"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldTaskType,
	FieldEntityType,
	FieldFileURL,
	FieldFileName,
	FieldFileType,
	FieldTaskStatus,
	FieldTotalRecords,
	FieldProcessedRecords,
	FieldSuccessfulRecords,
	FieldFailedRecords,
	FieldErrorSummary,
	FieldMetadata,
	FieldStartedAt,
	FieldCompletedAt,
	FieldFailedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// TaskTypeValidator is a validator for the "task_type" field. It is called by the builders before save.
	TaskTypeValidator func(string) error
	// EntityTypeValidator is a validator for the "entity_type" field. It is called by the builders before save.
	EntityTypeValidator func(string) error
	// FileURLValidator is a validator for the "file_url" field. It is called by the builders before save.
	FileURLValidator func(string) error
	// FileTypeValidator is a validator for the "file_type" field. It is called by the builders before save.
	FileTypeValidator func(string) error
	// DefaultTaskStatus holds the default value on creation for the "task_status" field.
	DefaultTaskStatus string
	// DefaultProcessedRecords holds the default value on creation for the "processed_records" field.
	DefaultProcessedRecords int
	// DefaultSuccessfulRecords holds the default value on creation for the "successful_records" field.
	DefaultSuccessfulRecords int
	// DefaultFailedRecords holds the default value on creation for the "failed_records" field.
	DefaultFailedRecords int
)

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByTaskType orders the results by the task_type field.
func ByTaskType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskType, opts...).ToFunc()
}

// ByEntityType orders the results by the entity_type field.
func ByEntityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityType, opts...).ToFunc()
}

// ByFileURL orders the results by the file_url field.
func ByFileURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileURL, opts...).ToFunc()
}

// ByFileName orders the results by the file_name field.
func ByFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileName, opts...).ToFunc()
}

// ByFileType orders the results by the file_type field.
func ByFileType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileType, opts...).ToFunc()
}

// ByTaskStatus orders the results by the task_status field.
func ByTaskStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskStatus, opts...).ToFunc()
}

// ByTotalRecords orders the results by the total_records field.
func ByTotalRecords(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalRecords, opts...).ToFunc()
}

// ByProcessedRecords orders the results by the processed_records field.
func ByProcessedRecords(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessedRecords, opts...).ToFunc()
}

// BySuccessfulRecords orders the results by the successful_records field.
func BySuccessfulRecords(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccessfulRecords, opts...).ToFunc()
}

// ByFailedRecords orders the results by the failed_records field.
func ByFailedRecords(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailedRecords, opts...).ToFunc()
}

// ByErrorSummary orders the results by the error_summary field.
func ByErrorSummary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorSummary, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByFailedAt orders the results by the failed_at field.
func ByFailedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailedAt, opts...).ToFunc()
}
