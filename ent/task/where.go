// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedBy, v))
}

// TaskType applies equality check predicate on the "task_type" field. It's identical to TaskTypeEQ.
func TaskType(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTaskType, v))
}

// EntityType applies equality check predicate on the "entity_type" field. It's identical to EntityTypeEQ.
func EntityType(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldEntityType, v))
}

// FileURL applies equality check predicate on the "file_url" field. It's identical to FileURLEQ.
func FileURL(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldFileURL, v))
}

// FileName applies equality check predicate on the "file_name" field. It's identical to FileNameEQ.
func FileName(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldFileName, v))
}

// FileType applies equality check predicate on the "file_type" field. It's identical to FileTypeEQ.
func FileType(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldFileType, v))
}

// TaskStatus applies equality check predicate on the "task_status" field. It's identical to TaskStatusEQ.
func TaskStatus(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTaskStatus, v))
}

// TotalRecords applies equality check predicate on the "total_records" field. It's identical to TotalRecordsEQ.
func TotalRecords(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTotalRecords, v))
}

// ProcessedRecords applies equality check predicate on the "processed_records" field. It's identical to ProcessedRecordsEQ.
func ProcessedRecords(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldProcessedRecords, v))
}

// SuccessfulRecords applies equality check predicate on the "successful_records" field. It's identical to SuccessfulRecordsEQ.
func SuccessfulRecords(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSuccessfulRecords, v))
}

// FailedRecords applies equality check predicate on the "failed_records" field. It's identical to FailedRecordsEQ.
func FailedRecords(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldFailedRecords, v))
}

// ErrorSummary applies equality check predicate on the "error_summary" field. It's identical to ErrorSummaryEQ.
func ErrorSummary(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldErrorSummary, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStartedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCompletedAt, v))
}

// FailedAt applies equality check predicate on the "failed_at" field. It's identical to FailedAtEQ.
func FailedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldFailedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// TaskTypeEQ applies the EQ predicate on the "task_type" field.
func TaskTypeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTaskType, v))
}

// TaskTypeNEQ applies the NEQ predicate on the "task_type" field.
func TaskTypeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTaskType, v))
}

// TaskTypeIn applies the In predicate on the "task_type" field.
func TaskTypeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTaskType, vs...))
}

// TaskTypeNotIn applies the NotIn predicate on the "task_type" field.
func TaskTypeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTaskType, vs...))
}

// TaskTypeGT applies the GT predicate on the "task_type" field.
func TaskTypeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTaskType, v))
}

// TaskTypeGTE applies the GTE predicate on the "task_type" field.
func TaskTypeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTaskType, v))
}

// TaskTypeLT applies the LT predicate on the "task_type" field.
func TaskTypeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTaskType, v))
}

// TaskTypeLTE applies the LTE predicate on the "task_type" field.
func TaskTypeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTaskType, v))
}

// TaskTypeContains applies the Contains predicate on the "task_type" field.
func TaskTypeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldTaskType, v))
}

// TaskTypeHasPrefix applies the HasPrefix predicate on the "task_type" field.
func TaskTypeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldTaskType, v))
}

// TaskTypeHasSuffix applies the HasSuffix predicate on the "task_type" field.
func TaskTypeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldTaskType, v))
}

// TaskTypeEqualFold applies the EqualFold predicate on the "task_type" field.
func TaskTypeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldTaskType, v))
}

// TaskTypeContainsFold applies the ContainsFold predicate on the "task_type" field.
func TaskTypeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldTaskType, v))
}

// EntityTypeEQ applies the EQ predicate on the "entity_type" field.
func EntityTypeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldEntityType, v))
}

// EntityTypeNEQ applies the NEQ predicate on the "entity_type" field.
func EntityTypeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldEntityType, v))
}

// EntityTypeIn applies the In predicate on the "entity_type" field.
func EntityTypeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldEntityType, vs...))
}

// EntityTypeNotIn applies the NotIn predicate on the "entity_type" field.
func EntityTypeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldEntityType, vs...))
}

// EntityTypeGT applies the GT predicate on the "entity_type" field.
func EntityTypeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldEntityType, v))
}

// EntityTypeGTE applies the GTE predicate on the "entity_type" field.
func EntityTypeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldEntityType, v))
}

// EntityTypeLT applies the LT predicate on the "entity_type" field.
func EntityTypeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldEntityType, v))
}

// EntityTypeLTE applies the LTE predicate on the "entity_type" field.
func EntityTypeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldEntityType, v))
}

// EntityTypeContains applies the Contains predicate on the "entity_type" field.
func EntityTypeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldEntityType, v))
}

// EntityTypeHasPrefix applies the HasPrefix predicate on the "entity_type" field.
func EntityTypeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldEntityType, v))
}

// EntityTypeHasSuffix applies the HasSuffix predicate on the "entity_type" field.
func EntityTypeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldEntityType, v))
}

// EntityTypeEqualFold applies the EqualFold predicate on the "entity_type" field.
func EntityTypeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldEntityType, v))
}

// EntityTypeContainsFold applies the ContainsFold predicate on the "entity_type" field.
func EntityTypeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldEntityType, v))
}

// FileURLEQ applies the EQ predicate on the "file_url" field.
func FileURLEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldFileURL, v))
}

// FileURLNEQ applies the NEQ predicate on the "file_url" field.
func FileURLNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldFileURL, v))
}

// FileURLIn applies the In predicate on the "file_url" field.
func FileURLIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldFileURL, vs...))
}

// FileURLNotIn applies the NotIn predicate on the "file_url" field.
func FileURLNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldFileURL, vs...))
}

// FileURLGT applies the GT predicate on the "file_url" field.
func FileURLGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldFileURL, v))
}

// FileURLGTE applies the GTE predicate on the "file_url" field.
func FileURLGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldFileURL, v))
}

// FileURLLT applies the LT predicate on the "file_url" field.
func FileURLLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldFileURL, v))
}

// FileURLLTE applies the LTE predicate on the "file_url" field.
func FileURLLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldFileURL, v))
}

// FileURLContains applies the Contains predicate on the "file_url" field.
func FileURLContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldFileURL, v))
}

// FileURLHasPrefix applies the HasPrefix predicate on the "file_url" field.
func FileURLHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldFileURL, v))
}

// FileURLHasSuffix applies the HasSuffix predicate on the "file_url" field.
func FileURLHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldFileURL, v))
}

// FileURLEqualFold applies the EqualFold predicate on the "file_url" field.
func FileURLEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldFileURL, v))
}

// FileURLContainsFold applies the ContainsFold predicate on the "file_url" field.
func FileURLContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldFileURL, v))
}

// FileNameEQ applies the EQ predicate on the "file_name" field.
func FileNameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldFileName, v))
}

// FileNameNEQ applies the NEQ predicate on the "file_name" field.
func FileNameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldFileName, v))
}

// FileNameIn applies the In predicate on the "file_name" field.
func FileNameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldFileName, vs...))
}

// FileNameNotIn applies the NotIn predicate on the "file_name" field.
func FileNameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldFileName, vs...))
}

// FileNameGT applies the GT predicate on the "file_name" field.
func FileNameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldFileName, v))
}

// FileNameGTE applies the GTE predicate on the "file_name" field.
func FileNameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldFileName, v))
}

// FileNameLT applies the LT predicate on the "file_name" field.
func FileNameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldFileName, v))
}

// FileNameLTE applies the LTE predicate on the "file_name" field.
func FileNameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldFileName, v))
}

// FileNameContains applies the Contains predicate on the "file_name" field.
func FileNameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldFileName, v))
}

// FileNameHasPrefix applies the HasPrefix predicate on the "file_name" field.
func FileNameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldFileName, v))
}

// FileNameHasSuffix applies the HasSuffix predicate on the "file_name" field.
func FileNameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldFileName, v))
}

// FileNameIsNil applies the IsNil predicate on the "file_name" field.
func FileNameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldFileName))
}

// FileNameNotNil applies the NotNil predicate on the "file_name" field.
func FileNameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldFileName))
}

// FileNameEqualFold applies the EqualFold predicate on the "file_name" field.
func FileNameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldFileName, v))
}

// FileNameContainsFold applies the ContainsFold predicate on the "file_name" field.
func FileNameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldFileName, v))
}

// FileTypeEQ applies the EQ predicate on the "file_type" field.
func FileTypeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldFileType, v))
}

// FileTypeNEQ applies the NEQ predicate on the "file_type" field.
func FileTypeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldFileType, v))
}

// FileTypeIn applies the In predicate on the "file_type" field.
func FileTypeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldFileType, vs...))
}

// FileTypeNotIn applies the NotIn predicate on the "file_type" field.
func FileTypeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldFileType, vs...))
}

// FileTypeGT applies the GT predicate on the "file_type" field.
func FileTypeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldFileType, v))
}

// FileTypeGTE applies the GTE predicate on the "file_type" field.
func FileTypeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldFileType, v))
}

// FileTypeLT applies the LT predicate on the "file_type" field.
func FileTypeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldFileType, v))
}

// FileTypeLTE applies the LTE predicate on the "file_type" field.
func FileTypeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldFileType, v))
}

// FileTypeContains applies the Contains predicate on the "file_type" field.
func FileTypeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldFileType, v))
}

// FileTypeHasPrefix applies the HasPrefix predicate on the "file_type" field.
func FileTypeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldFileType, v))
}

// FileTypeHasSuffix applies the HasSuffix predicate on the "file_type" field.
func FileTypeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldFileType, v))
}

// FileTypeEqualFold applies the EqualFold predicate on the "file_type" field.
func FileTypeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldFileType, v))
}

// FileTypeContainsFold applies the ContainsFold predicate on the "file_type" field.
func FileTypeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldFileType, v))
}

// TaskStatusEQ applies the EQ predicate on the "task_status" field.
func TaskStatusEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTaskStatus, v))
}

// TaskStatusNEQ applies the NEQ predicate on the "task_status" field.
func TaskStatusNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTaskStatus, v))
}

// TaskStatusIn applies the In predicate on the "task_status" field.
func TaskStatusIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTaskStatus, vs...))
}

// TaskStatusNotIn applies the NotIn predicate on the "task_status" field.
func TaskStatusNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTaskStatus, vs...))
}

// TaskStatusGT applies the GT predicate on the "task_status" field.
func TaskStatusGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTaskStatus, v))
}

// TaskStatusGTE applies the GTE predicate on the "task_status" field.
func TaskStatusGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTaskStatus, v))
}

// TaskStatusLT applies the LT predicate on the "task_status" field.
func TaskStatusLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTaskStatus, v))
}

// TaskStatusLTE applies the LTE predicate on the "task_status" field.
func TaskStatusLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTaskStatus, v))
}

// TaskStatusContains applies the Contains predicate on the "task_status" field.
func TaskStatusContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldTaskStatus, v))
}

// TaskStatusHasPrefix applies the HasPrefix predicate on the "task_status" field.
func TaskStatusHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldTaskStatus, v))
}

// TaskStatusHasSuffix applies the HasSuffix predicate on the "task_status" field.
func TaskStatusHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldTaskStatus, v))
}

// TaskStatusEqualFold applies the EqualFold predicate on the "task_status" field.
func TaskStatusEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldTaskStatus, v))
}

// TaskStatusContainsFold applies the ContainsFold predicate on the "task_status" field.
func TaskStatusContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldTaskStatus, v))
}

// TotalRecordsEQ applies the EQ predicate on the "total_records" field.
func TotalRecordsEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTotalRecords, v))
}

// TotalRecordsNEQ applies the NEQ predicate on the "total_records" field.
func TotalRecordsNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTotalRecords, v))
}

// TotalRecordsIn applies the In predicate on the "total_records" field.
func TotalRecordsIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTotalRecords, vs...))
}

// TotalRecordsNotIn applies the NotIn predicate on the "total_records" field.
func TotalRecordsNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTotalRecords, vs...))
}

// TotalRecordsGT applies the GT predicate on the "total_records" field.
func TotalRecordsGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTotalRecords, v))
}

// TotalRecordsGTE applies the GTE predicate on the "total_records" field.
func TotalRecordsGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTotalRecords, v))
}

// TotalRecordsLT applies the LT predicate on the "total_records" field.
func TotalRecordsLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTotalRecords, v))
}

// TotalRecordsLTE applies the LTE predicate on the "total_records" field.
func TotalRecordsLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTotalRecords, v))
}

// TotalRecordsIsNil applies the IsNil predicate on the "total_records" field.
func TotalRecordsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldTotalRecords))
}

// TotalRecordsNotNil applies the NotNil predicate on the "total_records" field.
func TotalRecordsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldTotalRecords))
}

// ProcessedRecordsEQ applies the EQ predicate on the "processed_records" field.
func ProcessedRecordsEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldProcessedRecords, v))
}

// ProcessedRecordsNEQ applies the NEQ predicate on the "processed_records" field.
func ProcessedRecordsNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldProcessedRecords, v))
}

// ProcessedRecordsIn applies the In predicate on the "processed_records" field.
func ProcessedRecordsIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldProcessedRecords, vs...))
}

// ProcessedRecordsNotIn applies the NotIn predicate on the "processed_records" field.
func ProcessedRecordsNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldProcessedRecords, vs...))
}

// ProcessedRecordsGT applies the GT predicate on the "processed_records" field.
func ProcessedRecordsGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldProcessedRecords, v))
}

// ProcessedRecordsGTE applies the GTE predicate on the "processed_records" field.
func ProcessedRecordsGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldProcessedRecords, v))
}

// ProcessedRecordsLT applies the LT predicate on the "processed_records" field.
func ProcessedRecordsLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldProcessedRecords, v))
}

// ProcessedRecordsLTE applies the LTE predicate on the "processed_records" field.
func ProcessedRecordsLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldProcessedRecords, v))
}

// SuccessfulRecordsEQ applies the EQ predicate on the "successful_records" field.
func SuccessfulRecordsEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSuccessfulRecords, v))
}

// SuccessfulRecordsNEQ applies the NEQ predicate on the "successful_records" field.
func SuccessfulRecordsNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldSuccessfulRecords, v))
}

// SuccessfulRecordsIn applies the In predicate on the "successful_records" field.
func SuccessfulRecordsIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldSuccessfulRecords, vs...))
}

// SuccessfulRecordsNotIn applies the NotIn predicate on the "successful_records" field.
func SuccessfulRecordsNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldSuccessfulRecords, vs...))
}

// SuccessfulRecordsGT applies the GT predicate on the "successful_records" field.
func SuccessfulRecordsGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldSuccessfulRecords, v))
}

// SuccessfulRecordsGTE applies the GTE predicate on the "successful_records" field.
func SuccessfulRecordsGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldSuccessfulRecords, v))
}

// SuccessfulRecordsLT applies the LT predicate on the "successful_records" field.
func SuccessfulRecordsLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldSuccessfulRecords, v))
}

// SuccessfulRecordsLTE applies the LTE predicate on the "successful_records" field.
func SuccessfulRecordsLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldSuccessfulRecords, v))
}

// FailedRecordsEQ applies the EQ predicate on the "failed_records" field.
func FailedRecordsEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldFailedRecords, v))
}

// FailedRecordsNEQ applies the NEQ predicate on the "failed_records" field.
func FailedRecordsNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldFailedRecords, v))
}

// FailedRecordsIn applies the In predicate on the "failed_records" field.
func FailedRecordsIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldFailedRecords, vs...))
}

// FailedRecordsNotIn applies the NotIn predicate on the "failed_records" field.
func FailedRecordsNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldFailedRecords, vs...))
}

// FailedRecordsGT applies the GT predicate on the "failed_records" field.
func FailedRecordsGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldFailedRecords, v))
}

// FailedRecordsGTE applies the GTE predicate on the "failed_records" field.
func FailedRecordsGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldFailedRecords, v))
}

// FailedRecordsLT applies the LT predicate on the "failed_records" field.
func FailedRecordsLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldFailedRecords, v))
}

// FailedRecordsLTE applies the LTE predicate on the "failed_records" field.
func FailedRecordsLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldFailedRecords, v))
}

// ErrorSummaryEQ applies the EQ predicate on the "error_summary" field.
func ErrorSummaryEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldErrorSummary, v))
}

// ErrorSummaryNEQ applies the NEQ predicate on the "error_summary" field.
func ErrorSummaryNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldErrorSummary, v))
}

// ErrorSummaryIn applies the In predicate on the "error_summary" field.
func ErrorSummaryIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldErrorSummary, vs...))
}

// ErrorSummaryNotIn applies the NotIn predicate on the "error_summary" field.
func ErrorSummaryNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldErrorSummary, vs...))
}

// ErrorSummaryGT applies the GT predicate on the "error_summary" field.
func ErrorSummaryGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldErrorSummary, v))
}

// ErrorSummaryGTE applies the GTE predicate on the "error_summary" field.
func ErrorSummaryGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldErrorSummary, v))
}

// ErrorSummaryLT applies the LT predicate on the "error_summary" field.
func ErrorSummaryLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldErrorSummary, v))
}

// ErrorSummaryLTE applies the LTE predicate on the "error_summary" field.
func ErrorSummaryLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldErrorSummary, v))
}

// ErrorSummaryContains applies the Contains predicate on the "error_summary" field.
func ErrorSummaryContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldErrorSummary, v))
}

// ErrorSummaryHasPrefix applies the HasPrefix predicate on the "error_summary" field.
func ErrorSummaryHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldErrorSummary, v))
}

// ErrorSummaryHasSuffix applies the HasSuffix predicate on the "error_summary" field.
func ErrorSummaryHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldErrorSummary, v))
}

// ErrorSummaryIsNil applies the IsNil predicate on the "error_summary" field.
func ErrorSummaryIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldErrorSummary))
}

// ErrorSummaryNotNil applies the NotNil predicate on the "error_summary" field.
func ErrorSummaryNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldErrorSummary))
}

// ErrorSummaryEqualFold applies the EqualFold predicate on the "error_summary" field.
func ErrorSummaryEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldErrorSummary, v))
}

// ErrorSummaryContainsFold applies the ContainsFold predicate on the "error_summary" field.
func ErrorSummaryContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldErrorSummary, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldMetadata))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldStartedAt))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldCompletedAt))
}

// FailedAtEQ applies the EQ predicate on the "failed_at" field.
func FailedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldFailedAt, v))
}

// FailedAtNEQ applies the NEQ predicate on the "failed_at" field.
func FailedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldFailedAt, v))
}

// FailedAtIn applies the In predicate on the "failed_at" field.
func FailedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldFailedAt, vs...))
}

// FailedAtNotIn applies the NotIn predicate on the "failed_at" field.
func FailedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldFailedAt, vs...))
}

// FailedAtGT applies the GT predicate on the "failed_at" field.
func FailedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldFailedAt, v))
}

// FailedAtGTE applies the GTE predicate on the "failed_at" field.
func FailedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldFailedAt, v))
}

// FailedAtLT applies the LT predicate on the "failed_at" field.
func FailedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldFailedAt, v))
}

// FailedAtLTE applies the LTE predicate on the "failed_at" field.
func FailedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldFailedAt, v))
}

// FailedAtIsNil applies the IsNil predicate on the "failed_at" field.
func FailedAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldFailedAt))
}

// FailedAtNotNil applies the NotNil predicate on the "failed_at" field.
func FailedAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldFailedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
