// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/taxapplied"
	"github.com/shopspring/decimal"
)

// TaxApplied is the model entity for the TaxApplied schema.
type TaxApplied struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// Reference to the TaxRate entity that was applied
	TaxRateID string `json:"tax_rate_id,omitempty"`
	// Type of entity this tax was applied to (invoice, subscription, etc.)
	EntityType string `json:"entity_type,omitempty"`
	// ID of the entity this tax was applied to
	EntityID string `json:"entity_id,omitempty"`
	// Reference to the TaxAssociation that triggered this application
	TaxAssociationID string `json:"tax_association_id,omitempty"`
	// Base amount on which tax was calculated
	TaxableAmount decimal.Decimal `json:"taxable_amount,omitempty"`
	// Calculated tax amount
	TaxAmount decimal.Decimal `json:"tax_amount,omitempty"`
	// Currency code (ISO 4217)
	Currency string `json:"currency,omitempty"`
	// Tax jurisdiction (country, state, city, etc.)
	Jurisdiction string `json:"jurisdiction,omitempty"`
	// When the tax was applied
	AppliedAt time.Time `json:"applied_at,omitempty"`
	// Additional metadata for tax calculation details
	Metadata     map[string]string `json:"metadata,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaxApplied) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taxapplied.FieldMetadata:
			values[i] = new([]byte)
		case taxapplied.FieldTaxableAmount, taxapplied.FieldTaxAmount:
			values[i] = new(decimal.Decimal)
		case taxapplied.FieldID, taxapplied.FieldTenantID, taxapplied.FieldStatus, taxapplied.FieldCreatedBy, taxapplied.FieldUpdatedBy, taxapplied.FieldEnvironmentID, taxapplied.FieldTaxRateID, taxapplied.FieldEntityType, taxapplied.FieldEntityID, taxapplied.FieldTaxAssociationID, taxapplied.FieldCurrency, taxapplied.FieldJurisdiction:
			values[i] = new(sql.NullString)
		case taxapplied.FieldCreatedAt, taxapplied.FieldUpdatedAt, taxapplied.FieldAppliedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaxApplied fields.
func (ta *TaxApplied) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taxapplied.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ta.ID = value.String
			}
		case taxapplied.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ta.TenantID = value.String
			}
		case taxapplied.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ta.Status = value.String
			}
		case taxapplied.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ta.CreatedAt = value.Time
			}
		case taxapplied.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ta.UpdatedAt = value.Time
			}
		case taxapplied.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ta.CreatedBy = value.String
			}
		case taxapplied.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ta.UpdatedBy = value.String
			}
		case taxapplied.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				ta.EnvironmentID = value.String
			}
		case taxapplied.FieldTaxRateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_rate_id", values[i])
			} else if value.Valid {
				ta.TaxRateID = value.String
			}
		case taxapplied.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				ta.EntityType = value.String
			}
		case taxapplied.FieldEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				ta.EntityID = value.String
			}
		case taxapplied.FieldTaxAssociationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_association_id", values[i])
			} else if value.Valid {
				ta.TaxAssociationID = value.String
			}
		case taxapplied.FieldTaxableAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field taxable_amount", values[i])
			} else if value != nil {
				ta.TaxableAmount = *value
			}
		case taxapplied.FieldTaxAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field tax_amount", values[i])
			} else if value != nil {
				ta.TaxAmount = *value
			}
		case taxapplied.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				ta.Currency = value.String
			}
		case taxapplied.FieldJurisdiction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jurisdiction", values[i])
			} else if value.Valid {
				ta.Jurisdiction = value.String
			}
		case taxapplied.FieldAppliedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field applied_at", values[i])
			} else if value.Valid {
				ta.AppliedAt = value.Time
			}
		case taxapplied.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ta.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			ta.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaxApplied.
// This includes values selected through modifiers, order, etc.
func (ta *TaxApplied) Value(name string) (ent.Value, error) {
	return ta.selectValues.Get(name)
}

// Update returns a builder for updating this TaxApplied.
// Note that you need to call TaxApplied.Unwrap() before calling this method if this TaxApplied
// was returned from a transaction, and the transaction was committed or rolled back.
func (ta *TaxApplied) Update() *TaxAppliedUpdateOne {
	return NewTaxAppliedClient(ta.config).UpdateOne(ta)
}

// Unwrap unwraps the TaxApplied entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ta *TaxApplied) Unwrap() *TaxApplied {
	_tx, ok := ta.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaxApplied is not a transactional entity")
	}
	ta.config.driver = _tx.drv
	return ta
}

// String implements the fmt.Stringer.
func (ta *TaxApplied) String() string {
	var builder strings.Builder
	builder.WriteString("TaxApplied(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ta.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(ta.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ta.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ta.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ta.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ta.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ta.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(ta.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("tax_rate_id=")
	builder.WriteString(ta.TaxRateID)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(ta.EntityType)
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(ta.EntityID)
	builder.WriteString(", ")
	builder.WriteString("tax_association_id=")
	builder.WriteString(ta.TaxAssociationID)
	builder.WriteString(", ")
	builder.WriteString("taxable_amount=")
	builder.WriteString(fmt.Sprintf("%v", ta.TaxableAmount))
	builder.WriteString(", ")
	builder.WriteString("tax_amount=")
	builder.WriteString(fmt.Sprintf("%v", ta.TaxAmount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(ta.Currency)
	builder.WriteString(", ")
	builder.WriteString("jurisdiction=")
	builder.WriteString(ta.Jurisdiction)
	builder.WriteString(", ")
	builder.WriteString("applied_at=")
	builder.WriteString(ta.AppliedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", ta.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// TaxApplieds is a parsable slice of TaxApplied.
type TaxApplieds []*TaxApplied
