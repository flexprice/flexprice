// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/taxapplied"
	"github.com/shopspring/decimal"
)

// TaxAppliedUpdate is the builder for updating TaxApplied entities.
type TaxAppliedUpdate struct {
	config
	hooks    []Hook
	mutation *TaxAppliedMutation
}

// Where appends a list predicates to the TaxAppliedUpdate builder.
func (tau *TaxAppliedUpdate) Where(ps ...predicate.TaxApplied) *TaxAppliedUpdate {
	tau.mutation.Where(ps...)
	return tau
}

// SetStatus sets the "status" field.
func (tau *TaxAppliedUpdate) SetStatus(s string) *TaxAppliedUpdate {
	tau.mutation.SetStatus(s)
	return tau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tau *TaxAppliedUpdate) SetNillableStatus(s *string) *TaxAppliedUpdate {
	if s != nil {
		tau.SetStatus(*s)
	}
	return tau
}

// SetUpdatedAt sets the "updated_at" field.
func (tau *TaxAppliedUpdate) SetUpdatedAt(t time.Time) *TaxAppliedUpdate {
	tau.mutation.SetUpdatedAt(t)
	return tau
}

// SetUpdatedBy sets the "updated_by" field.
func (tau *TaxAppliedUpdate) SetUpdatedBy(s string) *TaxAppliedUpdate {
	tau.mutation.SetUpdatedBy(s)
	return tau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tau *TaxAppliedUpdate) SetNillableUpdatedBy(s *string) *TaxAppliedUpdate {
	if s != nil {
		tau.SetUpdatedBy(*s)
	}
	return tau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tau *TaxAppliedUpdate) ClearUpdatedBy() *TaxAppliedUpdate {
	tau.mutation.ClearUpdatedBy()
	return tau
}

// SetTaxableAmount sets the "taxable_amount" field.
func (tau *TaxAppliedUpdate) SetTaxableAmount(d decimal.Decimal) *TaxAppliedUpdate {
	tau.mutation.SetTaxableAmount(d)
	return tau
}

// SetNillableTaxableAmount sets the "taxable_amount" field if the given value is not nil.
func (tau *TaxAppliedUpdate) SetNillableTaxableAmount(d *decimal.Decimal) *TaxAppliedUpdate {
	if d != nil {
		tau.SetTaxableAmount(*d)
	}
	return tau
}

// SetTaxAmount sets the "tax_amount" field.
func (tau *TaxAppliedUpdate) SetTaxAmount(d decimal.Decimal) *TaxAppliedUpdate {
	tau.mutation.SetTaxAmount(d)
	return tau
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (tau *TaxAppliedUpdate) SetNillableTaxAmount(d *decimal.Decimal) *TaxAppliedUpdate {
	if d != nil {
		tau.SetTaxAmount(*d)
	}
	return tau
}

// SetJurisdiction sets the "jurisdiction" field.
func (tau *TaxAppliedUpdate) SetJurisdiction(s string) *TaxAppliedUpdate {
	tau.mutation.SetJurisdiction(s)
	return tau
}

// SetNillableJurisdiction sets the "jurisdiction" field if the given value is not nil.
func (tau *TaxAppliedUpdate) SetNillableJurisdiction(s *string) *TaxAppliedUpdate {
	if s != nil {
		tau.SetJurisdiction(*s)
	}
	return tau
}

// ClearJurisdiction clears the value of the "jurisdiction" field.
func (tau *TaxAppliedUpdate) ClearJurisdiction() *TaxAppliedUpdate {
	tau.mutation.ClearJurisdiction()
	return tau
}

// SetMetadata sets the "metadata" field.
func (tau *TaxAppliedUpdate) SetMetadata(m map[string]string) *TaxAppliedUpdate {
	tau.mutation.SetMetadata(m)
	return tau
}

// ClearMetadata clears the value of the "metadata" field.
func (tau *TaxAppliedUpdate) ClearMetadata() *TaxAppliedUpdate {
	tau.mutation.ClearMetadata()
	return tau
}

// Mutation returns the TaxAppliedMutation object of the builder.
func (tau *TaxAppliedUpdate) Mutation() *TaxAppliedMutation {
	return tau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tau *TaxAppliedUpdate) Save(ctx context.Context) (int, error) {
	tau.defaults()
	return withHooks(ctx, tau.sqlSave, tau.mutation, tau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tau *TaxAppliedUpdate) SaveX(ctx context.Context) int {
	affected, err := tau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tau *TaxAppliedUpdate) Exec(ctx context.Context) error {
	_, err := tau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tau *TaxAppliedUpdate) ExecX(ctx context.Context) {
	if err := tau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tau *TaxAppliedUpdate) defaults() {
	if _, ok := tau.mutation.UpdatedAt(); !ok {
		v := taxapplied.UpdateDefaultUpdatedAt()
		tau.mutation.SetUpdatedAt(v)
	}
}

func (tau *TaxAppliedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(taxapplied.Table, taxapplied.Columns, sqlgraph.NewFieldSpec(taxapplied.FieldID, field.TypeString))
	if ps := tau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tau.mutation.Status(); ok {
		_spec.SetField(taxapplied.FieldStatus, field.TypeString, value)
	}
	if value, ok := tau.mutation.UpdatedAt(); ok {
		_spec.SetField(taxapplied.FieldUpdatedAt, field.TypeTime, value)
	}
	if tau.mutation.CreatedByCleared() {
		_spec.ClearField(taxapplied.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tau.mutation.UpdatedBy(); ok {
		_spec.SetField(taxapplied.FieldUpdatedBy, field.TypeString, value)
	}
	if tau.mutation.UpdatedByCleared() {
		_spec.ClearField(taxapplied.FieldUpdatedBy, field.TypeString)
	}
	if tau.mutation.EnvironmentIDCleared() {
		_spec.ClearField(taxapplied.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := tau.mutation.TaxableAmount(); ok {
		_spec.SetField(taxapplied.FieldTaxableAmount, field.TypeOther, value)
	}
	if value, ok := tau.mutation.TaxAmount(); ok {
		_spec.SetField(taxapplied.FieldTaxAmount, field.TypeOther, value)
	}
	if value, ok := tau.mutation.Jurisdiction(); ok {
		_spec.SetField(taxapplied.FieldJurisdiction, field.TypeString, value)
	}
	if tau.mutation.JurisdictionCleared() {
		_spec.ClearField(taxapplied.FieldJurisdiction, field.TypeString)
	}
	if value, ok := tau.mutation.Metadata(); ok {
		_spec.SetField(taxapplied.FieldMetadata, field.TypeJSON, value)
	}
	if tau.mutation.MetadataCleared() {
		_spec.ClearField(taxapplied.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxapplied.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tau.mutation.done = true
	return n, nil
}

// TaxAppliedUpdateOne is the builder for updating a single TaxApplied entity.
type TaxAppliedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaxAppliedMutation
}

// SetStatus sets the "status" field.
func (tauo *TaxAppliedUpdateOne) SetStatus(s string) *TaxAppliedUpdateOne {
	tauo.mutation.SetStatus(s)
	return tauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tauo *TaxAppliedUpdateOne) SetNillableStatus(s *string) *TaxAppliedUpdateOne {
	if s != nil {
		tauo.SetStatus(*s)
	}
	return tauo
}

// SetUpdatedAt sets the "updated_at" field.
func (tauo *TaxAppliedUpdateOne) SetUpdatedAt(t time.Time) *TaxAppliedUpdateOne {
	tauo.mutation.SetUpdatedAt(t)
	return tauo
}

// SetUpdatedBy sets the "updated_by" field.
func (tauo *TaxAppliedUpdateOne) SetUpdatedBy(s string) *TaxAppliedUpdateOne {
	tauo.mutation.SetUpdatedBy(s)
	return tauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tauo *TaxAppliedUpdateOne) SetNillableUpdatedBy(s *string) *TaxAppliedUpdateOne {
	if s != nil {
		tauo.SetUpdatedBy(*s)
	}
	return tauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tauo *TaxAppliedUpdateOne) ClearUpdatedBy() *TaxAppliedUpdateOne {
	tauo.mutation.ClearUpdatedBy()
	return tauo
}

// SetTaxableAmount sets the "taxable_amount" field.
func (tauo *TaxAppliedUpdateOne) SetTaxableAmount(d decimal.Decimal) *TaxAppliedUpdateOne {
	tauo.mutation.SetTaxableAmount(d)
	return tauo
}

// SetNillableTaxableAmount sets the "taxable_amount" field if the given value is not nil.
func (tauo *TaxAppliedUpdateOne) SetNillableTaxableAmount(d *decimal.Decimal) *TaxAppliedUpdateOne {
	if d != nil {
		tauo.SetTaxableAmount(*d)
	}
	return tauo
}

// SetTaxAmount sets the "tax_amount" field.
func (tauo *TaxAppliedUpdateOne) SetTaxAmount(d decimal.Decimal) *TaxAppliedUpdateOne {
	tauo.mutation.SetTaxAmount(d)
	return tauo
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (tauo *TaxAppliedUpdateOne) SetNillableTaxAmount(d *decimal.Decimal) *TaxAppliedUpdateOne {
	if d != nil {
		tauo.SetTaxAmount(*d)
	}
	return tauo
}

// SetJurisdiction sets the "jurisdiction" field.
func (tauo *TaxAppliedUpdateOne) SetJurisdiction(s string) *TaxAppliedUpdateOne {
	tauo.mutation.SetJurisdiction(s)
	return tauo
}

// SetNillableJurisdiction sets the "jurisdiction" field if the given value is not nil.
func (tauo *TaxAppliedUpdateOne) SetNillableJurisdiction(s *string) *TaxAppliedUpdateOne {
	if s != nil {
		tauo.SetJurisdiction(*s)
	}
	return tauo
}

// ClearJurisdiction clears the value of the "jurisdiction" field.
func (tauo *TaxAppliedUpdateOne) ClearJurisdiction() *TaxAppliedUpdateOne {
	tauo.mutation.ClearJurisdiction()
	return tauo
}

// SetMetadata sets the "metadata" field.
func (tauo *TaxAppliedUpdateOne) SetMetadata(m map[string]string) *TaxAppliedUpdateOne {
	tauo.mutation.SetMetadata(m)
	return tauo
}

// ClearMetadata clears the value of the "metadata" field.
func (tauo *TaxAppliedUpdateOne) ClearMetadata() *TaxAppliedUpdateOne {
	tauo.mutation.ClearMetadata()
	return tauo
}

// Mutation returns the TaxAppliedMutation object of the builder.
func (tauo *TaxAppliedUpdateOne) Mutation() *TaxAppliedMutation {
	return tauo.mutation
}

// Where appends a list predicates to the TaxAppliedUpdate builder.
func (tauo *TaxAppliedUpdateOne) Where(ps ...predicate.TaxApplied) *TaxAppliedUpdateOne {
	tauo.mutation.Where(ps...)
	return tauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tauo *TaxAppliedUpdateOne) Select(field string, fields ...string) *TaxAppliedUpdateOne {
	tauo.fields = append([]string{field}, fields...)
	return tauo
}

// Save executes the query and returns the updated TaxApplied entity.
func (tauo *TaxAppliedUpdateOne) Save(ctx context.Context) (*TaxApplied, error) {
	tauo.defaults()
	return withHooks(ctx, tauo.sqlSave, tauo.mutation, tauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tauo *TaxAppliedUpdateOne) SaveX(ctx context.Context) *TaxApplied {
	node, err := tauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tauo *TaxAppliedUpdateOne) Exec(ctx context.Context) error {
	_, err := tauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tauo *TaxAppliedUpdateOne) ExecX(ctx context.Context) {
	if err := tauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tauo *TaxAppliedUpdateOne) defaults() {
	if _, ok := tauo.mutation.UpdatedAt(); !ok {
		v := taxapplied.UpdateDefaultUpdatedAt()
		tauo.mutation.SetUpdatedAt(v)
	}
}

func (tauo *TaxAppliedUpdateOne) sqlSave(ctx context.Context) (_node *TaxApplied, err error) {
	_spec := sqlgraph.NewUpdateSpec(taxapplied.Table, taxapplied.Columns, sqlgraph.NewFieldSpec(taxapplied.FieldID, field.TypeString))
	id, ok := tauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaxApplied.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taxapplied.FieldID)
		for _, f := range fields {
			if !taxapplied.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taxapplied.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tauo.mutation.Status(); ok {
		_spec.SetField(taxapplied.FieldStatus, field.TypeString, value)
	}
	if value, ok := tauo.mutation.UpdatedAt(); ok {
		_spec.SetField(taxapplied.FieldUpdatedAt, field.TypeTime, value)
	}
	if tauo.mutation.CreatedByCleared() {
		_spec.ClearField(taxapplied.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tauo.mutation.UpdatedBy(); ok {
		_spec.SetField(taxapplied.FieldUpdatedBy, field.TypeString, value)
	}
	if tauo.mutation.UpdatedByCleared() {
		_spec.ClearField(taxapplied.FieldUpdatedBy, field.TypeString)
	}
	if tauo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(taxapplied.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := tauo.mutation.TaxableAmount(); ok {
		_spec.SetField(taxapplied.FieldTaxableAmount, field.TypeOther, value)
	}
	if value, ok := tauo.mutation.TaxAmount(); ok {
		_spec.SetField(taxapplied.FieldTaxAmount, field.TypeOther, value)
	}
	if value, ok := tauo.mutation.Jurisdiction(); ok {
		_spec.SetField(taxapplied.FieldJurisdiction, field.TypeString, value)
	}
	if tauo.mutation.JurisdictionCleared() {
		_spec.ClearField(taxapplied.FieldJurisdiction, field.TypeString)
	}
	if value, ok := tauo.mutation.Metadata(); ok {
		_spec.SetField(taxapplied.FieldMetadata, field.TypeJSON, value)
	}
	if tauo.mutation.MetadataCleared() {
		_spec.ClearField(taxapplied.FieldMetadata, field.TypeJSON)
	}
	_node = &TaxApplied{config: tauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxapplied.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tauo.mutation.done = true
	return _node, nil
}
