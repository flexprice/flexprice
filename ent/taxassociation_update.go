// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/taxassociation"
)

// TaxAssociationUpdate is the builder for updating TaxAssociation entities.
type TaxAssociationUpdate struct {
	config
	hooks    []Hook
	mutation *TaxAssociationMutation
}

// Where appends a list predicates to the TaxAssociationUpdate builder.
func (tau *TaxAssociationUpdate) Where(ps ...predicate.TaxAssociation) *TaxAssociationUpdate {
	tau.mutation.Where(ps...)
	return tau
}

// SetStatus sets the "status" field.
func (tau *TaxAssociationUpdate) SetStatus(s string) *TaxAssociationUpdate {
	tau.mutation.SetStatus(s)
	return tau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tau *TaxAssociationUpdate) SetNillableStatus(s *string) *TaxAssociationUpdate {
	if s != nil {
		tau.SetStatus(*s)
	}
	return tau
}

// SetUpdatedAt sets the "updated_at" field.
func (tau *TaxAssociationUpdate) SetUpdatedAt(t time.Time) *TaxAssociationUpdate {
	tau.mutation.SetUpdatedAt(t)
	return tau
}

// SetUpdatedBy sets the "updated_by" field.
func (tau *TaxAssociationUpdate) SetUpdatedBy(s string) *TaxAssociationUpdate {
	tau.mutation.SetUpdatedBy(s)
	return tau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tau *TaxAssociationUpdate) SetNillableUpdatedBy(s *string) *TaxAssociationUpdate {
	if s != nil {
		tau.SetUpdatedBy(*s)
	}
	return tau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tau *TaxAssociationUpdate) ClearUpdatedBy() *TaxAssociationUpdate {
	tau.mutation.ClearUpdatedBy()
	return tau
}

// SetEntityID sets the "entity_id" field.
func (tau *TaxAssociationUpdate) SetEntityID(s string) *TaxAssociationUpdate {
	tau.mutation.SetEntityID(s)
	return tau
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (tau *TaxAssociationUpdate) SetNillableEntityID(s *string) *TaxAssociationUpdate {
	if s != nil {
		tau.SetEntityID(*s)
	}
	return tau
}

// SetPriority sets the "priority" field.
func (tau *TaxAssociationUpdate) SetPriority(i int) *TaxAssociationUpdate {
	tau.mutation.ResetPriority()
	tau.mutation.SetPriority(i)
	return tau
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tau *TaxAssociationUpdate) SetNillablePriority(i *int) *TaxAssociationUpdate {
	if i != nil {
		tau.SetPriority(*i)
	}
	return tau
}

// AddPriority adds i to the "priority" field.
func (tau *TaxAssociationUpdate) AddPriority(i int) *TaxAssociationUpdate {
	tau.mutation.AddPriority(i)
	return tau
}

// SetAutoApply sets the "auto_apply" field.
func (tau *TaxAssociationUpdate) SetAutoApply(b bool) *TaxAssociationUpdate {
	tau.mutation.SetAutoApply(b)
	return tau
}

// SetNillableAutoApply sets the "auto_apply" field if the given value is not nil.
func (tau *TaxAssociationUpdate) SetNillableAutoApply(b *bool) *TaxAssociationUpdate {
	if b != nil {
		tau.SetAutoApply(*b)
	}
	return tau
}

// SetMetadata sets the "metadata" field.
func (tau *TaxAssociationUpdate) SetMetadata(m map[string]string) *TaxAssociationUpdate {
	tau.mutation.SetMetadata(m)
	return tau
}

// ClearMetadata clears the value of the "metadata" field.
func (tau *TaxAssociationUpdate) ClearMetadata() *TaxAssociationUpdate {
	tau.mutation.ClearMetadata()
	return tau
}

// Mutation returns the TaxAssociationMutation object of the builder.
func (tau *TaxAssociationUpdate) Mutation() *TaxAssociationMutation {
	return tau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tau *TaxAssociationUpdate) Save(ctx context.Context) (int, error) {
	tau.defaults()
	return withHooks(ctx, tau.sqlSave, tau.mutation, tau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tau *TaxAssociationUpdate) SaveX(ctx context.Context) int {
	affected, err := tau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tau *TaxAssociationUpdate) Exec(ctx context.Context) error {
	_, err := tau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tau *TaxAssociationUpdate) ExecX(ctx context.Context) {
	if err := tau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tau *TaxAssociationUpdate) defaults() {
	if _, ok := tau.mutation.UpdatedAt(); !ok {
		v := taxassociation.UpdateDefaultUpdatedAt()
		tau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tau *TaxAssociationUpdate) check() error {
	if v, ok := tau.mutation.EntityID(); ok {
		if err := taxassociation.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "TaxAssociation.entity_id": %w`, err)}
		}
	}
	return nil
}

func (tau *TaxAssociationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(taxassociation.Table, taxassociation.Columns, sqlgraph.NewFieldSpec(taxassociation.FieldID, field.TypeString))
	if ps := tau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tau.mutation.Status(); ok {
		_spec.SetField(taxassociation.FieldStatus, field.TypeString, value)
	}
	if value, ok := tau.mutation.UpdatedAt(); ok {
		_spec.SetField(taxassociation.FieldUpdatedAt, field.TypeTime, value)
	}
	if tau.mutation.CreatedByCleared() {
		_spec.ClearField(taxassociation.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tau.mutation.UpdatedBy(); ok {
		_spec.SetField(taxassociation.FieldUpdatedBy, field.TypeString, value)
	}
	if tau.mutation.UpdatedByCleared() {
		_spec.ClearField(taxassociation.FieldUpdatedBy, field.TypeString)
	}
	if tau.mutation.EnvironmentIDCleared() {
		_spec.ClearField(taxassociation.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := tau.mutation.EntityID(); ok {
		_spec.SetField(taxassociation.FieldEntityID, field.TypeString, value)
	}
	if value, ok := tau.mutation.Priority(); ok {
		_spec.SetField(taxassociation.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tau.mutation.AddedPriority(); ok {
		_spec.AddField(taxassociation.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tau.mutation.AutoApply(); ok {
		_spec.SetField(taxassociation.FieldAutoApply, field.TypeBool, value)
	}
	if tau.mutation.CurrencyCleared() {
		_spec.ClearField(taxassociation.FieldCurrency, field.TypeString)
	}
	if value, ok := tau.mutation.Metadata(); ok {
		_spec.SetField(taxassociation.FieldMetadata, field.TypeJSON, value)
	}
	if tau.mutation.MetadataCleared() {
		_spec.ClearField(taxassociation.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxassociation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tau.mutation.done = true
	return n, nil
}

// TaxAssociationUpdateOne is the builder for updating a single TaxAssociation entity.
type TaxAssociationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaxAssociationMutation
}

// SetStatus sets the "status" field.
func (tauo *TaxAssociationUpdateOne) SetStatus(s string) *TaxAssociationUpdateOne {
	tauo.mutation.SetStatus(s)
	return tauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tauo *TaxAssociationUpdateOne) SetNillableStatus(s *string) *TaxAssociationUpdateOne {
	if s != nil {
		tauo.SetStatus(*s)
	}
	return tauo
}

// SetUpdatedAt sets the "updated_at" field.
func (tauo *TaxAssociationUpdateOne) SetUpdatedAt(t time.Time) *TaxAssociationUpdateOne {
	tauo.mutation.SetUpdatedAt(t)
	return tauo
}

// SetUpdatedBy sets the "updated_by" field.
func (tauo *TaxAssociationUpdateOne) SetUpdatedBy(s string) *TaxAssociationUpdateOne {
	tauo.mutation.SetUpdatedBy(s)
	return tauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tauo *TaxAssociationUpdateOne) SetNillableUpdatedBy(s *string) *TaxAssociationUpdateOne {
	if s != nil {
		tauo.SetUpdatedBy(*s)
	}
	return tauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tauo *TaxAssociationUpdateOne) ClearUpdatedBy() *TaxAssociationUpdateOne {
	tauo.mutation.ClearUpdatedBy()
	return tauo
}

// SetEntityID sets the "entity_id" field.
func (tauo *TaxAssociationUpdateOne) SetEntityID(s string) *TaxAssociationUpdateOne {
	tauo.mutation.SetEntityID(s)
	return tauo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (tauo *TaxAssociationUpdateOne) SetNillableEntityID(s *string) *TaxAssociationUpdateOne {
	if s != nil {
		tauo.SetEntityID(*s)
	}
	return tauo
}

// SetPriority sets the "priority" field.
func (tauo *TaxAssociationUpdateOne) SetPriority(i int) *TaxAssociationUpdateOne {
	tauo.mutation.ResetPriority()
	tauo.mutation.SetPriority(i)
	return tauo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tauo *TaxAssociationUpdateOne) SetNillablePriority(i *int) *TaxAssociationUpdateOne {
	if i != nil {
		tauo.SetPriority(*i)
	}
	return tauo
}

// AddPriority adds i to the "priority" field.
func (tauo *TaxAssociationUpdateOne) AddPriority(i int) *TaxAssociationUpdateOne {
	tauo.mutation.AddPriority(i)
	return tauo
}

// SetAutoApply sets the "auto_apply" field.
func (tauo *TaxAssociationUpdateOne) SetAutoApply(b bool) *TaxAssociationUpdateOne {
	tauo.mutation.SetAutoApply(b)
	return tauo
}

// SetNillableAutoApply sets the "auto_apply" field if the given value is not nil.
func (tauo *TaxAssociationUpdateOne) SetNillableAutoApply(b *bool) *TaxAssociationUpdateOne {
	if b != nil {
		tauo.SetAutoApply(*b)
	}
	return tauo
}

// SetMetadata sets the "metadata" field.
func (tauo *TaxAssociationUpdateOne) SetMetadata(m map[string]string) *TaxAssociationUpdateOne {
	tauo.mutation.SetMetadata(m)
	return tauo
}

// ClearMetadata clears the value of the "metadata" field.
func (tauo *TaxAssociationUpdateOne) ClearMetadata() *TaxAssociationUpdateOne {
	tauo.mutation.ClearMetadata()
	return tauo
}

// Mutation returns the TaxAssociationMutation object of the builder.
func (tauo *TaxAssociationUpdateOne) Mutation() *TaxAssociationMutation {
	return tauo.mutation
}

// Where appends a list predicates to the TaxAssociationUpdate builder.
func (tauo *TaxAssociationUpdateOne) Where(ps ...predicate.TaxAssociation) *TaxAssociationUpdateOne {
	tauo.mutation.Where(ps...)
	return tauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tauo *TaxAssociationUpdateOne) Select(field string, fields ...string) *TaxAssociationUpdateOne {
	tauo.fields = append([]string{field}, fields...)
	return tauo
}

// Save executes the query and returns the updated TaxAssociation entity.
func (tauo *TaxAssociationUpdateOne) Save(ctx context.Context) (*TaxAssociation, error) {
	tauo.defaults()
	return withHooks(ctx, tauo.sqlSave, tauo.mutation, tauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tauo *TaxAssociationUpdateOne) SaveX(ctx context.Context) *TaxAssociation {
	node, err := tauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tauo *TaxAssociationUpdateOne) Exec(ctx context.Context) error {
	_, err := tauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tauo *TaxAssociationUpdateOne) ExecX(ctx context.Context) {
	if err := tauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tauo *TaxAssociationUpdateOne) defaults() {
	if _, ok := tauo.mutation.UpdatedAt(); !ok {
		v := taxassociation.UpdateDefaultUpdatedAt()
		tauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tauo *TaxAssociationUpdateOne) check() error {
	if v, ok := tauo.mutation.EntityID(); ok {
		if err := taxassociation.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "TaxAssociation.entity_id": %w`, err)}
		}
	}
	return nil
}

func (tauo *TaxAssociationUpdateOne) sqlSave(ctx context.Context) (_node *TaxAssociation, err error) {
	if err := tauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taxassociation.Table, taxassociation.Columns, sqlgraph.NewFieldSpec(taxassociation.FieldID, field.TypeString))
	id, ok := tauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaxAssociation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taxassociation.FieldID)
		for _, f := range fields {
			if !taxassociation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taxassociation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tauo.mutation.Status(); ok {
		_spec.SetField(taxassociation.FieldStatus, field.TypeString, value)
	}
	if value, ok := tauo.mutation.UpdatedAt(); ok {
		_spec.SetField(taxassociation.FieldUpdatedAt, field.TypeTime, value)
	}
	if tauo.mutation.CreatedByCleared() {
		_spec.ClearField(taxassociation.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tauo.mutation.UpdatedBy(); ok {
		_spec.SetField(taxassociation.FieldUpdatedBy, field.TypeString, value)
	}
	if tauo.mutation.UpdatedByCleared() {
		_spec.ClearField(taxassociation.FieldUpdatedBy, field.TypeString)
	}
	if tauo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(taxassociation.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := tauo.mutation.EntityID(); ok {
		_spec.SetField(taxassociation.FieldEntityID, field.TypeString, value)
	}
	if value, ok := tauo.mutation.Priority(); ok {
		_spec.SetField(taxassociation.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tauo.mutation.AddedPriority(); ok {
		_spec.AddField(taxassociation.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tauo.mutation.AutoApply(); ok {
		_spec.SetField(taxassociation.FieldAutoApply, field.TypeBool, value)
	}
	if tauo.mutation.CurrencyCleared() {
		_spec.ClearField(taxassociation.FieldCurrency, field.TypeString)
	}
	if value, ok := tauo.mutation.Metadata(); ok {
		_spec.SetField(taxassociation.FieldMetadata, field.TypeJSON, value)
	}
	if tauo.mutation.MetadataCleared() {
		_spec.ClearField(taxassociation.FieldMetadata, field.TypeJSON)
	}
	_node = &TaxAssociation{config: tauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxassociation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tauo.mutation.done = true
	return _node, nil
}
