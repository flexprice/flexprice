// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/taxconfig"
)

// TaxConfig is the model entity for the TaxConfig schema.
type TaxConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// Reference to the TaxRate entity
	TaxRateID string `json:"tax_rate_id,omitempty"`
	// Type of entity this tax rate applies to
	EntityType string `json:"entity_type,omitempty"`
	// ID of the entity this tax rate applies to
	EntityID string `json:"entity_id,omitempty"`
	// Priority for tax resolution (lower number = higher priority)
	Priority int `json:"priority,omitempty"`
	// Whether this tax should be automatically applied
	AutoApply bool `json:"auto_apply,omitempty"`
	// Start date for this tax assignment
	ValidFrom *time.Time `json:"valid_from,omitempty"`
	// End date for this tax assignment
	ValidTo *time.Time `json:"valid_to,omitempty"`
	// Currency
	Currency string `json:"currency,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata     map[string]string `json:"metadata,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaxConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taxconfig.FieldMetadata:
			values[i] = new([]byte)
		case taxconfig.FieldAutoApply:
			values[i] = new(sql.NullBool)
		case taxconfig.FieldPriority:
			values[i] = new(sql.NullInt64)
		case taxconfig.FieldID, taxconfig.FieldTenantID, taxconfig.FieldStatus, taxconfig.FieldCreatedBy, taxconfig.FieldUpdatedBy, taxconfig.FieldEnvironmentID, taxconfig.FieldTaxRateID, taxconfig.FieldEntityType, taxconfig.FieldEntityID, taxconfig.FieldCurrency:
			values[i] = new(sql.NullString)
		case taxconfig.FieldCreatedAt, taxconfig.FieldUpdatedAt, taxconfig.FieldValidFrom, taxconfig.FieldValidTo:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaxConfig fields.
func (tc *TaxConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taxconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tc.ID = value.String
			}
		case taxconfig.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				tc.TenantID = value.String
			}
		case taxconfig.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tc.Status = value.String
			}
		case taxconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tc.CreatedAt = value.Time
			}
		case taxconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tc.UpdatedAt = value.Time
			}
		case taxconfig.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				tc.CreatedBy = value.String
			}
		case taxconfig.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				tc.UpdatedBy = value.String
			}
		case taxconfig.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				tc.EnvironmentID = value.String
			}
		case taxconfig.FieldTaxRateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_rate_id", values[i])
			} else if value.Valid {
				tc.TaxRateID = value.String
			}
		case taxconfig.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				tc.EntityType = value.String
			}
		case taxconfig.FieldEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				tc.EntityID = value.String
			}
		case taxconfig.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				tc.Priority = int(value.Int64)
			}
		case taxconfig.FieldAutoApply:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_apply", values[i])
			} else if value.Valid {
				tc.AutoApply = value.Bool
			}
		case taxconfig.FieldValidFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_from", values[i])
			} else if value.Valid {
				tc.ValidFrom = new(time.Time)
				*tc.ValidFrom = value.Time
			}
		case taxconfig.FieldValidTo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_to", values[i])
			} else if value.Valid {
				tc.ValidTo = new(time.Time)
				*tc.ValidTo = value.Time
			}
		case taxconfig.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				tc.Currency = value.String
			}
		case taxconfig.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tc.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			tc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaxConfig.
// This includes values selected through modifiers, order, etc.
func (tc *TaxConfig) Value(name string) (ent.Value, error) {
	return tc.selectValues.Get(name)
}

// Update returns a builder for updating this TaxConfig.
// Note that you need to call TaxConfig.Unwrap() before calling this method if this TaxConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TaxConfig) Update() *TaxConfigUpdateOne {
	return NewTaxConfigClient(tc.config).UpdateOne(tc)
}

// Unwrap unwraps the TaxConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TaxConfig) Unwrap() *TaxConfig {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaxConfig is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TaxConfig) String() string {
	var builder strings.Builder
	builder.WriteString("TaxConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(tc.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(tc.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(tc.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(tc.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(tc.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("tax_rate_id=")
	builder.WriteString(tc.TaxRateID)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(tc.EntityType)
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(tc.EntityID)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", tc.Priority))
	builder.WriteString(", ")
	builder.WriteString("auto_apply=")
	builder.WriteString(fmt.Sprintf("%v", tc.AutoApply))
	builder.WriteString(", ")
	if v := tc.ValidFrom; v != nil {
		builder.WriteString("valid_from=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := tc.ValidTo; v != nil {
		builder.WriteString("valid_to=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(tc.Currency)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", tc.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// TaxConfigs is a parsable slice of TaxConfig.
type TaxConfigs []*TaxConfig
