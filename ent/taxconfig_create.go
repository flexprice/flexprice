// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/taxconfig"
)

// TaxConfigCreate is the builder for creating a TaxConfig entity.
type TaxConfigCreate struct {
	config
	mutation *TaxConfigMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (tcc *TaxConfigCreate) SetTenantID(s string) *TaxConfigCreate {
	tcc.mutation.SetTenantID(s)
	return tcc
}

// SetStatus sets the "status" field.
func (tcc *TaxConfigCreate) SetStatus(s string) *TaxConfigCreate {
	tcc.mutation.SetStatus(s)
	return tcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tcc *TaxConfigCreate) SetNillableStatus(s *string) *TaxConfigCreate {
	if s != nil {
		tcc.SetStatus(*s)
	}
	return tcc
}

// SetCreatedAt sets the "created_at" field.
func (tcc *TaxConfigCreate) SetCreatedAt(t time.Time) *TaxConfigCreate {
	tcc.mutation.SetCreatedAt(t)
	return tcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcc *TaxConfigCreate) SetNillableCreatedAt(t *time.Time) *TaxConfigCreate {
	if t != nil {
		tcc.SetCreatedAt(*t)
	}
	return tcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcc *TaxConfigCreate) SetUpdatedAt(t time.Time) *TaxConfigCreate {
	tcc.mutation.SetUpdatedAt(t)
	return tcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcc *TaxConfigCreate) SetNillableUpdatedAt(t *time.Time) *TaxConfigCreate {
	if t != nil {
		tcc.SetUpdatedAt(*t)
	}
	return tcc
}

// SetCreatedBy sets the "created_by" field.
func (tcc *TaxConfigCreate) SetCreatedBy(s string) *TaxConfigCreate {
	tcc.mutation.SetCreatedBy(s)
	return tcc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tcc *TaxConfigCreate) SetNillableCreatedBy(s *string) *TaxConfigCreate {
	if s != nil {
		tcc.SetCreatedBy(*s)
	}
	return tcc
}

// SetUpdatedBy sets the "updated_by" field.
func (tcc *TaxConfigCreate) SetUpdatedBy(s string) *TaxConfigCreate {
	tcc.mutation.SetUpdatedBy(s)
	return tcc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcc *TaxConfigCreate) SetNillableUpdatedBy(s *string) *TaxConfigCreate {
	if s != nil {
		tcc.SetUpdatedBy(*s)
	}
	return tcc
}

// SetEnvironmentID sets the "environment_id" field.
func (tcc *TaxConfigCreate) SetEnvironmentID(s string) *TaxConfigCreate {
	tcc.mutation.SetEnvironmentID(s)
	return tcc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (tcc *TaxConfigCreate) SetNillableEnvironmentID(s *string) *TaxConfigCreate {
	if s != nil {
		tcc.SetEnvironmentID(*s)
	}
	return tcc
}

// SetTaxRateID sets the "tax_rate_id" field.
func (tcc *TaxConfigCreate) SetTaxRateID(s string) *TaxConfigCreate {
	tcc.mutation.SetTaxRateID(s)
	return tcc
}

// SetEntityType sets the "entity_type" field.
func (tcc *TaxConfigCreate) SetEntityType(s string) *TaxConfigCreate {
	tcc.mutation.SetEntityType(s)
	return tcc
}

// SetEntityID sets the "entity_id" field.
func (tcc *TaxConfigCreate) SetEntityID(s string) *TaxConfigCreate {
	tcc.mutation.SetEntityID(s)
	return tcc
}

// SetPriority sets the "priority" field.
func (tcc *TaxConfigCreate) SetPriority(i int) *TaxConfigCreate {
	tcc.mutation.SetPriority(i)
	return tcc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tcc *TaxConfigCreate) SetNillablePriority(i *int) *TaxConfigCreate {
	if i != nil {
		tcc.SetPriority(*i)
	}
	return tcc
}

// SetAutoApply sets the "auto_apply" field.
func (tcc *TaxConfigCreate) SetAutoApply(b bool) *TaxConfigCreate {
	tcc.mutation.SetAutoApply(b)
	return tcc
}

// SetNillableAutoApply sets the "auto_apply" field if the given value is not nil.
func (tcc *TaxConfigCreate) SetNillableAutoApply(b *bool) *TaxConfigCreate {
	if b != nil {
		tcc.SetAutoApply(*b)
	}
	return tcc
}

// SetCurrency sets the "currency" field.
func (tcc *TaxConfigCreate) SetCurrency(s string) *TaxConfigCreate {
	tcc.mutation.SetCurrency(s)
	return tcc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tcc *TaxConfigCreate) SetNillableCurrency(s *string) *TaxConfigCreate {
	if s != nil {
		tcc.SetCurrency(*s)
	}
	return tcc
}

// SetMetadata sets the "metadata" field.
func (tcc *TaxConfigCreate) SetMetadata(m map[string]string) *TaxConfigCreate {
	tcc.mutation.SetMetadata(m)
	return tcc
}

// SetID sets the "id" field.
func (tcc *TaxConfigCreate) SetID(s string) *TaxConfigCreate {
	tcc.mutation.SetID(s)
	return tcc
}

// Mutation returns the TaxConfigMutation object of the builder.
func (tcc *TaxConfigCreate) Mutation() *TaxConfigMutation {
	return tcc.mutation
}

// Save creates the TaxConfig in the database.
func (tcc *TaxConfigCreate) Save(ctx context.Context) (*TaxConfig, error) {
	tcc.defaults()
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TaxConfigCreate) SaveX(ctx context.Context) *TaxConfig {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TaxConfigCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TaxConfigCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TaxConfigCreate) defaults() {
	if _, ok := tcc.mutation.Status(); !ok {
		v := taxconfig.DefaultStatus
		tcc.mutation.SetStatus(v)
	}
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		v := taxconfig.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		v := taxconfig.DefaultUpdatedAt()
		tcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcc.mutation.EnvironmentID(); !ok {
		v := taxconfig.DefaultEnvironmentID
		tcc.mutation.SetEnvironmentID(v)
	}
	if _, ok := tcc.mutation.Priority(); !ok {
		v := taxconfig.DefaultPriority
		tcc.mutation.SetPriority(v)
	}
	if _, ok := tcc.mutation.AutoApply(); !ok {
		v := taxconfig.DefaultAutoApply
		tcc.mutation.SetAutoApply(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TaxConfigCreate) check() error {
	if _, ok := tcc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "TaxConfig.tenant_id"`)}
	}
	if v, ok := tcc.mutation.TenantID(); ok {
		if err := taxconfig.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TaxConfig.tenant_id": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TaxConfig.status"`)}
	}
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TaxConfig.created_at"`)}
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TaxConfig.updated_at"`)}
	}
	if _, ok := tcc.mutation.TaxRateID(); !ok {
		return &ValidationError{Name: "tax_rate_id", err: errors.New(`ent: missing required field "TaxConfig.tax_rate_id"`)}
	}
	if v, ok := tcc.mutation.TaxRateID(); ok {
		if err := taxconfig.TaxRateIDValidator(v); err != nil {
			return &ValidationError{Name: "tax_rate_id", err: fmt.Errorf(`ent: validator failed for field "TaxConfig.tax_rate_id": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.EntityType(); !ok {
		return &ValidationError{Name: "entity_type", err: errors.New(`ent: missing required field "TaxConfig.entity_type"`)}
	}
	if v, ok := tcc.mutation.EntityType(); ok {
		if err := taxconfig.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "TaxConfig.entity_type": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "TaxConfig.entity_id"`)}
	}
	if v, ok := tcc.mutation.EntityID(); ok {
		if err := taxconfig.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "TaxConfig.entity_id": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "TaxConfig.priority"`)}
	}
	if _, ok := tcc.mutation.AutoApply(); !ok {
		return &ValidationError{Name: "auto_apply", err: errors.New(`ent: missing required field "TaxConfig.auto_apply"`)}
	}
	if v, ok := tcc.mutation.Currency(); ok {
		if err := taxconfig.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "TaxConfig.currency": %w`, err)}
		}
	}
	return nil
}

func (tcc *TaxConfigCreate) sqlSave(ctx context.Context) (*TaxConfig, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TaxConfig.ID type: %T", _spec.ID.Value)
		}
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TaxConfigCreate) createSpec() (*TaxConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &TaxConfig{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(taxconfig.Table, sqlgraph.NewFieldSpec(taxconfig.FieldID, field.TypeString))
	)
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcc.mutation.TenantID(); ok {
		_spec.SetField(taxconfig.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := tcc.mutation.Status(); ok {
		_spec.SetField(taxconfig.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.SetField(taxconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.SetField(taxconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tcc.mutation.CreatedBy(); ok {
		_spec.SetField(taxconfig.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tcc.mutation.UpdatedBy(); ok {
		_spec.SetField(taxconfig.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tcc.mutation.EnvironmentID(); ok {
		_spec.SetField(taxconfig.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := tcc.mutation.TaxRateID(); ok {
		_spec.SetField(taxconfig.FieldTaxRateID, field.TypeString, value)
		_node.TaxRateID = value
	}
	if value, ok := tcc.mutation.EntityType(); ok {
		_spec.SetField(taxconfig.FieldEntityType, field.TypeString, value)
		_node.EntityType = value
	}
	if value, ok := tcc.mutation.EntityID(); ok {
		_spec.SetField(taxconfig.FieldEntityID, field.TypeString, value)
		_node.EntityID = value
	}
	if value, ok := tcc.mutation.Priority(); ok {
		_spec.SetField(taxconfig.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := tcc.mutation.AutoApply(); ok {
		_spec.SetField(taxconfig.FieldAutoApply, field.TypeBool, value)
		_node.AutoApply = value
	}
	if value, ok := tcc.mutation.Currency(); ok {
		_spec.SetField(taxconfig.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := tcc.mutation.Metadata(); ok {
		_spec.SetField(taxconfig.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// TaxConfigCreateBulk is the builder for creating many TaxConfig entities in bulk.
type TaxConfigCreateBulk struct {
	config
	err      error
	builders []*TaxConfigCreate
}

// Save creates the TaxConfig entities in the database.
func (tccb *TaxConfigCreateBulk) Save(ctx context.Context) ([]*TaxConfig, error) {
	if tccb.err != nil {
		return nil, tccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TaxConfig, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaxConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TaxConfigCreateBulk) SaveX(ctx context.Context) []*TaxConfig {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TaxConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TaxConfigCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
