// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/taxconfig"
)

// TaxConfigUpdate is the builder for updating TaxConfig entities.
type TaxConfigUpdate struct {
	config
	hooks    []Hook
	mutation *TaxConfigMutation
}

// Where appends a list predicates to the TaxConfigUpdate builder.
func (tcu *TaxConfigUpdate) Where(ps ...predicate.TaxConfig) *TaxConfigUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetStatus sets the "status" field.
func (tcu *TaxConfigUpdate) SetStatus(s string) *TaxConfigUpdate {
	tcu.mutation.SetStatus(s)
	return tcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tcu *TaxConfigUpdate) SetNillableStatus(s *string) *TaxConfigUpdate {
	if s != nil {
		tcu.SetStatus(*s)
	}
	return tcu
}

// SetUpdatedAt sets the "updated_at" field.
func (tcu *TaxConfigUpdate) SetUpdatedAt(t time.Time) *TaxConfigUpdate {
	tcu.mutation.SetUpdatedAt(t)
	return tcu
}

// SetUpdatedBy sets the "updated_by" field.
func (tcu *TaxConfigUpdate) SetUpdatedBy(s string) *TaxConfigUpdate {
	tcu.mutation.SetUpdatedBy(s)
	return tcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcu *TaxConfigUpdate) SetNillableUpdatedBy(s *string) *TaxConfigUpdate {
	if s != nil {
		tcu.SetUpdatedBy(*s)
	}
	return tcu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tcu *TaxConfigUpdate) ClearUpdatedBy() *TaxConfigUpdate {
	tcu.mutation.ClearUpdatedBy()
	return tcu
}

// SetEntityID sets the "entity_id" field.
func (tcu *TaxConfigUpdate) SetEntityID(s string) *TaxConfigUpdate {
	tcu.mutation.SetEntityID(s)
	return tcu
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (tcu *TaxConfigUpdate) SetNillableEntityID(s *string) *TaxConfigUpdate {
	if s != nil {
		tcu.SetEntityID(*s)
	}
	return tcu
}

// SetPriority sets the "priority" field.
func (tcu *TaxConfigUpdate) SetPriority(i int) *TaxConfigUpdate {
	tcu.mutation.ResetPriority()
	tcu.mutation.SetPriority(i)
	return tcu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tcu *TaxConfigUpdate) SetNillablePriority(i *int) *TaxConfigUpdate {
	if i != nil {
		tcu.SetPriority(*i)
	}
	return tcu
}

// AddPriority adds i to the "priority" field.
func (tcu *TaxConfigUpdate) AddPriority(i int) *TaxConfigUpdate {
	tcu.mutation.AddPriority(i)
	return tcu
}

// SetAutoApply sets the "auto_apply" field.
func (tcu *TaxConfigUpdate) SetAutoApply(b bool) *TaxConfigUpdate {
	tcu.mutation.SetAutoApply(b)
	return tcu
}

// SetNillableAutoApply sets the "auto_apply" field if the given value is not nil.
func (tcu *TaxConfigUpdate) SetNillableAutoApply(b *bool) *TaxConfigUpdate {
	if b != nil {
		tcu.SetAutoApply(*b)
	}
	return tcu
}

// SetMetadata sets the "metadata" field.
func (tcu *TaxConfigUpdate) SetMetadata(m map[string]string) *TaxConfigUpdate {
	tcu.mutation.SetMetadata(m)
	return tcu
}

// ClearMetadata clears the value of the "metadata" field.
func (tcu *TaxConfigUpdate) ClearMetadata() *TaxConfigUpdate {
	tcu.mutation.ClearMetadata()
	return tcu
}

// Mutation returns the TaxConfigMutation object of the builder.
func (tcu *TaxConfigUpdate) Mutation() *TaxConfigMutation {
	return tcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TaxConfigUpdate) Save(ctx context.Context) (int, error) {
	tcu.defaults()
	return withHooks(ctx, tcu.sqlSave, tcu.mutation, tcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TaxConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TaxConfigUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TaxConfigUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcu *TaxConfigUpdate) defaults() {
	if _, ok := tcu.mutation.UpdatedAt(); !ok {
		v := taxconfig.UpdateDefaultUpdatedAt()
		tcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcu *TaxConfigUpdate) check() error {
	if v, ok := tcu.mutation.EntityID(); ok {
		if err := taxconfig.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "TaxConfig.entity_id": %w`, err)}
		}
	}
	return nil
}

func (tcu *TaxConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(taxconfig.Table, taxconfig.Columns, sqlgraph.NewFieldSpec(taxconfig.FieldID, field.TypeString))
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.Status(); ok {
		_spec.SetField(taxconfig.FieldStatus, field.TypeString, value)
	}
	if value, ok := tcu.mutation.UpdatedAt(); ok {
		_spec.SetField(taxconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcu.mutation.CreatedByCleared() {
		_spec.ClearField(taxconfig.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tcu.mutation.UpdatedBy(); ok {
		_spec.SetField(taxconfig.FieldUpdatedBy, field.TypeString, value)
	}
	if tcu.mutation.UpdatedByCleared() {
		_spec.ClearField(taxconfig.FieldUpdatedBy, field.TypeString)
	}
	if tcu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(taxconfig.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := tcu.mutation.EntityID(); ok {
		_spec.SetField(taxconfig.FieldEntityID, field.TypeString, value)
	}
	if value, ok := tcu.mutation.Priority(); ok {
		_spec.SetField(taxconfig.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.AddedPriority(); ok {
		_spec.AddField(taxconfig.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.AutoApply(); ok {
		_spec.SetField(taxconfig.FieldAutoApply, field.TypeBool, value)
	}
	if tcu.mutation.CurrencyCleared() {
		_spec.ClearField(taxconfig.FieldCurrency, field.TypeString)
	}
	if value, ok := tcu.mutation.Metadata(); ok {
		_spec.SetField(taxconfig.FieldMetadata, field.TypeJSON, value)
	}
	if tcu.mutation.MetadataCleared() {
		_spec.ClearField(taxconfig.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcu.mutation.done = true
	return n, nil
}

// TaxConfigUpdateOne is the builder for updating a single TaxConfig entity.
type TaxConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaxConfigMutation
}

// SetStatus sets the "status" field.
func (tcuo *TaxConfigUpdateOne) SetStatus(s string) *TaxConfigUpdateOne {
	tcuo.mutation.SetStatus(s)
	return tcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tcuo *TaxConfigUpdateOne) SetNillableStatus(s *string) *TaxConfigUpdateOne {
	if s != nil {
		tcuo.SetStatus(*s)
	}
	return tcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tcuo *TaxConfigUpdateOne) SetUpdatedAt(t time.Time) *TaxConfigUpdateOne {
	tcuo.mutation.SetUpdatedAt(t)
	return tcuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tcuo *TaxConfigUpdateOne) SetUpdatedBy(s string) *TaxConfigUpdateOne {
	tcuo.mutation.SetUpdatedBy(s)
	return tcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcuo *TaxConfigUpdateOne) SetNillableUpdatedBy(s *string) *TaxConfigUpdateOne {
	if s != nil {
		tcuo.SetUpdatedBy(*s)
	}
	return tcuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tcuo *TaxConfigUpdateOne) ClearUpdatedBy() *TaxConfigUpdateOne {
	tcuo.mutation.ClearUpdatedBy()
	return tcuo
}

// SetEntityID sets the "entity_id" field.
func (tcuo *TaxConfigUpdateOne) SetEntityID(s string) *TaxConfigUpdateOne {
	tcuo.mutation.SetEntityID(s)
	return tcuo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (tcuo *TaxConfigUpdateOne) SetNillableEntityID(s *string) *TaxConfigUpdateOne {
	if s != nil {
		tcuo.SetEntityID(*s)
	}
	return tcuo
}

// SetPriority sets the "priority" field.
func (tcuo *TaxConfigUpdateOne) SetPriority(i int) *TaxConfigUpdateOne {
	tcuo.mutation.ResetPriority()
	tcuo.mutation.SetPriority(i)
	return tcuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tcuo *TaxConfigUpdateOne) SetNillablePriority(i *int) *TaxConfigUpdateOne {
	if i != nil {
		tcuo.SetPriority(*i)
	}
	return tcuo
}

// AddPriority adds i to the "priority" field.
func (tcuo *TaxConfigUpdateOne) AddPriority(i int) *TaxConfigUpdateOne {
	tcuo.mutation.AddPriority(i)
	return tcuo
}

// SetAutoApply sets the "auto_apply" field.
func (tcuo *TaxConfigUpdateOne) SetAutoApply(b bool) *TaxConfigUpdateOne {
	tcuo.mutation.SetAutoApply(b)
	return tcuo
}

// SetNillableAutoApply sets the "auto_apply" field if the given value is not nil.
func (tcuo *TaxConfigUpdateOne) SetNillableAutoApply(b *bool) *TaxConfigUpdateOne {
	if b != nil {
		tcuo.SetAutoApply(*b)
	}
	return tcuo
}

// SetMetadata sets the "metadata" field.
func (tcuo *TaxConfigUpdateOne) SetMetadata(m map[string]string) *TaxConfigUpdateOne {
	tcuo.mutation.SetMetadata(m)
	return tcuo
}

// ClearMetadata clears the value of the "metadata" field.
func (tcuo *TaxConfigUpdateOne) ClearMetadata() *TaxConfigUpdateOne {
	tcuo.mutation.ClearMetadata()
	return tcuo
}

// Mutation returns the TaxConfigMutation object of the builder.
func (tcuo *TaxConfigUpdateOne) Mutation() *TaxConfigMutation {
	return tcuo.mutation
}

// Where appends a list predicates to the TaxConfigUpdate builder.
func (tcuo *TaxConfigUpdateOne) Where(ps ...predicate.TaxConfig) *TaxConfigUpdateOne {
	tcuo.mutation.Where(ps...)
	return tcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TaxConfigUpdateOne) Select(field string, fields ...string) *TaxConfigUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TaxConfig entity.
func (tcuo *TaxConfigUpdateOne) Save(ctx context.Context) (*TaxConfig, error) {
	tcuo.defaults()
	return withHooks(ctx, tcuo.sqlSave, tcuo.mutation, tcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TaxConfigUpdateOne) SaveX(ctx context.Context) *TaxConfig {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TaxConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TaxConfigUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcuo *TaxConfigUpdateOne) defaults() {
	if _, ok := tcuo.mutation.UpdatedAt(); !ok {
		v := taxconfig.UpdateDefaultUpdatedAt()
		tcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcuo *TaxConfigUpdateOne) check() error {
	if v, ok := tcuo.mutation.EntityID(); ok {
		if err := taxconfig.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "TaxConfig.entity_id": %w`, err)}
		}
	}
	return nil
}

func (tcuo *TaxConfigUpdateOne) sqlSave(ctx context.Context) (_node *TaxConfig, err error) {
	if err := tcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taxconfig.Table, taxconfig.Columns, sqlgraph.NewFieldSpec(taxconfig.FieldID, field.TypeString))
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaxConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taxconfig.FieldID)
		for _, f := range fields {
			if !taxconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taxconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.Status(); ok {
		_spec.SetField(taxconfig.FieldStatus, field.TypeString, value)
	}
	if value, ok := tcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(taxconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcuo.mutation.CreatedByCleared() {
		_spec.ClearField(taxconfig.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tcuo.mutation.UpdatedBy(); ok {
		_spec.SetField(taxconfig.FieldUpdatedBy, field.TypeString, value)
	}
	if tcuo.mutation.UpdatedByCleared() {
		_spec.ClearField(taxconfig.FieldUpdatedBy, field.TypeString)
	}
	if tcuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(taxconfig.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := tcuo.mutation.EntityID(); ok {
		_spec.SetField(taxconfig.FieldEntityID, field.TypeString, value)
	}
	if value, ok := tcuo.mutation.Priority(); ok {
		_spec.SetField(taxconfig.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.AddedPriority(); ok {
		_spec.AddField(taxconfig.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.AutoApply(); ok {
		_spec.SetField(taxconfig.FieldAutoApply, field.TypeBool, value)
	}
	if tcuo.mutation.CurrencyCleared() {
		_spec.ClearField(taxconfig.FieldCurrency, field.TypeString)
	}
	if value, ok := tcuo.mutation.Metadata(); ok {
		_spec.SetField(taxconfig.FieldMetadata, field.TypeJSON, value)
	}
	if tcuo.mutation.MetadataCleared() {
		_spec.ClearField(taxconfig.FieldMetadata, field.TypeJSON)
	}
	_node = &TaxConfig{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcuo.mutation.done = true
	return _node, nil
}
