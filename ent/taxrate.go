// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/taxrate"
	"github.com/shopspring/decimal"
)

// TaxRate is the model entity for the TaxRate schema.
type TaxRate struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// e.g. CGST, SGST, etc.
	Code string `json:"code,omitempty"`
	// TaxRateStatus holds the value of the "tax_rate_status" field.
	TaxRateStatus string `json:"tax_rate_status,omitempty"`
	// TaxRateType holds the value of the "tax_rate_type" field.
	TaxRateType string `json:"tax_rate_type,omitempty"`
	// Scope holds the value of the "scope" field.
	Scope string `json:"scope,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// PercentageValue holds the value of the "percentage_value" field.
	PercentageValue *decimal.Decimal `json:"percentage_value,omitempty"`
	// FixedValue holds the value of the "fixed_value" field.
	FixedValue *decimal.Decimal `json:"fixed_value,omitempty"`
	// ValidFrom holds the value of the "valid_from" field.
	ValidFrom *time.Time `json:"valid_from,omitempty"`
	// ValidTo holds the value of the "valid_to" field.
	ValidTo *time.Time `json:"valid_to,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata     map[string]string `json:"metadata,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaxRate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taxrate.FieldPercentageValue, taxrate.FieldFixedValue:
			values[i] = &sql.NullScanner{S: new(decimal.Decimal)}
		case taxrate.FieldMetadata:
			values[i] = new([]byte)
		case taxrate.FieldID, taxrate.FieldTenantID, taxrate.FieldStatus, taxrate.FieldCreatedBy, taxrate.FieldUpdatedBy, taxrate.FieldEnvironmentID, taxrate.FieldName, taxrate.FieldDescription, taxrate.FieldCode, taxrate.FieldTaxRateStatus, taxrate.FieldTaxRateType, taxrate.FieldScope, taxrate.FieldCurrency:
			values[i] = new(sql.NullString)
		case taxrate.FieldCreatedAt, taxrate.FieldUpdatedAt, taxrate.FieldValidFrom, taxrate.FieldValidTo:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaxRate fields.
func (tr *TaxRate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taxrate.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tr.ID = value.String
			}
		case taxrate.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				tr.TenantID = value.String
			}
		case taxrate.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tr.Status = value.String
			}
		case taxrate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tr.CreatedAt = value.Time
			}
		case taxrate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tr.UpdatedAt = value.Time
			}
		case taxrate.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				tr.CreatedBy = value.String
			}
		case taxrate.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				tr.UpdatedBy = value.String
			}
		case taxrate.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				tr.EnvironmentID = value.String
			}
		case taxrate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tr.Name = value.String
			}
		case taxrate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tr.Description = value.String
			}
		case taxrate.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				tr.Code = value.String
			}
		case taxrate.FieldTaxRateStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_rate_status", values[i])
			} else if value.Valid {
				tr.TaxRateStatus = value.String
			}
		case taxrate.FieldTaxRateType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_rate_type", values[i])
			} else if value.Valid {
				tr.TaxRateType = value.String
			}
		case taxrate.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				tr.Scope = value.String
			}
		case taxrate.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				tr.Currency = value.String
			}
		case taxrate.FieldPercentageValue:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field percentage_value", values[i])
			} else if value.Valid {
				tr.PercentageValue = new(decimal.Decimal)
				*tr.PercentageValue = *value.S.(*decimal.Decimal)
			}
		case taxrate.FieldFixedValue:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field fixed_value", values[i])
			} else if value.Valid {
				tr.FixedValue = new(decimal.Decimal)
				*tr.FixedValue = *value.S.(*decimal.Decimal)
			}
		case taxrate.FieldValidFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_from", values[i])
			} else if value.Valid {
				tr.ValidFrom = new(time.Time)
				*tr.ValidFrom = value.Time
			}
		case taxrate.FieldValidTo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_to", values[i])
			} else if value.Valid {
				tr.ValidTo = new(time.Time)
				*tr.ValidTo = value.Time
			}
		case taxrate.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tr.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			tr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaxRate.
// This includes values selected through modifiers, order, etc.
func (tr *TaxRate) Value(name string) (ent.Value, error) {
	return tr.selectValues.Get(name)
}

// Update returns a builder for updating this TaxRate.
// Note that you need to call TaxRate.Unwrap() before calling this method if this TaxRate
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TaxRate) Update() *TaxRateUpdateOne {
	return NewTaxRateClient(tr.config).UpdateOne(tr)
}

// Unwrap unwraps the TaxRate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TaxRate) Unwrap() *TaxRate {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaxRate is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TaxRate) String() string {
	var builder strings.Builder
	builder.WriteString("TaxRate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(tr.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(tr.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(tr.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(tr.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(tr.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(tr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(tr.Description)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(tr.Code)
	builder.WriteString(", ")
	builder.WriteString("tax_rate_status=")
	builder.WriteString(tr.TaxRateStatus)
	builder.WriteString(", ")
	builder.WriteString("tax_rate_type=")
	builder.WriteString(tr.TaxRateType)
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(tr.Scope)
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(tr.Currency)
	builder.WriteString(", ")
	if v := tr.PercentageValue; v != nil {
		builder.WriteString("percentage_value=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tr.FixedValue; v != nil {
		builder.WriteString("fixed_value=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tr.ValidFrom; v != nil {
		builder.WriteString("valid_from=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := tr.ValidTo; v != nil {
		builder.WriteString("valid_to=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", tr.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// TaxRates is a parsable slice of TaxRate.
type TaxRates []*TaxRate
