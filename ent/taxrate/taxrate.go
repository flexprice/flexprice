// Code generated by ent, DO NOT EDIT.

package taxrate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the taxrate type in the database.
	Label = "tax_rate"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldTaxRateStatus holds the string denoting the tax_rate_status field in the database.
	FieldTaxRateStatus = "tax_rate_status"
	// FieldTaxRateType holds the string denoting the tax_rate_type field in the database.
	FieldTaxRateType = "tax_rate_type"
	// FieldScope holds the string denoting the scope field in the database.
	FieldScope = "scope"
	// FieldPercentageValue holds the string denoting the percentage_value field in the database.
	FieldPercentageValue = "percentage_value"
	// FieldFixedValue holds the string denoting the fixed_value field in the database.
	FieldFixedValue = "fixed_value"
	// FieldValidFrom holds the string denoting the valid_from field in the database.
	FieldValidFrom = "valid_from"
	// FieldValidTo holds the string denoting the valid_to field in the database.
	FieldValidTo = "valid_to"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// Table holds the table name of the taxrate in the database.
	Table = "tax_rates"
)

// Columns holds all SQL columns for taxrate fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldName,
	FieldDescription,
	FieldCode,
	FieldTaxRateStatus,
	FieldTaxRateType,
	FieldScope,
	FieldPercentageValue,
	FieldFixedValue,
	FieldValidFrom,
	FieldValidTo,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultTaxRateStatus holds the default value on creation for the "tax_rate_status" field.
	DefaultTaxRateStatus string
	// TaxRateStatusValidator is a validator for the "tax_rate_status" field. It is called by the builders before save.
	TaxRateStatusValidator func(string) error
	// DefaultTaxRateType holds the default value on creation for the "tax_rate_type" field.
	DefaultTaxRateType string
	// TaxRateTypeValidator is a validator for the "tax_rate_type" field. It is called by the builders before save.
	TaxRateTypeValidator func(string) error
	// ScopeValidator is a validator for the "scope" field. It is called by the builders before save.
	ScopeValidator func(string) error
	// DefaultPercentageValue holds the default value on creation for the "percentage_value" field.
	DefaultPercentageValue decimal.Decimal
	// DefaultFixedValue holds the default value on creation for the "fixed_value" field.
	DefaultFixedValue decimal.Decimal
)

// OrderOption defines the ordering options for the TaxRate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByTaxRateStatus orders the results by the tax_rate_status field.
func ByTaxRateStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxRateStatus, opts...).ToFunc()
}

// ByTaxRateType orders the results by the tax_rate_type field.
func ByTaxRateType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxRateType, opts...).ToFunc()
}

// ByScope orders the results by the scope field.
func ByScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScope, opts...).ToFunc()
}

// ByPercentageValue orders the results by the percentage_value field.
func ByPercentageValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPercentageValue, opts...).ToFunc()
}

// ByFixedValue orders the results by the fixed_value field.
func ByFixedValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFixedValue, opts...).ToFunc()
}

// ByValidFrom orders the results by the valid_from field.
func ByValidFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidFrom, opts...).ToFunc()
}

// ByValidTo orders the results by the valid_to field.
func ByValidTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidTo, opts...).ToFunc()
}
