// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/taxrate"
)

// TaxRateCreate is the builder for creating a TaxRate entity.
type TaxRateCreate struct {
	config
	mutation *TaxRateMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (trc *TaxRateCreate) SetTenantID(s string) *TaxRateCreate {
	trc.mutation.SetTenantID(s)
	return trc
}

// SetStatus sets the "status" field.
func (trc *TaxRateCreate) SetStatus(s string) *TaxRateCreate {
	trc.mutation.SetStatus(s)
	return trc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (trc *TaxRateCreate) SetNillableStatus(s *string) *TaxRateCreate {
	if s != nil {
		trc.SetStatus(*s)
	}
	return trc
}

// SetCreatedAt sets the "created_at" field.
func (trc *TaxRateCreate) SetCreatedAt(t time.Time) *TaxRateCreate {
	trc.mutation.SetCreatedAt(t)
	return trc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (trc *TaxRateCreate) SetNillableCreatedAt(t *time.Time) *TaxRateCreate {
	if t != nil {
		trc.SetCreatedAt(*t)
	}
	return trc
}

// SetUpdatedAt sets the "updated_at" field.
func (trc *TaxRateCreate) SetUpdatedAt(t time.Time) *TaxRateCreate {
	trc.mutation.SetUpdatedAt(t)
	return trc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (trc *TaxRateCreate) SetNillableUpdatedAt(t *time.Time) *TaxRateCreate {
	if t != nil {
		trc.SetUpdatedAt(*t)
	}
	return trc
}

// SetCreatedBy sets the "created_by" field.
func (trc *TaxRateCreate) SetCreatedBy(s string) *TaxRateCreate {
	trc.mutation.SetCreatedBy(s)
	return trc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (trc *TaxRateCreate) SetNillableCreatedBy(s *string) *TaxRateCreate {
	if s != nil {
		trc.SetCreatedBy(*s)
	}
	return trc
}

// SetUpdatedBy sets the "updated_by" field.
func (trc *TaxRateCreate) SetUpdatedBy(s string) *TaxRateCreate {
	trc.mutation.SetUpdatedBy(s)
	return trc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (trc *TaxRateCreate) SetNillableUpdatedBy(s *string) *TaxRateCreate {
	if s != nil {
		trc.SetUpdatedBy(*s)
	}
	return trc
}

// SetEnvironmentID sets the "environment_id" field.
func (trc *TaxRateCreate) SetEnvironmentID(s string) *TaxRateCreate {
	trc.mutation.SetEnvironmentID(s)
	return trc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (trc *TaxRateCreate) SetNillableEnvironmentID(s *string) *TaxRateCreate {
	if s != nil {
		trc.SetEnvironmentID(*s)
	}
	return trc
}

// SetName sets the "name" field.
func (trc *TaxRateCreate) SetName(s string) *TaxRateCreate {
	trc.mutation.SetName(s)
	return trc
}

// SetDescription sets the "description" field.
func (trc *TaxRateCreate) SetDescription(s string) *TaxRateCreate {
	trc.mutation.SetDescription(s)
	return trc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (trc *TaxRateCreate) SetNillableDescription(s *string) *TaxRateCreate {
	if s != nil {
		trc.SetDescription(*s)
	}
	return trc
}

// SetCode sets the "code" field.
func (trc *TaxRateCreate) SetCode(s string) *TaxRateCreate {
	trc.mutation.SetCode(s)
	return trc
}

// SetPercentage sets the "percentage" field.
func (trc *TaxRateCreate) SetPercentage(f float64) *TaxRateCreate {
	trc.mutation.SetPercentage(f)
	return trc
}

// SetNillablePercentage sets the "percentage" field if the given value is not nil.
func (trc *TaxRateCreate) SetNillablePercentage(f *float64) *TaxRateCreate {
	if f != nil {
		trc.SetPercentage(*f)
	}
	return trc
}

// SetFixedValue sets the "fixed_value" field.
func (trc *TaxRateCreate) SetFixedValue(f float64) *TaxRateCreate {
	trc.mutation.SetFixedValue(f)
	return trc
}

// SetNillableFixedValue sets the "fixed_value" field if the given value is not nil.
func (trc *TaxRateCreate) SetNillableFixedValue(f *float64) *TaxRateCreate {
	if f != nil {
		trc.SetFixedValue(*f)
	}
	return trc
}

// SetIsCompound sets the "is_compound" field.
func (trc *TaxRateCreate) SetIsCompound(b bool) *TaxRateCreate {
	trc.mutation.SetIsCompound(b)
	return trc
}

// SetNillableIsCompound sets the "is_compound" field if the given value is not nil.
func (trc *TaxRateCreate) SetNillableIsCompound(b *bool) *TaxRateCreate {
	if b != nil {
		trc.SetIsCompound(*b)
	}
	return trc
}

// SetValidFrom sets the "valid_from" field.
func (trc *TaxRateCreate) SetValidFrom(t time.Time) *TaxRateCreate {
	trc.mutation.SetValidFrom(t)
	return trc
}

// SetValidTo sets the "valid_to" field.
func (trc *TaxRateCreate) SetValidTo(t time.Time) *TaxRateCreate {
	trc.mutation.SetValidTo(t)
	return trc
}

// SetID sets the "id" field.
func (trc *TaxRateCreate) SetID(s string) *TaxRateCreate {
	trc.mutation.SetID(s)
	return trc
}

// Mutation returns the TaxRateMutation object of the builder.
func (trc *TaxRateCreate) Mutation() *TaxRateMutation {
	return trc.mutation
}

// Save creates the TaxRate in the database.
func (trc *TaxRateCreate) Save(ctx context.Context) (*TaxRate, error) {
	trc.defaults()
	return withHooks(ctx, trc.sqlSave, trc.mutation, trc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TaxRateCreate) SaveX(ctx context.Context) *TaxRate {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TaxRateCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TaxRateCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (trc *TaxRateCreate) defaults() {
	if _, ok := trc.mutation.Status(); !ok {
		v := taxrate.DefaultStatus
		trc.mutation.SetStatus(v)
	}
	if _, ok := trc.mutation.CreatedAt(); !ok {
		v := taxrate.DefaultCreatedAt()
		trc.mutation.SetCreatedAt(v)
	}
	if _, ok := trc.mutation.UpdatedAt(); !ok {
		v := taxrate.DefaultUpdatedAt()
		trc.mutation.SetUpdatedAt(v)
	}
	if _, ok := trc.mutation.EnvironmentID(); !ok {
		v := taxrate.DefaultEnvironmentID
		trc.mutation.SetEnvironmentID(v)
	}
	if _, ok := trc.mutation.IsCompound(); !ok {
		v := taxrate.DefaultIsCompound
		trc.mutation.SetIsCompound(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TaxRateCreate) check() error {
	if _, ok := trc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "TaxRate.tenant_id"`)}
	}
	if v, ok := trc.mutation.TenantID(); ok {
		if err := taxrate.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TaxRate.tenant_id": %w`, err)}
		}
	}
	if _, ok := trc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TaxRate.status"`)}
	}
	if _, ok := trc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TaxRate.created_at"`)}
	}
	if _, ok := trc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TaxRate.updated_at"`)}
	}
	if _, ok := trc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TaxRate.name"`)}
	}
	if v, ok := trc.mutation.Name(); ok {
		if err := taxrate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TaxRate.name": %w`, err)}
		}
	}
	if _, ok := trc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "TaxRate.code"`)}
	}
	if v, ok := trc.mutation.Code(); ok {
		if err := taxrate.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "TaxRate.code": %w`, err)}
		}
	}
	if v, ok := trc.mutation.Percentage(); ok {
		if err := taxrate.PercentageValidator(v); err != nil {
			return &ValidationError{Name: "percentage", err: fmt.Errorf(`ent: validator failed for field "TaxRate.percentage": %w`, err)}
		}
	}
	if v, ok := trc.mutation.FixedValue(); ok {
		if err := taxrate.FixedValueValidator(v); err != nil {
			return &ValidationError{Name: "fixed_value", err: fmt.Errorf(`ent: validator failed for field "TaxRate.fixed_value": %w`, err)}
		}
	}
	if _, ok := trc.mutation.IsCompound(); !ok {
		return &ValidationError{Name: "is_compound", err: errors.New(`ent: missing required field "TaxRate.is_compound"`)}
	}
	if _, ok := trc.mutation.ValidFrom(); !ok {
		return &ValidationError{Name: "valid_from", err: errors.New(`ent: missing required field "TaxRate.valid_from"`)}
	}
	if _, ok := trc.mutation.ValidTo(); !ok {
		return &ValidationError{Name: "valid_to", err: errors.New(`ent: missing required field "TaxRate.valid_to"`)}
	}
	return nil
}

func (trc *TaxRateCreate) sqlSave(ctx context.Context) (*TaxRate, error) {
	if err := trc.check(); err != nil {
		return nil, err
	}
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TaxRate.ID type: %T", _spec.ID.Value)
		}
	}
	trc.mutation.id = &_node.ID
	trc.mutation.done = true
	return _node, nil
}

func (trc *TaxRateCreate) createSpec() (*TaxRate, *sqlgraph.CreateSpec) {
	var (
		_node = &TaxRate{config: trc.config}
		_spec = sqlgraph.NewCreateSpec(taxrate.Table, sqlgraph.NewFieldSpec(taxrate.FieldID, field.TypeString))
	)
	if id, ok := trc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := trc.mutation.TenantID(); ok {
		_spec.SetField(taxrate.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := trc.mutation.Status(); ok {
		_spec.SetField(taxrate.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := trc.mutation.CreatedAt(); ok {
		_spec.SetField(taxrate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := trc.mutation.UpdatedAt(); ok {
		_spec.SetField(taxrate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := trc.mutation.CreatedBy(); ok {
		_spec.SetField(taxrate.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := trc.mutation.UpdatedBy(); ok {
		_spec.SetField(taxrate.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := trc.mutation.EnvironmentID(); ok {
		_spec.SetField(taxrate.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := trc.mutation.Name(); ok {
		_spec.SetField(taxrate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := trc.mutation.Description(); ok {
		_spec.SetField(taxrate.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := trc.mutation.Code(); ok {
		_spec.SetField(taxrate.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := trc.mutation.Percentage(); ok {
		_spec.SetField(taxrate.FieldPercentage, field.TypeFloat64, value)
		_node.Percentage = value
	}
	if value, ok := trc.mutation.FixedValue(); ok {
		_spec.SetField(taxrate.FieldFixedValue, field.TypeFloat64, value)
		_node.FixedValue = value
	}
	if value, ok := trc.mutation.IsCompound(); ok {
		_spec.SetField(taxrate.FieldIsCompound, field.TypeBool, value)
		_node.IsCompound = value
	}
	if value, ok := trc.mutation.ValidFrom(); ok {
		_spec.SetField(taxrate.FieldValidFrom, field.TypeTime, value)
		_node.ValidFrom = &value
	}
	if value, ok := trc.mutation.ValidTo(); ok {
		_spec.SetField(taxrate.FieldValidTo, field.TypeTime, value)
		_node.ValidTo = &value
	}
	return _node, _spec
}

// TaxRateCreateBulk is the builder for creating many TaxRate entities in bulk.
type TaxRateCreateBulk struct {
	config
	err      error
	builders []*TaxRateCreate
}

// Save creates the TaxRate entities in the database.
func (trcb *TaxRateCreateBulk) Save(ctx context.Context) ([]*TaxRate, error) {
	if trcb.err != nil {
		return nil, trcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TaxRate, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaxRateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TaxRateCreateBulk) SaveX(ctx context.Context) []*TaxRate {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TaxRateCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TaxRateCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}
