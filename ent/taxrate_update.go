// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/taxrate"
	"github.com/shopspring/decimal"
)

// TaxRateUpdate is the builder for updating TaxRate entities.
type TaxRateUpdate struct {
	config
	hooks    []Hook
	mutation *TaxRateMutation
}

// Where appends a list predicates to the TaxRateUpdate builder.
func (tru *TaxRateUpdate) Where(ps ...predicate.TaxRate) *TaxRateUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetStatus sets the "status" field.
func (tru *TaxRateUpdate) SetStatus(s string) *TaxRateUpdate {
	tru.mutation.SetStatus(s)
	return tru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tru *TaxRateUpdate) SetNillableStatus(s *string) *TaxRateUpdate {
	if s != nil {
		tru.SetStatus(*s)
	}
	return tru
}

// SetUpdatedAt sets the "updated_at" field.
func (tru *TaxRateUpdate) SetUpdatedAt(t time.Time) *TaxRateUpdate {
	tru.mutation.SetUpdatedAt(t)
	return tru
}

// SetUpdatedBy sets the "updated_by" field.
func (tru *TaxRateUpdate) SetUpdatedBy(s string) *TaxRateUpdate {
	tru.mutation.SetUpdatedBy(s)
	return tru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tru *TaxRateUpdate) SetNillableUpdatedBy(s *string) *TaxRateUpdate {
	if s != nil {
		tru.SetUpdatedBy(*s)
	}
	return tru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tru *TaxRateUpdate) ClearUpdatedBy() *TaxRateUpdate {
	tru.mutation.ClearUpdatedBy()
	return tru
}

// SetName sets the "name" field.
func (tru *TaxRateUpdate) SetName(s string) *TaxRateUpdate {
	tru.mutation.SetName(s)
	return tru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tru *TaxRateUpdate) SetNillableName(s *string) *TaxRateUpdate {
	if s != nil {
		tru.SetName(*s)
	}
	return tru
}

// SetDescription sets the "description" field.
func (tru *TaxRateUpdate) SetDescription(s string) *TaxRateUpdate {
	tru.mutation.SetDescription(s)
	return tru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tru *TaxRateUpdate) SetNillableDescription(s *string) *TaxRateUpdate {
	if s != nil {
		tru.SetDescription(*s)
	}
	return tru
}

// ClearDescription clears the value of the "description" field.
func (tru *TaxRateUpdate) ClearDescription() *TaxRateUpdate {
	tru.mutation.ClearDescription()
	return tru
}

// SetCode sets the "code" field.
func (tru *TaxRateUpdate) SetCode(s string) *TaxRateUpdate {
	tru.mutation.SetCode(s)
	return tru
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tru *TaxRateUpdate) SetNillableCode(s *string) *TaxRateUpdate {
	if s != nil {
		tru.SetCode(*s)
	}
	return tru
}

// SetPercentage sets the "percentage" field.
func (tru *TaxRateUpdate) SetPercentage(d decimal.Decimal) *TaxRateUpdate {
	tru.mutation.SetPercentage(d)
	return tru
}

// SetNillablePercentage sets the "percentage" field if the given value is not nil.
func (tru *TaxRateUpdate) SetNillablePercentage(d *decimal.Decimal) *TaxRateUpdate {
	if d != nil {
		tru.SetPercentage(*d)
	}
	return tru
}

// SetFixedValue sets the "fixed_value" field.
func (tru *TaxRateUpdate) SetFixedValue(d decimal.Decimal) *TaxRateUpdate {
	tru.mutation.SetFixedValue(d)
	return tru
}

// SetNillableFixedValue sets the "fixed_value" field if the given value is not nil.
func (tru *TaxRateUpdate) SetNillableFixedValue(d *decimal.Decimal) *TaxRateUpdate {
	if d != nil {
		tru.SetFixedValue(*d)
	}
	return tru
}

// SetIsCompound sets the "is_compound" field.
func (tru *TaxRateUpdate) SetIsCompound(b bool) *TaxRateUpdate {
	tru.mutation.SetIsCompound(b)
	return tru
}

// SetNillableIsCompound sets the "is_compound" field if the given value is not nil.
func (tru *TaxRateUpdate) SetNillableIsCompound(b *bool) *TaxRateUpdate {
	if b != nil {
		tru.SetIsCompound(*b)
	}
	return tru
}

// SetValidFrom sets the "valid_from" field.
func (tru *TaxRateUpdate) SetValidFrom(t time.Time) *TaxRateUpdate {
	tru.mutation.SetValidFrom(t)
	return tru
}

// SetNillableValidFrom sets the "valid_from" field if the given value is not nil.
func (tru *TaxRateUpdate) SetNillableValidFrom(t *time.Time) *TaxRateUpdate {
	if t != nil {
		tru.SetValidFrom(*t)
	}
	return tru
}

// ClearValidFrom clears the value of the "valid_from" field.
func (tru *TaxRateUpdate) ClearValidFrom() *TaxRateUpdate {
	tru.mutation.ClearValidFrom()
	return tru
}

// SetValidTo sets the "valid_to" field.
func (tru *TaxRateUpdate) SetValidTo(t time.Time) *TaxRateUpdate {
	tru.mutation.SetValidTo(t)
	return tru
}

// SetNillableValidTo sets the "valid_to" field if the given value is not nil.
func (tru *TaxRateUpdate) SetNillableValidTo(t *time.Time) *TaxRateUpdate {
	if t != nil {
		tru.SetValidTo(*t)
	}
	return tru
}

// ClearValidTo clears the value of the "valid_to" field.
func (tru *TaxRateUpdate) ClearValidTo() *TaxRateUpdate {
	tru.mutation.ClearValidTo()
	return tru
}

// SetMetadata sets the "metadata" field.
func (tru *TaxRateUpdate) SetMetadata(m map[string]string) *TaxRateUpdate {
	tru.mutation.SetMetadata(m)
	return tru
}

// ClearMetadata clears the value of the "metadata" field.
func (tru *TaxRateUpdate) ClearMetadata() *TaxRateUpdate {
	tru.mutation.ClearMetadata()
	return tru
}

// Mutation returns the TaxRateMutation object of the builder.
func (tru *TaxRateUpdate) Mutation() *TaxRateMutation {
	return tru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TaxRateUpdate) Save(ctx context.Context) (int, error) {
	tru.defaults()
	return withHooks(ctx, tru.sqlSave, tru.mutation, tru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TaxRateUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TaxRateUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TaxRateUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tru *TaxRateUpdate) defaults() {
	if _, ok := tru.mutation.UpdatedAt(); !ok {
		v := taxrate.UpdateDefaultUpdatedAt()
		tru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tru *TaxRateUpdate) check() error {
	if v, ok := tru.mutation.Name(); ok {
		if err := taxrate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TaxRate.name": %w`, err)}
		}
	}
	if v, ok := tru.mutation.Code(); ok {
		if err := taxrate.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "TaxRate.code": %w`, err)}
		}
	}
	return nil
}

func (tru *TaxRateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(taxrate.Table, taxrate.Columns, sqlgraph.NewFieldSpec(taxrate.FieldID, field.TypeString))
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tru.mutation.Status(); ok {
		_spec.SetField(taxrate.FieldStatus, field.TypeString, value)
	}
	if value, ok := tru.mutation.UpdatedAt(); ok {
		_spec.SetField(taxrate.FieldUpdatedAt, field.TypeTime, value)
	}
	if tru.mutation.CreatedByCleared() {
		_spec.ClearField(taxrate.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tru.mutation.UpdatedBy(); ok {
		_spec.SetField(taxrate.FieldUpdatedBy, field.TypeString, value)
	}
	if tru.mutation.UpdatedByCleared() {
		_spec.ClearField(taxrate.FieldUpdatedBy, field.TypeString)
	}
	if tru.mutation.EnvironmentIDCleared() {
		_spec.ClearField(taxrate.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := tru.mutation.Name(); ok {
		_spec.SetField(taxrate.FieldName, field.TypeString, value)
	}
	if value, ok := tru.mutation.Description(); ok {
		_spec.SetField(taxrate.FieldDescription, field.TypeString, value)
	}
	if tru.mutation.DescriptionCleared() {
		_spec.ClearField(taxrate.FieldDescription, field.TypeString)
	}
	if value, ok := tru.mutation.Code(); ok {
		_spec.SetField(taxrate.FieldCode, field.TypeString, value)
	}
	if value, ok := tru.mutation.Percentage(); ok {
		_spec.SetField(taxrate.FieldPercentage, field.TypeOther, value)
	}
	if value, ok := tru.mutation.FixedValue(); ok {
		_spec.SetField(taxrate.FieldFixedValue, field.TypeOther, value)
	}
	if value, ok := tru.mutation.IsCompound(); ok {
		_spec.SetField(taxrate.FieldIsCompound, field.TypeBool, value)
	}
	if value, ok := tru.mutation.ValidFrom(); ok {
		_spec.SetField(taxrate.FieldValidFrom, field.TypeTime, value)
	}
	if tru.mutation.ValidFromCleared() {
		_spec.ClearField(taxrate.FieldValidFrom, field.TypeTime)
	}
	if value, ok := tru.mutation.ValidTo(); ok {
		_spec.SetField(taxrate.FieldValidTo, field.TypeTime, value)
	}
	if tru.mutation.ValidToCleared() {
		_spec.ClearField(taxrate.FieldValidTo, field.TypeTime)
	}
	if value, ok := tru.mutation.Metadata(); ok {
		_spec.SetField(taxrate.FieldMetadata, field.TypeJSON, value)
	}
	if tru.mutation.MetadataCleared() {
		_spec.ClearField(taxrate.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxrate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tru.mutation.done = true
	return n, nil
}

// TaxRateUpdateOne is the builder for updating a single TaxRate entity.
type TaxRateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaxRateMutation
}

// SetStatus sets the "status" field.
func (truo *TaxRateUpdateOne) SetStatus(s string) *TaxRateUpdateOne {
	truo.mutation.SetStatus(s)
	return truo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (truo *TaxRateUpdateOne) SetNillableStatus(s *string) *TaxRateUpdateOne {
	if s != nil {
		truo.SetStatus(*s)
	}
	return truo
}

// SetUpdatedAt sets the "updated_at" field.
func (truo *TaxRateUpdateOne) SetUpdatedAt(t time.Time) *TaxRateUpdateOne {
	truo.mutation.SetUpdatedAt(t)
	return truo
}

// SetUpdatedBy sets the "updated_by" field.
func (truo *TaxRateUpdateOne) SetUpdatedBy(s string) *TaxRateUpdateOne {
	truo.mutation.SetUpdatedBy(s)
	return truo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (truo *TaxRateUpdateOne) SetNillableUpdatedBy(s *string) *TaxRateUpdateOne {
	if s != nil {
		truo.SetUpdatedBy(*s)
	}
	return truo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (truo *TaxRateUpdateOne) ClearUpdatedBy() *TaxRateUpdateOne {
	truo.mutation.ClearUpdatedBy()
	return truo
}

// SetName sets the "name" field.
func (truo *TaxRateUpdateOne) SetName(s string) *TaxRateUpdateOne {
	truo.mutation.SetName(s)
	return truo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (truo *TaxRateUpdateOne) SetNillableName(s *string) *TaxRateUpdateOne {
	if s != nil {
		truo.SetName(*s)
	}
	return truo
}

// SetDescription sets the "description" field.
func (truo *TaxRateUpdateOne) SetDescription(s string) *TaxRateUpdateOne {
	truo.mutation.SetDescription(s)
	return truo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (truo *TaxRateUpdateOne) SetNillableDescription(s *string) *TaxRateUpdateOne {
	if s != nil {
		truo.SetDescription(*s)
	}
	return truo
}

// ClearDescription clears the value of the "description" field.
func (truo *TaxRateUpdateOne) ClearDescription() *TaxRateUpdateOne {
	truo.mutation.ClearDescription()
	return truo
}

// SetCode sets the "code" field.
func (truo *TaxRateUpdateOne) SetCode(s string) *TaxRateUpdateOne {
	truo.mutation.SetCode(s)
	return truo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (truo *TaxRateUpdateOne) SetNillableCode(s *string) *TaxRateUpdateOne {
	if s != nil {
		truo.SetCode(*s)
	}
	return truo
}

// SetPercentage sets the "percentage" field.
func (truo *TaxRateUpdateOne) SetPercentage(d decimal.Decimal) *TaxRateUpdateOne {
	truo.mutation.SetPercentage(d)
	return truo
}

// SetNillablePercentage sets the "percentage" field if the given value is not nil.
func (truo *TaxRateUpdateOne) SetNillablePercentage(d *decimal.Decimal) *TaxRateUpdateOne {
	if d != nil {
		truo.SetPercentage(*d)
	}
	return truo
}

// SetFixedValue sets the "fixed_value" field.
func (truo *TaxRateUpdateOne) SetFixedValue(d decimal.Decimal) *TaxRateUpdateOne {
	truo.mutation.SetFixedValue(d)
	return truo
}

// SetNillableFixedValue sets the "fixed_value" field if the given value is not nil.
func (truo *TaxRateUpdateOne) SetNillableFixedValue(d *decimal.Decimal) *TaxRateUpdateOne {
	if d != nil {
		truo.SetFixedValue(*d)
	}
	return truo
}

// SetIsCompound sets the "is_compound" field.
func (truo *TaxRateUpdateOne) SetIsCompound(b bool) *TaxRateUpdateOne {
	truo.mutation.SetIsCompound(b)
	return truo
}

// SetNillableIsCompound sets the "is_compound" field if the given value is not nil.
func (truo *TaxRateUpdateOne) SetNillableIsCompound(b *bool) *TaxRateUpdateOne {
	if b != nil {
		truo.SetIsCompound(*b)
	}
	return truo
}

// SetValidFrom sets the "valid_from" field.
func (truo *TaxRateUpdateOne) SetValidFrom(t time.Time) *TaxRateUpdateOne {
	truo.mutation.SetValidFrom(t)
	return truo
}

// SetNillableValidFrom sets the "valid_from" field if the given value is not nil.
func (truo *TaxRateUpdateOne) SetNillableValidFrom(t *time.Time) *TaxRateUpdateOne {
	if t != nil {
		truo.SetValidFrom(*t)
	}
	return truo
}

// ClearValidFrom clears the value of the "valid_from" field.
func (truo *TaxRateUpdateOne) ClearValidFrom() *TaxRateUpdateOne {
	truo.mutation.ClearValidFrom()
	return truo
}

// SetValidTo sets the "valid_to" field.
func (truo *TaxRateUpdateOne) SetValidTo(t time.Time) *TaxRateUpdateOne {
	truo.mutation.SetValidTo(t)
	return truo
}

// SetNillableValidTo sets the "valid_to" field if the given value is not nil.
func (truo *TaxRateUpdateOne) SetNillableValidTo(t *time.Time) *TaxRateUpdateOne {
	if t != nil {
		truo.SetValidTo(*t)
	}
	return truo
}

// ClearValidTo clears the value of the "valid_to" field.
func (truo *TaxRateUpdateOne) ClearValidTo() *TaxRateUpdateOne {
	truo.mutation.ClearValidTo()
	return truo
}

// SetMetadata sets the "metadata" field.
func (truo *TaxRateUpdateOne) SetMetadata(m map[string]string) *TaxRateUpdateOne {
	truo.mutation.SetMetadata(m)
	return truo
}

// ClearMetadata clears the value of the "metadata" field.
func (truo *TaxRateUpdateOne) ClearMetadata() *TaxRateUpdateOne {
	truo.mutation.ClearMetadata()
	return truo
}

// Mutation returns the TaxRateMutation object of the builder.
func (truo *TaxRateUpdateOne) Mutation() *TaxRateMutation {
	return truo.mutation
}

// Where appends a list predicates to the TaxRateUpdate builder.
func (truo *TaxRateUpdateOne) Where(ps ...predicate.TaxRate) *TaxRateUpdateOne {
	truo.mutation.Where(ps...)
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TaxRateUpdateOne) Select(field string, fields ...string) *TaxRateUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TaxRate entity.
func (truo *TaxRateUpdateOne) Save(ctx context.Context) (*TaxRate, error) {
	truo.defaults()
	return withHooks(ctx, truo.sqlSave, truo.mutation, truo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TaxRateUpdateOne) SaveX(ctx context.Context) *TaxRate {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TaxRateUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TaxRateUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (truo *TaxRateUpdateOne) defaults() {
	if _, ok := truo.mutation.UpdatedAt(); !ok {
		v := taxrate.UpdateDefaultUpdatedAt()
		truo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (truo *TaxRateUpdateOne) check() error {
	if v, ok := truo.mutation.Name(); ok {
		if err := taxrate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TaxRate.name": %w`, err)}
		}
	}
	if v, ok := truo.mutation.Code(); ok {
		if err := taxrate.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "TaxRate.code": %w`, err)}
		}
	}
	return nil
}

func (truo *TaxRateUpdateOne) sqlSave(ctx context.Context) (_node *TaxRate, err error) {
	if err := truo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taxrate.Table, taxrate.Columns, sqlgraph.NewFieldSpec(taxrate.FieldID, field.TypeString))
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaxRate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taxrate.FieldID)
		for _, f := range fields {
			if !taxrate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taxrate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := truo.mutation.Status(); ok {
		_spec.SetField(taxrate.FieldStatus, field.TypeString, value)
	}
	if value, ok := truo.mutation.UpdatedAt(); ok {
		_spec.SetField(taxrate.FieldUpdatedAt, field.TypeTime, value)
	}
	if truo.mutation.CreatedByCleared() {
		_spec.ClearField(taxrate.FieldCreatedBy, field.TypeString)
	}
	if value, ok := truo.mutation.UpdatedBy(); ok {
		_spec.SetField(taxrate.FieldUpdatedBy, field.TypeString, value)
	}
	if truo.mutation.UpdatedByCleared() {
		_spec.ClearField(taxrate.FieldUpdatedBy, field.TypeString)
	}
	if truo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(taxrate.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := truo.mutation.Name(); ok {
		_spec.SetField(taxrate.FieldName, field.TypeString, value)
	}
	if value, ok := truo.mutation.Description(); ok {
		_spec.SetField(taxrate.FieldDescription, field.TypeString, value)
	}
	if truo.mutation.DescriptionCleared() {
		_spec.ClearField(taxrate.FieldDescription, field.TypeString)
	}
	if value, ok := truo.mutation.Code(); ok {
		_spec.SetField(taxrate.FieldCode, field.TypeString, value)
	}
	if value, ok := truo.mutation.Percentage(); ok {
		_spec.SetField(taxrate.FieldPercentage, field.TypeOther, value)
	}
	if value, ok := truo.mutation.FixedValue(); ok {
		_spec.SetField(taxrate.FieldFixedValue, field.TypeOther, value)
	}
	if value, ok := truo.mutation.IsCompound(); ok {
		_spec.SetField(taxrate.FieldIsCompound, field.TypeBool, value)
	}
	if value, ok := truo.mutation.ValidFrom(); ok {
		_spec.SetField(taxrate.FieldValidFrom, field.TypeTime, value)
	}
	if truo.mutation.ValidFromCleared() {
		_spec.ClearField(taxrate.FieldValidFrom, field.TypeTime)
	}
	if value, ok := truo.mutation.ValidTo(); ok {
		_spec.SetField(taxrate.FieldValidTo, field.TypeTime, value)
	}
	if truo.mutation.ValidToCleared() {
		_spec.ClearField(taxrate.FieldValidTo, field.TypeTime)
	}
	if value, ok := truo.mutation.Metadata(); ok {
		_spec.SetField(taxrate.FieldMetadata, field.TypeJSON, value)
	}
	if truo.mutation.MetadataCleared() {
		_spec.ClearField(taxrate.FieldMetadata, field.TypeJSON)
	}
	_node = &TaxRate{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxrate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	truo.mutation.done = true
	return _node, nil
}
