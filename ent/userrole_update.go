// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/userrole"
)

// UserRoleUpdate is the builder for updating UserRole entities.
type UserRoleUpdate struct {
	config
	hooks    []Hook
	mutation *UserRoleMutation
}

// Where appends a list predicates to the UserRoleUpdate builder.
func (uru *UserRoleUpdate) Where(ps ...predicate.UserRole) *UserRoleUpdate {
	uru.mutation.Where(ps...)
	return uru
}

// SetStatus sets the "status" field.
func (uru *UserRoleUpdate) SetStatus(s string) *UserRoleUpdate {
	uru.mutation.SetStatus(s)
	return uru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uru *UserRoleUpdate) SetNillableStatus(s *string) *UserRoleUpdate {
	if s != nil {
		uru.SetStatus(*s)
	}
	return uru
}

// SetUpdatedAt sets the "updated_at" field.
func (uru *UserRoleUpdate) SetUpdatedAt(t time.Time) *UserRoleUpdate {
	uru.mutation.SetUpdatedAt(t)
	return uru
}

// SetUpdatedBy sets the "updated_by" field.
func (uru *UserRoleUpdate) SetUpdatedBy(s string) *UserRoleUpdate {
	uru.mutation.SetUpdatedBy(s)
	return uru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uru *UserRoleUpdate) SetNillableUpdatedBy(s *string) *UserRoleUpdate {
	if s != nil {
		uru.SetUpdatedBy(*s)
	}
	return uru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uru *UserRoleUpdate) ClearUpdatedBy() *UserRoleUpdate {
	uru.mutation.ClearUpdatedBy()
	return uru
}

// SetUserID sets the "user_id" field.
func (uru *UserRoleUpdate) SetUserID(s string) *UserRoleUpdate {
	uru.mutation.SetUserID(s)
	return uru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uru *UserRoleUpdate) SetNillableUserID(s *string) *UserRoleUpdate {
	if s != nil {
		uru.SetUserID(*s)
	}
	return uru
}

// SetRole sets the "role" field.
func (uru *UserRoleUpdate) SetRole(s string) *UserRoleUpdate {
	uru.mutation.SetRole(s)
	return uru
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uru *UserRoleUpdate) SetNillableRole(s *string) *UserRoleUpdate {
	if s != nil {
		uru.SetRole(*s)
	}
	return uru
}

// Mutation returns the UserRoleMutation object of the builder.
func (uru *UserRoleUpdate) Mutation() *UserRoleMutation {
	return uru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uru *UserRoleUpdate) Save(ctx context.Context) (int, error) {
	uru.defaults()
	return withHooks(ctx, uru.sqlSave, uru.mutation, uru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uru *UserRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := uru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uru *UserRoleUpdate) Exec(ctx context.Context) error {
	_, err := uru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uru *UserRoleUpdate) ExecX(ctx context.Context) {
	if err := uru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uru *UserRoleUpdate) defaults() {
	if _, ok := uru.mutation.UpdatedAt(); !ok {
		v := userrole.UpdateDefaultUpdatedAt()
		uru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uru *UserRoleUpdate) check() error {
	if v, ok := uru.mutation.UserID(); ok {
		if err := userrole.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserRole.user_id": %w`, err)}
		}
	}
	if v, ok := uru.mutation.Role(); ok {
		if err := userrole.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "UserRole.role": %w`, err)}
		}
	}
	return nil
}

func (uru *UserRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userrole.Table, userrole.Columns, sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString))
	if ps := uru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uru.mutation.Status(); ok {
		_spec.SetField(userrole.FieldStatus, field.TypeString, value)
	}
	if value, ok := uru.mutation.UpdatedAt(); ok {
		_spec.SetField(userrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if uru.mutation.CreatedByCleared() {
		_spec.ClearField(userrole.FieldCreatedBy, field.TypeString)
	}
	if value, ok := uru.mutation.UpdatedBy(); ok {
		_spec.SetField(userrole.FieldUpdatedBy, field.TypeString, value)
	}
	if uru.mutation.UpdatedByCleared() {
		_spec.ClearField(userrole.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := uru.mutation.UserID(); ok {
		_spec.SetField(userrole.FieldUserID, field.TypeString, value)
	}
	if value, ok := uru.mutation.Role(); ok {
		_spec.SetField(userrole.FieldRole, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uru.mutation.done = true
	return n, nil
}

// UserRoleUpdateOne is the builder for updating a single UserRole entity.
type UserRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserRoleMutation
}

// SetStatus sets the "status" field.
func (uruo *UserRoleUpdateOne) SetStatus(s string) *UserRoleUpdateOne {
	uruo.mutation.SetStatus(s)
	return uruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uruo *UserRoleUpdateOne) SetNillableStatus(s *string) *UserRoleUpdateOne {
	if s != nil {
		uruo.SetStatus(*s)
	}
	return uruo
}

// SetUpdatedAt sets the "updated_at" field.
func (uruo *UserRoleUpdateOne) SetUpdatedAt(t time.Time) *UserRoleUpdateOne {
	uruo.mutation.SetUpdatedAt(t)
	return uruo
}

// SetUpdatedBy sets the "updated_by" field.
func (uruo *UserRoleUpdateOne) SetUpdatedBy(s string) *UserRoleUpdateOne {
	uruo.mutation.SetUpdatedBy(s)
	return uruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uruo *UserRoleUpdateOne) SetNillableUpdatedBy(s *string) *UserRoleUpdateOne {
	if s != nil {
		uruo.SetUpdatedBy(*s)
	}
	return uruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uruo *UserRoleUpdateOne) ClearUpdatedBy() *UserRoleUpdateOne {
	uruo.mutation.ClearUpdatedBy()
	return uruo
}

// SetUserID sets the "user_id" field.
func (uruo *UserRoleUpdateOne) SetUserID(s string) *UserRoleUpdateOne {
	uruo.mutation.SetUserID(s)
	return uruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uruo *UserRoleUpdateOne) SetNillableUserID(s *string) *UserRoleUpdateOne {
	if s != nil {
		uruo.SetUserID(*s)
	}
	return uruo
}

// SetRole sets the "role" field.
func (uruo *UserRoleUpdateOne) SetRole(s string) *UserRoleUpdateOne {
	uruo.mutation.SetRole(s)
	return uruo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uruo *UserRoleUpdateOne) SetNillableRole(s *string) *UserRoleUpdateOne {
	if s != nil {
		uruo.SetRole(*s)
	}
	return uruo
}

// Mutation returns the UserRoleMutation object of the builder.
func (uruo *UserRoleUpdateOne) Mutation() *UserRoleMutation {
	return uruo.mutation
}

// Where appends a list predicates to the UserRoleUpdate builder.
func (uruo *UserRoleUpdateOne) Where(ps ...predicate.UserRole) *UserRoleUpdateOne {
	uruo.mutation.Where(ps...)
	return uruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uruo *UserRoleUpdateOne) Select(field string, fields ...string) *UserRoleUpdateOne {
	uruo.fields = append([]string{field}, fields...)
	return uruo
}

// Save executes the query and returns the updated UserRole entity.
func (uruo *UserRoleUpdateOne) Save(ctx context.Context) (*UserRole, error) {
	uruo.defaults()
	return withHooks(ctx, uruo.sqlSave, uruo.mutation, uruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uruo *UserRoleUpdateOne) SaveX(ctx context.Context) *UserRole {
	node, err := uruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uruo *UserRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := uruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uruo *UserRoleUpdateOne) ExecX(ctx context.Context) {
	if err := uruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uruo *UserRoleUpdateOne) defaults() {
	if _, ok := uruo.mutation.UpdatedAt(); !ok {
		v := userrole.UpdateDefaultUpdatedAt()
		uruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uruo *UserRoleUpdateOne) check() error {
	if v, ok := uruo.mutation.UserID(); ok {
		if err := userrole.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserRole.user_id": %w`, err)}
		}
	}
	if v, ok := uruo.mutation.Role(); ok {
		if err := userrole.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "UserRole.role": %w`, err)}
		}
	}
	return nil
}

func (uruo *UserRoleUpdateOne) sqlSave(ctx context.Context) (_node *UserRole, err error) {
	if err := uruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userrole.Table, userrole.Columns, sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString))
	id, ok := uruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userrole.FieldID)
		for _, f := range fields {
			if !userrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uruo.mutation.Status(); ok {
		_spec.SetField(userrole.FieldStatus, field.TypeString, value)
	}
	if value, ok := uruo.mutation.UpdatedAt(); ok {
		_spec.SetField(userrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if uruo.mutation.CreatedByCleared() {
		_spec.ClearField(userrole.FieldCreatedBy, field.TypeString)
	}
	if value, ok := uruo.mutation.UpdatedBy(); ok {
		_spec.SetField(userrole.FieldUpdatedBy, field.TypeString, value)
	}
	if uruo.mutation.UpdatedByCleared() {
		_spec.ClearField(userrole.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := uruo.mutation.UserID(); ok {
		_spec.SetField(userrole.FieldUserID, field.TypeString, value)
	}
	if value, ok := uruo.mutation.Role(); ok {
		_spec.SetField(userrole.FieldRole, field.TypeString, value)
	}
	_node = &UserRole{config: uruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uruo.mutation.done = true
	return _node, nil
}
