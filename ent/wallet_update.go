// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/wallet"
	"github.com/shopspring/decimal"
)

// WalletUpdate is the builder for updating Wallet entities.
type WalletUpdate struct {
	config
	hooks    []Hook
	mutation *WalletMutation
}

// Where appends a list predicates to the WalletUpdate builder.
func (wu *WalletUpdate) Where(ps ...predicate.Wallet) *WalletUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetStatus sets the "status" field.
func (wu *WalletUpdate) SetStatus(s string) *WalletUpdate {
	wu.mutation.SetStatus(s)
	return wu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableStatus(s *string) *WalletUpdate {
	if s != nil {
		wu.SetStatus(*s)
	}
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WalletUpdate) SetUpdatedAt(t time.Time) *WalletUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetUpdatedBy sets the "updated_by" field.
func (wu *WalletUpdate) SetUpdatedBy(s string) *WalletUpdate {
	wu.mutation.SetUpdatedBy(s)
	return wu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableUpdatedBy(s *string) *WalletUpdate {
	if s != nil {
		wu.SetUpdatedBy(*s)
	}
	return wu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (wu *WalletUpdate) ClearUpdatedBy() *WalletUpdate {
	wu.mutation.ClearUpdatedBy()
	return wu
}

// SetCurrency sets the "currency" field.
func (wu *WalletUpdate) SetCurrency(s string) *WalletUpdate {
	wu.mutation.SetCurrency(s)
	return wu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableCurrency(s *string) *WalletUpdate {
	if s != nil {
		wu.SetCurrency(*s)
	}
	return wu
}

// SetDescription sets the "description" field.
func (wu *WalletUpdate) SetDescription(s string) *WalletUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableDescription(s *string) *WalletUpdate {
	if s != nil {
		wu.SetDescription(*s)
	}
	return wu
}

// ClearDescription clears the value of the "description" field.
func (wu *WalletUpdate) ClearDescription() *WalletUpdate {
	wu.mutation.ClearDescription()
	return wu
}

// SetMetadata sets the "metadata" field.
func (wu *WalletUpdate) SetMetadata(m map[string]string) *WalletUpdate {
	wu.mutation.SetMetadata(m)
	return wu
}

// ClearMetadata clears the value of the "metadata" field.
func (wu *WalletUpdate) ClearMetadata() *WalletUpdate {
	wu.mutation.ClearMetadata()
	return wu
}

// SetBalance sets the "balance" field.
func (wu *WalletUpdate) SetBalance(d decimal.Decimal) *WalletUpdate {
	wu.mutation.SetBalance(d)
	return wu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableBalance(d *decimal.Decimal) *WalletUpdate {
	if d != nil {
		wu.SetBalance(*d)
	}
	return wu
}

// SetWalletStatus sets the "wallet_status" field.
func (wu *WalletUpdate) SetWalletStatus(s string) *WalletUpdate {
	wu.mutation.SetWalletStatus(s)
	return wu
}

// SetNillableWalletStatus sets the "wallet_status" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableWalletStatus(s *string) *WalletUpdate {
	if s != nil {
		wu.SetWalletStatus(*s)
	}
	return wu
}

// Mutation returns the WalletMutation object of the builder.
func (wu *WalletUpdate) Mutation() *WalletMutation {
	return wu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WalletUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WalletUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WalletUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WalletUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WalletUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := wallet.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WalletUpdate) check() error {
	if v, ok := wu.mutation.Currency(); ok {
		if err := wallet.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Wallet.currency": %w`, err)}
		}
	}
	return nil
}

func (wu *WalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeString))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Status(); ok {
		_spec.SetField(wallet.FieldStatus, field.TypeString, value)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(wallet.FieldUpdatedAt, field.TypeTime, value)
	}
	if wu.mutation.CreatedByCleared() {
		_spec.ClearField(wallet.FieldCreatedBy, field.TypeString)
	}
	if value, ok := wu.mutation.UpdatedBy(); ok {
		_spec.SetField(wallet.FieldUpdatedBy, field.TypeString, value)
	}
	if wu.mutation.UpdatedByCleared() {
		_spec.ClearField(wallet.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := wu.mutation.Currency(); ok {
		_spec.SetField(wallet.FieldCurrency, field.TypeString, value)
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.SetField(wallet.FieldDescription, field.TypeString, value)
	}
	if wu.mutation.DescriptionCleared() {
		_spec.ClearField(wallet.FieldDescription, field.TypeString)
	}
	if value, ok := wu.mutation.Metadata(); ok {
		_spec.SetField(wallet.FieldMetadata, field.TypeJSON, value)
	}
	if wu.mutation.MetadataCleared() {
		_spec.ClearField(wallet.FieldMetadata, field.TypeJSON)
	}
	if value, ok := wu.mutation.Balance(); ok {
		_spec.SetField(wallet.FieldBalance, field.TypeOther, value)
	}
	if value, ok := wu.mutation.WalletStatus(); ok {
		_spec.SetField(wallet.FieldWalletStatus, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WalletUpdateOne is the builder for updating a single Wallet entity.
type WalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WalletMutation
}

// SetStatus sets the "status" field.
func (wuo *WalletUpdateOne) SetStatus(s string) *WalletUpdateOne {
	wuo.mutation.SetStatus(s)
	return wuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableStatus(s *string) *WalletUpdateOne {
	if s != nil {
		wuo.SetStatus(*s)
	}
	return wuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WalletUpdateOne) SetUpdatedAt(t time.Time) *WalletUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetUpdatedBy sets the "updated_by" field.
func (wuo *WalletUpdateOne) SetUpdatedBy(s string) *WalletUpdateOne {
	wuo.mutation.SetUpdatedBy(s)
	return wuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableUpdatedBy(s *string) *WalletUpdateOne {
	if s != nil {
		wuo.SetUpdatedBy(*s)
	}
	return wuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (wuo *WalletUpdateOne) ClearUpdatedBy() *WalletUpdateOne {
	wuo.mutation.ClearUpdatedBy()
	return wuo
}

// SetCurrency sets the "currency" field.
func (wuo *WalletUpdateOne) SetCurrency(s string) *WalletUpdateOne {
	wuo.mutation.SetCurrency(s)
	return wuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableCurrency(s *string) *WalletUpdateOne {
	if s != nil {
		wuo.SetCurrency(*s)
	}
	return wuo
}

// SetDescription sets the "description" field.
func (wuo *WalletUpdateOne) SetDescription(s string) *WalletUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableDescription(s *string) *WalletUpdateOne {
	if s != nil {
		wuo.SetDescription(*s)
	}
	return wuo
}

// ClearDescription clears the value of the "description" field.
func (wuo *WalletUpdateOne) ClearDescription() *WalletUpdateOne {
	wuo.mutation.ClearDescription()
	return wuo
}

// SetMetadata sets the "metadata" field.
func (wuo *WalletUpdateOne) SetMetadata(m map[string]string) *WalletUpdateOne {
	wuo.mutation.SetMetadata(m)
	return wuo
}

// ClearMetadata clears the value of the "metadata" field.
func (wuo *WalletUpdateOne) ClearMetadata() *WalletUpdateOne {
	wuo.mutation.ClearMetadata()
	return wuo
}

// SetBalance sets the "balance" field.
func (wuo *WalletUpdateOne) SetBalance(d decimal.Decimal) *WalletUpdateOne {
	wuo.mutation.SetBalance(d)
	return wuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableBalance(d *decimal.Decimal) *WalletUpdateOne {
	if d != nil {
		wuo.SetBalance(*d)
	}
	return wuo
}

// SetWalletStatus sets the "wallet_status" field.
func (wuo *WalletUpdateOne) SetWalletStatus(s string) *WalletUpdateOne {
	wuo.mutation.SetWalletStatus(s)
	return wuo
}

// SetNillableWalletStatus sets the "wallet_status" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableWalletStatus(s *string) *WalletUpdateOne {
	if s != nil {
		wuo.SetWalletStatus(*s)
	}
	return wuo
}

// Mutation returns the WalletMutation object of the builder.
func (wuo *WalletUpdateOne) Mutation() *WalletMutation {
	return wuo.mutation
}

// Where appends a list predicates to the WalletUpdate builder.
func (wuo *WalletUpdateOne) Where(ps ...predicate.Wallet) *WalletUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WalletUpdateOne) Select(field string, fields ...string) *WalletUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Wallet entity.
func (wuo *WalletUpdateOne) Save(ctx context.Context) (*Wallet, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WalletUpdateOne) SaveX(ctx context.Context) *Wallet {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WalletUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WalletUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WalletUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := wallet.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WalletUpdateOne) check() error {
	if v, ok := wuo.mutation.Currency(); ok {
		if err := wallet.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Wallet.currency": %w`, err)}
		}
	}
	return nil
}

func (wuo *WalletUpdateOne) sqlSave(ctx context.Context) (_node *Wallet, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeString))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Wallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wallet.FieldID)
		for _, f := range fields {
			if !wallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Status(); ok {
		_spec.SetField(wallet.FieldStatus, field.TypeString, value)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(wallet.FieldUpdatedAt, field.TypeTime, value)
	}
	if wuo.mutation.CreatedByCleared() {
		_spec.ClearField(wallet.FieldCreatedBy, field.TypeString)
	}
	if value, ok := wuo.mutation.UpdatedBy(); ok {
		_spec.SetField(wallet.FieldUpdatedBy, field.TypeString, value)
	}
	if wuo.mutation.UpdatedByCleared() {
		_spec.ClearField(wallet.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := wuo.mutation.Currency(); ok {
		_spec.SetField(wallet.FieldCurrency, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.SetField(wallet.FieldDescription, field.TypeString, value)
	}
	if wuo.mutation.DescriptionCleared() {
		_spec.ClearField(wallet.FieldDescription, field.TypeString)
	}
	if value, ok := wuo.mutation.Metadata(); ok {
		_spec.SetField(wallet.FieldMetadata, field.TypeJSON, value)
	}
	if wuo.mutation.MetadataCleared() {
		_spec.ClearField(wallet.FieldMetadata, field.TypeJSON)
	}
	if value, ok := wuo.mutation.Balance(); ok {
		_spec.SetField(wallet.FieldBalance, field.TypeOther, value)
	}
	if value, ok := wuo.mutation.WalletStatus(); ok {
		_spec.SetField(wallet.FieldWalletStatus, field.TypeString, value)
	}
	_node = &Wallet{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
