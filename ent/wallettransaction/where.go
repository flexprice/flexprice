// Code generated by ent, DO NOT EDIT.

package wallettransaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldUpdatedBy, v))
}

// WalletID applies equality check predicate on the "wallet_id" field. It's identical to WalletIDEQ.
func WalletID(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldWalletID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldType, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldAmount, v))
}

// BalanceBefore applies equality check predicate on the "balance_before" field. It's identical to BalanceBeforeEQ.
func BalanceBefore(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldBalanceBefore, v))
}

// BalanceAfter applies equality check predicate on the "balance_after" field. It's identical to BalanceAfterEQ.
func BalanceAfter(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldBalanceAfter, v))
}

// ReferenceType applies equality check predicate on the "reference_type" field. It's identical to ReferenceTypeEQ.
func ReferenceType(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldReferenceType, v))
}

// ReferenceID applies equality check predicate on the "reference_id" field. It's identical to ReferenceIDEQ.
func ReferenceID(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldReferenceID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldDescription, v))
}

// TransactionStatus applies equality check predicate on the "transaction_status" field. It's identical to TransactionStatusEQ.
func TransactionStatus(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldTransactionStatus, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// WalletIDEQ applies the EQ predicate on the "wallet_id" field.
func WalletIDEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldWalletID, v))
}

// WalletIDNEQ applies the NEQ predicate on the "wallet_id" field.
func WalletIDNEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldWalletID, v))
}

// WalletIDIn applies the In predicate on the "wallet_id" field.
func WalletIDIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldWalletID, vs...))
}

// WalletIDNotIn applies the NotIn predicate on the "wallet_id" field.
func WalletIDNotIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldWalletID, vs...))
}

// WalletIDGT applies the GT predicate on the "wallet_id" field.
func WalletIDGT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldWalletID, v))
}

// WalletIDGTE applies the GTE predicate on the "wallet_id" field.
func WalletIDGTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldWalletID, v))
}

// WalletIDLT applies the LT predicate on the "wallet_id" field.
func WalletIDLT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldWalletID, v))
}

// WalletIDLTE applies the LTE predicate on the "wallet_id" field.
func WalletIDLTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldWalletID, v))
}

// WalletIDContains applies the Contains predicate on the "wallet_id" field.
func WalletIDContains(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContains(FieldWalletID, v))
}

// WalletIDHasPrefix applies the HasPrefix predicate on the "wallet_id" field.
func WalletIDHasPrefix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasPrefix(FieldWalletID, v))
}

// WalletIDHasSuffix applies the HasSuffix predicate on the "wallet_id" field.
func WalletIDHasSuffix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasSuffix(FieldWalletID, v))
}

// WalletIDEqualFold applies the EqualFold predicate on the "wallet_id" field.
func WalletIDEqualFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEqualFold(FieldWalletID, v))
}

// WalletIDContainsFold applies the ContainsFold predicate on the "wallet_id" field.
func WalletIDContainsFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContainsFold(FieldWalletID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContainsFold(FieldType, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldAmount, v))
}

// BalanceBeforeEQ applies the EQ predicate on the "balance_before" field.
func BalanceBeforeEQ(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldBalanceBefore, v))
}

// BalanceBeforeNEQ applies the NEQ predicate on the "balance_before" field.
func BalanceBeforeNEQ(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldBalanceBefore, v))
}

// BalanceBeforeIn applies the In predicate on the "balance_before" field.
func BalanceBeforeIn(vs ...decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldBalanceBefore, vs...))
}

// BalanceBeforeNotIn applies the NotIn predicate on the "balance_before" field.
func BalanceBeforeNotIn(vs ...decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldBalanceBefore, vs...))
}

// BalanceBeforeGT applies the GT predicate on the "balance_before" field.
func BalanceBeforeGT(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldBalanceBefore, v))
}

// BalanceBeforeGTE applies the GTE predicate on the "balance_before" field.
func BalanceBeforeGTE(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldBalanceBefore, v))
}

// BalanceBeforeLT applies the LT predicate on the "balance_before" field.
func BalanceBeforeLT(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldBalanceBefore, v))
}

// BalanceBeforeLTE applies the LTE predicate on the "balance_before" field.
func BalanceBeforeLTE(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldBalanceBefore, v))
}

// BalanceAfterEQ applies the EQ predicate on the "balance_after" field.
func BalanceAfterEQ(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldBalanceAfter, v))
}

// BalanceAfterNEQ applies the NEQ predicate on the "balance_after" field.
func BalanceAfterNEQ(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldBalanceAfter, v))
}

// BalanceAfterIn applies the In predicate on the "balance_after" field.
func BalanceAfterIn(vs ...decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldBalanceAfter, vs...))
}

// BalanceAfterNotIn applies the NotIn predicate on the "balance_after" field.
func BalanceAfterNotIn(vs ...decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldBalanceAfter, vs...))
}

// BalanceAfterGT applies the GT predicate on the "balance_after" field.
func BalanceAfterGT(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldBalanceAfter, v))
}

// BalanceAfterGTE applies the GTE predicate on the "balance_after" field.
func BalanceAfterGTE(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldBalanceAfter, v))
}

// BalanceAfterLT applies the LT predicate on the "balance_after" field.
func BalanceAfterLT(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldBalanceAfter, v))
}

// BalanceAfterLTE applies the LTE predicate on the "balance_after" field.
func BalanceAfterLTE(v decimal.Decimal) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldBalanceAfter, v))
}

// ReferenceTypeEQ applies the EQ predicate on the "reference_type" field.
func ReferenceTypeEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldReferenceType, v))
}

// ReferenceTypeNEQ applies the NEQ predicate on the "reference_type" field.
func ReferenceTypeNEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldReferenceType, v))
}

// ReferenceTypeIn applies the In predicate on the "reference_type" field.
func ReferenceTypeIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldReferenceType, vs...))
}

// ReferenceTypeNotIn applies the NotIn predicate on the "reference_type" field.
func ReferenceTypeNotIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldReferenceType, vs...))
}

// ReferenceTypeGT applies the GT predicate on the "reference_type" field.
func ReferenceTypeGT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldReferenceType, v))
}

// ReferenceTypeGTE applies the GTE predicate on the "reference_type" field.
func ReferenceTypeGTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldReferenceType, v))
}

// ReferenceTypeLT applies the LT predicate on the "reference_type" field.
func ReferenceTypeLT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldReferenceType, v))
}

// ReferenceTypeLTE applies the LTE predicate on the "reference_type" field.
func ReferenceTypeLTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldReferenceType, v))
}

// ReferenceTypeContains applies the Contains predicate on the "reference_type" field.
func ReferenceTypeContains(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContains(FieldReferenceType, v))
}

// ReferenceTypeHasPrefix applies the HasPrefix predicate on the "reference_type" field.
func ReferenceTypeHasPrefix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasPrefix(FieldReferenceType, v))
}

// ReferenceTypeHasSuffix applies the HasSuffix predicate on the "reference_type" field.
func ReferenceTypeHasSuffix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasSuffix(FieldReferenceType, v))
}

// ReferenceTypeIsNil applies the IsNil predicate on the "reference_type" field.
func ReferenceTypeIsNil() predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIsNull(FieldReferenceType))
}

// ReferenceTypeNotNil applies the NotNil predicate on the "reference_type" field.
func ReferenceTypeNotNil() predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotNull(FieldReferenceType))
}

// ReferenceTypeEqualFold applies the EqualFold predicate on the "reference_type" field.
func ReferenceTypeEqualFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEqualFold(FieldReferenceType, v))
}

// ReferenceTypeContainsFold applies the ContainsFold predicate on the "reference_type" field.
func ReferenceTypeContainsFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContainsFold(FieldReferenceType, v))
}

// ReferenceIDEQ applies the EQ predicate on the "reference_id" field.
func ReferenceIDEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldReferenceID, v))
}

// ReferenceIDNEQ applies the NEQ predicate on the "reference_id" field.
func ReferenceIDNEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldReferenceID, v))
}

// ReferenceIDIn applies the In predicate on the "reference_id" field.
func ReferenceIDIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldReferenceID, vs...))
}

// ReferenceIDNotIn applies the NotIn predicate on the "reference_id" field.
func ReferenceIDNotIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldReferenceID, vs...))
}

// ReferenceIDGT applies the GT predicate on the "reference_id" field.
func ReferenceIDGT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldReferenceID, v))
}

// ReferenceIDGTE applies the GTE predicate on the "reference_id" field.
func ReferenceIDGTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldReferenceID, v))
}

// ReferenceIDLT applies the LT predicate on the "reference_id" field.
func ReferenceIDLT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldReferenceID, v))
}

// ReferenceIDLTE applies the LTE predicate on the "reference_id" field.
func ReferenceIDLTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldReferenceID, v))
}

// ReferenceIDContains applies the Contains predicate on the "reference_id" field.
func ReferenceIDContains(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContains(FieldReferenceID, v))
}

// ReferenceIDHasPrefix applies the HasPrefix predicate on the "reference_id" field.
func ReferenceIDHasPrefix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasPrefix(FieldReferenceID, v))
}

// ReferenceIDHasSuffix applies the HasSuffix predicate on the "reference_id" field.
func ReferenceIDHasSuffix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasSuffix(FieldReferenceID, v))
}

// ReferenceIDIsNil applies the IsNil predicate on the "reference_id" field.
func ReferenceIDIsNil() predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIsNull(FieldReferenceID))
}

// ReferenceIDNotNil applies the NotNil predicate on the "reference_id" field.
func ReferenceIDNotNil() predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotNull(FieldReferenceID))
}

// ReferenceIDEqualFold applies the EqualFold predicate on the "reference_id" field.
func ReferenceIDEqualFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEqualFold(FieldReferenceID, v))
}

// ReferenceIDContainsFold applies the ContainsFold predicate on the "reference_id" field.
func ReferenceIDContainsFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContainsFold(FieldReferenceID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContainsFold(FieldDescription, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotNull(FieldMetadata))
}

// TransactionStatusEQ applies the EQ predicate on the "transaction_status" field.
func TransactionStatusEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEQ(FieldTransactionStatus, v))
}

// TransactionStatusNEQ applies the NEQ predicate on the "transaction_status" field.
func TransactionStatusNEQ(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNEQ(FieldTransactionStatus, v))
}

// TransactionStatusIn applies the In predicate on the "transaction_status" field.
func TransactionStatusIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldIn(FieldTransactionStatus, vs...))
}

// TransactionStatusNotIn applies the NotIn predicate on the "transaction_status" field.
func TransactionStatusNotIn(vs ...string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldNotIn(FieldTransactionStatus, vs...))
}

// TransactionStatusGT applies the GT predicate on the "transaction_status" field.
func TransactionStatusGT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGT(FieldTransactionStatus, v))
}

// TransactionStatusGTE applies the GTE predicate on the "transaction_status" field.
func TransactionStatusGTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldGTE(FieldTransactionStatus, v))
}

// TransactionStatusLT applies the LT predicate on the "transaction_status" field.
func TransactionStatusLT(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLT(FieldTransactionStatus, v))
}

// TransactionStatusLTE applies the LTE predicate on the "transaction_status" field.
func TransactionStatusLTE(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldLTE(FieldTransactionStatus, v))
}

// TransactionStatusContains applies the Contains predicate on the "transaction_status" field.
func TransactionStatusContains(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContains(FieldTransactionStatus, v))
}

// TransactionStatusHasPrefix applies the HasPrefix predicate on the "transaction_status" field.
func TransactionStatusHasPrefix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasPrefix(FieldTransactionStatus, v))
}

// TransactionStatusHasSuffix applies the HasSuffix predicate on the "transaction_status" field.
func TransactionStatusHasSuffix(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldHasSuffix(FieldTransactionStatus, v))
}

// TransactionStatusEqualFold applies the EqualFold predicate on the "transaction_status" field.
func TransactionStatusEqualFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldEqualFold(FieldTransactionStatus, v))
}

// TransactionStatusContainsFold applies the ContainsFold predicate on the "transaction_status" field.
func TransactionStatusContainsFold(v string) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.FieldContainsFold(FieldTransactionStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WalletTransaction) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WalletTransaction) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WalletTransaction) predicate.WalletTransaction {
	return predicate.WalletTransaction(sql.NotPredicates(p))
}
