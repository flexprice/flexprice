// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/wallettransaction"
)

// WalletTransactionDelete is the builder for deleting a WalletTransaction entity.
type WalletTransactionDelete struct {
	config
	hooks    []Hook
	mutation *WalletTransactionMutation
}

// Where appends a list predicates to the WalletTransactionDelete builder.
func (wtd *WalletTransactionDelete) Where(ps ...predicate.WalletTransaction) *WalletTransactionDelete {
	wtd.mutation.Where(ps...)
	return wtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wtd *WalletTransactionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wtd.sqlExec, wtd.mutation, wtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wtd *WalletTransactionDelete) ExecX(ctx context.Context) int {
	n, err := wtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wtd *WalletTransactionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(wallettransaction.Table, sqlgraph.NewFieldSpec(wallettransaction.FieldID, field.TypeString))
	if ps := wtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wtd.mutation.done = true
	return affected, err
}

// WalletTransactionDeleteOne is the builder for deleting a single WalletTransaction entity.
type WalletTransactionDeleteOne struct {
	wtd *WalletTransactionDelete
}

// Where appends a list predicates to the WalletTransactionDelete builder.
func (wtdo *WalletTransactionDeleteOne) Where(ps ...predicate.WalletTransaction) *WalletTransactionDeleteOne {
	wtdo.wtd.mutation.Where(ps...)
	return wtdo
}

// Exec executes the deletion query.
func (wtdo *WalletTransactionDeleteOne) Exec(ctx context.Context) error {
	n, err := wtdo.wtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{wallettransaction.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wtdo *WalletTransactionDeleteOne) ExecX(ctx context.Context) {
	if err := wtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
